{"version":3,"sources":["../node_modules/.pnpm/tsup@8.5.0_postcss@8.5.6_typescript@5.3.3/node_modules/tsup/assets/cjs_shims.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/error.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/argument.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/help.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/option.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/suggestSimilar.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/lib/command.js","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/index.js","../node_modules/.pnpm/webidl-conversions@3.0.1/node_modules/webidl-conversions/lib/index.js","../node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/utils.js","../node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/lib/mappingTable.json","../node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/index.js","../node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/url-state-machine.js","../node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL-impl.js","../node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL.js","../node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/public-api.js","../node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFunction.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/blobHelpers.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/Blob.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/File.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFile.js","../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js","../node_modules/.pnpm/humanize-ms@1.2.1/node_modules/humanize-ms/index.js","../node_modules/.pnpm/agentkeepalive@4.6.0/node_modules/agentkeepalive/lib/constants.js","../node_modules/.pnpm/agentkeepalive@4.6.0/node_modules/agentkeepalive/lib/agent.js","../node_modules/.pnpm/agentkeepalive@4.6.0/node_modules/agentkeepalive/lib/https_agent.js","../node_modules/.pnpm/agentkeepalive@4.6.0/node_modules/agentkeepalive/index.js","../node_modules/.pnpm/event-target-shim@5.0.1/node_modules/event-target-shim/src/event.mjs","../node_modules/.pnpm/event-target-shim@5.0.1/node_modules/event-target-shim/src/event-target.mjs","../node_modules/.pnpm/abort-controller@3.0.0/node_modules/abort-controller/src/abort-signal.ts","../node_modules/.pnpm/abort-controller@3.0.0/node_modules/abort-controller/src/abort-controller.ts","../node_modules/.pnpm/node-domexception@1.0.0/node_modules/node-domexception/index.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isPlainObject.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/fileFromPath.js","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/utils.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/helpers/miscellaneous.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/helpers/webidl.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/simple-queue.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abstract-ops/internal-methods.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/generic-reader.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/stub/number-isfinite.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/stub/math-trunc.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/basic.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/readable-stream.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/default-reader.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/target/es2018/stub/async-iterator-prototype.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/async-iterator.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/stub/number-isnan.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abstract-ops/ecmascript.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abstract-ops/miscellaneous.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abstract-ops/queue-with-sizes.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/helpers/array-buffer-view.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/byte-stream-controller.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/reader-options.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/byob-reader.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abstract-ops/queuing-strategy.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/underlying-sink.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/writable-stream.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/abort-signal.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/writable-stream.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/globals.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/stub/dom-exception.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/pipe.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/default-controller.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/tee.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/readable-stream-like.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream/from.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/underlying-source.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/iterator-options.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/pipe-options.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/readable-writable-pair.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/readable-stream.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy-init.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/byte-length-queuing-strategy.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/count-queuing-strategy.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/validators/transformer.ts","../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/src/lib/transform-stream.ts","../node_modules/.pnpm/data-uri-to-buffer@4.0.1/node_modules/data-uri-to-buffer/src/index.ts","../node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/streams.cjs","../node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/index.js","../node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/file.js","../node_modules/.pnpm/formdata-polyfill@4.0.10/node_modules/formdata-polyfill/esm.min.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/base.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/fetch-error.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/is.js","../node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/from.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/multipart-parser.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/body.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/headers.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/is-redirect.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/response.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/get-search.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/referrer.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/request.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/abort-error.js","../node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/index.js","../node_modules/.pnpm/universalify@2.0.1/node_modules/universalify/index.js","../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js","../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js","../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js","../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/fs/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/mkdirs/utils.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/mkdirs/make-dir.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/mkdirs/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/path-exists/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/util/utimes.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/util/stat.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/copy/copy.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/copy/copy-sync.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/copy/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/remove/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/empty/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/file.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/link.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/symlink-paths.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/symlink-type.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/symlink.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/ensure/index.js","../node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/utils.js","../node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/json/jsonfile.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/output-file/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/json/output-json.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/json/output-json-sync.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/json/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/move/move.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/move/move-sync.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/move/index.js","../node_modules/.pnpm/fs-extra@11.3.1/node_modules/fs-extra/lib/index.js","../src/index.ts","../src/cli.ts","../node_modules/.pnpm/commander@12.1.0/node_modules/commander/esm.mjs","../node_modules/.pnpm/chalk@5.5.0/node_modules/chalk/source/index.js","../node_modules/.pnpm/chalk@5.5.0/node_modules/chalk/source/vendor/ansi-styles/index.js","../node_modules/.pnpm/chalk@5.5.0/node_modules/chalk/source/vendor/supports-color/index.js","../node_modules/.pnpm/chalk@5.5.0/node_modules/chalk/source/utilities.js","../src/maria-ai.ts","../src/providers/manager.ts","../src/providers/openai-provider.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/index.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/internal/qs/formats.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/internal/qs/utils.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/internal/qs/stringify.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/version.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/_shims/index.mjs","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/_shims/registry.ts","../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/index.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/FormData.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isBlob.js","../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/deprecateConstructorEntries.js","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/_shims/node-runtime.ts","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/index.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataEncoder.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/createBoundary.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isPlainObject.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/normalizeValue.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/escapeName.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFileLike.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFunction.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFormData.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FileLike.js","../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataLike.js","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/_shims/MultipartBody.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/error.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/internal/decoders/line.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/internal/stream-utils.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/streaming.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/uploads.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/core.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/pagination.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/index.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/chat/index.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/chat/chat.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resource.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/chat/completions/completions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/chat/completions/messages.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/audio/audio.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/audio/speech.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/audio/transcriptions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/audio/translations.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/batches.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/beta.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/assistants.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/EventStream.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/AssistantStream.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/chat/chat.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/chat/completions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/RunnableFunction.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/chatCompletionUtils.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/parser.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/ChatCompletionRunner.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/_vendor/partial-json-parser/parser.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/ChatCompletionStream.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/ChatCompletionStreamingRunner.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/realtime/realtime.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/realtime/sessions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/realtime/transcription-sessions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/threads/threads.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/threads/messages.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/threads/runs/runs.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/beta/threads/runs/steps.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/completions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/containers/containers.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/containers/files/files.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/containers/files/content.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/embeddings.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/evals/evals.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/evals/runs/runs.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/evals/runs/output-items.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/files.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/fine-tuning.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/methods.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/alpha/alpha.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/alpha/graders.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/checkpoints/checkpoints.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/checkpoints/permissions.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/jobs/jobs.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/fine-tuning/jobs/checkpoints.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/graders/graders.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/graders/grader-models.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/images.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/models.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/moderations.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/responses/responses.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/ResponsesParser.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/responses/input-items.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/responses/ResponseStream.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/uploads/uploads.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/uploads/parts.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/vector-stores/vector-stores.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/vector-stores/file-batches.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/lib/Util.ts","../node_modules/.pnpm/openai@4.104.0_ws@8.18.3_zod@3.25.76/node_modules/openai/src/resources/vector-stores/files.ts","../src/providers/ai-provider.ts","../src/providers/anthropic-provider.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/index.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/version.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/_shims/index.mjs","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/_shims/registry.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/_shims/node-runtime.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/_shims/MultipartBody.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/error.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/streaming.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/uploads.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/core.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/index.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/beta/beta.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resource.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/beta/tools/tools.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/beta/tools/messages.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/completions.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/resources/messages.ts","../node_modules/.pnpm/@anthropic-ai+sdk@0.20.9/node_modules/@anthropic-ai/sdk/src/lib/MessageStream.ts","../src/providers/google-provider.ts","../src/providers/base-provider.ts","../src/providers/groq-provider.ts","../src/providers/grok-provider.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/index.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/version.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/_shims/index.mjs","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/_shims/registry.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/_shims/node-runtime.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/_shims/MultipartBody.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/error.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/lib/streaming.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/uploads.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/core.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/index.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/chat/chat.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resource.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/chat/completions.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/models.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/audio/audio.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/audio/transcriptions.ts","../node_modules/.pnpm/groq-sdk@0.3.3/node_modules/groq-sdk/src/resources/audio/translations.ts","../src/providers/lmstudio-provider.ts","../src/providers/ollama-provider.ts","../src/providers/vllm-provider.ts","../src/services/intelligent-router.ts","../src/config/models.ts","../src/services/health-monitor.ts","../src/config/config-manager.ts","../src/services/interactive-session.ts","../src/config/loader.ts","../src/utils/ui.ts"],"names":["CommanderError","InvalidArgumentError","Argument","Help","cmd","a","b","str","i","Option","d","j","EventEmitter","fs","process","Command","m","v","option","s","path","x","V","c","S","n","U","e","l","at","R","res","URL","t","r","o","u","_","g","w","T","q","C","E","P","W","k","O","B","L","z","A","F","f","h","p","y","ReadableStream","clone","Blob","kind","_Blob","__classPrivateFieldSet","__classPrivateFieldGet","File","debug","deprecate","inspect","proto","types","AbortSignal","EventTarget","defineEventAttribute","AbortController","isPlainObject","getType","isPlainObject_default","fileFromPath","statSync","basename","DOMException","createReadStream","noop","_a","ReadableStreamDefaultReader","queueMicrotask","ReadableStreamBYOBRequest","ReadableByteStreamController","ReadableStreamBYOBReader","init","isAbortSignal","WritableStream","streamBrandCheckException","WritableStreamDefaultWriter","WritableStreamDefaultController","defaultControllerBrandCheckException","ReadableStreamDefaultController","ByteLengthQueuingStrategy","CountQueuingStrategy","TransformStream","TransformStreamDefaultController","POOL_SIZE","it","size","FormData","FetchError","isBlob","isDomainOrSubdomain","isSameProtocol","import_node_domexception","stat","Body","ct","Z","clear","consumeBody","INTERNALS","Buffer","Stream","extractContentType","getTotalBytes","writeToStream","promisify","toFormData","PassThrough","Headers","http","Response","isIP","isRequest","Request","getNodeRequestOptions","formatUrl","AbortError","fetch","response","https","fixResponseChunkedTransferBadEnding","pump","zlib","er","st","err","err2","mt","er2","self","queue","options","cb","data","src","dest","flags","go$readdir","mode","buffer","buffers","require_utils","defaults","destStat","require_copy","emptyDir","exists","stringify","require_jsonfile","require_move","require_lib","commander","os","tty","styles","chalk","is_array","Url","whatwgUrl","abort","abortAndFinalize","_FormData_setEntry","isFunction","_FormDataEncoder_getFieldHeader","KeepAliveAgent","getMultipartRequestOptions","Readable","AbortControllerPolyfill","FsReadStream","isFileLike","parseResponse","opts","Page","retryMessage","env","modifiedArg","chunk","_AssistantStream_endRequest","_AssistantStream_handleMessage","_AssistantStream_handleRunStep","_AssistantStream_handleEvent","_AssistantStream_accumulateRunStep","_AssistantStream_accumulateMessage","_AssistantStream_accumulateContent","_AssistantStream_handleRun","inputTool","content","name","_AbstractChatCompletionRunner_getFinalMessage","_AbstractChatCompletionRunner_getFinalFunctionCall","_AbstractChatCompletionRunner_getFinalFunctionCallResult","_AbstractChatCompletionRunner_calculateTotalUsage","_AbstractChatCompletionRunner_validateParams","_AbstractChatCompletionRunner_stringifyFunctionCallResult","escape","_ChatCompletionStream_beginRequest","_ChatCompletionStream_getChoiceEventState","_ChatCompletionStream_addChunk","assertNever","_ChatCompletionStream_emitToolCallDoneEvent","_ChatCompletionStream_emitContentDoneEvents","_ChatCompletionStream_endRequest","_ChatCompletionStream_getAutoParseableResponseFormat","_ChatCompletionStream_accumulateChatCompletion","refusal","rest","index","id","Completions","Chat","Messages","Runs","Files","Checkpoints","Graders","hasAutoParseableInput","parseToolCall","output","isAutoParsableTool","_ResponseStream_beginRequest","_ResponseStream_addEvent","event","_ResponseStream_endRequest","_ResponseStream_accumulateResponse","VERSION","auto","getDefaultAgent","setShims","MultipartBody","fileFromPathWarned","defaultHttpAgent","defaultHttpsAgent","getRuntime","error_exports","APIConnectionError","APIConnectionTimeoutError","APIError","APIUserAbortError","AuthenticationError","BadRequestError","ConflictError","InternalServerError","NotFoundError","PermissionDeniedError","RateLimitError","UnprocessableEntityError","castToError","_iterSSEMessages","safeJSON","createResponseHeaders","LineDecoder","SSEDecoder","iterSSEChunks","findDoubleNewlineIndex","partition","isResponseLike","isBlobLike","toFile","getBytes","getName","isAsyncIterableIterator","propsForError","getStringFromMaybeBuffer","isMultipartBody","defaultParseResponse","APIPromise","APIClient","validatePositiveInteger","getPlatformHeaders","uuid4","applyHeadersMut","PagePromise","isAbsoluteURL","isEmptyObj","sleep","_AbstractPage_client","getPlatformProperties","normalizePlatform","normalizeArch","getBrowserInfo","_platformHeaders","startsWithSchemeRegexp","readEnv","hasOwn","APIResource","Tools","Beta","_MessageStream_getFinalMessage","_MessageStream_getFinalText","_MessageStream_beginRequest","_MessageStream_addStreamEvent","_MessageStream_endRequest","_MessageStream_accumulateMessage","AnthropicError","Anthropic","isFsReadStream","readableStreamAsyncIterable","isUploadable","multipartFormRequestOptions","createForm","addFormValue","isRunningInBrowser","Models","Transcriptions","Translations","Audio","GroqError","Groq","join","homedir","readline","program","showStatus"],"mappings":"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","file":"index.js","sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(\n          fullText,\n          helpWidth - itemIndentWidth,\n          termWidth + itemSeparatorWidth,\n        );\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.wrap(commandDescription, helpWidth, 0),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(\n        helper.argumentTerm(argument),\n        helper.argumentDescription(argument),\n      );\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(\n        helper.optionTerm(option),\n        helper.optionDescription(option),\n      );\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return formatItem(\n            helper.optionTerm(option),\n            helper.optionDescription(option),\n          );\n        });\n      if (globalOptionList.length > 0) {\n        output = output.concat([\n          'Global Options:',\n          formatList(globalOptionList),\n          '',\n        ]);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(\n        helper.subcommandTerm(cmd),\n        helper.subcommandDescription(cmd),\n      );\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents =\n      ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(\n      `\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`,\n      'g',\n    );\n    const lines = columnText.match(regex) || [];\n    return (\n      leadingStr +\n      lines\n        .map((line, i) => {\n          if (line === '\\n') return ''; // preserve empty lines\n          return (i > 0 ? indentString : '') + line.trimEnd();\n        })\n        .join('\\n')\n    );\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1]))\n    shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      return this;\n    }\n\n    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = enableOrNameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} argv\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth =\n        contextOptions && contextOptions.error\n          ? this._outputConfiguration.getErrHelpWidth()\n          : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', context),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      if (flags) {\n        this._helpOption = this._helpOption ?? undefined; // preserve existing option\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    flags = flags ?? '-h, --help';\n    description = description ?? 'display help for command';\n    this._helpOption = this.createOption(flags, description);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","\"use strict\";\n\nvar conversions = {};\nmodule.exports = conversions;\n\nfunction sign(x) {\n    return x < 0 ? -1 : 1;\n}\n\nfunction evenRound(x) {\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\n        return Math.floor(x);\n    } else {\n        return Math.round(x);\n    }\n}\n\nfunction createNumberConversion(bitLength, typeOpts) {\n    if (!typeOpts.unsigned) {\n        --bitLength;\n    }\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\n    const upperBound = Math.pow(2, bitLength) - 1;\n\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\n\n    return function(V, opts) {\n        if (!opts) opts = {};\n\n        let x = +V;\n\n        if (opts.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw new TypeError(\"Argument is not a finite number\");\n            }\n\n            x = sign(x) * Math.floor(Math.abs(x));\n            if (x < lowerBound || x > upperBound) {\n                throw new TypeError(\"Argument is not in byte range\");\n            }\n\n            return x;\n        }\n\n        if (!isNaN(x) && opts.clamp) {\n            x = evenRound(x);\n\n            if (x < lowerBound) x = lowerBound;\n            if (x > upperBound) x = upperBound;\n            return x;\n        }\n\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n\n        x = sign(x) * Math.floor(Math.abs(x));\n        x = x % moduloVal;\n\n        if (!typeOpts.unsigned && x >= moduloBound) {\n            return x - moduloVal;\n        } else if (typeOpts.unsigned) {\n            if (x < 0) {\n              x += moduloVal;\n            } else if (x === -0) { // don't return negative zero\n              return 0;\n            }\n        }\n\n        return x;\n    }\n}\n\nconversions[\"void\"] = function () {\n    return undefined;\n};\n\nconversions[\"boolean\"] = function (val) {\n    return !!val;\n};\n\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\n\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\n\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\n\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\n\nconversions[\"double\"] = function (V) {\n    const x = +V;\n\n    if (!Number.isFinite(x)) {\n        throw new TypeError(\"Argument is not a finite floating-point value\");\n    }\n\n    return x;\n};\n\nconversions[\"unrestricted double\"] = function (V) {\n    const x = +V;\n\n    if (isNaN(x)) {\n        throw new TypeError(\"Argument is NaN\");\n    }\n\n    return x;\n};\n\n// not quite valid, but good enough for JS\nconversions[\"float\"] = conversions[\"double\"];\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\n\nconversions[\"DOMString\"] = function (V, opts) {\n    if (!opts) opts = {};\n\n    if (opts.treatNullAsEmptyString && V === null) {\n        return \"\";\n    }\n\n    return String(V);\n};\n\nconversions[\"ByteString\"] = function (V, opts) {\n    const x = String(V);\n    let c = undefined;\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n        if (c > 255) {\n            throw new TypeError(\"Argument is not a valid bytestring\");\n        }\n    }\n\n    return x;\n};\n\nconversions[\"USVString\"] = function (V) {\n    const S = String(V);\n    const n = S.length;\n    const U = [];\n    for (let i = 0; i < n; ++i) {\n        const c = S.charCodeAt(i);\n        if (c < 0xD800 || c > 0xDFFF) {\n            U.push(String.fromCodePoint(c));\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else {\n            if (i === n - 1) {\n                U.push(String.fromCodePoint(0xFFFD));\n            } else {\n                const d = S.charCodeAt(i + 1);\n                if (0xDC00 <= d && d <= 0xDFFF) {\n                    const a = c & 0x3FF;\n                    const b = d & 0x3FF;\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n                    ++i;\n                } else {\n                    U.push(String.fromCodePoint(0xFFFD));\n                }\n            }\n        }\n    }\n\n    return U.join('');\n};\n\nconversions[\"Date\"] = function (V, opts) {\n    if (!(V instanceof Date)) {\n        throw new TypeError(\"Argument is not a Date object\");\n    }\n    if (isNaN(V)) {\n        return undefined;\n    }\n\n    return V;\n};\n\nconversions[\"RegExp\"] = function (V, opts) {\n    if (!(V instanceof RegExp)) {\n        V = new RegExp(V);\n    }\n\n    return V;\n};\n","\"use strict\";\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\n\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\n\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};\n\n","[[[0,44],\"disallowed_STD3_valid\"],[[45,46],\"valid\"],[[47,47],\"disallowed_STD3_valid\"],[[48,57],\"valid\"],[[58,64],\"disallowed_STD3_valid\"],[[65,65],\"mapped\",[97]],[[66,66],\"mapped\",[98]],[[67,67],\"mapped\",[99]],[[68,68],\"mapped\",[100]],[[69,69],\"mapped\",[101]],[[70,70],\"mapped\",[102]],[[71,71],\"mapped\",[103]],[[72,72],\"mapped\",[104]],[[73,73],\"mapped\",[105]],[[74,74],\"mapped\",[106]],[[75,75],\"mapped\",[107]],[[76,76],\"mapped\",[108]],[[77,77],\"mapped\",[109]],[[78,78],\"mapped\",[110]],[[79,79],\"mapped\",[111]],[[80,80],\"mapped\",[112]],[[81,81],\"mapped\",[113]],[[82,82],\"mapped\",[114]],[[83,83],\"mapped\",[115]],[[84,84],\"mapped\",[116]],[[85,85],\"mapped\",[117]],[[86,86],\"mapped\",[118]],[[87,87],\"mapped\",[119]],[[88,88],\"mapped\",[120]],[[89,89],\"mapped\",[121]],[[90,90],\"mapped\",[122]],[[91,96],\"disallowed_STD3_valid\"],[[97,122],\"valid\"],[[123,127],\"disallowed_STD3_valid\"],[[128,159],\"disallowed\"],[[160,160],\"disallowed_STD3_mapped\",[32]],[[161,167],\"valid\",[],\"NV8\"],[[168,168],\"disallowed_STD3_mapped\",[32,776]],[[169,169],\"valid\",[],\"NV8\"],[[170,170],\"mapped\",[97]],[[171,172],\"valid\",[],\"NV8\"],[[173,173],\"ignored\"],[[174,174],\"valid\",[],\"NV8\"],[[175,175],\"disallowed_STD3_mapped\",[32,772]],[[176,177],\"valid\",[],\"NV8\"],[[178,178],\"mapped\",[50]],[[179,179],\"mapped\",[51]],[[180,180],\"disallowed_STD3_mapped\",[32,769]],[[181,181],\"mapped\",[956]],[[182,182],\"valid\",[],\"NV8\"],[[183,183],\"valid\"],[[184,184],\"disallowed_STD3_mapped\",[32,807]],[[185,185],\"mapped\",[49]],[[186,186],\"mapped\",[111]],[[187,187],\"valid\",[],\"NV8\"],[[188,188],\"mapped\",[49,8260,52]],[[189,189],\"mapped\",[49,8260,50]],[[190,190],\"mapped\",[51,8260,52]],[[191,191],\"valid\",[],\"NV8\"],[[192,192],\"mapped\",[224]],[[193,193],\"mapped\",[225]],[[194,194],\"mapped\",[226]],[[195,195],\"mapped\",[227]],[[196,196],\"mapped\",[228]],[[197,197],\"mapped\",[229]],[[198,198],\"mapped\",[230]],[[199,199],\"mapped\",[231]],[[200,200],\"mapped\",[232]],[[201,201],\"mapped\",[233]],[[202,202],\"mapped\",[234]],[[203,203],\"mapped\",[235]],[[204,204],\"mapped\",[236]],[[205,205],\"mapped\",[237]],[[206,206],\"mapped\",[238]],[[207,207],\"mapped\",[239]],[[208,208],\"mapped\",[240]],[[209,209],\"mapped\",[241]],[[210,210],\"mapped\",[242]],[[211,211],\"mapped\",[243]],[[212,212],\"mapped\",[244]],[[213,213],\"mapped\",[245]],[[214,214],\"mapped\",[246]],[[215,215],\"valid\",[],\"NV8\"],[[216,216],\"mapped\",[248]],[[217,217],\"mapped\",[249]],[[218,218],\"mapped\",[250]],[[219,219],\"mapped\",[251]],[[220,220],\"mapped\",[252]],[[221,221],\"mapped\",[253]],[[222,222],\"mapped\",[254]],[[223,223],\"deviation\",[115,115]],[[224,246],\"valid\"],[[247,247],\"valid\",[],\"NV8\"],[[248,255],\"valid\"],[[256,256],\"mapped\",[257]],[[257,257],\"valid\"],[[258,258],\"mapped\",[259]],[[259,259],\"valid\"],[[260,260],\"mapped\",[261]],[[261,261],\"valid\"],[[262,262],\"mapped\",[263]],[[263,263],\"valid\"],[[264,264],\"mapped\",[265]],[[265,265],\"valid\"],[[266,266],\"mapped\",[267]],[[267,267],\"valid\"],[[268,268],\"mapped\",[269]],[[269,269],\"valid\"],[[270,270],\"mapped\",[271]],[[271,271],\"valid\"],[[272,272],\"mapped\",[273]],[[273,273],\"valid\"],[[274,274],\"mapped\",[275]],[[275,275],\"valid\"],[[276,276],\"mapped\",[277]],[[277,277],\"valid\"],[[278,278],\"mapped\",[279]],[[279,279],\"valid\"],[[280,280],\"mapped\",[281]],[[281,281],\"valid\"],[[282,282],\"mapped\",[283]],[[283,283],\"valid\"],[[284,284],\"mapped\",[285]],[[285,285],\"valid\"],[[286,286],\"mapped\",[287]],[[287,287],\"valid\"],[[288,288],\"mapped\",[289]],[[289,289],\"valid\"],[[290,290],\"mapped\",[291]],[[291,291],\"valid\"],[[292,292],\"mapped\",[293]],[[293,293],\"valid\"],[[294,294],\"mapped\",[295]],[[295,295],\"valid\"],[[296,296],\"mapped\",[297]],[[297,297],\"valid\"],[[298,298],\"mapped\",[299]],[[299,299],\"valid\"],[[300,300],\"mapped\",[301]],[[301,301],\"valid\"],[[302,302],\"mapped\",[303]],[[303,303],\"valid\"],[[304,304],\"mapped\",[105,775]],[[305,305],\"valid\"],[[306,307],\"mapped\",[105,106]],[[308,308],\"mapped\",[309]],[[309,309],\"valid\"],[[310,310],\"mapped\",[311]],[[311,312],\"valid\"],[[313,313],\"mapped\",[314]],[[314,314],\"valid\"],[[315,315],\"mapped\",[316]],[[316,316],\"valid\"],[[317,317],\"mapped\",[318]],[[318,318],\"valid\"],[[319,320],\"mapped\",[108,183]],[[321,321],\"mapped\",[322]],[[322,322],\"valid\"],[[323,323],\"mapped\",[324]],[[324,324],\"valid\"],[[325,325],\"mapped\",[326]],[[326,326],\"valid\"],[[327,327],\"mapped\",[328]],[[328,328],\"valid\"],[[329,329],\"mapped\",[700,110]],[[330,330],\"mapped\",[331]],[[331,331],\"valid\"],[[332,332],\"mapped\",[333]],[[333,333],\"valid\"],[[334,334],\"mapped\",[335]],[[335,335],\"valid\"],[[336,336],\"mapped\",[337]],[[337,337],\"valid\"],[[338,338],\"mapped\",[339]],[[339,339],\"valid\"],[[340,340],\"mapped\",[341]],[[341,341],\"valid\"],[[342,342],\"mapped\",[343]],[[343,343],\"valid\"],[[344,344],\"mapped\",[345]],[[345,345],\"valid\"],[[346,346],\"mapped\",[347]],[[347,347],\"valid\"],[[348,348],\"mapped\",[349]],[[349,349],\"valid\"],[[350,350],\"mapped\",[351]],[[351,351],\"valid\"],[[352,352],\"mapped\",[353]],[[353,353],\"valid\"],[[354,354],\"mapped\",[355]],[[355,355],\"valid\"],[[356,356],\"mapped\",[357]],[[357,357],\"valid\"],[[358,358],\"mapped\",[359]],[[359,359],\"valid\"],[[360,360],\"mapped\",[361]],[[361,361],\"valid\"],[[362,362],\"mapped\",[363]],[[363,363],\"valid\"],[[364,364],\"mapped\",[365]],[[365,365],\"valid\"],[[366,366],\"mapped\",[367]],[[367,367],\"valid\"],[[368,368],\"mapped\",[369]],[[369,369],\"valid\"],[[370,370],\"mapped\",[371]],[[371,371],\"valid\"],[[372,372],\"mapped\",[373]],[[373,373],\"valid\"],[[374,374],\"mapped\",[375]],[[375,375],\"valid\"],[[376,376],\"mapped\",[255]],[[377,377],\"mapped\",[378]],[[378,378],\"valid\"],[[379,379],\"mapped\",[380]],[[380,380],\"valid\"],[[381,381],\"mapped\",[382]],[[382,382],\"valid\"],[[383,383],\"mapped\",[115]],[[384,384],\"valid\"],[[385,385],\"mapped\",[595]],[[386,386],\"mapped\",[387]],[[387,387],\"valid\"],[[388,388],\"mapped\",[389]],[[389,389],\"valid\"],[[390,390],\"mapped\",[596]],[[391,391],\"mapped\",[392]],[[392,392],\"valid\"],[[393,393],\"mapped\",[598]],[[394,394],\"mapped\",[599]],[[395,395],\"mapped\",[396]],[[396,397],\"valid\"],[[398,398],\"mapped\",[477]],[[399,399],\"mapped\",[601]],[[400,400],\"mapped\",[603]],[[401,401],\"mapped\",[402]],[[402,402],\"valid\"],[[403,403],\"mapped\",[608]],[[404,404],\"mapped\",[611]],[[405,405],\"valid\"],[[406,406],\"mapped\",[617]],[[407,407],\"mapped\",[616]],[[408,408],\"mapped\",[409]],[[409,411],\"valid\"],[[412,412],\"mapped\",[623]],[[413,413],\"mapped\",[626]],[[414,414],\"valid\"],[[415,415],\"mapped\",[629]],[[416,416],\"mapped\",[417]],[[417,417],\"valid\"],[[418,418],\"mapped\",[419]],[[419,419],\"valid\"],[[420,420],\"mapped\",[421]],[[421,421],\"valid\"],[[422,422],\"mapped\",[640]],[[423,423],\"mapped\",[424]],[[424,424],\"valid\"],[[425,425],\"mapped\",[643]],[[426,427],\"valid\"],[[428,428],\"mapped\",[429]],[[429,429],\"valid\"],[[430,430],\"mapped\",[648]],[[431,431],\"mapped\",[432]],[[432,432],\"valid\"],[[433,433],\"mapped\",[650]],[[434,434],\"mapped\",[651]],[[435,435],\"mapped\",[436]],[[436,436],\"valid\"],[[437,437],\"mapped\",[438]],[[438,438],\"valid\"],[[439,439],\"mapped\",[658]],[[440,440],\"mapped\",[441]],[[441,443],\"valid\"],[[444,444],\"mapped\",[445]],[[445,451],\"valid\"],[[452,454],\"mapped\",[100,382]],[[455,457],\"mapped\",[108,106]],[[458,460],\"mapped\",[110,106]],[[461,461],\"mapped\",[462]],[[462,462],\"valid\"],[[463,463],\"mapped\",[464]],[[464,464],\"valid\"],[[465,465],\"mapped\",[466]],[[466,466],\"valid\"],[[467,467],\"mapped\",[468]],[[468,468],\"valid\"],[[469,469],\"mapped\",[470]],[[470,470],\"valid\"],[[471,471],\"mapped\",[472]],[[472,472],\"valid\"],[[473,473],\"mapped\",[474]],[[474,474],\"valid\"],[[475,475],\"mapped\",[476]],[[476,477],\"valid\"],[[478,478],\"mapped\",[479]],[[479,479],\"valid\"],[[480,480],\"mapped\",[481]],[[481,481],\"valid\"],[[482,482],\"mapped\",[483]],[[483,483],\"valid\"],[[484,484],\"mapped\",[485]],[[485,485],\"valid\"],[[486,486],\"mapped\",[487]],[[487,487],\"valid\"],[[488,488],\"mapped\",[489]],[[489,489],\"valid\"],[[490,490],\"mapped\",[491]],[[491,491],\"valid\"],[[492,492],\"mapped\",[493]],[[493,493],\"valid\"],[[494,494],\"mapped\",[495]],[[495,496],\"valid\"],[[497,499],\"mapped\",[100,122]],[[500,500],\"mapped\",[501]],[[501,501],\"valid\"],[[502,502],\"mapped\",[405]],[[503,503],\"mapped\",[447]],[[504,504],\"mapped\",[505]],[[505,505],\"valid\"],[[506,506],\"mapped\",[507]],[[507,507],\"valid\"],[[508,508],\"mapped\",[509]],[[509,509],\"valid\"],[[510,510],\"mapped\",[511]],[[511,511],\"valid\"],[[512,512],\"mapped\",[513]],[[513,513],\"valid\"],[[514,514],\"mapped\",[515]],[[515,515],\"valid\"],[[516,516],\"mapped\",[517]],[[517,517],\"valid\"],[[518,518],\"mapped\",[519]],[[519,519],\"valid\"],[[520,520],\"mapped\",[521]],[[521,521],\"valid\"],[[522,522],\"mapped\",[523]],[[523,523],\"valid\"],[[524,524],\"mapped\",[525]],[[525,525],\"valid\"],[[526,526],\"mapped\",[527]],[[527,527],\"valid\"],[[528,528],\"mapped\",[529]],[[529,529],\"valid\"],[[530,530],\"mapped\",[531]],[[531,531],\"valid\"],[[532,532],\"mapped\",[533]],[[533,533],\"valid\"],[[534,534],\"mapped\",[535]],[[535,535],\"valid\"],[[536,536],\"mapped\",[537]],[[537,537],\"valid\"],[[538,538],\"mapped\",[539]],[[539,539],\"valid\"],[[540,540],\"mapped\",[541]],[[541,541],\"valid\"],[[542,542],\"mapped\",[543]],[[543,543],\"valid\"],[[544,544],\"mapped\",[414]],[[545,545],\"valid\"],[[546,546],\"mapped\",[547]],[[547,547],\"valid\"],[[548,548],\"mapped\",[549]],[[549,549],\"valid\"],[[550,550],\"mapped\",[551]],[[551,551],\"valid\"],[[552,552],\"mapped\",[553]],[[553,553],\"valid\"],[[554,554],\"mapped\",[555]],[[555,555],\"valid\"],[[556,556],\"mapped\",[557]],[[557,557],\"valid\"],[[558,558],\"mapped\",[559]],[[559,559],\"valid\"],[[560,560],\"mapped\",[561]],[[561,561],\"valid\"],[[562,562],\"mapped\",[563]],[[563,563],\"valid\"],[[564,566],\"valid\"],[[567,569],\"valid\"],[[570,570],\"mapped\",[11365]],[[571,571],\"mapped\",[572]],[[572,572],\"valid\"],[[573,573],\"mapped\",[410]],[[574,574],\"mapped\",[11366]],[[575,576],\"valid\"],[[577,577],\"mapped\",[578]],[[578,578],\"valid\"],[[579,579],\"mapped\",[384]],[[580,580],\"mapped\",[649]],[[581,581],\"mapped\",[652]],[[582,582],\"mapped\",[583]],[[583,583],\"valid\"],[[584,584],\"mapped\",[585]],[[585,585],\"valid\"],[[586,586],\"mapped\",[587]],[[587,587],\"valid\"],[[588,588],\"mapped\",[589]],[[589,589],\"valid\"],[[590,590],\"mapped\",[591]],[[591,591],\"valid\"],[[592,680],\"valid\"],[[681,685],\"valid\"],[[686,687],\"valid\"],[[688,688],\"mapped\",[104]],[[689,689],\"mapped\",[614]],[[690,690],\"mapped\",[106]],[[691,691],\"mapped\",[114]],[[692,692],\"mapped\",[633]],[[693,693],\"mapped\",[635]],[[694,694],\"mapped\",[641]],[[695,695],\"mapped\",[119]],[[696,696],\"mapped\",[121]],[[697,705],\"valid\"],[[706,709],\"valid\",[],\"NV8\"],[[710,721],\"valid\"],[[722,727],\"valid\",[],\"NV8\"],[[728,728],\"disallowed_STD3_mapped\",[32,774]],[[729,729],\"disallowed_STD3_mapped\",[32,775]],[[730,730],\"disallowed_STD3_mapped\",[32,778]],[[731,731],\"disallowed_STD3_mapped\",[32,808]],[[732,732],\"disallowed_STD3_mapped\",[32,771]],[[733,733],\"disallowed_STD3_mapped\",[32,779]],[[734,734],\"valid\",[],\"NV8\"],[[735,735],\"valid\",[],\"NV8\"],[[736,736],\"mapped\",[611]],[[737,737],\"mapped\",[108]],[[738,738],\"mapped\",[115]],[[739,739],\"mapped\",[120]],[[740,740],\"mapped\",[661]],[[741,745],\"valid\",[],\"NV8\"],[[746,747],\"valid\",[],\"NV8\"],[[748,748],\"valid\"],[[749,749],\"valid\",[],\"NV8\"],[[750,750],\"valid\"],[[751,767],\"valid\",[],\"NV8\"],[[768,831],\"valid\"],[[832,832],\"mapped\",[768]],[[833,833],\"mapped\",[769]],[[834,834],\"valid\"],[[835,835],\"mapped\",[787]],[[836,836],\"mapped\",[776,769]],[[837,837],\"mapped\",[953]],[[838,846],\"valid\"],[[847,847],\"ignored\"],[[848,855],\"valid\"],[[856,860],\"valid\"],[[861,863],\"valid\"],[[864,865],\"valid\"],[[866,866],\"valid\"],[[867,879],\"valid\"],[[880,880],\"mapped\",[881]],[[881,881],\"valid\"],[[882,882],\"mapped\",[883]],[[883,883],\"valid\"],[[884,884],\"mapped\",[697]],[[885,885],\"valid\"],[[886,886],\"mapped\",[887]],[[887,887],\"valid\"],[[888,889],\"disallowed\"],[[890,890],\"disallowed_STD3_mapped\",[32,953]],[[891,893],\"valid\"],[[894,894],\"disallowed_STD3_mapped\",[59]],[[895,895],\"mapped\",[1011]],[[896,899],\"disallowed\"],[[900,900],\"disallowed_STD3_mapped\",[32,769]],[[901,901],\"disallowed_STD3_mapped\",[32,776,769]],[[902,902],\"mapped\",[940]],[[903,903],\"mapped\",[183]],[[904,904],\"mapped\",[941]],[[905,905],\"mapped\",[942]],[[906,906],\"mapped\",[943]],[[907,907],\"disallowed\"],[[908,908],\"mapped\",[972]],[[909,909],\"disallowed\"],[[910,910],\"mapped\",[973]],[[911,911],\"mapped\",[974]],[[912,912],\"valid\"],[[913,913],\"mapped\",[945]],[[914,914],\"mapped\",[946]],[[915,915],\"mapped\",[947]],[[916,916],\"mapped\",[948]],[[917,917],\"mapped\",[949]],[[918,918],\"mapped\",[950]],[[919,919],\"mapped\",[951]],[[920,920],\"mapped\",[952]],[[921,921],\"mapped\",[953]],[[922,922],\"mapped\",[954]],[[923,923],\"mapped\",[955]],[[924,924],\"mapped\",[956]],[[925,925],\"mapped\",[957]],[[926,926],\"mapped\",[958]],[[927,927],\"mapped\",[959]],[[928,928],\"mapped\",[960]],[[929,929],\"mapped\",[961]],[[930,930],\"disallowed\"],[[931,931],\"mapped\",[963]],[[932,932],\"mapped\",[964]],[[933,933],\"mapped\",[965]],[[934,934],\"mapped\",[966]],[[935,935],\"mapped\",[967]],[[936,936],\"mapped\",[968]],[[937,937],\"mapped\",[969]],[[938,938],\"mapped\",[970]],[[939,939],\"mapped\",[971]],[[940,961],\"valid\"],[[962,962],\"deviation\",[963]],[[963,974],\"valid\"],[[975,975],\"mapped\",[983]],[[976,976],\"mapped\",[946]],[[977,977],\"mapped\",[952]],[[978,978],\"mapped\",[965]],[[979,979],\"mapped\",[973]],[[980,980],\"mapped\",[971]],[[981,981],\"mapped\",[966]],[[982,982],\"mapped\",[960]],[[983,983],\"valid\"],[[984,984],\"mapped\",[985]],[[985,985],\"valid\"],[[986,986],\"mapped\",[987]],[[987,987],\"valid\"],[[988,988],\"mapped\",[989]],[[989,989],\"valid\"],[[990,990],\"mapped\",[991]],[[991,991],\"valid\"],[[992,992],\"mapped\",[993]],[[993,993],\"valid\"],[[994,994],\"mapped\",[995]],[[995,995],\"valid\"],[[996,996],\"mapped\",[997]],[[997,997],\"valid\"],[[998,998],\"mapped\",[999]],[[999,999],\"valid\"],[[1000,1000],\"mapped\",[1001]],[[1001,1001],\"valid\"],[[1002,1002],\"mapped\",[1003]],[[1003,1003],\"valid\"],[[1004,1004],\"mapped\",[1005]],[[1005,1005],\"valid\"],[[1006,1006],\"mapped\",[1007]],[[1007,1007],\"valid\"],[[1008,1008],\"mapped\",[954]],[[1009,1009],\"mapped\",[961]],[[1010,1010],\"mapped\",[963]],[[1011,1011],\"valid\"],[[1012,1012],\"mapped\",[952]],[[1013,1013],\"mapped\",[949]],[[1014,1014],\"valid\",[],\"NV8\"],[[1015,1015],\"mapped\",[1016]],[[1016,1016],\"valid\"],[[1017,1017],\"mapped\",[963]],[[1018,1018],\"mapped\",[1019]],[[1019,1019],\"valid\"],[[1020,1020],\"valid\"],[[1021,1021],\"mapped\",[891]],[[1022,1022],\"mapped\",[892]],[[1023,1023],\"mapped\",[893]],[[1024,1024],\"mapped\",[1104]],[[1025,1025],\"mapped\",[1105]],[[1026,1026],\"mapped\",[1106]],[[1027,1027],\"mapped\",[1107]],[[1028,1028],\"mapped\",[1108]],[[1029,1029],\"mapped\",[1109]],[[1030,1030],\"mapped\",[1110]],[[1031,1031],\"mapped\",[1111]],[[1032,1032],\"mapped\",[1112]],[[1033,1033],\"mapped\",[1113]],[[1034,1034],\"mapped\",[1114]],[[1035,1035],\"mapped\",[1115]],[[1036,1036],\"mapped\",[1116]],[[1037,1037],\"mapped\",[1117]],[[1038,1038],\"mapped\",[1118]],[[1039,1039],\"mapped\",[1119]],[[1040,1040],\"mapped\",[1072]],[[1041,1041],\"mapped\",[1073]],[[1042,1042],\"mapped\",[1074]],[[1043,1043],\"mapped\",[1075]],[[1044,1044],\"mapped\",[1076]],[[1045,1045],\"mapped\",[1077]],[[1046,1046],\"mapped\",[1078]],[[1047,1047],\"mapped\",[1079]],[[1048,1048],\"mapped\",[1080]],[[1049,1049],\"mapped\",[1081]],[[1050,1050],\"mapped\",[1082]],[[1051,1051],\"mapped\",[1083]],[[1052,1052],\"mapped\",[1084]],[[1053,1053],\"mapped\",[1085]],[[1054,1054],\"mapped\",[1086]],[[1055,1055],\"mapped\",[1087]],[[1056,1056],\"mapped\",[1088]],[[1057,1057],\"mapped\",[1089]],[[1058,1058],\"mapped\",[1090]],[[1059,1059],\"mapped\",[1091]],[[1060,1060],\"mapped\",[1092]],[[1061,1061],\"mapped\",[1093]],[[1062,1062],\"mapped\",[1094]],[[1063,1063],\"mapped\",[1095]],[[1064,1064],\"mapped\",[1096]],[[1065,1065],\"mapped\",[1097]],[[1066,1066],\"mapped\",[1098]],[[1067,1067],\"mapped\",[1099]],[[1068,1068],\"mapped\",[1100]],[[1069,1069],\"mapped\",[1101]],[[1070,1070],\"mapped\",[1102]],[[1071,1071],\"mapped\",[1103]],[[1072,1103],\"valid\"],[[1104,1104],\"valid\"],[[1105,1116],\"valid\"],[[1117,1117],\"valid\"],[[1118,1119],\"valid\"],[[1120,1120],\"mapped\",[1121]],[[1121,1121],\"valid\"],[[1122,1122],\"mapped\",[1123]],[[1123,1123],\"valid\"],[[1124,1124],\"mapped\",[1125]],[[1125,1125],\"valid\"],[[1126,1126],\"mapped\",[1127]],[[1127,1127],\"valid\"],[[1128,1128],\"mapped\",[1129]],[[1129,1129],\"valid\"],[[1130,1130],\"mapped\",[1131]],[[1131,1131],\"valid\"],[[1132,1132],\"mapped\",[1133]],[[1133,1133],\"valid\"],[[1134,1134],\"mapped\",[1135]],[[1135,1135],\"valid\"],[[1136,1136],\"mapped\",[1137]],[[1137,1137],\"valid\"],[[1138,1138],\"mapped\",[1139]],[[1139,1139],\"valid\"],[[1140,1140],\"mapped\",[1141]],[[1141,1141],\"valid\"],[[1142,1142],\"mapped\",[1143]],[[1143,1143],\"valid\"],[[1144,1144],\"mapped\",[1145]],[[1145,1145],\"valid\"],[[1146,1146],\"mapped\",[1147]],[[1147,1147],\"valid\"],[[1148,1148],\"mapped\",[1149]],[[1149,1149],\"valid\"],[[1150,1150],\"mapped\",[1151]],[[1151,1151],\"valid\"],[[1152,1152],\"mapped\",[1153]],[[1153,1153],\"valid\"],[[1154,1154],\"valid\",[],\"NV8\"],[[1155,1158],\"valid\"],[[1159,1159],\"valid\"],[[1160,1161],\"valid\",[],\"NV8\"],[[1162,1162],\"mapped\",[1163]],[[1163,1163],\"valid\"],[[1164,1164],\"mapped\",[1165]],[[1165,1165],\"valid\"],[[1166,1166],\"mapped\",[1167]],[[1167,1167],\"valid\"],[[1168,1168],\"mapped\",[1169]],[[1169,1169],\"valid\"],[[1170,1170],\"mapped\",[1171]],[[1171,1171],\"valid\"],[[1172,1172],\"mapped\",[1173]],[[1173,1173],\"valid\"],[[1174,1174],\"mapped\",[1175]],[[1175,1175],\"valid\"],[[1176,1176],\"mapped\",[1177]],[[1177,1177],\"valid\"],[[1178,1178],\"mapped\",[1179]],[[1179,1179],\"valid\"],[[1180,1180],\"mapped\",[1181]],[[1181,1181],\"valid\"],[[1182,1182],\"mapped\",[1183]],[[1183,1183],\"valid\"],[[1184,1184],\"mapped\",[1185]],[[1185,1185],\"valid\"],[[1186,1186],\"mapped\",[1187]],[[1187,1187],\"valid\"],[[1188,1188],\"mapped\",[1189]],[[1189,1189],\"valid\"],[[1190,1190],\"mapped\",[1191]],[[1191,1191],\"valid\"],[[1192,1192],\"mapped\",[1193]],[[1193,1193],\"valid\"],[[1194,1194],\"mapped\",[1195]],[[1195,1195],\"valid\"],[[1196,1196],\"mapped\",[1197]],[[1197,1197],\"valid\"],[[1198,1198],\"mapped\",[1199]],[[1199,1199],\"valid\"],[[1200,1200],\"mapped\",[1201]],[[1201,1201],\"valid\"],[[1202,1202],\"mapped\",[1203]],[[1203,1203],\"valid\"],[[1204,1204],\"mapped\",[1205]],[[1205,1205],\"valid\"],[[1206,1206],\"mapped\",[1207]],[[1207,1207],\"valid\"],[[1208,1208],\"mapped\",[1209]],[[1209,1209],\"valid\"],[[1210,1210],\"mapped\",[1211]],[[1211,1211],\"valid\"],[[1212,1212],\"mapped\",[1213]],[[1213,1213],\"valid\"],[[1214,1214],\"mapped\",[1215]],[[1215,1215],\"valid\"],[[1216,1216],\"disallowed\"],[[1217,1217],\"mapped\",[1218]],[[1218,1218],\"valid\"],[[1219,1219],\"mapped\",[1220]],[[1220,1220],\"valid\"],[[1221,1221],\"mapped\",[1222]],[[1222,1222],\"valid\"],[[1223,1223],\"mapped\",[1224]],[[1224,1224],\"valid\"],[[1225,1225],\"mapped\",[1226]],[[1226,1226],\"valid\"],[[1227,1227],\"mapped\",[1228]],[[1228,1228],\"valid\"],[[1229,1229],\"mapped\",[1230]],[[1230,1230],\"valid\"],[[1231,1231],\"valid\"],[[1232,1232],\"mapped\",[1233]],[[1233,1233],\"valid\"],[[1234,1234],\"mapped\",[1235]],[[1235,1235],\"valid\"],[[1236,1236],\"mapped\",[1237]],[[1237,1237],\"valid\"],[[1238,1238],\"mapped\",[1239]],[[1239,1239],\"valid\"],[[1240,1240],\"mapped\",[1241]],[[1241,1241],\"valid\"],[[1242,1242],\"mapped\",[1243]],[[1243,1243],\"valid\"],[[1244,1244],\"mapped\",[1245]],[[1245,1245],\"valid\"],[[1246,1246],\"mapped\",[1247]],[[1247,1247],\"valid\"],[[1248,1248],\"mapped\",[1249]],[[1249,1249],\"valid\"],[[1250,1250],\"mapped\",[1251]],[[1251,1251],\"valid\"],[[1252,1252],\"mapped\",[1253]],[[1253,1253],\"valid\"],[[1254,1254],\"mapped\",[1255]],[[1255,1255],\"valid\"],[[1256,1256],\"mapped\",[1257]],[[1257,1257],\"valid\"],[[1258,1258],\"mapped\",[1259]],[[1259,1259],\"valid\"],[[1260,1260],\"mapped\",[1261]],[[1261,1261],\"valid\"],[[1262,1262],\"mapped\",[1263]],[[1263,1263],\"valid\"],[[1264,1264],\"mapped\",[1265]],[[1265,1265],\"valid\"],[[1266,1266],\"mapped\",[1267]],[[1267,1267],\"valid\"],[[1268,1268],\"mapped\",[1269]],[[1269,1269],\"valid\"],[[1270,1270],\"mapped\",[1271]],[[1271,1271],\"valid\"],[[1272,1272],\"mapped\",[1273]],[[1273,1273],\"valid\"],[[1274,1274],\"mapped\",[1275]],[[1275,1275],\"valid\"],[[1276,1276],\"mapped\",[1277]],[[1277,1277],\"valid\"],[[1278,1278],\"mapped\",[1279]],[[1279,1279],\"valid\"],[[1280,1280],\"mapped\",[1281]],[[1281,1281],\"valid\"],[[1282,1282],\"mapped\",[1283]],[[1283,1283],\"valid\"],[[1284,1284],\"mapped\",[1285]],[[1285,1285],\"valid\"],[[1286,1286],\"mapped\",[1287]],[[1287,1287],\"valid\"],[[1288,1288],\"mapped\",[1289]],[[1289,1289],\"valid\"],[[1290,1290],\"mapped\",[1291]],[[1291,1291],\"valid\"],[[1292,1292],\"mapped\",[1293]],[[1293,1293],\"valid\"],[[1294,1294],\"mapped\",[1295]],[[1295,1295],\"valid\"],[[1296,1296],\"mapped\",[1297]],[[1297,1297],\"valid\"],[[1298,1298],\"mapped\",[1299]],[[1299,1299],\"valid\"],[[1300,1300],\"mapped\",[1301]],[[1301,1301],\"valid\"],[[1302,1302],\"mapped\",[1303]],[[1303,1303],\"valid\"],[[1304,1304],\"mapped\",[1305]],[[1305,1305],\"valid\"],[[1306,1306],\"mapped\",[1307]],[[1307,1307],\"valid\"],[[1308,1308],\"mapped\",[1309]],[[1309,1309],\"valid\"],[[1310,1310],\"mapped\",[1311]],[[1311,1311],\"valid\"],[[1312,1312],\"mapped\",[1313]],[[1313,1313],\"valid\"],[[1314,1314],\"mapped\",[1315]],[[1315,1315],\"valid\"],[[1316,1316],\"mapped\",[1317]],[[1317,1317],\"valid\"],[[1318,1318],\"mapped\",[1319]],[[1319,1319],\"valid\"],[[1320,1320],\"mapped\",[1321]],[[1321,1321],\"valid\"],[[1322,1322],\"mapped\",[1323]],[[1323,1323],\"valid\"],[[1324,1324],\"mapped\",[1325]],[[1325,1325],\"valid\"],[[1326,1326],\"mapped\",[1327]],[[1327,1327],\"valid\"],[[1328,1328],\"disallowed\"],[[1329,1329],\"mapped\",[1377]],[[1330,1330],\"mapped\",[1378]],[[1331,1331],\"mapped\",[1379]],[[1332,1332],\"mapped\",[1380]],[[1333,1333],\"mapped\",[1381]],[[1334,1334],\"mapped\",[1382]],[[1335,1335],\"mapped\",[1383]],[[1336,1336],\"mapped\",[1384]],[[1337,1337],\"mapped\",[1385]],[[1338,1338],\"mapped\",[1386]],[[1339,1339],\"mapped\",[1387]],[[1340,1340],\"mapped\",[1388]],[[1341,1341],\"mapped\",[1389]],[[1342,1342],\"mapped\",[1390]],[[1343,1343],\"mapped\",[1391]],[[1344,1344],\"mapped\",[1392]],[[1345,1345],\"mapped\",[1393]],[[1346,1346],\"mapped\",[1394]],[[1347,1347],\"mapped\",[1395]],[[1348,1348],\"mapped\",[1396]],[[1349,1349],\"mapped\",[1397]],[[1350,1350],\"mapped\",[1398]],[[1351,1351],\"mapped\",[1399]],[[1352,1352],\"mapped\",[1400]],[[1353,1353],\"mapped\",[1401]],[[1354,1354],\"mapped\",[1402]],[[1355,1355],\"mapped\",[1403]],[[1356,1356],\"mapped\",[1404]],[[1357,1357],\"mapped\",[1405]],[[1358,1358],\"mapped\",[1406]],[[1359,1359],\"mapped\",[1407]],[[1360,1360],\"mapped\",[1408]],[[1361,1361],\"mapped\",[1409]],[[1362,1362],\"mapped\",[1410]],[[1363,1363],\"mapped\",[1411]],[[1364,1364],\"mapped\",[1412]],[[1365,1365],\"mapped\",[1413]],[[1366,1366],\"mapped\",[1414]],[[1367,1368],\"disallowed\"],[[1369,1369],\"valid\"],[[1370,1375],\"valid\",[],\"NV8\"],[[1376,1376],\"disallowed\"],[[1377,1414],\"valid\"],[[1415,1415],\"mapped\",[1381,1410]],[[1416,1416],\"disallowed\"],[[1417,1417],\"valid\",[],\"NV8\"],[[1418,1418],\"valid\",[],\"NV8\"],[[1419,1420],\"disallowed\"],[[1421,1422],\"valid\",[],\"NV8\"],[[1423,1423],\"valid\",[],\"NV8\"],[[1424,1424],\"disallowed\"],[[1425,1441],\"valid\"],[[1442,1442],\"valid\"],[[1443,1455],\"valid\"],[[1456,1465],\"valid\"],[[1466,1466],\"valid\"],[[1467,1469],\"valid\"],[[1470,1470],\"valid\",[],\"NV8\"],[[1471,1471],\"valid\"],[[1472,1472],\"valid\",[],\"NV8\"],[[1473,1474],\"valid\"],[[1475,1475],\"valid\",[],\"NV8\"],[[1476,1476],\"valid\"],[[1477,1477],\"valid\"],[[1478,1478],\"valid\",[],\"NV8\"],[[1479,1479],\"valid\"],[[1480,1487],\"disallowed\"],[[1488,1514],\"valid\"],[[1515,1519],\"disallowed\"],[[1520,1524],\"valid\"],[[1525,1535],\"disallowed\"],[[1536,1539],\"disallowed\"],[[1540,1540],\"disallowed\"],[[1541,1541],\"disallowed\"],[[1542,1546],\"valid\",[],\"NV8\"],[[1547,1547],\"valid\",[],\"NV8\"],[[1548,1548],\"valid\",[],\"NV8\"],[[1549,1551],\"valid\",[],\"NV8\"],[[1552,1557],\"valid\"],[[1558,1562],\"valid\"],[[1563,1563],\"valid\",[],\"NV8\"],[[1564,1564],\"disallowed\"],[[1565,1565],\"disallowed\"],[[1566,1566],\"valid\",[],\"NV8\"],[[1567,1567],\"valid\",[],\"NV8\"],[[1568,1568],\"valid\"],[[1569,1594],\"valid\"],[[1595,1599],\"valid\"],[[1600,1600],\"valid\",[],\"NV8\"],[[1601,1618],\"valid\"],[[1619,1621],\"valid\"],[[1622,1624],\"valid\"],[[1625,1630],\"valid\"],[[1631,1631],\"valid\"],[[1632,1641],\"valid\"],[[1642,1645],\"valid\",[],\"NV8\"],[[1646,1647],\"valid\"],[[1648,1652],\"valid\"],[[1653,1653],\"mapped\",[1575,1652]],[[1654,1654],\"mapped\",[1608,1652]],[[1655,1655],\"mapped\",[1735,1652]],[[1656,1656],\"mapped\",[1610,1652]],[[1657,1719],\"valid\"],[[1720,1721],\"valid\"],[[1722,1726],\"valid\"],[[1727,1727],\"valid\"],[[1728,1742],\"valid\"],[[1743,1743],\"valid\"],[[1744,1747],\"valid\"],[[1748,1748],\"valid\",[],\"NV8\"],[[1749,1756],\"valid\"],[[1757,1757],\"disallowed\"],[[1758,1758],\"valid\",[],\"NV8\"],[[1759,1768],\"valid\"],[[1769,1769],\"valid\",[],\"NV8\"],[[1770,1773],\"valid\"],[[1774,1775],\"valid\"],[[1776,1785],\"valid\"],[[1786,1790],\"valid\"],[[1791,1791],\"valid\"],[[1792,1805],\"valid\",[],\"NV8\"],[[1806,1806],\"disallowed\"],[[1807,1807],\"disallowed\"],[[1808,1836],\"valid\"],[[1837,1839],\"valid\"],[[1840,1866],\"valid\"],[[1867,1868],\"disallowed\"],[[1869,1871],\"valid\"],[[1872,1901],\"valid\"],[[1902,1919],\"valid\"],[[1920,1968],\"valid\"],[[1969,1969],\"valid\"],[[1970,1983],\"disallowed\"],[[1984,2037],\"valid\"],[[2038,2042],\"valid\",[],\"NV8\"],[[2043,2047],\"disallowed\"],[[2048,2093],\"valid\"],[[2094,2095],\"disallowed\"],[[2096,2110],\"valid\",[],\"NV8\"],[[2111,2111],\"disallowed\"],[[2112,2139],\"valid\"],[[2140,2141],\"disallowed\"],[[2142,2142],\"valid\",[],\"NV8\"],[[2143,2207],\"disallowed\"],[[2208,2208],\"valid\"],[[2209,2209],\"valid\"],[[2210,2220],\"valid\"],[[2221,2226],\"valid\"],[[2227,2228],\"valid\"],[[2229,2274],\"disallowed\"],[[2275,2275],\"valid\"],[[2276,2302],\"valid\"],[[2303,2303],\"valid\"],[[2304,2304],\"valid\"],[[2305,2307],\"valid\"],[[2308,2308],\"valid\"],[[2309,2361],\"valid\"],[[2362,2363],\"valid\"],[[2364,2381],\"valid\"],[[2382,2382],\"valid\"],[[2383,2383],\"valid\"],[[2384,2388],\"valid\"],[[2389,2389],\"valid\"],[[2390,2391],\"valid\"],[[2392,2392],\"mapped\",[2325,2364]],[[2393,2393],\"mapped\",[2326,2364]],[[2394,2394],\"mapped\",[2327,2364]],[[2395,2395],\"mapped\",[2332,2364]],[[2396,2396],\"mapped\",[2337,2364]],[[2397,2397],\"mapped\",[2338,2364]],[[2398,2398],\"mapped\",[2347,2364]],[[2399,2399],\"mapped\",[2351,2364]],[[2400,2403],\"valid\"],[[2404,2405],\"valid\",[],\"NV8\"],[[2406,2415],\"valid\"],[[2416,2416],\"valid\",[],\"NV8\"],[[2417,2418],\"valid\"],[[2419,2423],\"valid\"],[[2424,2424],\"valid\"],[[2425,2426],\"valid\"],[[2427,2428],\"valid\"],[[2429,2429],\"valid\"],[[2430,2431],\"valid\"],[[2432,2432],\"valid\"],[[2433,2435],\"valid\"],[[2436,2436],\"disallowed\"],[[2437,2444],\"valid\"],[[2445,2446],\"disallowed\"],[[2447,2448],\"valid\"],[[2449,2450],\"disallowed\"],[[2451,2472],\"valid\"],[[2473,2473],\"disallowed\"],[[2474,2480],\"valid\"],[[2481,2481],\"disallowed\"],[[2482,2482],\"valid\"],[[2483,2485],\"disallowed\"],[[2486,2489],\"valid\"],[[2490,2491],\"disallowed\"],[[2492,2492],\"valid\"],[[2493,2493],\"valid\"],[[2494,2500],\"valid\"],[[2501,2502],\"disallowed\"],[[2503,2504],\"valid\"],[[2505,2506],\"disallowed\"],[[2507,2509],\"valid\"],[[2510,2510],\"valid\"],[[2511,2518],\"disallowed\"],[[2519,2519],\"valid\"],[[2520,2523],\"disallowed\"],[[2524,2524],\"mapped\",[2465,2492]],[[2525,2525],\"mapped\",[2466,2492]],[[2526,2526],\"disallowed\"],[[2527,2527],\"mapped\",[2479,2492]],[[2528,2531],\"valid\"],[[2532,2533],\"disallowed\"],[[2534,2545],\"valid\"],[[2546,2554],\"valid\",[],\"NV8\"],[[2555,2555],\"valid\",[],\"NV8\"],[[2556,2560],\"disallowed\"],[[2561,2561],\"valid\"],[[2562,2562],\"valid\"],[[2563,2563],\"valid\"],[[2564,2564],\"disallowed\"],[[2565,2570],\"valid\"],[[2571,2574],\"disallowed\"],[[2575,2576],\"valid\"],[[2577,2578],\"disallowed\"],[[2579,2600],\"valid\"],[[2601,2601],\"disallowed\"],[[2602,2608],\"valid\"],[[2609,2609],\"disallowed\"],[[2610,2610],\"valid\"],[[2611,2611],\"mapped\",[2610,2620]],[[2612,2612],\"disallowed\"],[[2613,2613],\"valid\"],[[2614,2614],\"mapped\",[2616,2620]],[[2615,2615],\"disallowed\"],[[2616,2617],\"valid\"],[[2618,2619],\"disallowed\"],[[2620,2620],\"valid\"],[[2621,2621],\"disallowed\"],[[2622,2626],\"valid\"],[[2627,2630],\"disallowed\"],[[2631,2632],\"valid\"],[[2633,2634],\"disallowed\"],[[2635,2637],\"valid\"],[[2638,2640],\"disallowed\"],[[2641,2641],\"valid\"],[[2642,2648],\"disallowed\"],[[2649,2649],\"mapped\",[2582,2620]],[[2650,2650],\"mapped\",[2583,2620]],[[2651,2651],\"mapped\",[2588,2620]],[[2652,2652],\"valid\"],[[2653,2653],\"disallowed\"],[[2654,2654],\"mapped\",[2603,2620]],[[2655,2661],\"disallowed\"],[[2662,2676],\"valid\"],[[2677,2677],\"valid\"],[[2678,2688],\"disallowed\"],[[2689,2691],\"valid\"],[[2692,2692],\"disallowed\"],[[2693,2699],\"valid\"],[[2700,2700],\"valid\"],[[2701,2701],\"valid\"],[[2702,2702],\"disallowed\"],[[2703,2705],\"valid\"],[[2706,2706],\"disallowed\"],[[2707,2728],\"valid\"],[[2729,2729],\"disallowed\"],[[2730,2736],\"valid\"],[[2737,2737],\"disallowed\"],[[2738,2739],\"valid\"],[[2740,2740],\"disallowed\"],[[2741,2745],\"valid\"],[[2746,2747],\"disallowed\"],[[2748,2757],\"valid\"],[[2758,2758],\"disallowed\"],[[2759,2761],\"valid\"],[[2762,2762],\"disallowed\"],[[2763,2765],\"valid\"],[[2766,2767],\"disallowed\"],[[2768,2768],\"valid\"],[[2769,2783],\"disallowed\"],[[2784,2784],\"valid\"],[[2785,2787],\"valid\"],[[2788,2789],\"disallowed\"],[[2790,2799],\"valid\"],[[2800,2800],\"valid\",[],\"NV8\"],[[2801,2801],\"valid\",[],\"NV8\"],[[2802,2808],\"disallowed\"],[[2809,2809],\"valid\"],[[2810,2816],\"disallowed\"],[[2817,2819],\"valid\"],[[2820,2820],\"disallowed\"],[[2821,2828],\"valid\"],[[2829,2830],\"disallowed\"],[[2831,2832],\"valid\"],[[2833,2834],\"disallowed\"],[[2835,2856],\"valid\"],[[2857,2857],\"disallowed\"],[[2858,2864],\"valid\"],[[2865,2865],\"disallowed\"],[[2866,2867],\"valid\"],[[2868,2868],\"disallowed\"],[[2869,2869],\"valid\"],[[2870,2873],\"valid\"],[[2874,2875],\"disallowed\"],[[2876,2883],\"valid\"],[[2884,2884],\"valid\"],[[2885,2886],\"disallowed\"],[[2887,2888],\"valid\"],[[2889,2890],\"disallowed\"],[[2891,2893],\"valid\"],[[2894,2901],\"disallowed\"],[[2902,2903],\"valid\"],[[2904,2907],\"disallowed\"],[[2908,2908],\"mapped\",[2849,2876]],[[2909,2909],\"mapped\",[2850,2876]],[[2910,2910],\"disallowed\"],[[2911,2913],\"valid\"],[[2914,2915],\"valid\"],[[2916,2917],\"disallowed\"],[[2918,2927],\"valid\"],[[2928,2928],\"valid\",[],\"NV8\"],[[2929,2929],\"valid\"],[[2930,2935],\"valid\",[],\"NV8\"],[[2936,2945],\"disallowed\"],[[2946,2947],\"valid\"],[[2948,2948],\"disallowed\"],[[2949,2954],\"valid\"],[[2955,2957],\"disallowed\"],[[2958,2960],\"valid\"],[[2961,2961],\"disallowed\"],[[2962,2965],\"valid\"],[[2966,2968],\"disallowed\"],[[2969,2970],\"valid\"],[[2971,2971],\"disallowed\"],[[2972,2972],\"valid\"],[[2973,2973],\"disallowed\"],[[2974,2975],\"valid\"],[[2976,2978],\"disallowed\"],[[2979,2980],\"valid\"],[[2981,2983],\"disallowed\"],[[2984,2986],\"valid\"],[[2987,2989],\"disallowed\"],[[2990,2997],\"valid\"],[[2998,2998],\"valid\"],[[2999,3001],\"valid\"],[[3002,3005],\"disallowed\"],[[3006,3010],\"valid\"],[[3011,3013],\"disallowed\"],[[3014,3016],\"valid\"],[[3017,3017],\"disallowed\"],[[3018,3021],\"valid\"],[[3022,3023],\"disallowed\"],[[3024,3024],\"valid\"],[[3025,3030],\"disallowed\"],[[3031,3031],\"valid\"],[[3032,3045],\"disallowed\"],[[3046,3046],\"valid\"],[[3047,3055],\"valid\"],[[3056,3058],\"valid\",[],\"NV8\"],[[3059,3066],\"valid\",[],\"NV8\"],[[3067,3071],\"disallowed\"],[[3072,3072],\"valid\"],[[3073,3075],\"valid\"],[[3076,3076],\"disallowed\"],[[3077,3084],\"valid\"],[[3085,3085],\"disallowed\"],[[3086,3088],\"valid\"],[[3089,3089],\"disallowed\"],[[3090,3112],\"valid\"],[[3113,3113],\"disallowed\"],[[3114,3123],\"valid\"],[[3124,3124],\"valid\"],[[3125,3129],\"valid\"],[[3130,3132],\"disallowed\"],[[3133,3133],\"valid\"],[[3134,3140],\"valid\"],[[3141,3141],\"disallowed\"],[[3142,3144],\"valid\"],[[3145,3145],\"disallowed\"],[[3146,3149],\"valid\"],[[3150,3156],\"disallowed\"],[[3157,3158],\"valid\"],[[3159,3159],\"disallowed\"],[[3160,3161],\"valid\"],[[3162,3162],\"valid\"],[[3163,3167],\"disallowed\"],[[3168,3169],\"valid\"],[[3170,3171],\"valid\"],[[3172,3173],\"disallowed\"],[[3174,3183],\"valid\"],[[3184,3191],\"disallowed\"],[[3192,3199],\"valid\",[],\"NV8\"],[[3200,3200],\"disallowed\"],[[3201,3201],\"valid\"],[[3202,3203],\"valid\"],[[3204,3204],\"disallowed\"],[[3205,3212],\"valid\"],[[3213,3213],\"disallowed\"],[[3214,3216],\"valid\"],[[3217,3217],\"disallowed\"],[[3218,3240],\"valid\"],[[3241,3241],\"disallowed\"],[[3242,3251],\"valid\"],[[3252,3252],\"disallowed\"],[[3253,3257],\"valid\"],[[3258,3259],\"disallowed\"],[[3260,3261],\"valid\"],[[3262,3268],\"valid\"],[[3269,3269],\"disallowed\"],[[3270,3272],\"valid\"],[[3273,3273],\"disallowed\"],[[3274,3277],\"valid\"],[[3278,3284],\"disallowed\"],[[3285,3286],\"valid\"],[[3287,3293],\"disallowed\"],[[3294,3294],\"valid\"],[[3295,3295],\"disallowed\"],[[3296,3297],\"valid\"],[[3298,3299],\"valid\"],[[3300,3301],\"disallowed\"],[[3302,3311],\"valid\"],[[3312,3312],\"disallowed\"],[[3313,3314],\"valid\"],[[3315,3328],\"disallowed\"],[[3329,3329],\"valid\"],[[3330,3331],\"valid\"],[[3332,3332],\"disallowed\"],[[3333,3340],\"valid\"],[[3341,3341],\"disallowed\"],[[3342,3344],\"valid\"],[[3345,3345],\"disallowed\"],[[3346,3368],\"valid\"],[[3369,3369],\"valid\"],[[3370,3385],\"valid\"],[[3386,3386],\"valid\"],[[3387,3388],\"disallowed\"],[[3389,3389],\"valid\"],[[3390,3395],\"valid\"],[[3396,3396],\"valid\"],[[3397,3397],\"disallowed\"],[[3398,3400],\"valid\"],[[3401,3401],\"disallowed\"],[[3402,3405],\"valid\"],[[3406,3406],\"valid\"],[[3407,3414],\"disallowed\"],[[3415,3415],\"valid\"],[[3416,3422],\"disallowed\"],[[3423,3423],\"valid\"],[[3424,3425],\"valid\"],[[3426,3427],\"valid\"],[[3428,3429],\"disallowed\"],[[3430,3439],\"valid\"],[[3440,3445],\"valid\",[],\"NV8\"],[[3446,3448],\"disallowed\"],[[3449,3449],\"valid\",[],\"NV8\"],[[3450,3455],\"valid\"],[[3456,3457],\"disallowed\"],[[3458,3459],\"valid\"],[[3460,3460],\"disallowed\"],[[3461,3478],\"valid\"],[[3479,3481],\"disallowed\"],[[3482,3505],\"valid\"],[[3506,3506],\"disallowed\"],[[3507,3515],\"valid\"],[[3516,3516],\"disallowed\"],[[3517,3517],\"valid\"],[[3518,3519],\"disallowed\"],[[3520,3526],\"valid\"],[[3527,3529],\"disallowed\"],[[3530,3530],\"valid\"],[[3531,3534],\"disallowed\"],[[3535,3540],\"valid\"],[[3541,3541],\"disallowed\"],[[3542,3542],\"valid\"],[[3543,3543],\"disallowed\"],[[3544,3551],\"valid\"],[[3552,3557],\"disallowed\"],[[3558,3567],\"valid\"],[[3568,3569],\"disallowed\"],[[3570,3571],\"valid\"],[[3572,3572],\"valid\",[],\"NV8\"],[[3573,3584],\"disallowed\"],[[3585,3634],\"valid\"],[[3635,3635],\"mapped\",[3661,3634]],[[3636,3642],\"valid\"],[[3643,3646],\"disallowed\"],[[3647,3647],\"valid\",[],\"NV8\"],[[3648,3662],\"valid\"],[[3663,3663],\"valid\",[],\"NV8\"],[[3664,3673],\"valid\"],[[3674,3675],\"valid\",[],\"NV8\"],[[3676,3712],\"disallowed\"],[[3713,3714],\"valid\"],[[3715,3715],\"disallowed\"],[[3716,3716],\"valid\"],[[3717,3718],\"disallowed\"],[[3719,3720],\"valid\"],[[3721,3721],\"disallowed\"],[[3722,3722],\"valid\"],[[3723,3724],\"disallowed\"],[[3725,3725],\"valid\"],[[3726,3731],\"disallowed\"],[[3732,3735],\"valid\"],[[3736,3736],\"disallowed\"],[[3737,3743],\"valid\"],[[3744,3744],\"disallowed\"],[[3745,3747],\"valid\"],[[3748,3748],\"disallowed\"],[[3749,3749],\"valid\"],[[3750,3750],\"disallowed\"],[[3751,3751],\"valid\"],[[3752,3753],\"disallowed\"],[[3754,3755],\"valid\"],[[3756,3756],\"disallowed\"],[[3757,3762],\"valid\"],[[3763,3763],\"mapped\",[3789,3762]],[[3764,3769],\"valid\"],[[3770,3770],\"disallowed\"],[[3771,3773],\"valid\"],[[3774,3775],\"disallowed\"],[[3776,3780],\"valid\"],[[3781,3781],\"disallowed\"],[[3782,3782],\"valid\"],[[3783,3783],\"disallowed\"],[[3784,3789],\"valid\"],[[3790,3791],\"disallowed\"],[[3792,3801],\"valid\"],[[3802,3803],\"disallowed\"],[[3804,3804],\"mapped\",[3755,3737]],[[3805,3805],\"mapped\",[3755,3745]],[[3806,3807],\"valid\"],[[3808,3839],\"disallowed\"],[[3840,3840],\"valid\"],[[3841,3850],\"valid\",[],\"NV8\"],[[3851,3851],\"valid\"],[[3852,3852],\"mapped\",[3851]],[[3853,3863],\"valid\",[],\"NV8\"],[[3864,3865],\"valid\"],[[3866,3871],\"valid\",[],\"NV8\"],[[3872,3881],\"valid\"],[[3882,3892],\"valid\",[],\"NV8\"],[[3893,3893],\"valid\"],[[3894,3894],\"valid\",[],\"NV8\"],[[3895,3895],\"valid\"],[[3896,3896],\"valid\",[],\"NV8\"],[[3897,3897],\"valid\"],[[3898,3901],\"valid\",[],\"NV8\"],[[3902,3906],\"valid\"],[[3907,3907],\"mapped\",[3906,4023]],[[3908,3911],\"valid\"],[[3912,3912],\"disallowed\"],[[3913,3916],\"valid\"],[[3917,3917],\"mapped\",[3916,4023]],[[3918,3921],\"valid\"],[[3922,3922],\"mapped\",[3921,4023]],[[3923,3926],\"valid\"],[[3927,3927],\"mapped\",[3926,4023]],[[3928,3931],\"valid\"],[[3932,3932],\"mapped\",[3931,4023]],[[3933,3944],\"valid\"],[[3945,3945],\"mapped\",[3904,4021]],[[3946,3946],\"valid\"],[[3947,3948],\"valid\"],[[3949,3952],\"disallowed\"],[[3953,3954],\"valid\"],[[3955,3955],\"mapped\",[3953,3954]],[[3956,3956],\"valid\"],[[3957,3957],\"mapped\",[3953,3956]],[[3958,3958],\"mapped\",[4018,3968]],[[3959,3959],\"mapped\",[4018,3953,3968]],[[3960,3960],\"mapped\",[4019,3968]],[[3961,3961],\"mapped\",[4019,3953,3968]],[[3962,3968],\"valid\"],[[3969,3969],\"mapped\",[3953,3968]],[[3970,3972],\"valid\"],[[3973,3973],\"valid\",[],\"NV8\"],[[3974,3979],\"valid\"],[[3980,3983],\"valid\"],[[3984,3986],\"valid\"],[[3987,3987],\"mapped\",[3986,4023]],[[3988,3989],\"valid\"],[[3990,3990],\"valid\"],[[3991,3991],\"valid\"],[[3992,3992],\"disallowed\"],[[3993,3996],\"valid\"],[[3997,3997],\"mapped\",[3996,4023]],[[3998,4001],\"valid\"],[[4002,4002],\"mapped\",[4001,4023]],[[4003,4006],\"valid\"],[[4007,4007],\"mapped\",[4006,4023]],[[4008,4011],\"valid\"],[[4012,4012],\"mapped\",[4011,4023]],[[4013,4013],\"valid\"],[[4014,4016],\"valid\"],[[4017,4023],\"valid\"],[[4024,4024],\"valid\"],[[4025,4025],\"mapped\",[3984,4021]],[[4026,4028],\"valid\"],[[4029,4029],\"disallowed\"],[[4030,4037],\"valid\",[],\"NV8\"],[[4038,4038],\"valid\"],[[4039,4044],\"valid\",[],\"NV8\"],[[4045,4045],\"disallowed\"],[[4046,4046],\"valid\",[],\"NV8\"],[[4047,4047],\"valid\",[],\"NV8\"],[[4048,4049],\"valid\",[],\"NV8\"],[[4050,4052],\"valid\",[],\"NV8\"],[[4053,4056],\"valid\",[],\"NV8\"],[[4057,4058],\"valid\",[],\"NV8\"],[[4059,4095],\"disallowed\"],[[4096,4129],\"valid\"],[[4130,4130],\"valid\"],[[4131,4135],\"valid\"],[[4136,4136],\"valid\"],[[4137,4138],\"valid\"],[[4139,4139],\"valid\"],[[4140,4146],\"valid\"],[[4147,4149],\"valid\"],[[4150,4153],\"valid\"],[[4154,4159],\"valid\"],[[4160,4169],\"valid\"],[[4170,4175],\"valid\",[],\"NV8\"],[[4176,4185],\"valid\"],[[4186,4249],\"valid\"],[[4250,4253],\"valid\"],[[4254,4255],\"valid\",[],\"NV8\"],[[4256,4293],\"disallowed\"],[[4294,4294],\"disallowed\"],[[4295,4295],\"mapped\",[11559]],[[4296,4300],\"disallowed\"],[[4301,4301],\"mapped\",[11565]],[[4302,4303],\"disallowed\"],[[4304,4342],\"valid\"],[[4343,4344],\"valid\"],[[4345,4346],\"valid\"],[[4347,4347],\"valid\",[],\"NV8\"],[[4348,4348],\"mapped\",[4316]],[[4349,4351],\"valid\"],[[4352,4441],\"valid\",[],\"NV8\"],[[4442,4446],\"valid\",[],\"NV8\"],[[4447,4448],\"disallowed\"],[[4449,4514],\"valid\",[],\"NV8\"],[[4515,4519],\"valid\",[],\"NV8\"],[[4520,4601],\"valid\",[],\"NV8\"],[[4602,4607],\"valid\",[],\"NV8\"],[[4608,4614],\"valid\"],[[4615,4615],\"valid\"],[[4616,4678],\"valid\"],[[4679,4679],\"valid\"],[[4680,4680],\"valid\"],[[4681,4681],\"disallowed\"],[[4682,4685],\"valid\"],[[4686,4687],\"disallowed\"],[[4688,4694],\"valid\"],[[4695,4695],\"disallowed\"],[[4696,4696],\"valid\"],[[4697,4697],\"disallowed\"],[[4698,4701],\"valid\"],[[4702,4703],\"disallowed\"],[[4704,4742],\"valid\"],[[4743,4743],\"valid\"],[[4744,4744],\"valid\"],[[4745,4745],\"disallowed\"],[[4746,4749],\"valid\"],[[4750,4751],\"disallowed\"],[[4752,4782],\"valid\"],[[4783,4783],\"valid\"],[[4784,4784],\"valid\"],[[4785,4785],\"disallowed\"],[[4786,4789],\"valid\"],[[4790,4791],\"disallowed\"],[[4792,4798],\"valid\"],[[4799,4799],\"disallowed\"],[[4800,4800],\"valid\"],[[4801,4801],\"disallowed\"],[[4802,4805],\"valid\"],[[4806,4807],\"disallowed\"],[[4808,4814],\"valid\"],[[4815,4815],\"valid\"],[[4816,4822],\"valid\"],[[4823,4823],\"disallowed\"],[[4824,4846],\"valid\"],[[4847,4847],\"valid\"],[[4848,4878],\"valid\"],[[4879,4879],\"valid\"],[[4880,4880],\"valid\"],[[4881,4881],\"disallowed\"],[[4882,4885],\"valid\"],[[4886,4887],\"disallowed\"],[[4888,4894],\"valid\"],[[4895,4895],\"valid\"],[[4896,4934],\"valid\"],[[4935,4935],\"valid\"],[[4936,4954],\"valid\"],[[4955,4956],\"disallowed\"],[[4957,4958],\"valid\"],[[4959,4959],\"valid\"],[[4960,4960],\"valid\",[],\"NV8\"],[[4961,4988],\"valid\",[],\"NV8\"],[[4989,4991],\"disallowed\"],[[4992,5007],\"valid\"],[[5008,5017],\"valid\",[],\"NV8\"],[[5018,5023],\"disallowed\"],[[5024,5108],\"valid\"],[[5109,5109],\"valid\"],[[5110,5111],\"disallowed\"],[[5112,5112],\"mapped\",[5104]],[[5113,5113],\"mapped\",[5105]],[[5114,5114],\"mapped\",[5106]],[[5115,5115],\"mapped\",[5107]],[[5116,5116],\"mapped\",[5108]],[[5117,5117],\"mapped\",[5109]],[[5118,5119],\"disallowed\"],[[5120,5120],\"valid\",[],\"NV8\"],[[5121,5740],\"valid\"],[[5741,5742],\"valid\",[],\"NV8\"],[[5743,5750],\"valid\"],[[5751,5759],\"valid\"],[[5760,5760],\"disallowed\"],[[5761,5786],\"valid\"],[[5787,5788],\"valid\",[],\"NV8\"],[[5789,5791],\"disallowed\"],[[5792,5866],\"valid\"],[[5867,5872],\"valid\",[],\"NV8\"],[[5873,5880],\"valid\"],[[5881,5887],\"disallowed\"],[[5888,5900],\"valid\"],[[5901,5901],\"disallowed\"],[[5902,5908],\"valid\"],[[5909,5919],\"disallowed\"],[[5920,5940],\"valid\"],[[5941,5942],\"valid\",[],\"NV8\"],[[5943,5951],\"disallowed\"],[[5952,5971],\"valid\"],[[5972,5983],\"disallowed\"],[[5984,5996],\"valid\"],[[5997,5997],\"disallowed\"],[[5998,6000],\"valid\"],[[6001,6001],\"disallowed\"],[[6002,6003],\"valid\"],[[6004,6015],\"disallowed\"],[[6016,6067],\"valid\"],[[6068,6069],\"disallowed\"],[[6070,6099],\"valid\"],[[6100,6102],\"valid\",[],\"NV8\"],[[6103,6103],\"valid\"],[[6104,6107],\"valid\",[],\"NV8\"],[[6108,6108],\"valid\"],[[6109,6109],\"valid\"],[[6110,6111],\"disallowed\"],[[6112,6121],\"valid\"],[[6122,6127],\"disallowed\"],[[6128,6137],\"valid\",[],\"NV8\"],[[6138,6143],\"disallowed\"],[[6144,6149],\"valid\",[],\"NV8\"],[[6150,6150],\"disallowed\"],[[6151,6154],\"valid\",[],\"NV8\"],[[6155,6157],\"ignored\"],[[6158,6158],\"disallowed\"],[[6159,6159],\"disallowed\"],[[6160,6169],\"valid\"],[[6170,6175],\"disallowed\"],[[6176,6263],\"valid\"],[[6264,6271],\"disallowed\"],[[6272,6313],\"valid\"],[[6314,6314],\"valid\"],[[6315,6319],\"disallowed\"],[[6320,6389],\"valid\"],[[6390,6399],\"disallowed\"],[[6400,6428],\"valid\"],[[6429,6430],\"valid\"],[[6431,6431],\"disallowed\"],[[6432,6443],\"valid\"],[[6444,6447],\"disallowed\"],[[6448,6459],\"valid\"],[[6460,6463],\"disallowed\"],[[6464,6464],\"valid\",[],\"NV8\"],[[6465,6467],\"disallowed\"],[[6468,6469],\"valid\",[],\"NV8\"],[[6470,6509],\"valid\"],[[6510,6511],\"disallowed\"],[[6512,6516],\"valid\"],[[6517,6527],\"disallowed\"],[[6528,6569],\"valid\"],[[6570,6571],\"valid\"],[[6572,6575],\"disallowed\"],[[6576,6601],\"valid\"],[[6602,6607],\"disallowed\"],[[6608,6617],\"valid\"],[[6618,6618],\"valid\",[],\"XV8\"],[[6619,6621],\"disallowed\"],[[6622,6623],\"valid\",[],\"NV8\"],[[6624,6655],\"valid\",[],\"NV8\"],[[6656,6683],\"valid\"],[[6684,6685],\"disallowed\"],[[6686,6687],\"valid\",[],\"NV8\"],[[6688,6750],\"valid\"],[[6751,6751],\"disallowed\"],[[6752,6780],\"valid\"],[[6781,6782],\"disallowed\"],[[6783,6793],\"valid\"],[[6794,6799],\"disallowed\"],[[6800,6809],\"valid\"],[[6810,6815],\"disallowed\"],[[6816,6822],\"valid\",[],\"NV8\"],[[6823,6823],\"valid\"],[[6824,6829],\"valid\",[],\"NV8\"],[[6830,6831],\"disallowed\"],[[6832,6845],\"valid\"],[[6846,6846],\"valid\",[],\"NV8\"],[[6847,6911],\"disallowed\"],[[6912,6987],\"valid\"],[[6988,6991],\"disallowed\"],[[6992,7001],\"valid\"],[[7002,7018],\"valid\",[],\"NV8\"],[[7019,7027],\"valid\"],[[7028,7036],\"valid\",[],\"NV8\"],[[7037,7039],\"disallowed\"],[[7040,7082],\"valid\"],[[7083,7085],\"valid\"],[[7086,7097],\"valid\"],[[7098,7103],\"valid\"],[[7104,7155],\"valid\"],[[7156,7163],\"disallowed\"],[[7164,7167],\"valid\",[],\"NV8\"],[[7168,7223],\"valid\"],[[7224,7226],\"disallowed\"],[[7227,7231],\"valid\",[],\"NV8\"],[[7232,7241],\"valid\"],[[7242,7244],\"disallowed\"],[[7245,7293],\"valid\"],[[7294,7295],\"valid\",[],\"NV8\"],[[7296,7359],\"disallowed\"],[[7360,7367],\"valid\",[],\"NV8\"],[[7368,7375],\"disallowed\"],[[7376,7378],\"valid\"],[[7379,7379],\"valid\",[],\"NV8\"],[[7380,7410],\"valid\"],[[7411,7414],\"valid\"],[[7415,7415],\"disallowed\"],[[7416,7417],\"valid\"],[[7418,7423],\"disallowed\"],[[7424,7467],\"valid\"],[[7468,7468],\"mapped\",[97]],[[7469,7469],\"mapped\",[230]],[[7470,7470],\"mapped\",[98]],[[7471,7471],\"valid\"],[[7472,7472],\"mapped\",[100]],[[7473,7473],\"mapped\",[101]],[[7474,7474],\"mapped\",[477]],[[7475,7475],\"mapped\",[103]],[[7476,7476],\"mapped\",[104]],[[7477,7477],\"mapped\",[105]],[[7478,7478],\"mapped\",[106]],[[7479,7479],\"mapped\",[107]],[[7480,7480],\"mapped\",[108]],[[7481,7481],\"mapped\",[109]],[[7482,7482],\"mapped\",[110]],[[7483,7483],\"valid\"],[[7484,7484],\"mapped\",[111]],[[7485,7485],\"mapped\",[547]],[[7486,7486],\"mapped\",[112]],[[7487,7487],\"mapped\",[114]],[[7488,7488],\"mapped\",[116]],[[7489,7489],\"mapped\",[117]],[[7490,7490],\"mapped\",[119]],[[7491,7491],\"mapped\",[97]],[[7492,7492],\"mapped\",[592]],[[7493,7493],\"mapped\",[593]],[[7494,7494],\"mapped\",[7426]],[[7495,7495],\"mapped\",[98]],[[7496,7496],\"mapped\",[100]],[[7497,7497],\"mapped\",[101]],[[7498,7498],\"mapped\",[601]],[[7499,7499],\"mapped\",[603]],[[7500,7500],\"mapped\",[604]],[[7501,7501],\"mapped\",[103]],[[7502,7502],\"valid\"],[[7503,7503],\"mapped\",[107]],[[7504,7504],\"mapped\",[109]],[[7505,7505],\"mapped\",[331]],[[7506,7506],\"mapped\",[111]],[[7507,7507],\"mapped\",[596]],[[7508,7508],\"mapped\",[7446]],[[7509,7509],\"mapped\",[7447]],[[7510,7510],\"mapped\",[112]],[[7511,7511],\"mapped\",[116]],[[7512,7512],\"mapped\",[117]],[[7513,7513],\"mapped\",[7453]],[[7514,7514],\"mapped\",[623]],[[7515,7515],\"mapped\",[118]],[[7516,7516],\"mapped\",[7461]],[[7517,7517],\"mapped\",[946]],[[7518,7518],\"mapped\",[947]],[[7519,7519],\"mapped\",[948]],[[7520,7520],\"mapped\",[966]],[[7521,7521],\"mapped\",[967]],[[7522,7522],\"mapped\",[105]],[[7523,7523],\"mapped\",[114]],[[7524,7524],\"mapped\",[117]],[[7525,7525],\"mapped\",[118]],[[7526,7526],\"mapped\",[946]],[[7527,7527],\"mapped\",[947]],[[7528,7528],\"mapped\",[961]],[[7529,7529],\"mapped\",[966]],[[7530,7530],\"mapped\",[967]],[[7531,7531],\"valid\"],[[7532,7543],\"valid\"],[[7544,7544],\"mapped\",[1085]],[[7545,7578],\"valid\"],[[7579,7579],\"mapped\",[594]],[[7580,7580],\"mapped\",[99]],[[7581,7581],\"mapped\",[597]],[[7582,7582],\"mapped\",[240]],[[7583,7583],\"mapped\",[604]],[[7584,7584],\"mapped\",[102]],[[7585,7585],\"mapped\",[607]],[[7586,7586],\"mapped\",[609]],[[7587,7587],\"mapped\",[613]],[[7588,7588],\"mapped\",[616]],[[7589,7589],\"mapped\",[617]],[[7590,7590],\"mapped\",[618]],[[7591,7591],\"mapped\",[7547]],[[7592,7592],\"mapped\",[669]],[[7593,7593],\"mapped\",[621]],[[7594,7594],\"mapped\",[7557]],[[7595,7595],\"mapped\",[671]],[[7596,7596],\"mapped\",[625]],[[7597,7597],\"mapped\",[624]],[[7598,7598],\"mapped\",[626]],[[7599,7599],\"mapped\",[627]],[[7600,7600],\"mapped\",[628]],[[7601,7601],\"mapped\",[629]],[[7602,7602],\"mapped\",[632]],[[7603,7603],\"mapped\",[642]],[[7604,7604],\"mapped\",[643]],[[7605,7605],\"mapped\",[427]],[[7606,7606],\"mapped\",[649]],[[7607,7607],\"mapped\",[650]],[[7608,7608],\"mapped\",[7452]],[[7609,7609],\"mapped\",[651]],[[7610,7610],\"mapped\",[652]],[[7611,7611],\"mapped\",[122]],[[7612,7612],\"mapped\",[656]],[[7613,7613],\"mapped\",[657]],[[7614,7614],\"mapped\",[658]],[[7615,7615],\"mapped\",[952]],[[7616,7619],\"valid\"],[[7620,7626],\"valid\"],[[7627,7654],\"valid\"],[[7655,7669],\"valid\"],[[7670,7675],\"disallowed\"],[[7676,7676],\"valid\"],[[7677,7677],\"valid\"],[[7678,7679],\"valid\"],[[7680,7680],\"mapped\",[7681]],[[7681,7681],\"valid\"],[[7682,7682],\"mapped\",[7683]],[[7683,7683],\"valid\"],[[7684,7684],\"mapped\",[7685]],[[7685,7685],\"valid\"],[[7686,7686],\"mapped\",[7687]],[[7687,7687],\"valid\"],[[7688,7688],\"mapped\",[7689]],[[7689,7689],\"valid\"],[[7690,7690],\"mapped\",[7691]],[[7691,7691],\"valid\"],[[7692,7692],\"mapped\",[7693]],[[7693,7693],\"valid\"],[[7694,7694],\"mapped\",[7695]],[[7695,7695],\"valid\"],[[7696,7696],\"mapped\",[7697]],[[7697,7697],\"valid\"],[[7698,7698],\"mapped\",[7699]],[[7699,7699],\"valid\"],[[7700,7700],\"mapped\",[7701]],[[7701,7701],\"valid\"],[[7702,7702],\"mapped\",[7703]],[[7703,7703],\"valid\"],[[7704,7704],\"mapped\",[7705]],[[7705,7705],\"valid\"],[[7706,7706],\"mapped\",[7707]],[[7707,7707],\"valid\"],[[7708,7708],\"mapped\",[7709]],[[7709,7709],\"valid\"],[[7710,7710],\"mapped\",[7711]],[[7711,7711],\"valid\"],[[7712,7712],\"mapped\",[7713]],[[7713,7713],\"valid\"],[[7714,7714],\"mapped\",[7715]],[[7715,7715],\"valid\"],[[7716,7716],\"mapped\",[7717]],[[7717,7717],\"valid\"],[[7718,7718],\"mapped\",[7719]],[[7719,7719],\"valid\"],[[7720,7720],\"mapped\",[7721]],[[7721,7721],\"valid\"],[[7722,7722],\"mapped\",[7723]],[[7723,7723],\"valid\"],[[7724,7724],\"mapped\",[7725]],[[7725,7725],\"valid\"],[[7726,7726],\"mapped\",[7727]],[[7727,7727],\"valid\"],[[7728,7728],\"mapped\",[7729]],[[7729,7729],\"valid\"],[[7730,7730],\"mapped\",[7731]],[[7731,7731],\"valid\"],[[7732,7732],\"mapped\",[7733]],[[7733,7733],\"valid\"],[[7734,7734],\"mapped\",[7735]],[[7735,7735],\"valid\"],[[7736,7736],\"mapped\",[7737]],[[7737,7737],\"valid\"],[[7738,7738],\"mapped\",[7739]],[[7739,7739],\"valid\"],[[7740,7740],\"mapped\",[7741]],[[7741,7741],\"valid\"],[[7742,7742],\"mapped\",[7743]],[[7743,7743],\"valid\"],[[7744,7744],\"mapped\",[7745]],[[7745,7745],\"valid\"],[[7746,7746],\"mapped\",[7747]],[[7747,7747],\"valid\"],[[7748,7748],\"mapped\",[7749]],[[7749,7749],\"valid\"],[[7750,7750],\"mapped\",[7751]],[[7751,7751],\"valid\"],[[7752,7752],\"mapped\",[7753]],[[7753,7753],\"valid\"],[[7754,7754],\"mapped\",[7755]],[[7755,7755],\"valid\"],[[7756,7756],\"mapped\",[7757]],[[7757,7757],\"valid\"],[[7758,7758],\"mapped\",[7759]],[[7759,7759],\"valid\"],[[7760,7760],\"mapped\",[7761]],[[7761,7761],\"valid\"],[[7762,7762],\"mapped\",[7763]],[[7763,7763],\"valid\"],[[7764,7764],\"mapped\",[7765]],[[7765,7765],\"valid\"],[[7766,7766],\"mapped\",[7767]],[[7767,7767],\"valid\"],[[7768,7768],\"mapped\",[7769]],[[7769,7769],\"valid\"],[[7770,7770],\"mapped\",[7771]],[[7771,7771],\"valid\"],[[7772,7772],\"mapped\",[7773]],[[7773,7773],\"valid\"],[[7774,7774],\"mapped\",[7775]],[[7775,7775],\"valid\"],[[7776,7776],\"mapped\",[7777]],[[7777,7777],\"valid\"],[[7778,7778],\"mapped\",[7779]],[[7779,7779],\"valid\"],[[7780,7780],\"mapped\",[7781]],[[7781,7781],\"valid\"],[[7782,7782],\"mapped\",[7783]],[[7783,7783],\"valid\"],[[7784,7784],\"mapped\",[7785]],[[7785,7785],\"valid\"],[[7786,7786],\"mapped\",[7787]],[[7787,7787],\"valid\"],[[7788,7788],\"mapped\",[7789]],[[7789,7789],\"valid\"],[[7790,7790],\"mapped\",[7791]],[[7791,7791],\"valid\"],[[7792,7792],\"mapped\",[7793]],[[7793,7793],\"valid\"],[[7794,7794],\"mapped\",[7795]],[[7795,7795],\"valid\"],[[7796,7796],\"mapped\",[7797]],[[7797,7797],\"valid\"],[[7798,7798],\"mapped\",[7799]],[[7799,7799],\"valid\"],[[7800,7800],\"mapped\",[7801]],[[7801,7801],\"valid\"],[[7802,7802],\"mapped\",[7803]],[[7803,7803],\"valid\"],[[7804,7804],\"mapped\",[7805]],[[7805,7805],\"valid\"],[[7806,7806],\"mapped\",[7807]],[[7807,7807],\"valid\"],[[7808,7808],\"mapped\",[7809]],[[7809,7809],\"valid\"],[[7810,7810],\"mapped\",[7811]],[[7811,7811],\"valid\"],[[7812,7812],\"mapped\",[7813]],[[7813,7813],\"valid\"],[[7814,7814],\"mapped\",[7815]],[[7815,7815],\"valid\"],[[7816,7816],\"mapped\",[7817]],[[7817,7817],\"valid\"],[[7818,7818],\"mapped\",[7819]],[[7819,7819],\"valid\"],[[7820,7820],\"mapped\",[7821]],[[7821,7821],\"valid\"],[[7822,7822],\"mapped\",[7823]],[[7823,7823],\"valid\"],[[7824,7824],\"mapped\",[7825]],[[7825,7825],\"valid\"],[[7826,7826],\"mapped\",[7827]],[[7827,7827],\"valid\"],[[7828,7828],\"mapped\",[7829]],[[7829,7833],\"valid\"],[[7834,7834],\"mapped\",[97,702]],[[7835,7835],\"mapped\",[7777]],[[7836,7837],\"valid\"],[[7838,7838],\"mapped\",[115,115]],[[7839,7839],\"valid\"],[[7840,7840],\"mapped\",[7841]],[[7841,7841],\"valid\"],[[7842,7842],\"mapped\",[7843]],[[7843,7843],\"valid\"],[[7844,7844],\"mapped\",[7845]],[[7845,7845],\"valid\"],[[7846,7846],\"mapped\",[7847]],[[7847,7847],\"valid\"],[[7848,7848],\"mapped\",[7849]],[[7849,7849],\"valid\"],[[7850,7850],\"mapped\",[7851]],[[7851,7851],\"valid\"],[[7852,7852],\"mapped\",[7853]],[[7853,7853],\"valid\"],[[7854,7854],\"mapped\",[7855]],[[7855,7855],\"valid\"],[[7856,7856],\"mapped\",[7857]],[[7857,7857],\"valid\"],[[7858,7858],\"mapped\",[7859]],[[7859,7859],\"valid\"],[[7860,7860],\"mapped\",[7861]],[[7861,7861],\"valid\"],[[7862,7862],\"mapped\",[7863]],[[7863,7863],\"valid\"],[[7864,7864],\"mapped\",[7865]],[[7865,7865],\"valid\"],[[7866,7866],\"mapped\",[7867]],[[7867,7867],\"valid\"],[[7868,7868],\"mapped\",[7869]],[[7869,7869],\"valid\"],[[7870,7870],\"mapped\",[7871]],[[7871,7871],\"valid\"],[[7872,7872],\"mapped\",[7873]],[[7873,7873],\"valid\"],[[7874,7874],\"mapped\",[7875]],[[7875,7875],\"valid\"],[[7876,7876],\"mapped\",[7877]],[[7877,7877],\"valid\"],[[7878,7878],\"mapped\",[7879]],[[7879,7879],\"valid\"],[[7880,7880],\"mapped\",[7881]],[[7881,7881],\"valid\"],[[7882,7882],\"mapped\",[7883]],[[7883,7883],\"valid\"],[[7884,7884],\"mapped\",[7885]],[[7885,7885],\"valid\"],[[7886,7886],\"mapped\",[7887]],[[7887,7887],\"valid\"],[[7888,7888],\"mapped\",[7889]],[[7889,7889],\"valid\"],[[7890,7890],\"mapped\",[7891]],[[7891,7891],\"valid\"],[[7892,7892],\"mapped\",[7893]],[[7893,7893],\"valid\"],[[7894,7894],\"mapped\",[7895]],[[7895,7895],\"valid\"],[[7896,7896],\"mapped\",[7897]],[[7897,7897],\"valid\"],[[7898,7898],\"mapped\",[7899]],[[7899,7899],\"valid\"],[[7900,7900],\"mapped\",[7901]],[[7901,7901],\"valid\"],[[7902,7902],\"mapped\",[7903]],[[7903,7903],\"valid\"],[[7904,7904],\"mapped\",[7905]],[[7905,7905],\"valid\"],[[7906,7906],\"mapped\",[7907]],[[7907,7907],\"valid\"],[[7908,7908],\"mapped\",[7909]],[[7909,7909],\"valid\"],[[7910,7910],\"mapped\",[7911]],[[7911,7911],\"valid\"],[[7912,7912],\"mapped\",[7913]],[[7913,7913],\"valid\"],[[7914,7914],\"mapped\",[7915]],[[7915,7915],\"valid\"],[[7916,7916],\"mapped\",[7917]],[[7917,7917],\"valid\"],[[7918,7918],\"mapped\",[7919]],[[7919,7919],\"valid\"],[[7920,7920],\"mapped\",[7921]],[[7921,7921],\"valid\"],[[7922,7922],\"mapped\",[7923]],[[7923,7923],\"valid\"],[[7924,7924],\"mapped\",[7925]],[[7925,7925],\"valid\"],[[7926,7926],\"mapped\",[7927]],[[7927,7927],\"valid\"],[[7928,7928],\"mapped\",[7929]],[[7929,7929],\"valid\"],[[7930,7930],\"mapped\",[7931]],[[7931,7931],\"valid\"],[[7932,7932],\"mapped\",[7933]],[[7933,7933],\"valid\"],[[7934,7934],\"mapped\",[7935]],[[7935,7935],\"valid\"],[[7936,7943],\"valid\"],[[7944,7944],\"mapped\",[7936]],[[7945,7945],\"mapped\",[7937]],[[7946,7946],\"mapped\",[7938]],[[7947,7947],\"mapped\",[7939]],[[7948,7948],\"mapped\",[7940]],[[7949,7949],\"mapped\",[7941]],[[7950,7950],\"mapped\",[7942]],[[7951,7951],\"mapped\",[7943]],[[7952,7957],\"valid\"],[[7958,7959],\"disallowed\"],[[7960,7960],\"mapped\",[7952]],[[7961,7961],\"mapped\",[7953]],[[7962,7962],\"mapped\",[7954]],[[7963,7963],\"mapped\",[7955]],[[7964,7964],\"mapped\",[7956]],[[7965,7965],\"mapped\",[7957]],[[7966,7967],\"disallowed\"],[[7968,7975],\"valid\"],[[7976,7976],\"mapped\",[7968]],[[7977,7977],\"mapped\",[7969]],[[7978,7978],\"mapped\",[7970]],[[7979,7979],\"mapped\",[7971]],[[7980,7980],\"mapped\",[7972]],[[7981,7981],\"mapped\",[7973]],[[7982,7982],\"mapped\",[7974]],[[7983,7983],\"mapped\",[7975]],[[7984,7991],\"valid\"],[[7992,7992],\"mapped\",[7984]],[[7993,7993],\"mapped\",[7985]],[[7994,7994],\"mapped\",[7986]],[[7995,7995],\"mapped\",[7987]],[[7996,7996],\"mapped\",[7988]],[[7997,7997],\"mapped\",[7989]],[[7998,7998],\"mapped\",[7990]],[[7999,7999],\"mapped\",[7991]],[[8000,8005],\"valid\"],[[8006,8007],\"disallowed\"],[[8008,8008],\"mapped\",[8000]],[[8009,8009],\"mapped\",[8001]],[[8010,8010],\"mapped\",[8002]],[[8011,8011],\"mapped\",[8003]],[[8012,8012],\"mapped\",[8004]],[[8013,8013],\"mapped\",[8005]],[[8014,8015],\"disallowed\"],[[8016,8023],\"valid\"],[[8024,8024],\"disallowed\"],[[8025,8025],\"mapped\",[8017]],[[8026,8026],\"disallowed\"],[[8027,8027],\"mapped\",[8019]],[[8028,8028],\"disallowed\"],[[8029,8029],\"mapped\",[8021]],[[8030,8030],\"disallowed\"],[[8031,8031],\"mapped\",[8023]],[[8032,8039],\"valid\"],[[8040,8040],\"mapped\",[8032]],[[8041,8041],\"mapped\",[8033]],[[8042,8042],\"mapped\",[8034]],[[8043,8043],\"mapped\",[8035]],[[8044,8044],\"mapped\",[8036]],[[8045,8045],\"mapped\",[8037]],[[8046,8046],\"mapped\",[8038]],[[8047,8047],\"mapped\",[8039]],[[8048,8048],\"valid\"],[[8049,8049],\"mapped\",[940]],[[8050,8050],\"valid\"],[[8051,8051],\"mapped\",[941]],[[8052,8052],\"valid\"],[[8053,8053],\"mapped\",[942]],[[8054,8054],\"valid\"],[[8055,8055],\"mapped\",[943]],[[8056,8056],\"valid\"],[[8057,8057],\"mapped\",[972]],[[8058,8058],\"valid\"],[[8059,8059],\"mapped\",[973]],[[8060,8060],\"valid\"],[[8061,8061],\"mapped\",[974]],[[8062,8063],\"disallowed\"],[[8064,8064],\"mapped\",[7936,953]],[[8065,8065],\"mapped\",[7937,953]],[[8066,8066],\"mapped\",[7938,953]],[[8067,8067],\"mapped\",[7939,953]],[[8068,8068],\"mapped\",[7940,953]],[[8069,8069],\"mapped\",[7941,953]],[[8070,8070],\"mapped\",[7942,953]],[[8071,8071],\"mapped\",[7943,953]],[[8072,8072],\"mapped\",[7936,953]],[[8073,8073],\"mapped\",[7937,953]],[[8074,8074],\"mapped\",[7938,953]],[[8075,8075],\"mapped\",[7939,953]],[[8076,8076],\"mapped\",[7940,953]],[[8077,8077],\"mapped\",[7941,953]],[[8078,8078],\"mapped\",[7942,953]],[[8079,8079],\"mapped\",[7943,953]],[[8080,8080],\"mapped\",[7968,953]],[[8081,8081],\"mapped\",[7969,953]],[[8082,8082],\"mapped\",[7970,953]],[[8083,8083],\"mapped\",[7971,953]],[[8084,8084],\"mapped\",[7972,953]],[[8085,8085],\"mapped\",[7973,953]],[[8086,8086],\"mapped\",[7974,953]],[[8087,8087],\"mapped\",[7975,953]],[[8088,8088],\"mapped\",[7968,953]],[[8089,8089],\"mapped\",[7969,953]],[[8090,8090],\"mapped\",[7970,953]],[[8091,8091],\"mapped\",[7971,953]],[[8092,8092],\"mapped\",[7972,953]],[[8093,8093],\"mapped\",[7973,953]],[[8094,8094],\"mapped\",[7974,953]],[[8095,8095],\"mapped\",[7975,953]],[[8096,8096],\"mapped\",[8032,953]],[[8097,8097],\"mapped\",[8033,953]],[[8098,8098],\"mapped\",[8034,953]],[[8099,8099],\"mapped\",[8035,953]],[[8100,8100],\"mapped\",[8036,953]],[[8101,8101],\"mapped\",[8037,953]],[[8102,8102],\"mapped\",[8038,953]],[[8103,8103],\"mapped\",[8039,953]],[[8104,8104],\"mapped\",[8032,953]],[[8105,8105],\"mapped\",[8033,953]],[[8106,8106],\"mapped\",[8034,953]],[[8107,8107],\"mapped\",[8035,953]],[[8108,8108],\"mapped\",[8036,953]],[[8109,8109],\"mapped\",[8037,953]],[[8110,8110],\"mapped\",[8038,953]],[[8111,8111],\"mapped\",[8039,953]],[[8112,8113],\"valid\"],[[8114,8114],\"mapped\",[8048,953]],[[8115,8115],\"mapped\",[945,953]],[[8116,8116],\"mapped\",[940,953]],[[8117,8117],\"disallowed\"],[[8118,8118],\"valid\"],[[8119,8119],\"mapped\",[8118,953]],[[8120,8120],\"mapped\",[8112]],[[8121,8121],\"mapped\",[8113]],[[8122,8122],\"mapped\",[8048]],[[8123,8123],\"mapped\",[940]],[[8124,8124],\"mapped\",[945,953]],[[8125,8125],\"disallowed_STD3_mapped\",[32,787]],[[8126,8126],\"mapped\",[953]],[[8127,8127],\"disallowed_STD3_mapped\",[32,787]],[[8128,8128],\"disallowed_STD3_mapped\",[32,834]],[[8129,8129],\"disallowed_STD3_mapped\",[32,776,834]],[[8130,8130],\"mapped\",[8052,953]],[[8131,8131],\"mapped\",[951,953]],[[8132,8132],\"mapped\",[942,953]],[[8133,8133],\"disallowed\"],[[8134,8134],\"valid\"],[[8135,8135],\"mapped\",[8134,953]],[[8136,8136],\"mapped\",[8050]],[[8137,8137],\"mapped\",[941]],[[8138,8138],\"mapped\",[8052]],[[8139,8139],\"mapped\",[942]],[[8140,8140],\"mapped\",[951,953]],[[8141,8141],\"disallowed_STD3_mapped\",[32,787,768]],[[8142,8142],\"disallowed_STD3_mapped\",[32,787,769]],[[8143,8143],\"disallowed_STD3_mapped\",[32,787,834]],[[8144,8146],\"valid\"],[[8147,8147],\"mapped\",[912]],[[8148,8149],\"disallowed\"],[[8150,8151],\"valid\"],[[8152,8152],\"mapped\",[8144]],[[8153,8153],\"mapped\",[8145]],[[8154,8154],\"mapped\",[8054]],[[8155,8155],\"mapped\",[943]],[[8156,8156],\"disallowed\"],[[8157,8157],\"disallowed_STD3_mapped\",[32,788,768]],[[8158,8158],\"disallowed_STD3_mapped\",[32,788,769]],[[8159,8159],\"disallowed_STD3_mapped\",[32,788,834]],[[8160,8162],\"valid\"],[[8163,8163],\"mapped\",[944]],[[8164,8167],\"valid\"],[[8168,8168],\"mapped\",[8160]],[[8169,8169],\"mapped\",[8161]],[[8170,8170],\"mapped\",[8058]],[[8171,8171],\"mapped\",[973]],[[8172,8172],\"mapped\",[8165]],[[8173,8173],\"disallowed_STD3_mapped\",[32,776,768]],[[8174,8174],\"disallowed_STD3_mapped\",[32,776,769]],[[8175,8175],\"disallowed_STD3_mapped\",[96]],[[8176,8177],\"disallowed\"],[[8178,8178],\"mapped\",[8060,953]],[[8179,8179],\"mapped\",[969,953]],[[8180,8180],\"mapped\",[974,953]],[[8181,8181],\"disallowed\"],[[8182,8182],\"valid\"],[[8183,8183],\"mapped\",[8182,953]],[[8184,8184],\"mapped\",[8056]],[[8185,8185],\"mapped\",[972]],[[8186,8186],\"mapped\",[8060]],[[8187,8187],\"mapped\",[974]],[[8188,8188],\"mapped\",[969,953]],[[8189,8189],\"disallowed_STD3_mapped\",[32,769]],[[8190,8190],\"disallowed_STD3_mapped\",[32,788]],[[8191,8191],\"disallowed\"],[[8192,8202],\"disallowed_STD3_mapped\",[32]],[[8203,8203],\"ignored\"],[[8204,8205],\"deviation\",[]],[[8206,8207],\"disallowed\"],[[8208,8208],\"valid\",[],\"NV8\"],[[8209,8209],\"mapped\",[8208]],[[8210,8214],\"valid\",[],\"NV8\"],[[8215,8215],\"disallowed_STD3_mapped\",[32,819]],[[8216,8227],\"valid\",[],\"NV8\"],[[8228,8230],\"disallowed\"],[[8231,8231],\"valid\",[],\"NV8\"],[[8232,8238],\"disallowed\"],[[8239,8239],\"disallowed_STD3_mapped\",[32]],[[8240,8242],\"valid\",[],\"NV8\"],[[8243,8243],\"mapped\",[8242,8242]],[[8244,8244],\"mapped\",[8242,8242,8242]],[[8245,8245],\"valid\",[],\"NV8\"],[[8246,8246],\"mapped\",[8245,8245]],[[8247,8247],\"mapped\",[8245,8245,8245]],[[8248,8251],\"valid\",[],\"NV8\"],[[8252,8252],\"disallowed_STD3_mapped\",[33,33]],[[8253,8253],\"valid\",[],\"NV8\"],[[8254,8254],\"disallowed_STD3_mapped\",[32,773]],[[8255,8262],\"valid\",[],\"NV8\"],[[8263,8263],\"disallowed_STD3_mapped\",[63,63]],[[8264,8264],\"disallowed_STD3_mapped\",[63,33]],[[8265,8265],\"disallowed_STD3_mapped\",[33,63]],[[8266,8269],\"valid\",[],\"NV8\"],[[8270,8274],\"valid\",[],\"NV8\"],[[8275,8276],\"valid\",[],\"NV8\"],[[8277,8278],\"valid\",[],\"NV8\"],[[8279,8279],\"mapped\",[8242,8242,8242,8242]],[[8280,8286],\"valid\",[],\"NV8\"],[[8287,8287],\"disallowed_STD3_mapped\",[32]],[[8288,8288],\"ignored\"],[[8289,8291],\"disallowed\"],[[8292,8292],\"ignored\"],[[8293,8293],\"disallowed\"],[[8294,8297],\"disallowed\"],[[8298,8303],\"disallowed\"],[[8304,8304],\"mapped\",[48]],[[8305,8305],\"mapped\",[105]],[[8306,8307],\"disallowed\"],[[8308,8308],\"mapped\",[52]],[[8309,8309],\"mapped\",[53]],[[8310,8310],\"mapped\",[54]],[[8311,8311],\"mapped\",[55]],[[8312,8312],\"mapped\",[56]],[[8313,8313],\"mapped\",[57]],[[8314,8314],\"disallowed_STD3_mapped\",[43]],[[8315,8315],\"mapped\",[8722]],[[8316,8316],\"disallowed_STD3_mapped\",[61]],[[8317,8317],\"disallowed_STD3_mapped\",[40]],[[8318,8318],\"disallowed_STD3_mapped\",[41]],[[8319,8319],\"mapped\",[110]],[[8320,8320],\"mapped\",[48]],[[8321,8321],\"mapped\",[49]],[[8322,8322],\"mapped\",[50]],[[8323,8323],\"mapped\",[51]],[[8324,8324],\"mapped\",[52]],[[8325,8325],\"mapped\",[53]],[[8326,8326],\"mapped\",[54]],[[8327,8327],\"mapped\",[55]],[[8328,8328],\"mapped\",[56]],[[8329,8329],\"mapped\",[57]],[[8330,8330],\"disallowed_STD3_mapped\",[43]],[[8331,8331],\"mapped\",[8722]],[[8332,8332],\"disallowed_STD3_mapped\",[61]],[[8333,8333],\"disallowed_STD3_mapped\",[40]],[[8334,8334],\"disallowed_STD3_mapped\",[41]],[[8335,8335],\"disallowed\"],[[8336,8336],\"mapped\",[97]],[[8337,8337],\"mapped\",[101]],[[8338,8338],\"mapped\",[111]],[[8339,8339],\"mapped\",[120]],[[8340,8340],\"mapped\",[601]],[[8341,8341],\"mapped\",[104]],[[8342,8342],\"mapped\",[107]],[[8343,8343],\"mapped\",[108]],[[8344,8344],\"mapped\",[109]],[[8345,8345],\"mapped\",[110]],[[8346,8346],\"mapped\",[112]],[[8347,8347],\"mapped\",[115]],[[8348,8348],\"mapped\",[116]],[[8349,8351],\"disallowed\"],[[8352,8359],\"valid\",[],\"NV8\"],[[8360,8360],\"mapped\",[114,115]],[[8361,8362],\"valid\",[],\"NV8\"],[[8363,8363],\"valid\",[],\"NV8\"],[[8364,8364],\"valid\",[],\"NV8\"],[[8365,8367],\"valid\",[],\"NV8\"],[[8368,8369],\"valid\",[],\"NV8\"],[[8370,8373],\"valid\",[],\"NV8\"],[[8374,8376],\"valid\",[],\"NV8\"],[[8377,8377],\"valid\",[],\"NV8\"],[[8378,8378],\"valid\",[],\"NV8\"],[[8379,8381],\"valid\",[],\"NV8\"],[[8382,8382],\"valid\",[],\"NV8\"],[[8383,8399],\"disallowed\"],[[8400,8417],\"valid\",[],\"NV8\"],[[8418,8419],\"valid\",[],\"NV8\"],[[8420,8426],\"valid\",[],\"NV8\"],[[8427,8427],\"valid\",[],\"NV8\"],[[8428,8431],\"valid\",[],\"NV8\"],[[8432,8432],\"valid\",[],\"NV8\"],[[8433,8447],\"disallowed\"],[[8448,8448],\"disallowed_STD3_mapped\",[97,47,99]],[[8449,8449],\"disallowed_STD3_mapped\",[97,47,115]],[[8450,8450],\"mapped\",[99]],[[8451,8451],\"mapped\",[176,99]],[[8452,8452],\"valid\",[],\"NV8\"],[[8453,8453],\"disallowed_STD3_mapped\",[99,47,111]],[[8454,8454],\"disallowed_STD3_mapped\",[99,47,117]],[[8455,8455],\"mapped\",[603]],[[8456,8456],\"valid\",[],\"NV8\"],[[8457,8457],\"mapped\",[176,102]],[[8458,8458],\"mapped\",[103]],[[8459,8462],\"mapped\",[104]],[[8463,8463],\"mapped\",[295]],[[8464,8465],\"mapped\",[105]],[[8466,8467],\"mapped\",[108]],[[8468,8468],\"valid\",[],\"NV8\"],[[8469,8469],\"mapped\",[110]],[[8470,8470],\"mapped\",[110,111]],[[8471,8472],\"valid\",[],\"NV8\"],[[8473,8473],\"mapped\",[112]],[[8474,8474],\"mapped\",[113]],[[8475,8477],\"mapped\",[114]],[[8478,8479],\"valid\",[],\"NV8\"],[[8480,8480],\"mapped\",[115,109]],[[8481,8481],\"mapped\",[116,101,108]],[[8482,8482],\"mapped\",[116,109]],[[8483,8483],\"valid\",[],\"NV8\"],[[8484,8484],\"mapped\",[122]],[[8485,8485],\"valid\",[],\"NV8\"],[[8486,8486],\"mapped\",[969]],[[8487,8487],\"valid\",[],\"NV8\"],[[8488,8488],\"mapped\",[122]],[[8489,8489],\"valid\",[],\"NV8\"],[[8490,8490],\"mapped\",[107]],[[8491,8491],\"mapped\",[229]],[[8492,8492],\"mapped\",[98]],[[8493,8493],\"mapped\",[99]],[[8494,8494],\"valid\",[],\"NV8\"],[[8495,8496],\"mapped\",[101]],[[8497,8497],\"mapped\",[102]],[[8498,8498],\"disallowed\"],[[8499,8499],\"mapped\",[109]],[[8500,8500],\"mapped\",[111]],[[8501,8501],\"mapped\",[1488]],[[8502,8502],\"mapped\",[1489]],[[8503,8503],\"mapped\",[1490]],[[8504,8504],\"mapped\",[1491]],[[8505,8505],\"mapped\",[105]],[[8506,8506],\"valid\",[],\"NV8\"],[[8507,8507],\"mapped\",[102,97,120]],[[8508,8508],\"mapped\",[960]],[[8509,8510],\"mapped\",[947]],[[8511,8511],\"mapped\",[960]],[[8512,8512],\"mapped\",[8721]],[[8513,8516],\"valid\",[],\"NV8\"],[[8517,8518],\"mapped\",[100]],[[8519,8519],\"mapped\",[101]],[[8520,8520],\"mapped\",[105]],[[8521,8521],\"mapped\",[106]],[[8522,8523],\"valid\",[],\"NV8\"],[[8524,8524],\"valid\",[],\"NV8\"],[[8525,8525],\"valid\",[],\"NV8\"],[[8526,8526],\"valid\"],[[8527,8527],\"valid\",[],\"NV8\"],[[8528,8528],\"mapped\",[49,8260,55]],[[8529,8529],\"mapped\",[49,8260,57]],[[8530,8530],\"mapped\",[49,8260,49,48]],[[8531,8531],\"mapped\",[49,8260,51]],[[8532,8532],\"mapped\",[50,8260,51]],[[8533,8533],\"mapped\",[49,8260,53]],[[8534,8534],\"mapped\",[50,8260,53]],[[8535,8535],\"mapped\",[51,8260,53]],[[8536,8536],\"mapped\",[52,8260,53]],[[8537,8537],\"mapped\",[49,8260,54]],[[8538,8538],\"mapped\",[53,8260,54]],[[8539,8539],\"mapped\",[49,8260,56]],[[8540,8540],\"mapped\",[51,8260,56]],[[8541,8541],\"mapped\",[53,8260,56]],[[8542,8542],\"mapped\",[55,8260,56]],[[8543,8543],\"mapped\",[49,8260]],[[8544,8544],\"mapped\",[105]],[[8545,8545],\"mapped\",[105,105]],[[8546,8546],\"mapped\",[105,105,105]],[[8547,8547],\"mapped\",[105,118]],[[8548,8548],\"mapped\",[118]],[[8549,8549],\"mapped\",[118,105]],[[8550,8550],\"mapped\",[118,105,105]],[[8551,8551],\"mapped\",[118,105,105,105]],[[8552,8552],\"mapped\",[105,120]],[[8553,8553],\"mapped\",[120]],[[8554,8554],\"mapped\",[120,105]],[[8555,8555],\"mapped\",[120,105,105]],[[8556,8556],\"mapped\",[108]],[[8557,8557],\"mapped\",[99]],[[8558,8558],\"mapped\",[100]],[[8559,8559],\"mapped\",[109]],[[8560,8560],\"mapped\",[105]],[[8561,8561],\"mapped\",[105,105]],[[8562,8562],\"mapped\",[105,105,105]],[[8563,8563],\"mapped\",[105,118]],[[8564,8564],\"mapped\",[118]],[[8565,8565],\"mapped\",[118,105]],[[8566,8566],\"mapped\",[118,105,105]],[[8567,8567],\"mapped\",[118,105,105,105]],[[8568,8568],\"mapped\",[105,120]],[[8569,8569],\"mapped\",[120]],[[8570,8570],\"mapped\",[120,105]],[[8571,8571],\"mapped\",[120,105,105]],[[8572,8572],\"mapped\",[108]],[[8573,8573],\"mapped\",[99]],[[8574,8574],\"mapped\",[100]],[[8575,8575],\"mapped\",[109]],[[8576,8578],\"valid\",[],\"NV8\"],[[8579,8579],\"disallowed\"],[[8580,8580],\"valid\"],[[8581,8584],\"valid\",[],\"NV8\"],[[8585,8585],\"mapped\",[48,8260,51]],[[8586,8587],\"valid\",[],\"NV8\"],[[8588,8591],\"disallowed\"],[[8592,8682],\"valid\",[],\"NV8\"],[[8683,8691],\"valid\",[],\"NV8\"],[[8692,8703],\"valid\",[],\"NV8\"],[[8704,8747],\"valid\",[],\"NV8\"],[[8748,8748],\"mapped\",[8747,8747]],[[8749,8749],\"mapped\",[8747,8747,8747]],[[8750,8750],\"valid\",[],\"NV8\"],[[8751,8751],\"mapped\",[8750,8750]],[[8752,8752],\"mapped\",[8750,8750,8750]],[[8753,8799],\"valid\",[],\"NV8\"],[[8800,8800],\"disallowed_STD3_valid\"],[[8801,8813],\"valid\",[],\"NV8\"],[[8814,8815],\"disallowed_STD3_valid\"],[[8816,8945],\"valid\",[],\"NV8\"],[[8946,8959],\"valid\",[],\"NV8\"],[[8960,8960],\"valid\",[],\"NV8\"],[[8961,8961],\"valid\",[],\"NV8\"],[[8962,9000],\"valid\",[],\"NV8\"],[[9001,9001],\"mapped\",[12296]],[[9002,9002],\"mapped\",[12297]],[[9003,9082],\"valid\",[],\"NV8\"],[[9083,9083],\"valid\",[],\"NV8\"],[[9084,9084],\"valid\",[],\"NV8\"],[[9085,9114],\"valid\",[],\"NV8\"],[[9115,9166],\"valid\",[],\"NV8\"],[[9167,9168],\"valid\",[],\"NV8\"],[[9169,9179],\"valid\",[],\"NV8\"],[[9180,9191],\"valid\",[],\"NV8\"],[[9192,9192],\"valid\",[],\"NV8\"],[[9193,9203],\"valid\",[],\"NV8\"],[[9204,9210],\"valid\",[],\"NV8\"],[[9211,9215],\"disallowed\"],[[9216,9252],\"valid\",[],\"NV8\"],[[9253,9254],\"valid\",[],\"NV8\"],[[9255,9279],\"disallowed\"],[[9280,9290],\"valid\",[],\"NV8\"],[[9291,9311],\"disallowed\"],[[9312,9312],\"mapped\",[49]],[[9313,9313],\"mapped\",[50]],[[9314,9314],\"mapped\",[51]],[[9315,9315],\"mapped\",[52]],[[9316,9316],\"mapped\",[53]],[[9317,9317],\"mapped\",[54]],[[9318,9318],\"mapped\",[55]],[[9319,9319],\"mapped\",[56]],[[9320,9320],\"mapped\",[57]],[[9321,9321],\"mapped\",[49,48]],[[9322,9322],\"mapped\",[49,49]],[[9323,9323],\"mapped\",[49,50]],[[9324,9324],\"mapped\",[49,51]],[[9325,9325],\"mapped\",[49,52]],[[9326,9326],\"mapped\",[49,53]],[[9327,9327],\"mapped\",[49,54]],[[9328,9328],\"mapped\",[49,55]],[[9329,9329],\"mapped\",[49,56]],[[9330,9330],\"mapped\",[49,57]],[[9331,9331],\"mapped\",[50,48]],[[9332,9332],\"disallowed_STD3_mapped\",[40,49,41]],[[9333,9333],\"disallowed_STD3_mapped\",[40,50,41]],[[9334,9334],\"disallowed_STD3_mapped\",[40,51,41]],[[9335,9335],\"disallowed_STD3_mapped\",[40,52,41]],[[9336,9336],\"disallowed_STD3_mapped\",[40,53,41]],[[9337,9337],\"disallowed_STD3_mapped\",[40,54,41]],[[9338,9338],\"disallowed_STD3_mapped\",[40,55,41]],[[9339,9339],\"disallowed_STD3_mapped\",[40,56,41]],[[9340,9340],\"disallowed_STD3_mapped\",[40,57,41]],[[9341,9341],\"disallowed_STD3_mapped\",[40,49,48,41]],[[9342,9342],\"disallowed_STD3_mapped\",[40,49,49,41]],[[9343,9343],\"disallowed_STD3_mapped\",[40,49,50,41]],[[9344,9344],\"disallowed_STD3_mapped\",[40,49,51,41]],[[9345,9345],\"disallowed_STD3_mapped\",[40,49,52,41]],[[9346,9346],\"disallowed_STD3_mapped\",[40,49,53,41]],[[9347,9347],\"disallowed_STD3_mapped\",[40,49,54,41]],[[9348,9348],\"disallowed_STD3_mapped\",[40,49,55,41]],[[9349,9349],\"disallowed_STD3_mapped\",[40,49,56,41]],[[9350,9350],\"disallowed_STD3_mapped\",[40,49,57,41]],[[9351,9351],\"disallowed_STD3_mapped\",[40,50,48,41]],[[9352,9371],\"disallowed\"],[[9372,9372],\"disallowed_STD3_mapped\",[40,97,41]],[[9373,9373],\"disallowed_STD3_mapped\",[40,98,41]],[[9374,9374],\"disallowed_STD3_mapped\",[40,99,41]],[[9375,9375],\"disallowed_STD3_mapped\",[40,100,41]],[[9376,9376],\"disallowed_STD3_mapped\",[40,101,41]],[[9377,9377],\"disallowed_STD3_mapped\",[40,102,41]],[[9378,9378],\"disallowed_STD3_mapped\",[40,103,41]],[[9379,9379],\"disallowed_STD3_mapped\",[40,104,41]],[[9380,9380],\"disallowed_STD3_mapped\",[40,105,41]],[[9381,9381],\"disallowed_STD3_mapped\",[40,106,41]],[[9382,9382],\"disallowed_STD3_mapped\",[40,107,41]],[[9383,9383],\"disallowed_STD3_mapped\",[40,108,41]],[[9384,9384],\"disallowed_STD3_mapped\",[40,109,41]],[[9385,9385],\"disallowed_STD3_mapped\",[40,110,41]],[[9386,9386],\"disallowed_STD3_mapped\",[40,111,41]],[[9387,9387],\"disallowed_STD3_mapped\",[40,112,41]],[[9388,9388],\"disallowed_STD3_mapped\",[40,113,41]],[[9389,9389],\"disallowed_STD3_mapped\",[40,114,41]],[[9390,9390],\"disallowed_STD3_mapped\",[40,115,41]],[[9391,9391],\"disallowed_STD3_mapped\",[40,116,41]],[[9392,9392],\"disallowed_STD3_mapped\",[40,117,41]],[[9393,9393],\"disallowed_STD3_mapped\",[40,118,41]],[[9394,9394],\"disallowed_STD3_mapped\",[40,119,41]],[[9395,9395],\"disallowed_STD3_mapped\",[40,120,41]],[[9396,9396],\"disallowed_STD3_mapped\",[40,121,41]],[[9397,9397],\"disallowed_STD3_mapped\",[40,122,41]],[[9398,9398],\"mapped\",[97]],[[9399,9399],\"mapped\",[98]],[[9400,9400],\"mapped\",[99]],[[9401,9401],\"mapped\",[100]],[[9402,9402],\"mapped\",[101]],[[9403,9403],\"mapped\",[102]],[[9404,9404],\"mapped\",[103]],[[9405,9405],\"mapped\",[104]],[[9406,9406],\"mapped\",[105]],[[9407,9407],\"mapped\",[106]],[[9408,9408],\"mapped\",[107]],[[9409,9409],\"mapped\",[108]],[[9410,9410],\"mapped\",[109]],[[9411,9411],\"mapped\",[110]],[[9412,9412],\"mapped\",[111]],[[9413,9413],\"mapped\",[112]],[[9414,9414],\"mapped\",[113]],[[9415,9415],\"mapped\",[114]],[[9416,9416],\"mapped\",[115]],[[9417,9417],\"mapped\",[116]],[[9418,9418],\"mapped\",[117]],[[9419,9419],\"mapped\",[118]],[[9420,9420],\"mapped\",[119]],[[9421,9421],\"mapped\",[120]],[[9422,9422],\"mapped\",[121]],[[9423,9423],\"mapped\",[122]],[[9424,9424],\"mapped\",[97]],[[9425,9425],\"mapped\",[98]],[[9426,9426],\"mapped\",[99]],[[9427,9427],\"mapped\",[100]],[[9428,9428],\"mapped\",[101]],[[9429,9429],\"mapped\",[102]],[[9430,9430],\"mapped\",[103]],[[9431,9431],\"mapped\",[104]],[[9432,9432],\"mapped\",[105]],[[9433,9433],\"mapped\",[106]],[[9434,9434],\"mapped\",[107]],[[9435,9435],\"mapped\",[108]],[[9436,9436],\"mapped\",[109]],[[9437,9437],\"mapped\",[110]],[[9438,9438],\"mapped\",[111]],[[9439,9439],\"mapped\",[112]],[[9440,9440],\"mapped\",[113]],[[9441,9441],\"mapped\",[114]],[[9442,9442],\"mapped\",[115]],[[9443,9443],\"mapped\",[116]],[[9444,9444],\"mapped\",[117]],[[9445,9445],\"mapped\",[118]],[[9446,9446],\"mapped\",[119]],[[9447,9447],\"mapped\",[120]],[[9448,9448],\"mapped\",[121]],[[9449,9449],\"mapped\",[122]],[[9450,9450],\"mapped\",[48]],[[9451,9470],\"valid\",[],\"NV8\"],[[9471,9471],\"valid\",[],\"NV8\"],[[9472,9621],\"valid\",[],\"NV8\"],[[9622,9631],\"valid\",[],\"NV8\"],[[9632,9711],\"valid\",[],\"NV8\"],[[9712,9719],\"valid\",[],\"NV8\"],[[9720,9727],\"valid\",[],\"NV8\"],[[9728,9747],\"valid\",[],\"NV8\"],[[9748,9749],\"valid\",[],\"NV8\"],[[9750,9751],\"valid\",[],\"NV8\"],[[9752,9752],\"valid\",[],\"NV8\"],[[9753,9753],\"valid\",[],\"NV8\"],[[9754,9839],\"valid\",[],\"NV8\"],[[9840,9841],\"valid\",[],\"NV8\"],[[9842,9853],\"valid\",[],\"NV8\"],[[9854,9855],\"valid\",[],\"NV8\"],[[9856,9865],\"valid\",[],\"NV8\"],[[9866,9873],\"valid\",[],\"NV8\"],[[9874,9884],\"valid\",[],\"NV8\"],[[9885,9885],\"valid\",[],\"NV8\"],[[9886,9887],\"valid\",[],\"NV8\"],[[9888,9889],\"valid\",[],\"NV8\"],[[9890,9905],\"valid\",[],\"NV8\"],[[9906,9906],\"valid\",[],\"NV8\"],[[9907,9916],\"valid\",[],\"NV8\"],[[9917,9919],\"valid\",[],\"NV8\"],[[9920,9923],\"valid\",[],\"NV8\"],[[9924,9933],\"valid\",[],\"NV8\"],[[9934,9934],\"valid\",[],\"NV8\"],[[9935,9953],\"valid\",[],\"NV8\"],[[9954,9954],\"valid\",[],\"NV8\"],[[9955,9955],\"valid\",[],\"NV8\"],[[9956,9959],\"valid\",[],\"NV8\"],[[9960,9983],\"valid\",[],\"NV8\"],[[9984,9984],\"valid\",[],\"NV8\"],[[9985,9988],\"valid\",[],\"NV8\"],[[9989,9989],\"valid\",[],\"NV8\"],[[9990,9993],\"valid\",[],\"NV8\"],[[9994,9995],\"valid\",[],\"NV8\"],[[9996,10023],\"valid\",[],\"NV8\"],[[10024,10024],\"valid\",[],\"NV8\"],[[10025,10059],\"valid\",[],\"NV8\"],[[10060,10060],\"valid\",[],\"NV8\"],[[10061,10061],\"valid\",[],\"NV8\"],[[10062,10062],\"valid\",[],\"NV8\"],[[10063,10066],\"valid\",[],\"NV8\"],[[10067,10069],\"valid\",[],\"NV8\"],[[10070,10070],\"valid\",[],\"NV8\"],[[10071,10071],\"valid\",[],\"NV8\"],[[10072,10078],\"valid\",[],\"NV8\"],[[10079,10080],\"valid\",[],\"NV8\"],[[10081,10087],\"valid\",[],\"NV8\"],[[10088,10101],\"valid\",[],\"NV8\"],[[10102,10132],\"valid\",[],\"NV8\"],[[10133,10135],\"valid\",[],\"NV8\"],[[10136,10159],\"valid\",[],\"NV8\"],[[10160,10160],\"valid\",[],\"NV8\"],[[10161,10174],\"valid\",[],\"NV8\"],[[10175,10175],\"valid\",[],\"NV8\"],[[10176,10182],\"valid\",[],\"NV8\"],[[10183,10186],\"valid\",[],\"NV8\"],[[10187,10187],\"valid\",[],\"NV8\"],[[10188,10188],\"valid\",[],\"NV8\"],[[10189,10189],\"valid\",[],\"NV8\"],[[10190,10191],\"valid\",[],\"NV8\"],[[10192,10219],\"valid\",[],\"NV8\"],[[10220,10223],\"valid\",[],\"NV8\"],[[10224,10239],\"valid\",[],\"NV8\"],[[10240,10495],\"valid\",[],\"NV8\"],[[10496,10763],\"valid\",[],\"NV8\"],[[10764,10764],\"mapped\",[8747,8747,8747,8747]],[[10765,10867],\"valid\",[],\"NV8\"],[[10868,10868],\"disallowed_STD3_mapped\",[58,58,61]],[[10869,10869],\"disallowed_STD3_mapped\",[61,61]],[[10870,10870],\"disallowed_STD3_mapped\",[61,61,61]],[[10871,10971],\"valid\",[],\"NV8\"],[[10972,10972],\"mapped\",[10973,824]],[[10973,11007],\"valid\",[],\"NV8\"],[[11008,11021],\"valid\",[],\"NV8\"],[[11022,11027],\"valid\",[],\"NV8\"],[[11028,11034],\"valid\",[],\"NV8\"],[[11035,11039],\"valid\",[],\"NV8\"],[[11040,11043],\"valid\",[],\"NV8\"],[[11044,11084],\"valid\",[],\"NV8\"],[[11085,11087],\"valid\",[],\"NV8\"],[[11088,11092],\"valid\",[],\"NV8\"],[[11093,11097],\"valid\",[],\"NV8\"],[[11098,11123],\"valid\",[],\"NV8\"],[[11124,11125],\"disallowed\"],[[11126,11157],\"valid\",[],\"NV8\"],[[11158,11159],\"disallowed\"],[[11160,11193],\"valid\",[],\"NV8\"],[[11194,11196],\"disallowed\"],[[11197,11208],\"valid\",[],\"NV8\"],[[11209,11209],\"disallowed\"],[[11210,11217],\"valid\",[],\"NV8\"],[[11218,11243],\"disallowed\"],[[11244,11247],\"valid\",[],\"NV8\"],[[11248,11263],\"disallowed\"],[[11264,11264],\"mapped\",[11312]],[[11265,11265],\"mapped\",[11313]],[[11266,11266],\"mapped\",[11314]],[[11267,11267],\"mapped\",[11315]],[[11268,11268],\"mapped\",[11316]],[[11269,11269],\"mapped\",[11317]],[[11270,11270],\"mapped\",[11318]],[[11271,11271],\"mapped\",[11319]],[[11272,11272],\"mapped\",[11320]],[[11273,11273],\"mapped\",[11321]],[[11274,11274],\"mapped\",[11322]],[[11275,11275],\"mapped\",[11323]],[[11276,11276],\"mapped\",[11324]],[[11277,11277],\"mapped\",[11325]],[[11278,11278],\"mapped\",[11326]],[[11279,11279],\"mapped\",[11327]],[[11280,11280],\"mapped\",[11328]],[[11281,11281],\"mapped\",[11329]],[[11282,11282],\"mapped\",[11330]],[[11283,11283],\"mapped\",[11331]],[[11284,11284],\"mapped\",[11332]],[[11285,11285],\"mapped\",[11333]],[[11286,11286],\"mapped\",[11334]],[[11287,11287],\"mapped\",[11335]],[[11288,11288],\"mapped\",[11336]],[[11289,11289],\"mapped\",[11337]],[[11290,11290],\"mapped\",[11338]],[[11291,11291],\"mapped\",[11339]],[[11292,11292],\"mapped\",[11340]],[[11293,11293],\"mapped\",[11341]],[[11294,11294],\"mapped\",[11342]],[[11295,11295],\"mapped\",[11343]],[[11296,11296],\"mapped\",[11344]],[[11297,11297],\"mapped\",[11345]],[[11298,11298],\"mapped\",[11346]],[[11299,11299],\"mapped\",[11347]],[[11300,11300],\"mapped\",[11348]],[[11301,11301],\"mapped\",[11349]],[[11302,11302],\"mapped\",[11350]],[[11303,11303],\"mapped\",[11351]],[[11304,11304],\"mapped\",[11352]],[[11305,11305],\"mapped\",[11353]],[[11306,11306],\"mapped\",[11354]],[[11307,11307],\"mapped\",[11355]],[[11308,11308],\"mapped\",[11356]],[[11309,11309],\"mapped\",[11357]],[[11310,11310],\"mapped\",[11358]],[[11311,11311],\"disallowed\"],[[11312,11358],\"valid\"],[[11359,11359],\"disallowed\"],[[11360,11360],\"mapped\",[11361]],[[11361,11361],\"valid\"],[[11362,11362],\"mapped\",[619]],[[11363,11363],\"mapped\",[7549]],[[11364,11364],\"mapped\",[637]],[[11365,11366],\"valid\"],[[11367,11367],\"mapped\",[11368]],[[11368,11368],\"valid\"],[[11369,11369],\"mapped\",[11370]],[[11370,11370],\"valid\"],[[11371,11371],\"mapped\",[11372]],[[11372,11372],\"valid\"],[[11373,11373],\"mapped\",[593]],[[11374,11374],\"mapped\",[625]],[[11375,11375],\"mapped\",[592]],[[11376,11376],\"mapped\",[594]],[[11377,11377],\"valid\"],[[11378,11378],\"mapped\",[11379]],[[11379,11379],\"valid\"],[[11380,11380],\"valid\"],[[11381,11381],\"mapped\",[11382]],[[11382,11383],\"valid\"],[[11384,11387],\"valid\"],[[11388,11388],\"mapped\",[106]],[[11389,11389],\"mapped\",[118]],[[11390,11390],\"mapped\",[575]],[[11391,11391],\"mapped\",[576]],[[11392,11392],\"mapped\",[11393]],[[11393,11393],\"valid\"],[[11394,11394],\"mapped\",[11395]],[[11395,11395],\"valid\"],[[11396,11396],\"mapped\",[11397]],[[11397,11397],\"valid\"],[[11398,11398],\"mapped\",[11399]],[[11399,11399],\"valid\"],[[11400,11400],\"mapped\",[11401]],[[11401,11401],\"valid\"],[[11402,11402],\"mapped\",[11403]],[[11403,11403],\"valid\"],[[11404,11404],\"mapped\",[11405]],[[11405,11405],\"valid\"],[[11406,11406],\"mapped\",[11407]],[[11407,11407],\"valid\"],[[11408,11408],\"mapped\",[11409]],[[11409,11409],\"valid\"],[[11410,11410],\"mapped\",[11411]],[[11411,11411],\"valid\"],[[11412,11412],\"mapped\",[11413]],[[11413,11413],\"valid\"],[[11414,11414],\"mapped\",[11415]],[[11415,11415],\"valid\"],[[11416,11416],\"mapped\",[11417]],[[11417,11417],\"valid\"],[[11418,11418],\"mapped\",[11419]],[[11419,11419],\"valid\"],[[11420,11420],\"mapped\",[11421]],[[11421,11421],\"valid\"],[[11422,11422],\"mapped\",[11423]],[[11423,11423],\"valid\"],[[11424,11424],\"mapped\",[11425]],[[11425,11425],\"valid\"],[[11426,11426],\"mapped\",[11427]],[[11427,11427],\"valid\"],[[11428,11428],\"mapped\",[11429]],[[11429,11429],\"valid\"],[[11430,11430],\"mapped\",[11431]],[[11431,11431],\"valid\"],[[11432,11432],\"mapped\",[11433]],[[11433,11433],\"valid\"],[[11434,11434],\"mapped\",[11435]],[[11435,11435],\"valid\"],[[11436,11436],\"mapped\",[11437]],[[11437,11437],\"valid\"],[[11438,11438],\"mapped\",[11439]],[[11439,11439],\"valid\"],[[11440,11440],\"mapped\",[11441]],[[11441,11441],\"valid\"],[[11442,11442],\"mapped\",[11443]],[[11443,11443],\"valid\"],[[11444,11444],\"mapped\",[11445]],[[11445,11445],\"valid\"],[[11446,11446],\"mapped\",[11447]],[[11447,11447],\"valid\"],[[11448,11448],\"mapped\",[11449]],[[11449,11449],\"valid\"],[[11450,11450],\"mapped\",[11451]],[[11451,11451],\"valid\"],[[11452,11452],\"mapped\",[11453]],[[11453,11453],\"valid\"],[[11454,11454],\"mapped\",[11455]],[[11455,11455],\"valid\"],[[11456,11456],\"mapped\",[11457]],[[11457,11457],\"valid\"],[[11458,11458],\"mapped\",[11459]],[[11459,11459],\"valid\"],[[11460,11460],\"mapped\",[11461]],[[11461,11461],\"valid\"],[[11462,11462],\"mapped\",[11463]],[[11463,11463],\"valid\"],[[11464,11464],\"mapped\",[11465]],[[11465,11465],\"valid\"],[[11466,11466],\"mapped\",[11467]],[[11467,11467],\"valid\"],[[11468,11468],\"mapped\",[11469]],[[11469,11469],\"valid\"],[[11470,11470],\"mapped\",[11471]],[[11471,11471],\"valid\"],[[11472,11472],\"mapped\",[11473]],[[11473,11473],\"valid\"],[[11474,11474],\"mapped\",[11475]],[[11475,11475],\"valid\"],[[11476,11476],\"mapped\",[11477]],[[11477,11477],\"valid\"],[[11478,11478],\"mapped\",[11479]],[[11479,11479],\"valid\"],[[11480,11480],\"mapped\",[11481]],[[11481,11481],\"valid\"],[[11482,11482],\"mapped\",[11483]],[[11483,11483],\"valid\"],[[11484,11484],\"mapped\",[11485]],[[11485,11485],\"valid\"],[[11486,11486],\"mapped\",[11487]],[[11487,11487],\"valid\"],[[11488,11488],\"mapped\",[11489]],[[11489,11489],\"valid\"],[[11490,11490],\"mapped\",[11491]],[[11491,11492],\"valid\"],[[11493,11498],\"valid\",[],\"NV8\"],[[11499,11499],\"mapped\",[11500]],[[11500,11500],\"valid\"],[[11501,11501],\"mapped\",[11502]],[[11502,11505],\"valid\"],[[11506,11506],\"mapped\",[11507]],[[11507,11507],\"valid\"],[[11508,11512],\"disallowed\"],[[11513,11519],\"valid\",[],\"NV8\"],[[11520,11557],\"valid\"],[[11558,11558],\"disallowed\"],[[11559,11559],\"valid\"],[[11560,11564],\"disallowed\"],[[11565,11565],\"valid\"],[[11566,11567],\"disallowed\"],[[11568,11621],\"valid\"],[[11622,11623],\"valid\"],[[11624,11630],\"disallowed\"],[[11631,11631],\"mapped\",[11617]],[[11632,11632],\"valid\",[],\"NV8\"],[[11633,11646],\"disallowed\"],[[11647,11647],\"valid\"],[[11648,11670],\"valid\"],[[11671,11679],\"disallowed\"],[[11680,11686],\"valid\"],[[11687,11687],\"disallowed\"],[[11688,11694],\"valid\"],[[11695,11695],\"disallowed\"],[[11696,11702],\"valid\"],[[11703,11703],\"disallowed\"],[[11704,11710],\"valid\"],[[11711,11711],\"disallowed\"],[[11712,11718],\"valid\"],[[11719,11719],\"disallowed\"],[[11720,11726],\"valid\"],[[11727,11727],\"disallowed\"],[[11728,11734],\"valid\"],[[11735,11735],\"disallowed\"],[[11736,11742],\"valid\"],[[11743,11743],\"disallowed\"],[[11744,11775],\"valid\"],[[11776,11799],\"valid\",[],\"NV8\"],[[11800,11803],\"valid\",[],\"NV8\"],[[11804,11805],\"valid\",[],\"NV8\"],[[11806,11822],\"valid\",[],\"NV8\"],[[11823,11823],\"valid\"],[[11824,11824],\"valid\",[],\"NV8\"],[[11825,11825],\"valid\",[],\"NV8\"],[[11826,11835],\"valid\",[],\"NV8\"],[[11836,11842],\"valid\",[],\"NV8\"],[[11843,11903],\"disallowed\"],[[11904,11929],\"valid\",[],\"NV8\"],[[11930,11930],\"disallowed\"],[[11931,11934],\"valid\",[],\"NV8\"],[[11935,11935],\"mapped\",[27597]],[[11936,12018],\"valid\",[],\"NV8\"],[[12019,12019],\"mapped\",[40863]],[[12020,12031],\"disallowed\"],[[12032,12032],\"mapped\",[19968]],[[12033,12033],\"mapped\",[20008]],[[12034,12034],\"mapped\",[20022]],[[12035,12035],\"mapped\",[20031]],[[12036,12036],\"mapped\",[20057]],[[12037,12037],\"mapped\",[20101]],[[12038,12038],\"mapped\",[20108]],[[12039,12039],\"mapped\",[20128]],[[12040,12040],\"mapped\",[20154]],[[12041,12041],\"mapped\",[20799]],[[12042,12042],\"mapped\",[20837]],[[12043,12043],\"mapped\",[20843]],[[12044,12044],\"mapped\",[20866]],[[12045,12045],\"mapped\",[20886]],[[12046,12046],\"mapped\",[20907]],[[12047,12047],\"mapped\",[20960]],[[12048,12048],\"mapped\",[20981]],[[12049,12049],\"mapped\",[20992]],[[12050,12050],\"mapped\",[21147]],[[12051,12051],\"mapped\",[21241]],[[12052,12052],\"mapped\",[21269]],[[12053,12053],\"mapped\",[21274]],[[12054,12054],\"mapped\",[21304]],[[12055,12055],\"mapped\",[21313]],[[12056,12056],\"mapped\",[21340]],[[12057,12057],\"mapped\",[21353]],[[12058,12058],\"mapped\",[21378]],[[12059,12059],\"mapped\",[21430]],[[12060,12060],\"mapped\",[21448]],[[12061,12061],\"mapped\",[21475]],[[12062,12062],\"mapped\",[22231]],[[12063,12063],\"mapped\",[22303]],[[12064,12064],\"mapped\",[22763]],[[12065,12065],\"mapped\",[22786]],[[12066,12066],\"mapped\",[22794]],[[12067,12067],\"mapped\",[22805]],[[12068,12068],\"mapped\",[22823]],[[12069,12069],\"mapped\",[22899]],[[12070,12070],\"mapped\",[23376]],[[12071,12071],\"mapped\",[23424]],[[12072,12072],\"mapped\",[23544]],[[12073,12073],\"mapped\",[23567]],[[12074,12074],\"mapped\",[23586]],[[12075,12075],\"mapped\",[23608]],[[12076,12076],\"mapped\",[23662]],[[12077,12077],\"mapped\",[23665]],[[12078,12078],\"mapped\",[24027]],[[12079,12079],\"mapped\",[24037]],[[12080,12080],\"mapped\",[24049]],[[12081,12081],\"mapped\",[24062]],[[12082,12082],\"mapped\",[24178]],[[12083,12083],\"mapped\",[24186]],[[12084,12084],\"mapped\",[24191]],[[12085,12085],\"mapped\",[24308]],[[12086,12086],\"mapped\",[24318]],[[12087,12087],\"mapped\",[24331]],[[12088,12088],\"mapped\",[24339]],[[12089,12089],\"mapped\",[24400]],[[12090,12090],\"mapped\",[24417]],[[12091,12091],\"mapped\",[24435]],[[12092,12092],\"mapped\",[24515]],[[12093,12093],\"mapped\",[25096]],[[12094,12094],\"mapped\",[25142]],[[12095,12095],\"mapped\",[25163]],[[12096,12096],\"mapped\",[25903]],[[12097,12097],\"mapped\",[25908]],[[12098,12098],\"mapped\",[25991]],[[12099,12099],\"mapped\",[26007]],[[12100,12100],\"mapped\",[26020]],[[12101,12101],\"mapped\",[26041]],[[12102,12102],\"mapped\",[26080]],[[12103,12103],\"mapped\",[26085]],[[12104,12104],\"mapped\",[26352]],[[12105,12105],\"mapped\",[26376]],[[12106,12106],\"mapped\",[26408]],[[12107,12107],\"mapped\",[27424]],[[12108,12108],\"mapped\",[27490]],[[12109,12109],\"mapped\",[27513]],[[12110,12110],\"mapped\",[27571]],[[12111,12111],\"mapped\",[27595]],[[12112,12112],\"mapped\",[27604]],[[12113,12113],\"mapped\",[27611]],[[12114,12114],\"mapped\",[27663]],[[12115,12115],\"mapped\",[27668]],[[12116,12116],\"mapped\",[27700]],[[12117,12117],\"mapped\",[28779]],[[12118,12118],\"mapped\",[29226]],[[12119,12119],\"mapped\",[29238]],[[12120,12120],\"mapped\",[29243]],[[12121,12121],\"mapped\",[29247]],[[12122,12122],\"mapped\",[29255]],[[12123,12123],\"mapped\",[29273]],[[12124,12124],\"mapped\",[29275]],[[12125,12125],\"mapped\",[29356]],[[12126,12126],\"mapped\",[29572]],[[12127,12127],\"mapped\",[29577]],[[12128,12128],\"mapped\",[29916]],[[12129,12129],\"mapped\",[29926]],[[12130,12130],\"mapped\",[29976]],[[12131,12131],\"mapped\",[29983]],[[12132,12132],\"mapped\",[29992]],[[12133,12133],\"mapped\",[30000]],[[12134,12134],\"mapped\",[30091]],[[12135,12135],\"mapped\",[30098]],[[12136,12136],\"mapped\",[30326]],[[12137,12137],\"mapped\",[30333]],[[12138,12138],\"mapped\",[30382]],[[12139,12139],\"mapped\",[30399]],[[12140,12140],\"mapped\",[30446]],[[12141,12141],\"mapped\",[30683]],[[12142,12142],\"mapped\",[30690]],[[12143,12143],\"mapped\",[30707]],[[12144,12144],\"mapped\",[31034]],[[12145,12145],\"mapped\",[31160]],[[12146,12146],\"mapped\",[31166]],[[12147,12147],\"mapped\",[31348]],[[12148,12148],\"mapped\",[31435]],[[12149,12149],\"mapped\",[31481]],[[12150,12150],\"mapped\",[31859]],[[12151,12151],\"mapped\",[31992]],[[12152,12152],\"mapped\",[32566]],[[12153,12153],\"mapped\",[32593]],[[12154,12154],\"mapped\",[32650]],[[12155,12155],\"mapped\",[32701]],[[12156,12156],\"mapped\",[32769]],[[12157,12157],\"mapped\",[32780]],[[12158,12158],\"mapped\",[32786]],[[12159,12159],\"mapped\",[32819]],[[12160,12160],\"mapped\",[32895]],[[12161,12161],\"mapped\",[32905]],[[12162,12162],\"mapped\",[33251]],[[12163,12163],\"mapped\",[33258]],[[12164,12164],\"mapped\",[33267]],[[12165,12165],\"mapped\",[33276]],[[12166,12166],\"mapped\",[33292]],[[12167,12167],\"mapped\",[33307]],[[12168,12168],\"mapped\",[33311]],[[12169,12169],\"mapped\",[33390]],[[12170,12170],\"mapped\",[33394]],[[12171,12171],\"mapped\",[33400]],[[12172,12172],\"mapped\",[34381]],[[12173,12173],\"mapped\",[34411]],[[12174,12174],\"mapped\",[34880]],[[12175,12175],\"mapped\",[34892]],[[12176,12176],\"mapped\",[34915]],[[12177,12177],\"mapped\",[35198]],[[12178,12178],\"mapped\",[35211]],[[12179,12179],\"mapped\",[35282]],[[12180,12180],\"mapped\",[35328]],[[12181,12181],\"mapped\",[35895]],[[12182,12182],\"mapped\",[35910]],[[12183,12183],\"mapped\",[35925]],[[12184,12184],\"mapped\",[35960]],[[12185,12185],\"mapped\",[35997]],[[12186,12186],\"mapped\",[36196]],[[12187,12187],\"mapped\",[36208]],[[12188,12188],\"mapped\",[36275]],[[12189,12189],\"mapped\",[36523]],[[12190,12190],\"mapped\",[36554]],[[12191,12191],\"mapped\",[36763]],[[12192,12192],\"mapped\",[36784]],[[12193,12193],\"mapped\",[36789]],[[12194,12194],\"mapped\",[37009]],[[12195,12195],\"mapped\",[37193]],[[12196,12196],\"mapped\",[37318]],[[12197,12197],\"mapped\",[37324]],[[12198,12198],\"mapped\",[37329]],[[12199,12199],\"mapped\",[38263]],[[12200,12200],\"mapped\",[38272]],[[12201,12201],\"mapped\",[38428]],[[12202,12202],\"mapped\",[38582]],[[12203,12203],\"mapped\",[38585]],[[12204,12204],\"mapped\",[38632]],[[12205,12205],\"mapped\",[38737]],[[12206,12206],\"mapped\",[38750]],[[12207,12207],\"mapped\",[38754]],[[12208,12208],\"mapped\",[38761]],[[12209,12209],\"mapped\",[38859]],[[12210,12210],\"mapped\",[38893]],[[12211,12211],\"mapped\",[38899]],[[12212,12212],\"mapped\",[38913]],[[12213,12213],\"mapped\",[39080]],[[12214,12214],\"mapped\",[39131]],[[12215,12215],\"mapped\",[39135]],[[12216,12216],\"mapped\",[39318]],[[12217,12217],\"mapped\",[39321]],[[12218,12218],\"mapped\",[39340]],[[12219,12219],\"mapped\",[39592]],[[12220,12220],\"mapped\",[39640]],[[12221,12221],\"mapped\",[39647]],[[12222,12222],\"mapped\",[39717]],[[12223,12223],\"mapped\",[39727]],[[12224,12224],\"mapped\",[39730]],[[12225,12225],\"mapped\",[39740]],[[12226,12226],\"mapped\",[39770]],[[12227,12227],\"mapped\",[40165]],[[12228,12228],\"mapped\",[40565]],[[12229,12229],\"mapped\",[40575]],[[12230,12230],\"mapped\",[40613]],[[12231,12231],\"mapped\",[40635]],[[12232,12232],\"mapped\",[40643]],[[12233,12233],\"mapped\",[40653]],[[12234,12234],\"mapped\",[40657]],[[12235,12235],\"mapped\",[40697]],[[12236,12236],\"mapped\",[40701]],[[12237,12237],\"mapped\",[40718]],[[12238,12238],\"mapped\",[40723]],[[12239,12239],\"mapped\",[40736]],[[12240,12240],\"mapped\",[40763]],[[12241,12241],\"mapped\",[40778]],[[12242,12242],\"mapped\",[40786]],[[12243,12243],\"mapped\",[40845]],[[12244,12244],\"mapped\",[40860]],[[12245,12245],\"mapped\",[40864]],[[12246,12271],\"disallowed\"],[[12272,12283],\"disallowed\"],[[12284,12287],\"disallowed\"],[[12288,12288],\"disallowed_STD3_mapped\",[32]],[[12289,12289],\"valid\",[],\"NV8\"],[[12290,12290],\"mapped\",[46]],[[12291,12292],\"valid\",[],\"NV8\"],[[12293,12295],\"valid\"],[[12296,12329],\"valid\",[],\"NV8\"],[[12330,12333],\"valid\"],[[12334,12341],\"valid\",[],\"NV8\"],[[12342,12342],\"mapped\",[12306]],[[12343,12343],\"valid\",[],\"NV8\"],[[12344,12344],\"mapped\",[21313]],[[12345,12345],\"mapped\",[21316]],[[12346,12346],\"mapped\",[21317]],[[12347,12347],\"valid\",[],\"NV8\"],[[12348,12348],\"valid\"],[[12349,12349],\"valid\",[],\"NV8\"],[[12350,12350],\"valid\",[],\"NV8\"],[[12351,12351],\"valid\",[],\"NV8\"],[[12352,12352],\"disallowed\"],[[12353,12436],\"valid\"],[[12437,12438],\"valid\"],[[12439,12440],\"disallowed\"],[[12441,12442],\"valid\"],[[12443,12443],\"disallowed_STD3_mapped\",[32,12441]],[[12444,12444],\"disallowed_STD3_mapped\",[32,12442]],[[12445,12446],\"valid\"],[[12447,12447],\"mapped\",[12424,12426]],[[12448,12448],\"valid\",[],\"NV8\"],[[12449,12542],\"valid\"],[[12543,12543],\"mapped\",[12467,12488]],[[12544,12548],\"disallowed\"],[[12549,12588],\"valid\"],[[12589,12589],\"valid\"],[[12590,12592],\"disallowed\"],[[12593,12593],\"mapped\",[4352]],[[12594,12594],\"mapped\",[4353]],[[12595,12595],\"mapped\",[4522]],[[12596,12596],\"mapped\",[4354]],[[12597,12597],\"mapped\",[4524]],[[12598,12598],\"mapped\",[4525]],[[12599,12599],\"mapped\",[4355]],[[12600,12600],\"mapped\",[4356]],[[12601,12601],\"mapped\",[4357]],[[12602,12602],\"mapped\",[4528]],[[12603,12603],\"mapped\",[4529]],[[12604,12604],\"mapped\",[4530]],[[12605,12605],\"mapped\",[4531]],[[12606,12606],\"mapped\",[4532]],[[12607,12607],\"mapped\",[4533]],[[12608,12608],\"mapped\",[4378]],[[12609,12609],\"mapped\",[4358]],[[12610,12610],\"mapped\",[4359]],[[12611,12611],\"mapped\",[4360]],[[12612,12612],\"mapped\",[4385]],[[12613,12613],\"mapped\",[4361]],[[12614,12614],\"mapped\",[4362]],[[12615,12615],\"mapped\",[4363]],[[12616,12616],\"mapped\",[4364]],[[12617,12617],\"mapped\",[4365]],[[12618,12618],\"mapped\",[4366]],[[12619,12619],\"mapped\",[4367]],[[12620,12620],\"mapped\",[4368]],[[12621,12621],\"mapped\",[4369]],[[12622,12622],\"mapped\",[4370]],[[12623,12623],\"mapped\",[4449]],[[12624,12624],\"mapped\",[4450]],[[12625,12625],\"mapped\",[4451]],[[12626,12626],\"mapped\",[4452]],[[12627,12627],\"mapped\",[4453]],[[12628,12628],\"mapped\",[4454]],[[12629,12629],\"mapped\",[4455]],[[12630,12630],\"mapped\",[4456]],[[12631,12631],\"mapped\",[4457]],[[12632,12632],\"mapped\",[4458]],[[12633,12633],\"mapped\",[4459]],[[12634,12634],\"mapped\",[4460]],[[12635,12635],\"mapped\",[4461]],[[12636,12636],\"mapped\",[4462]],[[12637,12637],\"mapped\",[4463]],[[12638,12638],\"mapped\",[4464]],[[12639,12639],\"mapped\",[4465]],[[12640,12640],\"mapped\",[4466]],[[12641,12641],\"mapped\",[4467]],[[12642,12642],\"mapped\",[4468]],[[12643,12643],\"mapped\",[4469]],[[12644,12644],\"disallowed\"],[[12645,12645],\"mapped\",[4372]],[[12646,12646],\"mapped\",[4373]],[[12647,12647],\"mapped\",[4551]],[[12648,12648],\"mapped\",[4552]],[[12649,12649],\"mapped\",[4556]],[[12650,12650],\"mapped\",[4558]],[[12651,12651],\"mapped\",[4563]],[[12652,12652],\"mapped\",[4567]],[[12653,12653],\"mapped\",[4569]],[[12654,12654],\"mapped\",[4380]],[[12655,12655],\"mapped\",[4573]],[[12656,12656],\"mapped\",[4575]],[[12657,12657],\"mapped\",[4381]],[[12658,12658],\"mapped\",[4382]],[[12659,12659],\"mapped\",[4384]],[[12660,12660],\"mapped\",[4386]],[[12661,12661],\"mapped\",[4387]],[[12662,12662],\"mapped\",[4391]],[[12663,12663],\"mapped\",[4393]],[[12664,12664],\"mapped\",[4395]],[[12665,12665],\"mapped\",[4396]],[[12666,12666],\"mapped\",[4397]],[[12667,12667],\"mapped\",[4398]],[[12668,12668],\"mapped\",[4399]],[[12669,12669],\"mapped\",[4402]],[[12670,12670],\"mapped\",[4406]],[[12671,12671],\"mapped\",[4416]],[[12672,12672],\"mapped\",[4423]],[[12673,12673],\"mapped\",[4428]],[[12674,12674],\"mapped\",[4593]],[[12675,12675],\"mapped\",[4594]],[[12676,12676],\"mapped\",[4439]],[[12677,12677],\"mapped\",[4440]],[[12678,12678],\"mapped\",[4441]],[[12679,12679],\"mapped\",[4484]],[[12680,12680],\"mapped\",[4485]],[[12681,12681],\"mapped\",[4488]],[[12682,12682],\"mapped\",[4497]],[[12683,12683],\"mapped\",[4498]],[[12684,12684],\"mapped\",[4500]],[[12685,12685],\"mapped\",[4510]],[[12686,12686],\"mapped\",[4513]],[[12687,12687],\"disallowed\"],[[12688,12689],\"valid\",[],\"NV8\"],[[12690,12690],\"mapped\",[19968]],[[12691,12691],\"mapped\",[20108]],[[12692,12692],\"mapped\",[19977]],[[12693,12693],\"mapped\",[22235]],[[12694,12694],\"mapped\",[19978]],[[12695,12695],\"mapped\",[20013]],[[12696,12696],\"mapped\",[19979]],[[12697,12697],\"mapped\",[30002]],[[12698,12698],\"mapped\",[20057]],[[12699,12699],\"mapped\",[19993]],[[12700,12700],\"mapped\",[19969]],[[12701,12701],\"mapped\",[22825]],[[12702,12702],\"mapped\",[22320]],[[12703,12703],\"mapped\",[20154]],[[12704,12727],\"valid\"],[[12728,12730],\"valid\"],[[12731,12735],\"disallowed\"],[[12736,12751],\"valid\",[],\"NV8\"],[[12752,12771],\"valid\",[],\"NV8\"],[[12772,12783],\"disallowed\"],[[12784,12799],\"valid\"],[[12800,12800],\"disallowed_STD3_mapped\",[40,4352,41]],[[12801,12801],\"disallowed_STD3_mapped\",[40,4354,41]],[[12802,12802],\"disallowed_STD3_mapped\",[40,4355,41]],[[12803,12803],\"disallowed_STD3_mapped\",[40,4357,41]],[[12804,12804],\"disallowed_STD3_mapped\",[40,4358,41]],[[12805,12805],\"disallowed_STD3_mapped\",[40,4359,41]],[[12806,12806],\"disallowed_STD3_mapped\",[40,4361,41]],[[12807,12807],\"disallowed_STD3_mapped\",[40,4363,41]],[[12808,12808],\"disallowed_STD3_mapped\",[40,4364,41]],[[12809,12809],\"disallowed_STD3_mapped\",[40,4366,41]],[[12810,12810],\"disallowed_STD3_mapped\",[40,4367,41]],[[12811,12811],\"disallowed_STD3_mapped\",[40,4368,41]],[[12812,12812],\"disallowed_STD3_mapped\",[40,4369,41]],[[12813,12813],\"disallowed_STD3_mapped\",[40,4370,41]],[[12814,12814],\"disallowed_STD3_mapped\",[40,44032,41]],[[12815,12815],\"disallowed_STD3_mapped\",[40,45208,41]],[[12816,12816],\"disallowed_STD3_mapped\",[40,45796,41]],[[12817,12817],\"disallowed_STD3_mapped\",[40,46972,41]],[[12818,12818],\"disallowed_STD3_mapped\",[40,47560,41]],[[12819,12819],\"disallowed_STD3_mapped\",[40,48148,41]],[[12820,12820],\"disallowed_STD3_mapped\",[40,49324,41]],[[12821,12821],\"disallowed_STD3_mapped\",[40,50500,41]],[[12822,12822],\"disallowed_STD3_mapped\",[40,51088,41]],[[12823,12823],\"disallowed_STD3_mapped\",[40,52264,41]],[[12824,12824],\"disallowed_STD3_mapped\",[40,52852,41]],[[12825,12825],\"disallowed_STD3_mapped\",[40,53440,41]],[[12826,12826],\"disallowed_STD3_mapped\",[40,54028,41]],[[12827,12827],\"disallowed_STD3_mapped\",[40,54616,41]],[[12828,12828],\"disallowed_STD3_mapped\",[40,51452,41]],[[12829,12829],\"disallowed_STD3_mapped\",[40,50724,51204,41]],[[12830,12830],\"disallowed_STD3_mapped\",[40,50724,54980,41]],[[12831,12831],\"disallowed\"],[[12832,12832],\"disallowed_STD3_mapped\",[40,19968,41]],[[12833,12833],\"disallowed_STD3_mapped\",[40,20108,41]],[[12834,12834],\"disallowed_STD3_mapped\",[40,19977,41]],[[12835,12835],\"disallowed_STD3_mapped\",[40,22235,41]],[[12836,12836],\"disallowed_STD3_mapped\",[40,20116,41]],[[12837,12837],\"disallowed_STD3_mapped\",[40,20845,41]],[[12838,12838],\"disallowed_STD3_mapped\",[40,19971,41]],[[12839,12839],\"disallowed_STD3_mapped\",[40,20843,41]],[[12840,12840],\"disallowed_STD3_mapped\",[40,20061,41]],[[12841,12841],\"disallowed_STD3_mapped\",[40,21313,41]],[[12842,12842],\"disallowed_STD3_mapped\",[40,26376,41]],[[12843,12843],\"disallowed_STD3_mapped\",[40,28779,41]],[[12844,12844],\"disallowed_STD3_mapped\",[40,27700,41]],[[12845,12845],\"disallowed_STD3_mapped\",[40,26408,41]],[[12846,12846],\"disallowed_STD3_mapped\",[40,37329,41]],[[12847,12847],\"disallowed_STD3_mapped\",[40,22303,41]],[[12848,12848],\"disallowed_STD3_mapped\",[40,26085,41]],[[12849,12849],\"disallowed_STD3_mapped\",[40,26666,41]],[[12850,12850],\"disallowed_STD3_mapped\",[40,26377,41]],[[12851,12851],\"disallowed_STD3_mapped\",[40,31038,41]],[[12852,12852],\"disallowed_STD3_mapped\",[40,21517,41]],[[12853,12853],\"disallowed_STD3_mapped\",[40,29305,41]],[[12854,12854],\"disallowed_STD3_mapped\",[40,36001,41]],[[12855,12855],\"disallowed_STD3_mapped\",[40,31069,41]],[[12856,12856],\"disallowed_STD3_mapped\",[40,21172,41]],[[12857,12857],\"disallowed_STD3_mapped\",[40,20195,41]],[[12858,12858],\"disallowed_STD3_mapped\",[40,21628,41]],[[12859,12859],\"disallowed_STD3_mapped\",[40,23398,41]],[[12860,12860],\"disallowed_STD3_mapped\",[40,30435,41]],[[12861,12861],\"disallowed_STD3_mapped\",[40,20225,41]],[[12862,12862],\"disallowed_STD3_mapped\",[40,36039,41]],[[12863,12863],\"disallowed_STD3_mapped\",[40,21332,41]],[[12864,12864],\"disallowed_STD3_mapped\",[40,31085,41]],[[12865,12865],\"disallowed_STD3_mapped\",[40,20241,41]],[[12866,12866],\"disallowed_STD3_mapped\",[40,33258,41]],[[12867,12867],\"disallowed_STD3_mapped\",[40,33267,41]],[[12868,12868],\"mapped\",[21839]],[[12869,12869],\"mapped\",[24188]],[[12870,12870],\"mapped\",[25991]],[[12871,12871],\"mapped\",[31631]],[[12872,12879],\"valid\",[],\"NV8\"],[[12880,12880],\"mapped\",[112,116,101]],[[12881,12881],\"mapped\",[50,49]],[[12882,12882],\"mapped\",[50,50]],[[12883,12883],\"mapped\",[50,51]],[[12884,12884],\"mapped\",[50,52]],[[12885,12885],\"mapped\",[50,53]],[[12886,12886],\"mapped\",[50,54]],[[12887,12887],\"mapped\",[50,55]],[[12888,12888],\"mapped\",[50,56]],[[12889,12889],\"mapped\",[50,57]],[[12890,12890],\"mapped\",[51,48]],[[12891,12891],\"mapped\",[51,49]],[[12892,12892],\"mapped\",[51,50]],[[12893,12893],\"mapped\",[51,51]],[[12894,12894],\"mapped\",[51,52]],[[12895,12895],\"mapped\",[51,53]],[[12896,12896],\"mapped\",[4352]],[[12897,12897],\"mapped\",[4354]],[[12898,12898],\"mapped\",[4355]],[[12899,12899],\"mapped\",[4357]],[[12900,12900],\"mapped\",[4358]],[[12901,12901],\"mapped\",[4359]],[[12902,12902],\"mapped\",[4361]],[[12903,12903],\"mapped\",[4363]],[[12904,12904],\"mapped\",[4364]],[[12905,12905],\"mapped\",[4366]],[[12906,12906],\"mapped\",[4367]],[[12907,12907],\"mapped\",[4368]],[[12908,12908],\"mapped\",[4369]],[[12909,12909],\"mapped\",[4370]],[[12910,12910],\"mapped\",[44032]],[[12911,12911],\"mapped\",[45208]],[[12912,12912],\"mapped\",[45796]],[[12913,12913],\"mapped\",[46972]],[[12914,12914],\"mapped\",[47560]],[[12915,12915],\"mapped\",[48148]],[[12916,12916],\"mapped\",[49324]],[[12917,12917],\"mapped\",[50500]],[[12918,12918],\"mapped\",[51088]],[[12919,12919],\"mapped\",[52264]],[[12920,12920],\"mapped\",[52852]],[[12921,12921],\"mapped\",[53440]],[[12922,12922],\"mapped\",[54028]],[[12923,12923],\"mapped\",[54616]],[[12924,12924],\"mapped\",[52280,44256]],[[12925,12925],\"mapped\",[51452,51032]],[[12926,12926],\"mapped\",[50864]],[[12927,12927],\"valid\",[],\"NV8\"],[[12928,12928],\"mapped\",[19968]],[[12929,12929],\"mapped\",[20108]],[[12930,12930],\"mapped\",[19977]],[[12931,12931],\"mapped\",[22235]],[[12932,12932],\"mapped\",[20116]],[[12933,12933],\"mapped\",[20845]],[[12934,12934],\"mapped\",[19971]],[[12935,12935],\"mapped\",[20843]],[[12936,12936],\"mapped\",[20061]],[[12937,12937],\"mapped\",[21313]],[[12938,12938],\"mapped\",[26376]],[[12939,12939],\"mapped\",[28779]],[[12940,12940],\"mapped\",[27700]],[[12941,12941],\"mapped\",[26408]],[[12942,12942],\"mapped\",[37329]],[[12943,12943],\"mapped\",[22303]],[[12944,12944],\"mapped\",[26085]],[[12945,12945],\"mapped\",[26666]],[[12946,12946],\"mapped\",[26377]],[[12947,12947],\"mapped\",[31038]],[[12948,12948],\"mapped\",[21517]],[[12949,12949],\"mapped\",[29305]],[[12950,12950],\"mapped\",[36001]],[[12951,12951],\"mapped\",[31069]],[[12952,12952],\"mapped\",[21172]],[[12953,12953],\"mapped\",[31192]],[[12954,12954],\"mapped\",[30007]],[[12955,12955],\"mapped\",[22899]],[[12956,12956],\"mapped\",[36969]],[[12957,12957],\"mapped\",[20778]],[[12958,12958],\"mapped\",[21360]],[[12959,12959],\"mapped\",[27880]],[[12960,12960],\"mapped\",[38917]],[[12961,12961],\"mapped\",[20241]],[[12962,12962],\"mapped\",[20889]],[[12963,12963],\"mapped\",[27491]],[[12964,12964],\"mapped\",[19978]],[[12965,12965],\"mapped\",[20013]],[[12966,12966],\"mapped\",[19979]],[[12967,12967],\"mapped\",[24038]],[[12968,12968],\"mapped\",[21491]],[[12969,12969],\"mapped\",[21307]],[[12970,12970],\"mapped\",[23447]],[[12971,12971],\"mapped\",[23398]],[[12972,12972],\"mapped\",[30435]],[[12973,12973],\"mapped\",[20225]],[[12974,12974],\"mapped\",[36039]],[[12975,12975],\"mapped\",[21332]],[[12976,12976],\"mapped\",[22812]],[[12977,12977],\"mapped\",[51,54]],[[12978,12978],\"mapped\",[51,55]],[[12979,12979],\"mapped\",[51,56]],[[12980,12980],\"mapped\",[51,57]],[[12981,12981],\"mapped\",[52,48]],[[12982,12982],\"mapped\",[52,49]],[[12983,12983],\"mapped\",[52,50]],[[12984,12984],\"mapped\",[52,51]],[[12985,12985],\"mapped\",[52,52]],[[12986,12986],\"mapped\",[52,53]],[[12987,12987],\"mapped\",[52,54]],[[12988,12988],\"mapped\",[52,55]],[[12989,12989],\"mapped\",[52,56]],[[12990,12990],\"mapped\",[52,57]],[[12991,12991],\"mapped\",[53,48]],[[12992,12992],\"mapped\",[49,26376]],[[12993,12993],\"mapped\",[50,26376]],[[12994,12994],\"mapped\",[51,26376]],[[12995,12995],\"mapped\",[52,26376]],[[12996,12996],\"mapped\",[53,26376]],[[12997,12997],\"mapped\",[54,26376]],[[12998,12998],\"mapped\",[55,26376]],[[12999,12999],\"mapped\",[56,26376]],[[13000,13000],\"mapped\",[57,26376]],[[13001,13001],\"mapped\",[49,48,26376]],[[13002,13002],\"mapped\",[49,49,26376]],[[13003,13003],\"mapped\",[49,50,26376]],[[13004,13004],\"mapped\",[104,103]],[[13005,13005],\"mapped\",[101,114,103]],[[13006,13006],\"mapped\",[101,118]],[[13007,13007],\"mapped\",[108,116,100]],[[13008,13008],\"mapped\",[12450]],[[13009,13009],\"mapped\",[12452]],[[13010,13010],\"mapped\",[12454]],[[13011,13011],\"mapped\",[12456]],[[13012,13012],\"mapped\",[12458]],[[13013,13013],\"mapped\",[12459]],[[13014,13014],\"mapped\",[12461]],[[13015,13015],\"mapped\",[12463]],[[13016,13016],\"mapped\",[12465]],[[13017,13017],\"mapped\",[12467]],[[13018,13018],\"mapped\",[12469]],[[13019,13019],\"mapped\",[12471]],[[13020,13020],\"mapped\",[12473]],[[13021,13021],\"mapped\",[12475]],[[13022,13022],\"mapped\",[12477]],[[13023,13023],\"mapped\",[12479]],[[13024,13024],\"mapped\",[12481]],[[13025,13025],\"mapped\",[12484]],[[13026,13026],\"mapped\",[12486]],[[13027,13027],\"mapped\",[12488]],[[13028,13028],\"mapped\",[12490]],[[13029,13029],\"mapped\",[12491]],[[13030,13030],\"mapped\",[12492]],[[13031,13031],\"mapped\",[12493]],[[13032,13032],\"mapped\",[12494]],[[13033,13033],\"mapped\",[12495]],[[13034,13034],\"mapped\",[12498]],[[13035,13035],\"mapped\",[12501]],[[13036,13036],\"mapped\",[12504]],[[13037,13037],\"mapped\",[12507]],[[13038,13038],\"mapped\",[12510]],[[13039,13039],\"mapped\",[12511]],[[13040,13040],\"mapped\",[12512]],[[13041,13041],\"mapped\",[12513]],[[13042,13042],\"mapped\",[12514]],[[13043,13043],\"mapped\",[12516]],[[13044,13044],\"mapped\",[12518]],[[13045,13045],\"mapped\",[12520]],[[13046,13046],\"mapped\",[12521]],[[13047,13047],\"mapped\",[12522]],[[13048,13048],\"mapped\",[12523]],[[13049,13049],\"mapped\",[12524]],[[13050,13050],\"mapped\",[12525]],[[13051,13051],\"mapped\",[12527]],[[13052,13052],\"mapped\",[12528]],[[13053,13053],\"mapped\",[12529]],[[13054,13054],\"mapped\",[12530]],[[13055,13055],\"disallowed\"],[[13056,13056],\"mapped\",[12450,12497,12540,12488]],[[13057,13057],\"mapped\",[12450,12523,12501,12449]],[[13058,13058],\"mapped\",[12450,12531,12506,12450]],[[13059,13059],\"mapped\",[12450,12540,12523]],[[13060,13060],\"mapped\",[12452,12491,12531,12464]],[[13061,13061],\"mapped\",[12452,12531,12481]],[[13062,13062],\"mapped\",[12454,12457,12531]],[[13063,13063],\"mapped\",[12456,12473,12463,12540,12489]],[[13064,13064],\"mapped\",[12456,12540,12459,12540]],[[13065,13065],\"mapped\",[12458,12531,12473]],[[13066,13066],\"mapped\",[12458,12540,12512]],[[13067,13067],\"mapped\",[12459,12452,12522]],[[13068,13068],\"mapped\",[12459,12521,12483,12488]],[[13069,13069],\"mapped\",[12459,12525,12522,12540]],[[13070,13070],\"mapped\",[12460,12525,12531]],[[13071,13071],\"mapped\",[12460,12531,12510]],[[13072,13072],\"mapped\",[12462,12460]],[[13073,13073],\"mapped\",[12462,12491,12540]],[[13074,13074],\"mapped\",[12461,12517,12522,12540]],[[13075,13075],\"mapped\",[12462,12523,12480,12540]],[[13076,13076],\"mapped\",[12461,12525]],[[13077,13077],\"mapped\",[12461,12525,12464,12521,12512]],[[13078,13078],\"mapped\",[12461,12525,12513,12540,12488,12523]],[[13079,13079],\"mapped\",[12461,12525,12527,12483,12488]],[[13080,13080],\"mapped\",[12464,12521,12512]],[[13081,13081],\"mapped\",[12464,12521,12512,12488,12531]],[[13082,13082],\"mapped\",[12463,12523,12476,12452,12525]],[[13083,13083],\"mapped\",[12463,12525,12540,12493]],[[13084,13084],\"mapped\",[12465,12540,12473]],[[13085,13085],\"mapped\",[12467,12523,12490]],[[13086,13086],\"mapped\",[12467,12540,12509]],[[13087,13087],\"mapped\",[12469,12452,12463,12523]],[[13088,13088],\"mapped\",[12469,12531,12481,12540,12512]],[[13089,13089],\"mapped\",[12471,12522,12531,12464]],[[13090,13090],\"mapped\",[12475,12531,12481]],[[13091,13091],\"mapped\",[12475,12531,12488]],[[13092,13092],\"mapped\",[12480,12540,12473]],[[13093,13093],\"mapped\",[12487,12471]],[[13094,13094],\"mapped\",[12489,12523]],[[13095,13095],\"mapped\",[12488,12531]],[[13096,13096],\"mapped\",[12490,12494]],[[13097,13097],\"mapped\",[12494,12483,12488]],[[13098,13098],\"mapped\",[12495,12452,12484]],[[13099,13099],\"mapped\",[12497,12540,12475,12531,12488]],[[13100,13100],\"mapped\",[12497,12540,12484]],[[13101,13101],\"mapped\",[12496,12540,12524,12523]],[[13102,13102],\"mapped\",[12500,12450,12473,12488,12523]],[[13103,13103],\"mapped\",[12500,12463,12523]],[[13104,13104],\"mapped\",[12500,12467]],[[13105,13105],\"mapped\",[12499,12523]],[[13106,13106],\"mapped\",[12501,12449,12521,12483,12489]],[[13107,13107],\"mapped\",[12501,12451,12540,12488]],[[13108,13108],\"mapped\",[12502,12483,12471,12455,12523]],[[13109,13109],\"mapped\",[12501,12521,12531]],[[13110,13110],\"mapped\",[12504,12463,12479,12540,12523]],[[13111,13111],\"mapped\",[12506,12477]],[[13112,13112],\"mapped\",[12506,12491,12498]],[[13113,13113],\"mapped\",[12504,12523,12484]],[[13114,13114],\"mapped\",[12506,12531,12473]],[[13115,13115],\"mapped\",[12506,12540,12472]],[[13116,13116],\"mapped\",[12505,12540,12479]],[[13117,13117],\"mapped\",[12509,12452,12531,12488]],[[13118,13118],\"mapped\",[12508,12523,12488]],[[13119,13119],\"mapped\",[12507,12531]],[[13120,13120],\"mapped\",[12509,12531,12489]],[[13121,13121],\"mapped\",[12507,12540,12523]],[[13122,13122],\"mapped\",[12507,12540,12531]],[[13123,13123],\"mapped\",[12510,12452,12463,12525]],[[13124,13124],\"mapped\",[12510,12452,12523]],[[13125,13125],\"mapped\",[12510,12483,12495]],[[13126,13126],\"mapped\",[12510,12523,12463]],[[13127,13127],\"mapped\",[12510,12531,12471,12519,12531]],[[13128,13128],\"mapped\",[12511,12463,12525,12531]],[[13129,13129],\"mapped\",[12511,12522]],[[13130,13130],\"mapped\",[12511,12522,12496,12540,12523]],[[13131,13131],\"mapped\",[12513,12460]],[[13132,13132],\"mapped\",[12513,12460,12488,12531]],[[13133,13133],\"mapped\",[12513,12540,12488,12523]],[[13134,13134],\"mapped\",[12516,12540,12489]],[[13135,13135],\"mapped\",[12516,12540,12523]],[[13136,13136],\"mapped\",[12518,12450,12531]],[[13137,13137],\"mapped\",[12522,12483,12488,12523]],[[13138,13138],\"mapped\",[12522,12521]],[[13139,13139],\"mapped\",[12523,12500,12540]],[[13140,13140],\"mapped\",[12523,12540,12502,12523]],[[13141,13141],\"mapped\",[12524,12512]],[[13142,13142],\"mapped\",[12524,12531,12488,12466,12531]],[[13143,13143],\"mapped\",[12527,12483,12488]],[[13144,13144],\"mapped\",[48,28857]],[[13145,13145],\"mapped\",[49,28857]],[[13146,13146],\"mapped\",[50,28857]],[[13147,13147],\"mapped\",[51,28857]],[[13148,13148],\"mapped\",[52,28857]],[[13149,13149],\"mapped\",[53,28857]],[[13150,13150],\"mapped\",[54,28857]],[[13151,13151],\"mapped\",[55,28857]],[[13152,13152],\"mapped\",[56,28857]],[[13153,13153],\"mapped\",[57,28857]],[[13154,13154],\"mapped\",[49,48,28857]],[[13155,13155],\"mapped\",[49,49,28857]],[[13156,13156],\"mapped\",[49,50,28857]],[[13157,13157],\"mapped\",[49,51,28857]],[[13158,13158],\"mapped\",[49,52,28857]],[[13159,13159],\"mapped\",[49,53,28857]],[[13160,13160],\"mapped\",[49,54,28857]],[[13161,13161],\"mapped\",[49,55,28857]],[[13162,13162],\"mapped\",[49,56,28857]],[[13163,13163],\"mapped\",[49,57,28857]],[[13164,13164],\"mapped\",[50,48,28857]],[[13165,13165],\"mapped\",[50,49,28857]],[[13166,13166],\"mapped\",[50,50,28857]],[[13167,13167],\"mapped\",[50,51,28857]],[[13168,13168],\"mapped\",[50,52,28857]],[[13169,13169],\"mapped\",[104,112,97]],[[13170,13170],\"mapped\",[100,97]],[[13171,13171],\"mapped\",[97,117]],[[13172,13172],\"mapped\",[98,97,114]],[[13173,13173],\"mapped\",[111,118]],[[13174,13174],\"mapped\",[112,99]],[[13175,13175],\"mapped\",[100,109]],[[13176,13176],\"mapped\",[100,109,50]],[[13177,13177],\"mapped\",[100,109,51]],[[13178,13178],\"mapped\",[105,117]],[[13179,13179],\"mapped\",[24179,25104]],[[13180,13180],\"mapped\",[26157,21644]],[[13181,13181],\"mapped\",[22823,27491]],[[13182,13182],\"mapped\",[26126,27835]],[[13183,13183],\"mapped\",[26666,24335,20250,31038]],[[13184,13184],\"mapped\",[112,97]],[[13185,13185],\"mapped\",[110,97]],[[13186,13186],\"mapped\",[956,97]],[[13187,13187],\"mapped\",[109,97]],[[13188,13188],\"mapped\",[107,97]],[[13189,13189],\"mapped\",[107,98]],[[13190,13190],\"mapped\",[109,98]],[[13191,13191],\"mapped\",[103,98]],[[13192,13192],\"mapped\",[99,97,108]],[[13193,13193],\"mapped\",[107,99,97,108]],[[13194,13194],\"mapped\",[112,102]],[[13195,13195],\"mapped\",[110,102]],[[13196,13196],\"mapped\",[956,102]],[[13197,13197],\"mapped\",[956,103]],[[13198,13198],\"mapped\",[109,103]],[[13199,13199],\"mapped\",[107,103]],[[13200,13200],\"mapped\",[104,122]],[[13201,13201],\"mapped\",[107,104,122]],[[13202,13202],\"mapped\",[109,104,122]],[[13203,13203],\"mapped\",[103,104,122]],[[13204,13204],\"mapped\",[116,104,122]],[[13205,13205],\"mapped\",[956,108]],[[13206,13206],\"mapped\",[109,108]],[[13207,13207],\"mapped\",[100,108]],[[13208,13208],\"mapped\",[107,108]],[[13209,13209],\"mapped\",[102,109]],[[13210,13210],\"mapped\",[110,109]],[[13211,13211],\"mapped\",[956,109]],[[13212,13212],\"mapped\",[109,109]],[[13213,13213],\"mapped\",[99,109]],[[13214,13214],\"mapped\",[107,109]],[[13215,13215],\"mapped\",[109,109,50]],[[13216,13216],\"mapped\",[99,109,50]],[[13217,13217],\"mapped\",[109,50]],[[13218,13218],\"mapped\",[107,109,50]],[[13219,13219],\"mapped\",[109,109,51]],[[13220,13220],\"mapped\",[99,109,51]],[[13221,13221],\"mapped\",[109,51]],[[13222,13222],\"mapped\",[107,109,51]],[[13223,13223],\"mapped\",[109,8725,115]],[[13224,13224],\"mapped\",[109,8725,115,50]],[[13225,13225],\"mapped\",[112,97]],[[13226,13226],\"mapped\",[107,112,97]],[[13227,13227],\"mapped\",[109,112,97]],[[13228,13228],\"mapped\",[103,112,97]],[[13229,13229],\"mapped\",[114,97,100]],[[13230,13230],\"mapped\",[114,97,100,8725,115]],[[13231,13231],\"mapped\",[114,97,100,8725,115,50]],[[13232,13232],\"mapped\",[112,115]],[[13233,13233],\"mapped\",[110,115]],[[13234,13234],\"mapped\",[956,115]],[[13235,13235],\"mapped\",[109,115]],[[13236,13236],\"mapped\",[112,118]],[[13237,13237],\"mapped\",[110,118]],[[13238,13238],\"mapped\",[956,118]],[[13239,13239],\"mapped\",[109,118]],[[13240,13240],\"mapped\",[107,118]],[[13241,13241],\"mapped\",[109,118]],[[13242,13242],\"mapped\",[112,119]],[[13243,13243],\"mapped\",[110,119]],[[13244,13244],\"mapped\",[956,119]],[[13245,13245],\"mapped\",[109,119]],[[13246,13246],\"mapped\",[107,119]],[[13247,13247],\"mapped\",[109,119]],[[13248,13248],\"mapped\",[107,969]],[[13249,13249],\"mapped\",[109,969]],[[13250,13250],\"disallowed\"],[[13251,13251],\"mapped\",[98,113]],[[13252,13252],\"mapped\",[99,99]],[[13253,13253],\"mapped\",[99,100]],[[13254,13254],\"mapped\",[99,8725,107,103]],[[13255,13255],\"disallowed\"],[[13256,13256],\"mapped\",[100,98]],[[13257,13257],\"mapped\",[103,121]],[[13258,13258],\"mapped\",[104,97]],[[13259,13259],\"mapped\",[104,112]],[[13260,13260],\"mapped\",[105,110]],[[13261,13261],\"mapped\",[107,107]],[[13262,13262],\"mapped\",[107,109]],[[13263,13263],\"mapped\",[107,116]],[[13264,13264],\"mapped\",[108,109]],[[13265,13265],\"mapped\",[108,110]],[[13266,13266],\"mapped\",[108,111,103]],[[13267,13267],\"mapped\",[108,120]],[[13268,13268],\"mapped\",[109,98]],[[13269,13269],\"mapped\",[109,105,108]],[[13270,13270],\"mapped\",[109,111,108]],[[13271,13271],\"mapped\",[112,104]],[[13272,13272],\"disallowed\"],[[13273,13273],\"mapped\",[112,112,109]],[[13274,13274],\"mapped\",[112,114]],[[13275,13275],\"mapped\",[115,114]],[[13276,13276],\"mapped\",[115,118]],[[13277,13277],\"mapped\",[119,98]],[[13278,13278],\"mapped\",[118,8725,109]],[[13279,13279],\"mapped\",[97,8725,109]],[[13280,13280],\"mapped\",[49,26085]],[[13281,13281],\"mapped\",[50,26085]],[[13282,13282],\"mapped\",[51,26085]],[[13283,13283],\"mapped\",[52,26085]],[[13284,13284],\"mapped\",[53,26085]],[[13285,13285],\"mapped\",[54,26085]],[[13286,13286],\"mapped\",[55,26085]],[[13287,13287],\"mapped\",[56,26085]],[[13288,13288],\"mapped\",[57,26085]],[[13289,13289],\"mapped\",[49,48,26085]],[[13290,13290],\"mapped\",[49,49,26085]],[[13291,13291],\"mapped\",[49,50,26085]],[[13292,13292],\"mapped\",[49,51,26085]],[[13293,13293],\"mapped\",[49,52,26085]],[[13294,13294],\"mapped\",[49,53,26085]],[[13295,13295],\"mapped\",[49,54,26085]],[[13296,13296],\"mapped\",[49,55,26085]],[[13297,13297],\"mapped\",[49,56,26085]],[[13298,13298],\"mapped\",[49,57,26085]],[[13299,13299],\"mapped\",[50,48,26085]],[[13300,13300],\"mapped\",[50,49,26085]],[[13301,13301],\"mapped\",[50,50,26085]],[[13302,13302],\"mapped\",[50,51,26085]],[[13303,13303],\"mapped\",[50,52,26085]],[[13304,13304],\"mapped\",[50,53,26085]],[[13305,13305],\"mapped\",[50,54,26085]],[[13306,13306],\"mapped\",[50,55,26085]],[[13307,13307],\"mapped\",[50,56,26085]],[[13308,13308],\"mapped\",[50,57,26085]],[[13309,13309],\"mapped\",[51,48,26085]],[[13310,13310],\"mapped\",[51,49,26085]],[[13311,13311],\"mapped\",[103,97,108]],[[13312,19893],\"valid\"],[[19894,19903],\"disallowed\"],[[19904,19967],\"valid\",[],\"NV8\"],[[19968,40869],\"valid\"],[[40870,40891],\"valid\"],[[40892,40899],\"valid\"],[[40900,40907],\"valid\"],[[40908,40908],\"valid\"],[[40909,40917],\"valid\"],[[40918,40959],\"disallowed\"],[[40960,42124],\"valid\"],[[42125,42127],\"disallowed\"],[[42128,42145],\"valid\",[],\"NV8\"],[[42146,42147],\"valid\",[],\"NV8\"],[[42148,42163],\"valid\",[],\"NV8\"],[[42164,42164],\"valid\",[],\"NV8\"],[[42165,42176],\"valid\",[],\"NV8\"],[[42177,42177],\"valid\",[],\"NV8\"],[[42178,42180],\"valid\",[],\"NV8\"],[[42181,42181],\"valid\",[],\"NV8\"],[[42182,42182],\"valid\",[],\"NV8\"],[[42183,42191],\"disallowed\"],[[42192,42237],\"valid\"],[[42238,42239],\"valid\",[],\"NV8\"],[[42240,42508],\"valid\"],[[42509,42511],\"valid\",[],\"NV8\"],[[42512,42539],\"valid\"],[[42540,42559],\"disallowed\"],[[42560,42560],\"mapped\",[42561]],[[42561,42561],\"valid\"],[[42562,42562],\"mapped\",[42563]],[[42563,42563],\"valid\"],[[42564,42564],\"mapped\",[42565]],[[42565,42565],\"valid\"],[[42566,42566],\"mapped\",[42567]],[[42567,42567],\"valid\"],[[42568,42568],\"mapped\",[42569]],[[42569,42569],\"valid\"],[[42570,42570],\"mapped\",[42571]],[[42571,42571],\"valid\"],[[42572,42572],\"mapped\",[42573]],[[42573,42573],\"valid\"],[[42574,42574],\"mapped\",[42575]],[[42575,42575],\"valid\"],[[42576,42576],\"mapped\",[42577]],[[42577,42577],\"valid\"],[[42578,42578],\"mapped\",[42579]],[[42579,42579],\"valid\"],[[42580,42580],\"mapped\",[42581]],[[42581,42581],\"valid\"],[[42582,42582],\"mapped\",[42583]],[[42583,42583],\"valid\"],[[42584,42584],\"mapped\",[42585]],[[42585,42585],\"valid\"],[[42586,42586],\"mapped\",[42587]],[[42587,42587],\"valid\"],[[42588,42588],\"mapped\",[42589]],[[42589,42589],\"valid\"],[[42590,42590],\"mapped\",[42591]],[[42591,42591],\"valid\"],[[42592,42592],\"mapped\",[42593]],[[42593,42593],\"valid\"],[[42594,42594],\"mapped\",[42595]],[[42595,42595],\"valid\"],[[42596,42596],\"mapped\",[42597]],[[42597,42597],\"valid\"],[[42598,42598],\"mapped\",[42599]],[[42599,42599],\"valid\"],[[42600,42600],\"mapped\",[42601]],[[42601,42601],\"valid\"],[[42602,42602],\"mapped\",[42603]],[[42603,42603],\"valid\"],[[42604,42604],\"mapped\",[42605]],[[42605,42607],\"valid\"],[[42608,42611],\"valid\",[],\"NV8\"],[[42612,42619],\"valid\"],[[42620,42621],\"valid\"],[[42622,42622],\"valid\",[],\"NV8\"],[[42623,42623],\"valid\"],[[42624,42624],\"mapped\",[42625]],[[42625,42625],\"valid\"],[[42626,42626],\"mapped\",[42627]],[[42627,42627],\"valid\"],[[42628,42628],\"mapped\",[42629]],[[42629,42629],\"valid\"],[[42630,42630],\"mapped\",[42631]],[[42631,42631],\"valid\"],[[42632,42632],\"mapped\",[42633]],[[42633,42633],\"valid\"],[[42634,42634],\"mapped\",[42635]],[[42635,42635],\"valid\"],[[42636,42636],\"mapped\",[42637]],[[42637,42637],\"valid\"],[[42638,42638],\"mapped\",[42639]],[[42639,42639],\"valid\"],[[42640,42640],\"mapped\",[42641]],[[42641,42641],\"valid\"],[[42642,42642],\"mapped\",[42643]],[[42643,42643],\"valid\"],[[42644,42644],\"mapped\",[42645]],[[42645,42645],\"valid\"],[[42646,42646],\"mapped\",[42647]],[[42647,42647],\"valid\"],[[42648,42648],\"mapped\",[42649]],[[42649,42649],\"valid\"],[[42650,42650],\"mapped\",[42651]],[[42651,42651],\"valid\"],[[42652,42652],\"mapped\",[1098]],[[42653,42653],\"mapped\",[1100]],[[42654,42654],\"valid\"],[[42655,42655],\"valid\"],[[42656,42725],\"valid\"],[[42726,42735],\"valid\",[],\"NV8\"],[[42736,42737],\"valid\"],[[42738,42743],\"valid\",[],\"NV8\"],[[42744,42751],\"disallowed\"],[[42752,42774],\"valid\",[],\"NV8\"],[[42775,42778],\"valid\"],[[42779,42783],\"valid\"],[[42784,42785],\"valid\",[],\"NV8\"],[[42786,42786],\"mapped\",[42787]],[[42787,42787],\"valid\"],[[42788,42788],\"mapped\",[42789]],[[42789,42789],\"valid\"],[[42790,42790],\"mapped\",[42791]],[[42791,42791],\"valid\"],[[42792,42792],\"mapped\",[42793]],[[42793,42793],\"valid\"],[[42794,42794],\"mapped\",[42795]],[[42795,42795],\"valid\"],[[42796,42796],\"mapped\",[42797]],[[42797,42797],\"valid\"],[[42798,42798],\"mapped\",[42799]],[[42799,42801],\"valid\"],[[42802,42802],\"mapped\",[42803]],[[42803,42803],\"valid\"],[[42804,42804],\"mapped\",[42805]],[[42805,42805],\"valid\"],[[42806,42806],\"mapped\",[42807]],[[42807,42807],\"valid\"],[[42808,42808],\"mapped\",[42809]],[[42809,42809],\"valid\"],[[42810,42810],\"mapped\",[42811]],[[42811,42811],\"valid\"],[[42812,42812],\"mapped\",[42813]],[[42813,42813],\"valid\"],[[42814,42814],\"mapped\",[42815]],[[42815,42815],\"valid\"],[[42816,42816],\"mapped\",[42817]],[[42817,42817],\"valid\"],[[42818,42818],\"mapped\",[42819]],[[42819,42819],\"valid\"],[[42820,42820],\"mapped\",[42821]],[[42821,42821],\"valid\"],[[42822,42822],\"mapped\",[42823]],[[42823,42823],\"valid\"],[[42824,42824],\"mapped\",[42825]],[[42825,42825],\"valid\"],[[42826,42826],\"mapped\",[42827]],[[42827,42827],\"valid\"],[[42828,42828],\"mapped\",[42829]],[[42829,42829],\"valid\"],[[42830,42830],\"mapped\",[42831]],[[42831,42831],\"valid\"],[[42832,42832],\"mapped\",[42833]],[[42833,42833],\"valid\"],[[42834,42834],\"mapped\",[42835]],[[42835,42835],\"valid\"],[[42836,42836],\"mapped\",[42837]],[[42837,42837],\"valid\"],[[42838,42838],\"mapped\",[42839]],[[42839,42839],\"valid\"],[[42840,42840],\"mapped\",[42841]],[[42841,42841],\"valid\"],[[42842,42842],\"mapped\",[42843]],[[42843,42843],\"valid\"],[[42844,42844],\"mapped\",[42845]],[[42845,42845],\"valid\"],[[42846,42846],\"mapped\",[42847]],[[42847,42847],\"valid\"],[[42848,42848],\"mapped\",[42849]],[[42849,42849],\"valid\"],[[42850,42850],\"mapped\",[42851]],[[42851,42851],\"valid\"],[[42852,42852],\"mapped\",[42853]],[[42853,42853],\"valid\"],[[42854,42854],\"mapped\",[42855]],[[42855,42855],\"valid\"],[[42856,42856],\"mapped\",[42857]],[[42857,42857],\"valid\"],[[42858,42858],\"mapped\",[42859]],[[42859,42859],\"valid\"],[[42860,42860],\"mapped\",[42861]],[[42861,42861],\"valid\"],[[42862,42862],\"mapped\",[42863]],[[42863,42863],\"valid\"],[[42864,42864],\"mapped\",[42863]],[[42865,42872],\"valid\"],[[42873,42873],\"mapped\",[42874]],[[42874,42874],\"valid\"],[[42875,42875],\"mapped\",[42876]],[[42876,42876],\"valid\"],[[42877,42877],\"mapped\",[7545]],[[42878,42878],\"mapped\",[42879]],[[42879,42879],\"valid\"],[[42880,42880],\"mapped\",[42881]],[[42881,42881],\"valid\"],[[42882,42882],\"mapped\",[42883]],[[42883,42883],\"valid\"],[[42884,42884],\"mapped\",[42885]],[[42885,42885],\"valid\"],[[42886,42886],\"mapped\",[42887]],[[42887,42888],\"valid\"],[[42889,42890],\"valid\",[],\"NV8\"],[[42891,42891],\"mapped\",[42892]],[[42892,42892],\"valid\"],[[42893,42893],\"mapped\",[613]],[[42894,42894],\"valid\"],[[42895,42895],\"valid\"],[[42896,42896],\"mapped\",[42897]],[[42897,42897],\"valid\"],[[42898,42898],\"mapped\",[42899]],[[42899,42899],\"valid\"],[[42900,42901],\"valid\"],[[42902,42902],\"mapped\",[42903]],[[42903,42903],\"valid\"],[[42904,42904],\"mapped\",[42905]],[[42905,42905],\"valid\"],[[42906,42906],\"mapped\",[42907]],[[42907,42907],\"valid\"],[[42908,42908],\"mapped\",[42909]],[[42909,42909],\"valid\"],[[42910,42910],\"mapped\",[42911]],[[42911,42911],\"valid\"],[[42912,42912],\"mapped\",[42913]],[[42913,42913],\"valid\"],[[42914,42914],\"mapped\",[42915]],[[42915,42915],\"valid\"],[[42916,42916],\"mapped\",[42917]],[[42917,42917],\"valid\"],[[42918,42918],\"mapped\",[42919]],[[42919,42919],\"valid\"],[[42920,42920],\"mapped\",[42921]],[[42921,42921],\"valid\"],[[42922,42922],\"mapped\",[614]],[[42923,42923],\"mapped\",[604]],[[42924,42924],\"mapped\",[609]],[[42925,42925],\"mapped\",[620]],[[42926,42927],\"disallowed\"],[[42928,42928],\"mapped\",[670]],[[42929,42929],\"mapped\",[647]],[[42930,42930],\"mapped\",[669]],[[42931,42931],\"mapped\",[43859]],[[42932,42932],\"mapped\",[42933]],[[42933,42933],\"valid\"],[[42934,42934],\"mapped\",[42935]],[[42935,42935],\"valid\"],[[42936,42998],\"disallowed\"],[[42999,42999],\"valid\"],[[43000,43000],\"mapped\",[295]],[[43001,43001],\"mapped\",[339]],[[43002,43002],\"valid\"],[[43003,43007],\"valid\"],[[43008,43047],\"valid\"],[[43048,43051],\"valid\",[],\"NV8\"],[[43052,43055],\"disallowed\"],[[43056,43065],\"valid\",[],\"NV8\"],[[43066,43071],\"disallowed\"],[[43072,43123],\"valid\"],[[43124,43127],\"valid\",[],\"NV8\"],[[43128,43135],\"disallowed\"],[[43136,43204],\"valid\"],[[43205,43213],\"disallowed\"],[[43214,43215],\"valid\",[],\"NV8\"],[[43216,43225],\"valid\"],[[43226,43231],\"disallowed\"],[[43232,43255],\"valid\"],[[43256,43258],\"valid\",[],\"NV8\"],[[43259,43259],\"valid\"],[[43260,43260],\"valid\",[],\"NV8\"],[[43261,43261],\"valid\"],[[43262,43263],\"disallowed\"],[[43264,43309],\"valid\"],[[43310,43311],\"valid\",[],\"NV8\"],[[43312,43347],\"valid\"],[[43348,43358],\"disallowed\"],[[43359,43359],\"valid\",[],\"NV8\"],[[43360,43388],\"valid\",[],\"NV8\"],[[43389,43391],\"disallowed\"],[[43392,43456],\"valid\"],[[43457,43469],\"valid\",[],\"NV8\"],[[43470,43470],\"disallowed\"],[[43471,43481],\"valid\"],[[43482,43485],\"disallowed\"],[[43486,43487],\"valid\",[],\"NV8\"],[[43488,43518],\"valid\"],[[43519,43519],\"disallowed\"],[[43520,43574],\"valid\"],[[43575,43583],\"disallowed\"],[[43584,43597],\"valid\"],[[43598,43599],\"disallowed\"],[[43600,43609],\"valid\"],[[43610,43611],\"disallowed\"],[[43612,43615],\"valid\",[],\"NV8\"],[[43616,43638],\"valid\"],[[43639,43641],\"valid\",[],\"NV8\"],[[43642,43643],\"valid\"],[[43644,43647],\"valid\"],[[43648,43714],\"valid\"],[[43715,43738],\"disallowed\"],[[43739,43741],\"valid\"],[[43742,43743],\"valid\",[],\"NV8\"],[[43744,43759],\"valid\"],[[43760,43761],\"valid\",[],\"NV8\"],[[43762,43766],\"valid\"],[[43767,43776],\"disallowed\"],[[43777,43782],\"valid\"],[[43783,43784],\"disallowed\"],[[43785,43790],\"valid\"],[[43791,43792],\"disallowed\"],[[43793,43798],\"valid\"],[[43799,43807],\"disallowed\"],[[43808,43814],\"valid\"],[[43815,43815],\"disallowed\"],[[43816,43822],\"valid\"],[[43823,43823],\"disallowed\"],[[43824,43866],\"valid\"],[[43867,43867],\"valid\",[],\"NV8\"],[[43868,43868],\"mapped\",[42791]],[[43869,43869],\"mapped\",[43831]],[[43870,43870],\"mapped\",[619]],[[43871,43871],\"mapped\",[43858]],[[43872,43875],\"valid\"],[[43876,43877],\"valid\"],[[43878,43887],\"disallowed\"],[[43888,43888],\"mapped\",[5024]],[[43889,43889],\"mapped\",[5025]],[[43890,43890],\"mapped\",[5026]],[[43891,43891],\"mapped\",[5027]],[[43892,43892],\"mapped\",[5028]],[[43893,43893],\"mapped\",[5029]],[[43894,43894],\"mapped\",[5030]],[[43895,43895],\"mapped\",[5031]],[[43896,43896],\"mapped\",[5032]],[[43897,43897],\"mapped\",[5033]],[[43898,43898],\"mapped\",[5034]],[[43899,43899],\"mapped\",[5035]],[[43900,43900],\"mapped\",[5036]],[[43901,43901],\"mapped\",[5037]],[[43902,43902],\"mapped\",[5038]],[[43903,43903],\"mapped\",[5039]],[[43904,43904],\"mapped\",[5040]],[[43905,43905],\"mapped\",[5041]],[[43906,43906],\"mapped\",[5042]],[[43907,43907],\"mapped\",[5043]],[[43908,43908],\"mapped\",[5044]],[[43909,43909],\"mapped\",[5045]],[[43910,43910],\"mapped\",[5046]],[[43911,43911],\"mapped\",[5047]],[[43912,43912],\"mapped\",[5048]],[[43913,43913],\"mapped\",[5049]],[[43914,43914],\"mapped\",[5050]],[[43915,43915],\"mapped\",[5051]],[[43916,43916],\"mapped\",[5052]],[[43917,43917],\"mapped\",[5053]],[[43918,43918],\"mapped\",[5054]],[[43919,43919],\"mapped\",[5055]],[[43920,43920],\"mapped\",[5056]],[[43921,43921],\"mapped\",[5057]],[[43922,43922],\"mapped\",[5058]],[[43923,43923],\"mapped\",[5059]],[[43924,43924],\"mapped\",[5060]],[[43925,43925],\"mapped\",[5061]],[[43926,43926],\"mapped\",[5062]],[[43927,43927],\"mapped\",[5063]],[[43928,43928],\"mapped\",[5064]],[[43929,43929],\"mapped\",[5065]],[[43930,43930],\"mapped\",[5066]],[[43931,43931],\"mapped\",[5067]],[[43932,43932],\"mapped\",[5068]],[[43933,43933],\"mapped\",[5069]],[[43934,43934],\"mapped\",[5070]],[[43935,43935],\"mapped\",[5071]],[[43936,43936],\"mapped\",[5072]],[[43937,43937],\"mapped\",[5073]],[[43938,43938],\"mapped\",[5074]],[[43939,43939],\"mapped\",[5075]],[[43940,43940],\"mapped\",[5076]],[[43941,43941],\"mapped\",[5077]],[[43942,43942],\"mapped\",[5078]],[[43943,43943],\"mapped\",[5079]],[[43944,43944],\"mapped\",[5080]],[[43945,43945],\"mapped\",[5081]],[[43946,43946],\"mapped\",[5082]],[[43947,43947],\"mapped\",[5083]],[[43948,43948],\"mapped\",[5084]],[[43949,43949],\"mapped\",[5085]],[[43950,43950],\"mapped\",[5086]],[[43951,43951],\"mapped\",[5087]],[[43952,43952],\"mapped\",[5088]],[[43953,43953],\"mapped\",[5089]],[[43954,43954],\"mapped\",[5090]],[[43955,43955],\"mapped\",[5091]],[[43956,43956],\"mapped\",[5092]],[[43957,43957],\"mapped\",[5093]],[[43958,43958],\"mapped\",[5094]],[[43959,43959],\"mapped\",[5095]],[[43960,43960],\"mapped\",[5096]],[[43961,43961],\"mapped\",[5097]],[[43962,43962],\"mapped\",[5098]],[[43963,43963],\"mapped\",[5099]],[[43964,43964],\"mapped\",[5100]],[[43965,43965],\"mapped\",[5101]],[[43966,43966],\"mapped\",[5102]],[[43967,43967],\"mapped\",[5103]],[[43968,44010],\"valid\"],[[44011,44011],\"valid\",[],\"NV8\"],[[44012,44013],\"valid\"],[[44014,44015],\"disallowed\"],[[44016,44025],\"valid\"],[[44026,44031],\"disallowed\"],[[44032,55203],\"valid\"],[[55204,55215],\"disallowed\"],[[55216,55238],\"valid\",[],\"NV8\"],[[55239,55242],\"disallowed\"],[[55243,55291],\"valid\",[],\"NV8\"],[[55292,55295],\"disallowed\"],[[55296,57343],\"disallowed\"],[[57344,63743],\"disallowed\"],[[63744,63744],\"mapped\",[35912]],[[63745,63745],\"mapped\",[26356]],[[63746,63746],\"mapped\",[36554]],[[63747,63747],\"mapped\",[36040]],[[63748,63748],\"mapped\",[28369]],[[63749,63749],\"mapped\",[20018]],[[63750,63750],\"mapped\",[21477]],[[63751,63752],\"mapped\",[40860]],[[63753,63753],\"mapped\",[22865]],[[63754,63754],\"mapped\",[37329]],[[63755,63755],\"mapped\",[21895]],[[63756,63756],\"mapped\",[22856]],[[63757,63757],\"mapped\",[25078]],[[63758,63758],\"mapped\",[30313]],[[63759,63759],\"mapped\",[32645]],[[63760,63760],\"mapped\",[34367]],[[63761,63761],\"mapped\",[34746]],[[63762,63762],\"mapped\",[35064]],[[63763,63763],\"mapped\",[37007]],[[63764,63764],\"mapped\",[27138]],[[63765,63765],\"mapped\",[27931]],[[63766,63766],\"mapped\",[28889]],[[63767,63767],\"mapped\",[29662]],[[63768,63768],\"mapped\",[33853]],[[63769,63769],\"mapped\",[37226]],[[63770,63770],\"mapped\",[39409]],[[63771,63771],\"mapped\",[20098]],[[63772,63772],\"mapped\",[21365]],[[63773,63773],\"mapped\",[27396]],[[63774,63774],\"mapped\",[29211]],[[63775,63775],\"mapped\",[34349]],[[63776,63776],\"mapped\",[40478]],[[63777,63777],\"mapped\",[23888]],[[63778,63778],\"mapped\",[28651]],[[63779,63779],\"mapped\",[34253]],[[63780,63780],\"mapped\",[35172]],[[63781,63781],\"mapped\",[25289]],[[63782,63782],\"mapped\",[33240]],[[63783,63783],\"mapped\",[34847]],[[63784,63784],\"mapped\",[24266]],[[63785,63785],\"mapped\",[26391]],[[63786,63786],\"mapped\",[28010]],[[63787,63787],\"mapped\",[29436]],[[63788,63788],\"mapped\",[37070]],[[63789,63789],\"mapped\",[20358]],[[63790,63790],\"mapped\",[20919]],[[63791,63791],\"mapped\",[21214]],[[63792,63792],\"mapped\",[25796]],[[63793,63793],\"mapped\",[27347]],[[63794,63794],\"mapped\",[29200]],[[63795,63795],\"mapped\",[30439]],[[63796,63796],\"mapped\",[32769]],[[63797,63797],\"mapped\",[34310]],[[63798,63798],\"mapped\",[34396]],[[63799,63799],\"mapped\",[36335]],[[63800,63800],\"mapped\",[38706]],[[63801,63801],\"mapped\",[39791]],[[63802,63802],\"mapped\",[40442]],[[63803,63803],\"mapped\",[30860]],[[63804,63804],\"mapped\",[31103]],[[63805,63805],\"mapped\",[32160]],[[63806,63806],\"mapped\",[33737]],[[63807,63807],\"mapped\",[37636]],[[63808,63808],\"mapped\",[40575]],[[63809,63809],\"mapped\",[35542]],[[63810,63810],\"mapped\",[22751]],[[63811,63811],\"mapped\",[24324]],[[63812,63812],\"mapped\",[31840]],[[63813,63813],\"mapped\",[32894]],[[63814,63814],\"mapped\",[29282]],[[63815,63815],\"mapped\",[30922]],[[63816,63816],\"mapped\",[36034]],[[63817,63817],\"mapped\",[38647]],[[63818,63818],\"mapped\",[22744]],[[63819,63819],\"mapped\",[23650]],[[63820,63820],\"mapped\",[27155]],[[63821,63821],\"mapped\",[28122]],[[63822,63822],\"mapped\",[28431]],[[63823,63823],\"mapped\",[32047]],[[63824,63824],\"mapped\",[32311]],[[63825,63825],\"mapped\",[38475]],[[63826,63826],\"mapped\",[21202]],[[63827,63827],\"mapped\",[32907]],[[63828,63828],\"mapped\",[20956]],[[63829,63829],\"mapped\",[20940]],[[63830,63830],\"mapped\",[31260]],[[63831,63831],\"mapped\",[32190]],[[63832,63832],\"mapped\",[33777]],[[63833,63833],\"mapped\",[38517]],[[63834,63834],\"mapped\",[35712]],[[63835,63835],\"mapped\",[25295]],[[63836,63836],\"mapped\",[27138]],[[63837,63837],\"mapped\",[35582]],[[63838,63838],\"mapped\",[20025]],[[63839,63839],\"mapped\",[23527]],[[63840,63840],\"mapped\",[24594]],[[63841,63841],\"mapped\",[29575]],[[63842,63842],\"mapped\",[30064]],[[63843,63843],\"mapped\",[21271]],[[63844,63844],\"mapped\",[30971]],[[63845,63845],\"mapped\",[20415]],[[63846,63846],\"mapped\",[24489]],[[63847,63847],\"mapped\",[19981]],[[63848,63848],\"mapped\",[27852]],[[63849,63849],\"mapped\",[25976]],[[63850,63850],\"mapped\",[32034]],[[63851,63851],\"mapped\",[21443]],[[63852,63852],\"mapped\",[22622]],[[63853,63853],\"mapped\",[30465]],[[63854,63854],\"mapped\",[33865]],[[63855,63855],\"mapped\",[35498]],[[63856,63856],\"mapped\",[27578]],[[63857,63857],\"mapped\",[36784]],[[63858,63858],\"mapped\",[27784]],[[63859,63859],\"mapped\",[25342]],[[63860,63860],\"mapped\",[33509]],[[63861,63861],\"mapped\",[25504]],[[63862,63862],\"mapped\",[30053]],[[63863,63863],\"mapped\",[20142]],[[63864,63864],\"mapped\",[20841]],[[63865,63865],\"mapped\",[20937]],[[63866,63866],\"mapped\",[26753]],[[63867,63867],\"mapped\",[31975]],[[63868,63868],\"mapped\",[33391]],[[63869,63869],\"mapped\",[35538]],[[63870,63870],\"mapped\",[37327]],[[63871,63871],\"mapped\",[21237]],[[63872,63872],\"mapped\",[21570]],[[63873,63873],\"mapped\",[22899]],[[63874,63874],\"mapped\",[24300]],[[63875,63875],\"mapped\",[26053]],[[63876,63876],\"mapped\",[28670]],[[63877,63877],\"mapped\",[31018]],[[63878,63878],\"mapped\",[38317]],[[63879,63879],\"mapped\",[39530]],[[63880,63880],\"mapped\",[40599]],[[63881,63881],\"mapped\",[40654]],[[63882,63882],\"mapped\",[21147]],[[63883,63883],\"mapped\",[26310]],[[63884,63884],\"mapped\",[27511]],[[63885,63885],\"mapped\",[36706]],[[63886,63886],\"mapped\",[24180]],[[63887,63887],\"mapped\",[24976]],[[63888,63888],\"mapped\",[25088]],[[63889,63889],\"mapped\",[25754]],[[63890,63890],\"mapped\",[28451]],[[63891,63891],\"mapped\",[29001]],[[63892,63892],\"mapped\",[29833]],[[63893,63893],\"mapped\",[31178]],[[63894,63894],\"mapped\",[32244]],[[63895,63895],\"mapped\",[32879]],[[63896,63896],\"mapped\",[36646]],[[63897,63897],\"mapped\",[34030]],[[63898,63898],\"mapped\",[36899]],[[63899,63899],\"mapped\",[37706]],[[63900,63900],\"mapped\",[21015]],[[63901,63901],\"mapped\",[21155]],[[63902,63902],\"mapped\",[21693]],[[63903,63903],\"mapped\",[28872]],[[63904,63904],\"mapped\",[35010]],[[63905,63905],\"mapped\",[35498]],[[63906,63906],\"mapped\",[24265]],[[63907,63907],\"mapped\",[24565]],[[63908,63908],\"mapped\",[25467]],[[63909,63909],\"mapped\",[27566]],[[63910,63910],\"mapped\",[31806]],[[63911,63911],\"mapped\",[29557]],[[63912,63912],\"mapped\",[20196]],[[63913,63913],\"mapped\",[22265]],[[63914,63914],\"mapped\",[23527]],[[63915,63915],\"mapped\",[23994]],[[63916,63916],\"mapped\",[24604]],[[63917,63917],\"mapped\",[29618]],[[63918,63918],\"mapped\",[29801]],[[63919,63919],\"mapped\",[32666]],[[63920,63920],\"mapped\",[32838]],[[63921,63921],\"mapped\",[37428]],[[63922,63922],\"mapped\",[38646]],[[63923,63923],\"mapped\",[38728]],[[63924,63924],\"mapped\",[38936]],[[63925,63925],\"mapped\",[20363]],[[63926,63926],\"mapped\",[31150]],[[63927,63927],\"mapped\",[37300]],[[63928,63928],\"mapped\",[38584]],[[63929,63929],\"mapped\",[24801]],[[63930,63930],\"mapped\",[20102]],[[63931,63931],\"mapped\",[20698]],[[63932,63932],\"mapped\",[23534]],[[63933,63933],\"mapped\",[23615]],[[63934,63934],\"mapped\",[26009]],[[63935,63935],\"mapped\",[27138]],[[63936,63936],\"mapped\",[29134]],[[63937,63937],\"mapped\",[30274]],[[63938,63938],\"mapped\",[34044]],[[63939,63939],\"mapped\",[36988]],[[63940,63940],\"mapped\",[40845]],[[63941,63941],\"mapped\",[26248]],[[63942,63942],\"mapped\",[38446]],[[63943,63943],\"mapped\",[21129]],[[63944,63944],\"mapped\",[26491]],[[63945,63945],\"mapped\",[26611]],[[63946,63946],\"mapped\",[27969]],[[63947,63947],\"mapped\",[28316]],[[63948,63948],\"mapped\",[29705]],[[63949,63949],\"mapped\",[30041]],[[63950,63950],\"mapped\",[30827]],[[63951,63951],\"mapped\",[32016]],[[63952,63952],\"mapped\",[39006]],[[63953,63953],\"mapped\",[20845]],[[63954,63954],\"mapped\",[25134]],[[63955,63955],\"mapped\",[38520]],[[63956,63956],\"mapped\",[20523]],[[63957,63957],\"mapped\",[23833]],[[63958,63958],\"mapped\",[28138]],[[63959,63959],\"mapped\",[36650]],[[63960,63960],\"mapped\",[24459]],[[63961,63961],\"mapped\",[24900]],[[63962,63962],\"mapped\",[26647]],[[63963,63963],\"mapped\",[29575]],[[63964,63964],\"mapped\",[38534]],[[63965,63965],\"mapped\",[21033]],[[63966,63966],\"mapped\",[21519]],[[63967,63967],\"mapped\",[23653]],[[63968,63968],\"mapped\",[26131]],[[63969,63969],\"mapped\",[26446]],[[63970,63970],\"mapped\",[26792]],[[63971,63971],\"mapped\",[27877]],[[63972,63972],\"mapped\",[29702]],[[63973,63973],\"mapped\",[30178]],[[63974,63974],\"mapped\",[32633]],[[63975,63975],\"mapped\",[35023]],[[63976,63976],\"mapped\",[35041]],[[63977,63977],\"mapped\",[37324]],[[63978,63978],\"mapped\",[38626]],[[63979,63979],\"mapped\",[21311]],[[63980,63980],\"mapped\",[28346]],[[63981,63981],\"mapped\",[21533]],[[63982,63982],\"mapped\",[29136]],[[63983,63983],\"mapped\",[29848]],[[63984,63984],\"mapped\",[34298]],[[63985,63985],\"mapped\",[38563]],[[63986,63986],\"mapped\",[40023]],[[63987,63987],\"mapped\",[40607]],[[63988,63988],\"mapped\",[26519]],[[63989,63989],\"mapped\",[28107]],[[63990,63990],\"mapped\",[33256]],[[63991,63991],\"mapped\",[31435]],[[63992,63992],\"mapped\",[31520]],[[63993,63993],\"mapped\",[31890]],[[63994,63994],\"mapped\",[29376]],[[63995,63995],\"mapped\",[28825]],[[63996,63996],\"mapped\",[35672]],[[63997,63997],\"mapped\",[20160]],[[63998,63998],\"mapped\",[33590]],[[63999,63999],\"mapped\",[21050]],[[64000,64000],\"mapped\",[20999]],[[64001,64001],\"mapped\",[24230]],[[64002,64002],\"mapped\",[25299]],[[64003,64003],\"mapped\",[31958]],[[64004,64004],\"mapped\",[23429]],[[64005,64005],\"mapped\",[27934]],[[64006,64006],\"mapped\",[26292]],[[64007,64007],\"mapped\",[36667]],[[64008,64008],\"mapped\",[34892]],[[64009,64009],\"mapped\",[38477]],[[64010,64010],\"mapped\",[35211]],[[64011,64011],\"mapped\",[24275]],[[64012,64012],\"mapped\",[20800]],[[64013,64013],\"mapped\",[21952]],[[64014,64015],\"valid\"],[[64016,64016],\"mapped\",[22618]],[[64017,64017],\"valid\"],[[64018,64018],\"mapped\",[26228]],[[64019,64020],\"valid\"],[[64021,64021],\"mapped\",[20958]],[[64022,64022],\"mapped\",[29482]],[[64023,64023],\"mapped\",[30410]],[[64024,64024],\"mapped\",[31036]],[[64025,64025],\"mapped\",[31070]],[[64026,64026],\"mapped\",[31077]],[[64027,64027],\"mapped\",[31119]],[[64028,64028],\"mapped\",[38742]],[[64029,64029],\"mapped\",[31934]],[[64030,64030],\"mapped\",[32701]],[[64031,64031],\"valid\"],[[64032,64032],\"mapped\",[34322]],[[64033,64033],\"valid\"],[[64034,64034],\"mapped\",[35576]],[[64035,64036],\"valid\"],[[64037,64037],\"mapped\",[36920]],[[64038,64038],\"mapped\",[37117]],[[64039,64041],\"valid\"],[[64042,64042],\"mapped\",[39151]],[[64043,64043],\"mapped\",[39164]],[[64044,64044],\"mapped\",[39208]],[[64045,64045],\"mapped\",[40372]],[[64046,64046],\"mapped\",[37086]],[[64047,64047],\"mapped\",[38583]],[[64048,64048],\"mapped\",[20398]],[[64049,64049],\"mapped\",[20711]],[[64050,64050],\"mapped\",[20813]],[[64051,64051],\"mapped\",[21193]],[[64052,64052],\"mapped\",[21220]],[[64053,64053],\"mapped\",[21329]],[[64054,64054],\"mapped\",[21917]],[[64055,64055],\"mapped\",[22022]],[[64056,64056],\"mapped\",[22120]],[[64057,64057],\"mapped\",[22592]],[[64058,64058],\"mapped\",[22696]],[[64059,64059],\"mapped\",[23652]],[[64060,64060],\"mapped\",[23662]],[[64061,64061],\"mapped\",[24724]],[[64062,64062],\"mapped\",[24936]],[[64063,64063],\"mapped\",[24974]],[[64064,64064],\"mapped\",[25074]],[[64065,64065],\"mapped\",[25935]],[[64066,64066],\"mapped\",[26082]],[[64067,64067],\"mapped\",[26257]],[[64068,64068],\"mapped\",[26757]],[[64069,64069],\"mapped\",[28023]],[[64070,64070],\"mapped\",[28186]],[[64071,64071],\"mapped\",[28450]],[[64072,64072],\"mapped\",[29038]],[[64073,64073],\"mapped\",[29227]],[[64074,64074],\"mapped\",[29730]],[[64075,64075],\"mapped\",[30865]],[[64076,64076],\"mapped\",[31038]],[[64077,64077],\"mapped\",[31049]],[[64078,64078],\"mapped\",[31048]],[[64079,64079],\"mapped\",[31056]],[[64080,64080],\"mapped\",[31062]],[[64081,64081],\"mapped\",[31069]],[[64082,64082],\"mapped\",[31117]],[[64083,64083],\"mapped\",[31118]],[[64084,64084],\"mapped\",[31296]],[[64085,64085],\"mapped\",[31361]],[[64086,64086],\"mapped\",[31680]],[[64087,64087],\"mapped\",[32244]],[[64088,64088],\"mapped\",[32265]],[[64089,64089],\"mapped\",[32321]],[[64090,64090],\"mapped\",[32626]],[[64091,64091],\"mapped\",[32773]],[[64092,64092],\"mapped\",[33261]],[[64093,64094],\"mapped\",[33401]],[[64095,64095],\"mapped\",[33879]],[[64096,64096],\"mapped\",[35088]],[[64097,64097],\"mapped\",[35222]],[[64098,64098],\"mapped\",[35585]],[[64099,64099],\"mapped\",[35641]],[[64100,64100],\"mapped\",[36051]],[[64101,64101],\"mapped\",[36104]],[[64102,64102],\"mapped\",[36790]],[[64103,64103],\"mapped\",[36920]],[[64104,64104],\"mapped\",[38627]],[[64105,64105],\"mapped\",[38911]],[[64106,64106],\"mapped\",[38971]],[[64107,64107],\"mapped\",[24693]],[[64108,64108],\"mapped\",[148206]],[[64109,64109],\"mapped\",[33304]],[[64110,64111],\"disallowed\"],[[64112,64112],\"mapped\",[20006]],[[64113,64113],\"mapped\",[20917]],[[64114,64114],\"mapped\",[20840]],[[64115,64115],\"mapped\",[20352]],[[64116,64116],\"mapped\",[20805]],[[64117,64117],\"mapped\",[20864]],[[64118,64118],\"mapped\",[21191]],[[64119,64119],\"mapped\",[21242]],[[64120,64120],\"mapped\",[21917]],[[64121,64121],\"mapped\",[21845]],[[64122,64122],\"mapped\",[21913]],[[64123,64123],\"mapped\",[21986]],[[64124,64124],\"mapped\",[22618]],[[64125,64125],\"mapped\",[22707]],[[64126,64126],\"mapped\",[22852]],[[64127,64127],\"mapped\",[22868]],[[64128,64128],\"mapped\",[23138]],[[64129,64129],\"mapped\",[23336]],[[64130,64130],\"mapped\",[24274]],[[64131,64131],\"mapped\",[24281]],[[64132,64132],\"mapped\",[24425]],[[64133,64133],\"mapped\",[24493]],[[64134,64134],\"mapped\",[24792]],[[64135,64135],\"mapped\",[24910]],[[64136,64136],\"mapped\",[24840]],[[64137,64137],\"mapped\",[24974]],[[64138,64138],\"mapped\",[24928]],[[64139,64139],\"mapped\",[25074]],[[64140,64140],\"mapped\",[25140]],[[64141,64141],\"mapped\",[25540]],[[64142,64142],\"mapped\",[25628]],[[64143,64143],\"mapped\",[25682]],[[64144,64144],\"mapped\",[25942]],[[64145,64145],\"mapped\",[26228]],[[64146,64146],\"mapped\",[26391]],[[64147,64147],\"mapped\",[26395]],[[64148,64148],\"mapped\",[26454]],[[64149,64149],\"mapped\",[27513]],[[64150,64150],\"mapped\",[27578]],[[64151,64151],\"mapped\",[27969]],[[64152,64152],\"mapped\",[28379]],[[64153,64153],\"mapped\",[28363]],[[64154,64154],\"mapped\",[28450]],[[64155,64155],\"mapped\",[28702]],[[64156,64156],\"mapped\",[29038]],[[64157,64157],\"mapped\",[30631]],[[64158,64158],\"mapped\",[29237]],[[64159,64159],\"mapped\",[29359]],[[64160,64160],\"mapped\",[29482]],[[64161,64161],\"mapped\",[29809]],[[64162,64162],\"mapped\",[29958]],[[64163,64163],\"mapped\",[30011]],[[64164,64164],\"mapped\",[30237]],[[64165,64165],\"mapped\",[30239]],[[64166,64166],\"mapped\",[30410]],[[64167,64167],\"mapped\",[30427]],[[64168,64168],\"mapped\",[30452]],[[64169,64169],\"mapped\",[30538]],[[64170,64170],\"mapped\",[30528]],[[64171,64171],\"mapped\",[30924]],[[64172,64172],\"mapped\",[31409]],[[64173,64173],\"mapped\",[31680]],[[64174,64174],\"mapped\",[31867]],[[64175,64175],\"mapped\",[32091]],[[64176,64176],\"mapped\",[32244]],[[64177,64177],\"mapped\",[32574]],[[64178,64178],\"mapped\",[32773]],[[64179,64179],\"mapped\",[33618]],[[64180,64180],\"mapped\",[33775]],[[64181,64181],\"mapped\",[34681]],[[64182,64182],\"mapped\",[35137]],[[64183,64183],\"mapped\",[35206]],[[64184,64184],\"mapped\",[35222]],[[64185,64185],\"mapped\",[35519]],[[64186,64186],\"mapped\",[35576]],[[64187,64187],\"mapped\",[35531]],[[64188,64188],\"mapped\",[35585]],[[64189,64189],\"mapped\",[35582]],[[64190,64190],\"mapped\",[35565]],[[64191,64191],\"mapped\",[35641]],[[64192,64192],\"mapped\",[35722]],[[64193,64193],\"mapped\",[36104]],[[64194,64194],\"mapped\",[36664]],[[64195,64195],\"mapped\",[36978]],[[64196,64196],\"mapped\",[37273]],[[64197,64197],\"mapped\",[37494]],[[64198,64198],\"mapped\",[38524]],[[64199,64199],\"mapped\",[38627]],[[64200,64200],\"mapped\",[38742]],[[64201,64201],\"mapped\",[38875]],[[64202,64202],\"mapped\",[38911]],[[64203,64203],\"mapped\",[38923]],[[64204,64204],\"mapped\",[38971]],[[64205,64205],\"mapped\",[39698]],[[64206,64206],\"mapped\",[40860]],[[64207,64207],\"mapped\",[141386]],[[64208,64208],\"mapped\",[141380]],[[64209,64209],\"mapped\",[144341]],[[64210,64210],\"mapped\",[15261]],[[64211,64211],\"mapped\",[16408]],[[64212,64212],\"mapped\",[16441]],[[64213,64213],\"mapped\",[152137]],[[64214,64214],\"mapped\",[154832]],[[64215,64215],\"mapped\",[163539]],[[64216,64216],\"mapped\",[40771]],[[64217,64217],\"mapped\",[40846]],[[64218,64255],\"disallowed\"],[[64256,64256],\"mapped\",[102,102]],[[64257,64257],\"mapped\",[102,105]],[[64258,64258],\"mapped\",[102,108]],[[64259,64259],\"mapped\",[102,102,105]],[[64260,64260],\"mapped\",[102,102,108]],[[64261,64262],\"mapped\",[115,116]],[[64263,64274],\"disallowed\"],[[64275,64275],\"mapped\",[1396,1398]],[[64276,64276],\"mapped\",[1396,1381]],[[64277,64277],\"mapped\",[1396,1387]],[[64278,64278],\"mapped\",[1406,1398]],[[64279,64279],\"mapped\",[1396,1389]],[[64280,64284],\"disallowed\"],[[64285,64285],\"mapped\",[1497,1460]],[[64286,64286],\"valid\"],[[64287,64287],\"mapped\",[1522,1463]],[[64288,64288],\"mapped\",[1506]],[[64289,64289],\"mapped\",[1488]],[[64290,64290],\"mapped\",[1491]],[[64291,64291],\"mapped\",[1492]],[[64292,64292],\"mapped\",[1499]],[[64293,64293],\"mapped\",[1500]],[[64294,64294],\"mapped\",[1501]],[[64295,64295],\"mapped\",[1512]],[[64296,64296],\"mapped\",[1514]],[[64297,64297],\"disallowed_STD3_mapped\",[43]],[[64298,64298],\"mapped\",[1513,1473]],[[64299,64299],\"mapped\",[1513,1474]],[[64300,64300],\"mapped\",[1513,1468,1473]],[[64301,64301],\"mapped\",[1513,1468,1474]],[[64302,64302],\"mapped\",[1488,1463]],[[64303,64303],\"mapped\",[1488,1464]],[[64304,64304],\"mapped\",[1488,1468]],[[64305,64305],\"mapped\",[1489,1468]],[[64306,64306],\"mapped\",[1490,1468]],[[64307,64307],\"mapped\",[1491,1468]],[[64308,64308],\"mapped\",[1492,1468]],[[64309,64309],\"mapped\",[1493,1468]],[[64310,64310],\"mapped\",[1494,1468]],[[64311,64311],\"disallowed\"],[[64312,64312],\"mapped\",[1496,1468]],[[64313,64313],\"mapped\",[1497,1468]],[[64314,64314],\"mapped\",[1498,1468]],[[64315,64315],\"mapped\",[1499,1468]],[[64316,64316],\"mapped\",[1500,1468]],[[64317,64317],\"disallowed\"],[[64318,64318],\"mapped\",[1502,1468]],[[64319,64319],\"disallowed\"],[[64320,64320],\"mapped\",[1504,1468]],[[64321,64321],\"mapped\",[1505,1468]],[[64322,64322],\"disallowed\"],[[64323,64323],\"mapped\",[1507,1468]],[[64324,64324],\"mapped\",[1508,1468]],[[64325,64325],\"disallowed\"],[[64326,64326],\"mapped\",[1510,1468]],[[64327,64327],\"mapped\",[1511,1468]],[[64328,64328],\"mapped\",[1512,1468]],[[64329,64329],\"mapped\",[1513,1468]],[[64330,64330],\"mapped\",[1514,1468]],[[64331,64331],\"mapped\",[1493,1465]],[[64332,64332],\"mapped\",[1489,1471]],[[64333,64333],\"mapped\",[1499,1471]],[[64334,64334],\"mapped\",[1508,1471]],[[64335,64335],\"mapped\",[1488,1500]],[[64336,64337],\"mapped\",[1649]],[[64338,64341],\"mapped\",[1659]],[[64342,64345],\"mapped\",[1662]],[[64346,64349],\"mapped\",[1664]],[[64350,64353],\"mapped\",[1658]],[[64354,64357],\"mapped\",[1663]],[[64358,64361],\"mapped\",[1657]],[[64362,64365],\"mapped\",[1700]],[[64366,64369],\"mapped\",[1702]],[[64370,64373],\"mapped\",[1668]],[[64374,64377],\"mapped\",[1667]],[[64378,64381],\"mapped\",[1670]],[[64382,64385],\"mapped\",[1671]],[[64386,64387],\"mapped\",[1677]],[[64388,64389],\"mapped\",[1676]],[[64390,64391],\"mapped\",[1678]],[[64392,64393],\"mapped\",[1672]],[[64394,64395],\"mapped\",[1688]],[[64396,64397],\"mapped\",[1681]],[[64398,64401],\"mapped\",[1705]],[[64402,64405],\"mapped\",[1711]],[[64406,64409],\"mapped\",[1715]],[[64410,64413],\"mapped\",[1713]],[[64414,64415],\"mapped\",[1722]],[[64416,64419],\"mapped\",[1723]],[[64420,64421],\"mapped\",[1728]],[[64422,64425],\"mapped\",[1729]],[[64426,64429],\"mapped\",[1726]],[[64430,64431],\"mapped\",[1746]],[[64432,64433],\"mapped\",[1747]],[[64434,64449],\"valid\",[],\"NV8\"],[[64450,64466],\"disallowed\"],[[64467,64470],\"mapped\",[1709]],[[64471,64472],\"mapped\",[1735]],[[64473,64474],\"mapped\",[1734]],[[64475,64476],\"mapped\",[1736]],[[64477,64477],\"mapped\",[1735,1652]],[[64478,64479],\"mapped\",[1739]],[[64480,64481],\"mapped\",[1733]],[[64482,64483],\"mapped\",[1737]],[[64484,64487],\"mapped\",[1744]],[[64488,64489],\"mapped\",[1609]],[[64490,64491],\"mapped\",[1574,1575]],[[64492,64493],\"mapped\",[1574,1749]],[[64494,64495],\"mapped\",[1574,1608]],[[64496,64497],\"mapped\",[1574,1735]],[[64498,64499],\"mapped\",[1574,1734]],[[64500,64501],\"mapped\",[1574,1736]],[[64502,64504],\"mapped\",[1574,1744]],[[64505,64507],\"mapped\",[1574,1609]],[[64508,64511],\"mapped\",[1740]],[[64512,64512],\"mapped\",[1574,1580]],[[64513,64513],\"mapped\",[1574,1581]],[[64514,64514],\"mapped\",[1574,1605]],[[64515,64515],\"mapped\",[1574,1609]],[[64516,64516],\"mapped\",[1574,1610]],[[64517,64517],\"mapped\",[1576,1580]],[[64518,64518],\"mapped\",[1576,1581]],[[64519,64519],\"mapped\",[1576,1582]],[[64520,64520],\"mapped\",[1576,1605]],[[64521,64521],\"mapped\",[1576,1609]],[[64522,64522],\"mapped\",[1576,1610]],[[64523,64523],\"mapped\",[1578,1580]],[[64524,64524],\"mapped\",[1578,1581]],[[64525,64525],\"mapped\",[1578,1582]],[[64526,64526],\"mapped\",[1578,1605]],[[64527,64527],\"mapped\",[1578,1609]],[[64528,64528],\"mapped\",[1578,1610]],[[64529,64529],\"mapped\",[1579,1580]],[[64530,64530],\"mapped\",[1579,1605]],[[64531,64531],\"mapped\",[1579,1609]],[[64532,64532],\"mapped\",[1579,1610]],[[64533,64533],\"mapped\",[1580,1581]],[[64534,64534],\"mapped\",[1580,1605]],[[64535,64535],\"mapped\",[1581,1580]],[[64536,64536],\"mapped\",[1581,1605]],[[64537,64537],\"mapped\",[1582,1580]],[[64538,64538],\"mapped\",[1582,1581]],[[64539,64539],\"mapped\",[1582,1605]],[[64540,64540],\"mapped\",[1587,1580]],[[64541,64541],\"mapped\",[1587,1581]],[[64542,64542],\"mapped\",[1587,1582]],[[64543,64543],\"mapped\",[1587,1605]],[[64544,64544],\"mapped\",[1589,1581]],[[64545,64545],\"mapped\",[1589,1605]],[[64546,64546],\"mapped\",[1590,1580]],[[64547,64547],\"mapped\",[1590,1581]],[[64548,64548],\"mapped\",[1590,1582]],[[64549,64549],\"mapped\",[1590,1605]],[[64550,64550],\"mapped\",[1591,1581]],[[64551,64551],\"mapped\",[1591,1605]],[[64552,64552],\"mapped\",[1592,1605]],[[64553,64553],\"mapped\",[1593,1580]],[[64554,64554],\"mapped\",[1593,1605]],[[64555,64555],\"mapped\",[1594,1580]],[[64556,64556],\"mapped\",[1594,1605]],[[64557,64557],\"mapped\",[1601,1580]],[[64558,64558],\"mapped\",[1601,1581]],[[64559,64559],\"mapped\",[1601,1582]],[[64560,64560],\"mapped\",[1601,1605]],[[64561,64561],\"mapped\",[1601,1609]],[[64562,64562],\"mapped\",[1601,1610]],[[64563,64563],\"mapped\",[1602,1581]],[[64564,64564],\"mapped\",[1602,1605]],[[64565,64565],\"mapped\",[1602,1609]],[[64566,64566],\"mapped\",[1602,1610]],[[64567,64567],\"mapped\",[1603,1575]],[[64568,64568],\"mapped\",[1603,1580]],[[64569,64569],\"mapped\",[1603,1581]],[[64570,64570],\"mapped\",[1603,1582]],[[64571,64571],\"mapped\",[1603,1604]],[[64572,64572],\"mapped\",[1603,1605]],[[64573,64573],\"mapped\",[1603,1609]],[[64574,64574],\"mapped\",[1603,1610]],[[64575,64575],\"mapped\",[1604,1580]],[[64576,64576],\"mapped\",[1604,1581]],[[64577,64577],\"mapped\",[1604,1582]],[[64578,64578],\"mapped\",[1604,1605]],[[64579,64579],\"mapped\",[1604,1609]],[[64580,64580],\"mapped\",[1604,1610]],[[64581,64581],\"mapped\",[1605,1580]],[[64582,64582],\"mapped\",[1605,1581]],[[64583,64583],\"mapped\",[1605,1582]],[[64584,64584],\"mapped\",[1605,1605]],[[64585,64585],\"mapped\",[1605,1609]],[[64586,64586],\"mapped\",[1605,1610]],[[64587,64587],\"mapped\",[1606,1580]],[[64588,64588],\"mapped\",[1606,1581]],[[64589,64589],\"mapped\",[1606,1582]],[[64590,64590],\"mapped\",[1606,1605]],[[64591,64591],\"mapped\",[1606,1609]],[[64592,64592],\"mapped\",[1606,1610]],[[64593,64593],\"mapped\",[1607,1580]],[[64594,64594],\"mapped\",[1607,1605]],[[64595,64595],\"mapped\",[1607,1609]],[[64596,64596],\"mapped\",[1607,1610]],[[64597,64597],\"mapped\",[1610,1580]],[[64598,64598],\"mapped\",[1610,1581]],[[64599,64599],\"mapped\",[1610,1582]],[[64600,64600],\"mapped\",[1610,1605]],[[64601,64601],\"mapped\",[1610,1609]],[[64602,64602],\"mapped\",[1610,1610]],[[64603,64603],\"mapped\",[1584,1648]],[[64604,64604],\"mapped\",[1585,1648]],[[64605,64605],\"mapped\",[1609,1648]],[[64606,64606],\"disallowed_STD3_mapped\",[32,1612,1617]],[[64607,64607],\"disallowed_STD3_mapped\",[32,1613,1617]],[[64608,64608],\"disallowed_STD3_mapped\",[32,1614,1617]],[[64609,64609],\"disallowed_STD3_mapped\",[32,1615,1617]],[[64610,64610],\"disallowed_STD3_mapped\",[32,1616,1617]],[[64611,64611],\"disallowed_STD3_mapped\",[32,1617,1648]],[[64612,64612],\"mapped\",[1574,1585]],[[64613,64613],\"mapped\",[1574,1586]],[[64614,64614],\"mapped\",[1574,1605]],[[64615,64615],\"mapped\",[1574,1606]],[[64616,64616],\"mapped\",[1574,1609]],[[64617,64617],\"mapped\",[1574,1610]],[[64618,64618],\"mapped\",[1576,1585]],[[64619,64619],\"mapped\",[1576,1586]],[[64620,64620],\"mapped\",[1576,1605]],[[64621,64621],\"mapped\",[1576,1606]],[[64622,64622],\"mapped\",[1576,1609]],[[64623,64623],\"mapped\",[1576,1610]],[[64624,64624],\"mapped\",[1578,1585]],[[64625,64625],\"mapped\",[1578,1586]],[[64626,64626],\"mapped\",[1578,1605]],[[64627,64627],\"mapped\",[1578,1606]],[[64628,64628],\"mapped\",[1578,1609]],[[64629,64629],\"mapped\",[1578,1610]],[[64630,64630],\"mapped\",[1579,1585]],[[64631,64631],\"mapped\",[1579,1586]],[[64632,64632],\"mapped\",[1579,1605]],[[64633,64633],\"mapped\",[1579,1606]],[[64634,64634],\"mapped\",[1579,1609]],[[64635,64635],\"mapped\",[1579,1610]],[[64636,64636],\"mapped\",[1601,1609]],[[64637,64637],\"mapped\",[1601,1610]],[[64638,64638],\"mapped\",[1602,1609]],[[64639,64639],\"mapped\",[1602,1610]],[[64640,64640],\"mapped\",[1603,1575]],[[64641,64641],\"mapped\",[1603,1604]],[[64642,64642],\"mapped\",[1603,1605]],[[64643,64643],\"mapped\",[1603,1609]],[[64644,64644],\"mapped\",[1603,1610]],[[64645,64645],\"mapped\",[1604,1605]],[[64646,64646],\"mapped\",[1604,1609]],[[64647,64647],\"mapped\",[1604,1610]],[[64648,64648],\"mapped\",[1605,1575]],[[64649,64649],\"mapped\",[1605,1605]],[[64650,64650],\"mapped\",[1606,1585]],[[64651,64651],\"mapped\",[1606,1586]],[[64652,64652],\"mapped\",[1606,1605]],[[64653,64653],\"mapped\",[1606,1606]],[[64654,64654],\"mapped\",[1606,1609]],[[64655,64655],\"mapped\",[1606,1610]],[[64656,64656],\"mapped\",[1609,1648]],[[64657,64657],\"mapped\",[1610,1585]],[[64658,64658],\"mapped\",[1610,1586]],[[64659,64659],\"mapped\",[1610,1605]],[[64660,64660],\"mapped\",[1610,1606]],[[64661,64661],\"mapped\",[1610,1609]],[[64662,64662],\"mapped\",[1610,1610]],[[64663,64663],\"mapped\",[1574,1580]],[[64664,64664],\"mapped\",[1574,1581]],[[64665,64665],\"mapped\",[1574,1582]],[[64666,64666],\"mapped\",[1574,1605]],[[64667,64667],\"mapped\",[1574,1607]],[[64668,64668],\"mapped\",[1576,1580]],[[64669,64669],\"mapped\",[1576,1581]],[[64670,64670],\"mapped\",[1576,1582]],[[64671,64671],\"mapped\",[1576,1605]],[[64672,64672],\"mapped\",[1576,1607]],[[64673,64673],\"mapped\",[1578,1580]],[[64674,64674],\"mapped\",[1578,1581]],[[64675,64675],\"mapped\",[1578,1582]],[[64676,64676],\"mapped\",[1578,1605]],[[64677,64677],\"mapped\",[1578,1607]],[[64678,64678],\"mapped\",[1579,1605]],[[64679,64679],\"mapped\",[1580,1581]],[[64680,64680],\"mapped\",[1580,1605]],[[64681,64681],\"mapped\",[1581,1580]],[[64682,64682],\"mapped\",[1581,1605]],[[64683,64683],\"mapped\",[1582,1580]],[[64684,64684],\"mapped\",[1582,1605]],[[64685,64685],\"mapped\",[1587,1580]],[[64686,64686],\"mapped\",[1587,1581]],[[64687,64687],\"mapped\",[1587,1582]],[[64688,64688],\"mapped\",[1587,1605]],[[64689,64689],\"mapped\",[1589,1581]],[[64690,64690],\"mapped\",[1589,1582]],[[64691,64691],\"mapped\",[1589,1605]],[[64692,64692],\"mapped\",[1590,1580]],[[64693,64693],\"mapped\",[1590,1581]],[[64694,64694],\"mapped\",[1590,1582]],[[64695,64695],\"mapped\",[1590,1605]],[[64696,64696],\"mapped\",[1591,1581]],[[64697,64697],\"mapped\",[1592,1605]],[[64698,64698],\"mapped\",[1593,1580]],[[64699,64699],\"mapped\",[1593,1605]],[[64700,64700],\"mapped\",[1594,1580]],[[64701,64701],\"mapped\",[1594,1605]],[[64702,64702],\"mapped\",[1601,1580]],[[64703,64703],\"mapped\",[1601,1581]],[[64704,64704],\"mapped\",[1601,1582]],[[64705,64705],\"mapped\",[1601,1605]],[[64706,64706],\"mapped\",[1602,1581]],[[64707,64707],\"mapped\",[1602,1605]],[[64708,64708],\"mapped\",[1603,1580]],[[64709,64709],\"mapped\",[1603,1581]],[[64710,64710],\"mapped\",[1603,1582]],[[64711,64711],\"mapped\",[1603,1604]],[[64712,64712],\"mapped\",[1603,1605]],[[64713,64713],\"mapped\",[1604,1580]],[[64714,64714],\"mapped\",[1604,1581]],[[64715,64715],\"mapped\",[1604,1582]],[[64716,64716],\"mapped\",[1604,1605]],[[64717,64717],\"mapped\",[1604,1607]],[[64718,64718],\"mapped\",[1605,1580]],[[64719,64719],\"mapped\",[1605,1581]],[[64720,64720],\"mapped\",[1605,1582]],[[64721,64721],\"mapped\",[1605,1605]],[[64722,64722],\"mapped\",[1606,1580]],[[64723,64723],\"mapped\",[1606,1581]],[[64724,64724],\"mapped\",[1606,1582]],[[64725,64725],\"mapped\",[1606,1605]],[[64726,64726],\"mapped\",[1606,1607]],[[64727,64727],\"mapped\",[1607,1580]],[[64728,64728],\"mapped\",[1607,1605]],[[64729,64729],\"mapped\",[1607,1648]],[[64730,64730],\"mapped\",[1610,1580]],[[64731,64731],\"mapped\",[1610,1581]],[[64732,64732],\"mapped\",[1610,1582]],[[64733,64733],\"mapped\",[1610,1605]],[[64734,64734],\"mapped\",[1610,1607]],[[64735,64735],\"mapped\",[1574,1605]],[[64736,64736],\"mapped\",[1574,1607]],[[64737,64737],\"mapped\",[1576,1605]],[[64738,64738],\"mapped\",[1576,1607]],[[64739,64739],\"mapped\",[1578,1605]],[[64740,64740],\"mapped\",[1578,1607]],[[64741,64741],\"mapped\",[1579,1605]],[[64742,64742],\"mapped\",[1579,1607]],[[64743,64743],\"mapped\",[1587,1605]],[[64744,64744],\"mapped\",[1587,1607]],[[64745,64745],\"mapped\",[1588,1605]],[[64746,64746],\"mapped\",[1588,1607]],[[64747,64747],\"mapped\",[1603,1604]],[[64748,64748],\"mapped\",[1603,1605]],[[64749,64749],\"mapped\",[1604,1605]],[[64750,64750],\"mapped\",[1606,1605]],[[64751,64751],\"mapped\",[1606,1607]],[[64752,64752],\"mapped\",[1610,1605]],[[64753,64753],\"mapped\",[1610,1607]],[[64754,64754],\"mapped\",[1600,1614,1617]],[[64755,64755],\"mapped\",[1600,1615,1617]],[[64756,64756],\"mapped\",[1600,1616,1617]],[[64757,64757],\"mapped\",[1591,1609]],[[64758,64758],\"mapped\",[1591,1610]],[[64759,64759],\"mapped\",[1593,1609]],[[64760,64760],\"mapped\",[1593,1610]],[[64761,64761],\"mapped\",[1594,1609]],[[64762,64762],\"mapped\",[1594,1610]],[[64763,64763],\"mapped\",[1587,1609]],[[64764,64764],\"mapped\",[1587,1610]],[[64765,64765],\"mapped\",[1588,1609]],[[64766,64766],\"mapped\",[1588,1610]],[[64767,64767],\"mapped\",[1581,1609]],[[64768,64768],\"mapped\",[1581,1610]],[[64769,64769],\"mapped\",[1580,1609]],[[64770,64770],\"mapped\",[1580,1610]],[[64771,64771],\"mapped\",[1582,1609]],[[64772,64772],\"mapped\",[1582,1610]],[[64773,64773],\"mapped\",[1589,1609]],[[64774,64774],\"mapped\",[1589,1610]],[[64775,64775],\"mapped\",[1590,1609]],[[64776,64776],\"mapped\",[1590,1610]],[[64777,64777],\"mapped\",[1588,1580]],[[64778,64778],\"mapped\",[1588,1581]],[[64779,64779],\"mapped\",[1588,1582]],[[64780,64780],\"mapped\",[1588,1605]],[[64781,64781],\"mapped\",[1588,1585]],[[64782,64782],\"mapped\",[1587,1585]],[[64783,64783],\"mapped\",[1589,1585]],[[64784,64784],\"mapped\",[1590,1585]],[[64785,64785],\"mapped\",[1591,1609]],[[64786,64786],\"mapped\",[1591,1610]],[[64787,64787],\"mapped\",[1593,1609]],[[64788,64788],\"mapped\",[1593,1610]],[[64789,64789],\"mapped\",[1594,1609]],[[64790,64790],\"mapped\",[1594,1610]],[[64791,64791],\"mapped\",[1587,1609]],[[64792,64792],\"mapped\",[1587,1610]],[[64793,64793],\"mapped\",[1588,1609]],[[64794,64794],\"mapped\",[1588,1610]],[[64795,64795],\"mapped\",[1581,1609]],[[64796,64796],\"mapped\",[1581,1610]],[[64797,64797],\"mapped\",[1580,1609]],[[64798,64798],\"mapped\",[1580,1610]],[[64799,64799],\"mapped\",[1582,1609]],[[64800,64800],\"mapped\",[1582,1610]],[[64801,64801],\"mapped\",[1589,1609]],[[64802,64802],\"mapped\",[1589,1610]],[[64803,64803],\"mapped\",[1590,1609]],[[64804,64804],\"mapped\",[1590,1610]],[[64805,64805],\"mapped\",[1588,1580]],[[64806,64806],\"mapped\",[1588,1581]],[[64807,64807],\"mapped\",[1588,1582]],[[64808,64808],\"mapped\",[1588,1605]],[[64809,64809],\"mapped\",[1588,1585]],[[64810,64810],\"mapped\",[1587,1585]],[[64811,64811],\"mapped\",[1589,1585]],[[64812,64812],\"mapped\",[1590,1585]],[[64813,64813],\"mapped\",[1588,1580]],[[64814,64814],\"mapped\",[1588,1581]],[[64815,64815],\"mapped\",[1588,1582]],[[64816,64816],\"mapped\",[1588,1605]],[[64817,64817],\"mapped\",[1587,1607]],[[64818,64818],\"mapped\",[1588,1607]],[[64819,64819],\"mapped\",[1591,1605]],[[64820,64820],\"mapped\",[1587,1580]],[[64821,64821],\"mapped\",[1587,1581]],[[64822,64822],\"mapped\",[1587,1582]],[[64823,64823],\"mapped\",[1588,1580]],[[64824,64824],\"mapped\",[1588,1581]],[[64825,64825],\"mapped\",[1588,1582]],[[64826,64826],\"mapped\",[1591,1605]],[[64827,64827],\"mapped\",[1592,1605]],[[64828,64829],\"mapped\",[1575,1611]],[[64830,64831],\"valid\",[],\"NV8\"],[[64832,64847],\"disallowed\"],[[64848,64848],\"mapped\",[1578,1580,1605]],[[64849,64850],\"mapped\",[1578,1581,1580]],[[64851,64851],\"mapped\",[1578,1581,1605]],[[64852,64852],\"mapped\",[1578,1582,1605]],[[64853,64853],\"mapped\",[1578,1605,1580]],[[64854,64854],\"mapped\",[1578,1605,1581]],[[64855,64855],\"mapped\",[1578,1605,1582]],[[64856,64857],\"mapped\",[1580,1605,1581]],[[64858,64858],\"mapped\",[1581,1605,1610]],[[64859,64859],\"mapped\",[1581,1605,1609]],[[64860,64860],\"mapped\",[1587,1581,1580]],[[64861,64861],\"mapped\",[1587,1580,1581]],[[64862,64862],\"mapped\",[1587,1580,1609]],[[64863,64864],\"mapped\",[1587,1605,1581]],[[64865,64865],\"mapped\",[1587,1605,1580]],[[64866,64867],\"mapped\",[1587,1605,1605]],[[64868,64869],\"mapped\",[1589,1581,1581]],[[64870,64870],\"mapped\",[1589,1605,1605]],[[64871,64872],\"mapped\",[1588,1581,1605]],[[64873,64873],\"mapped\",[1588,1580,1610]],[[64874,64875],\"mapped\",[1588,1605,1582]],[[64876,64877],\"mapped\",[1588,1605,1605]],[[64878,64878],\"mapped\",[1590,1581,1609]],[[64879,64880],\"mapped\",[1590,1582,1605]],[[64881,64882],\"mapped\",[1591,1605,1581]],[[64883,64883],\"mapped\",[1591,1605,1605]],[[64884,64884],\"mapped\",[1591,1605,1610]],[[64885,64885],\"mapped\",[1593,1580,1605]],[[64886,64887],\"mapped\",[1593,1605,1605]],[[64888,64888],\"mapped\",[1593,1605,1609]],[[64889,64889],\"mapped\",[1594,1605,1605]],[[64890,64890],\"mapped\",[1594,1605,1610]],[[64891,64891],\"mapped\",[1594,1605,1609]],[[64892,64893],\"mapped\",[1601,1582,1605]],[[64894,64894],\"mapped\",[1602,1605,1581]],[[64895,64895],\"mapped\",[1602,1605,1605]],[[64896,64896],\"mapped\",[1604,1581,1605]],[[64897,64897],\"mapped\",[1604,1581,1610]],[[64898,64898],\"mapped\",[1604,1581,1609]],[[64899,64900],\"mapped\",[1604,1580,1580]],[[64901,64902],\"mapped\",[1604,1582,1605]],[[64903,64904],\"mapped\",[1604,1605,1581]],[[64905,64905],\"mapped\",[1605,1581,1580]],[[64906,64906],\"mapped\",[1605,1581,1605]],[[64907,64907],\"mapped\",[1605,1581,1610]],[[64908,64908],\"mapped\",[1605,1580,1581]],[[64909,64909],\"mapped\",[1605,1580,1605]],[[64910,64910],\"mapped\",[1605,1582,1580]],[[64911,64911],\"mapped\",[1605,1582,1605]],[[64912,64913],\"disallowed\"],[[64914,64914],\"mapped\",[1605,1580,1582]],[[64915,64915],\"mapped\",[1607,1605,1580]],[[64916,64916],\"mapped\",[1607,1605,1605]],[[64917,64917],\"mapped\",[1606,1581,1605]],[[64918,64918],\"mapped\",[1606,1581,1609]],[[64919,64920],\"mapped\",[1606,1580,1605]],[[64921,64921],\"mapped\",[1606,1580,1609]],[[64922,64922],\"mapped\",[1606,1605,1610]],[[64923,64923],\"mapped\",[1606,1605,1609]],[[64924,64925],\"mapped\",[1610,1605,1605]],[[64926,64926],\"mapped\",[1576,1582,1610]],[[64927,64927],\"mapped\",[1578,1580,1610]],[[64928,64928],\"mapped\",[1578,1580,1609]],[[64929,64929],\"mapped\",[1578,1582,1610]],[[64930,64930],\"mapped\",[1578,1582,1609]],[[64931,64931],\"mapped\",[1578,1605,1610]],[[64932,64932],\"mapped\",[1578,1605,1609]],[[64933,64933],\"mapped\",[1580,1605,1610]],[[64934,64934],\"mapped\",[1580,1581,1609]],[[64935,64935],\"mapped\",[1580,1605,1609]],[[64936,64936],\"mapped\",[1587,1582,1609]],[[64937,64937],\"mapped\",[1589,1581,1610]],[[64938,64938],\"mapped\",[1588,1581,1610]],[[64939,64939],\"mapped\",[1590,1581,1610]],[[64940,64940],\"mapped\",[1604,1580,1610]],[[64941,64941],\"mapped\",[1604,1605,1610]],[[64942,64942],\"mapped\",[1610,1581,1610]],[[64943,64943],\"mapped\",[1610,1580,1610]],[[64944,64944],\"mapped\",[1610,1605,1610]],[[64945,64945],\"mapped\",[1605,1605,1610]],[[64946,64946],\"mapped\",[1602,1605,1610]],[[64947,64947],\"mapped\",[1606,1581,1610]],[[64948,64948],\"mapped\",[1602,1605,1581]],[[64949,64949],\"mapped\",[1604,1581,1605]],[[64950,64950],\"mapped\",[1593,1605,1610]],[[64951,64951],\"mapped\",[1603,1605,1610]],[[64952,64952],\"mapped\",[1606,1580,1581]],[[64953,64953],\"mapped\",[1605,1582,1610]],[[64954,64954],\"mapped\",[1604,1580,1605]],[[64955,64955],\"mapped\",[1603,1605,1605]],[[64956,64956],\"mapped\",[1604,1580,1605]],[[64957,64957],\"mapped\",[1606,1580,1581]],[[64958,64958],\"mapped\",[1580,1581,1610]],[[64959,64959],\"mapped\",[1581,1580,1610]],[[64960,64960],\"mapped\",[1605,1580,1610]],[[64961,64961],\"mapped\",[1601,1605,1610]],[[64962,64962],\"mapped\",[1576,1581,1610]],[[64963,64963],\"mapped\",[1603,1605,1605]],[[64964,64964],\"mapped\",[1593,1580,1605]],[[64965,64965],\"mapped\",[1589,1605,1605]],[[64966,64966],\"mapped\",[1587,1582,1610]],[[64967,64967],\"mapped\",[1606,1580,1610]],[[64968,64975],\"disallowed\"],[[64976,65007],\"disallowed\"],[[65008,65008],\"mapped\",[1589,1604,1746]],[[65009,65009],\"mapped\",[1602,1604,1746]],[[65010,65010],\"mapped\",[1575,1604,1604,1607]],[[65011,65011],\"mapped\",[1575,1603,1576,1585]],[[65012,65012],\"mapped\",[1605,1581,1605,1583]],[[65013,65013],\"mapped\",[1589,1604,1593,1605]],[[65014,65014],\"mapped\",[1585,1587,1608,1604]],[[65015,65015],\"mapped\",[1593,1604,1610,1607]],[[65016,65016],\"mapped\",[1608,1587,1604,1605]],[[65017,65017],\"mapped\",[1589,1604,1609]],[[65018,65018],\"disallowed_STD3_mapped\",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],\"disallowed_STD3_mapped\",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],\"mapped\",[1585,1740,1575,1604]],[[65021,65021],\"valid\",[],\"NV8\"],[[65022,65023],\"disallowed\"],[[65024,65039],\"ignored\"],[[65040,65040],\"disallowed_STD3_mapped\",[44]],[[65041,65041],\"mapped\",[12289]],[[65042,65042],\"disallowed\"],[[65043,65043],\"disallowed_STD3_mapped\",[58]],[[65044,65044],\"disallowed_STD3_mapped\",[59]],[[65045,65045],\"disallowed_STD3_mapped\",[33]],[[65046,65046],\"disallowed_STD3_mapped\",[63]],[[65047,65047],\"mapped\",[12310]],[[65048,65048],\"mapped\",[12311]],[[65049,65049],\"disallowed\"],[[65050,65055],\"disallowed\"],[[65056,65059],\"valid\"],[[65060,65062],\"valid\"],[[65063,65069],\"valid\"],[[65070,65071],\"valid\"],[[65072,65072],\"disallowed\"],[[65073,65073],\"mapped\",[8212]],[[65074,65074],\"mapped\",[8211]],[[65075,65076],\"disallowed_STD3_mapped\",[95]],[[65077,65077],\"disallowed_STD3_mapped\",[40]],[[65078,65078],\"disallowed_STD3_mapped\",[41]],[[65079,65079],\"disallowed_STD3_mapped\",[123]],[[65080,65080],\"disallowed_STD3_mapped\",[125]],[[65081,65081],\"mapped\",[12308]],[[65082,65082],\"mapped\",[12309]],[[65083,65083],\"mapped\",[12304]],[[65084,65084],\"mapped\",[12305]],[[65085,65085],\"mapped\",[12298]],[[65086,65086],\"mapped\",[12299]],[[65087,65087],\"mapped\",[12296]],[[65088,65088],\"mapped\",[12297]],[[65089,65089],\"mapped\",[12300]],[[65090,65090],\"mapped\",[12301]],[[65091,65091],\"mapped\",[12302]],[[65092,65092],\"mapped\",[12303]],[[65093,65094],\"valid\",[],\"NV8\"],[[65095,65095],\"disallowed_STD3_mapped\",[91]],[[65096,65096],\"disallowed_STD3_mapped\",[93]],[[65097,65100],\"disallowed_STD3_mapped\",[32,773]],[[65101,65103],\"disallowed_STD3_mapped\",[95]],[[65104,65104],\"disallowed_STD3_mapped\",[44]],[[65105,65105],\"mapped\",[12289]],[[65106,65106],\"disallowed\"],[[65107,65107],\"disallowed\"],[[65108,65108],\"disallowed_STD3_mapped\",[59]],[[65109,65109],\"disallowed_STD3_mapped\",[58]],[[65110,65110],\"disallowed_STD3_mapped\",[63]],[[65111,65111],\"disallowed_STD3_mapped\",[33]],[[65112,65112],\"mapped\",[8212]],[[65113,65113],\"disallowed_STD3_mapped\",[40]],[[65114,65114],\"disallowed_STD3_mapped\",[41]],[[65115,65115],\"disallowed_STD3_mapped\",[123]],[[65116,65116],\"disallowed_STD3_mapped\",[125]],[[65117,65117],\"mapped\",[12308]],[[65118,65118],\"mapped\",[12309]],[[65119,65119],\"disallowed_STD3_mapped\",[35]],[[65120,65120],\"disallowed_STD3_mapped\",[38]],[[65121,65121],\"disallowed_STD3_mapped\",[42]],[[65122,65122],\"disallowed_STD3_mapped\",[43]],[[65123,65123],\"mapped\",[45]],[[65124,65124],\"disallowed_STD3_mapped\",[60]],[[65125,65125],\"disallowed_STD3_mapped\",[62]],[[65126,65126],\"disallowed_STD3_mapped\",[61]],[[65127,65127],\"disallowed\"],[[65128,65128],\"disallowed_STD3_mapped\",[92]],[[65129,65129],\"disallowed_STD3_mapped\",[36]],[[65130,65130],\"disallowed_STD3_mapped\",[37]],[[65131,65131],\"disallowed_STD3_mapped\",[64]],[[65132,65135],\"disallowed\"],[[65136,65136],\"disallowed_STD3_mapped\",[32,1611]],[[65137,65137],\"mapped\",[1600,1611]],[[65138,65138],\"disallowed_STD3_mapped\",[32,1612]],[[65139,65139],\"valid\"],[[65140,65140],\"disallowed_STD3_mapped\",[32,1613]],[[65141,65141],\"disallowed\"],[[65142,65142],\"disallowed_STD3_mapped\",[32,1614]],[[65143,65143],\"mapped\",[1600,1614]],[[65144,65144],\"disallowed_STD3_mapped\",[32,1615]],[[65145,65145],\"mapped\",[1600,1615]],[[65146,65146],\"disallowed_STD3_mapped\",[32,1616]],[[65147,65147],\"mapped\",[1600,1616]],[[65148,65148],\"disallowed_STD3_mapped\",[32,1617]],[[65149,65149],\"mapped\",[1600,1617]],[[65150,65150],\"disallowed_STD3_mapped\",[32,1618]],[[65151,65151],\"mapped\",[1600,1618]],[[65152,65152],\"mapped\",[1569]],[[65153,65154],\"mapped\",[1570]],[[65155,65156],\"mapped\",[1571]],[[65157,65158],\"mapped\",[1572]],[[65159,65160],\"mapped\",[1573]],[[65161,65164],\"mapped\",[1574]],[[65165,65166],\"mapped\",[1575]],[[65167,65170],\"mapped\",[1576]],[[65171,65172],\"mapped\",[1577]],[[65173,65176],\"mapped\",[1578]],[[65177,65180],\"mapped\",[1579]],[[65181,65184],\"mapped\",[1580]],[[65185,65188],\"mapped\",[1581]],[[65189,65192],\"mapped\",[1582]],[[65193,65194],\"mapped\",[1583]],[[65195,65196],\"mapped\",[1584]],[[65197,65198],\"mapped\",[1585]],[[65199,65200],\"mapped\",[1586]],[[65201,65204],\"mapped\",[1587]],[[65205,65208],\"mapped\",[1588]],[[65209,65212],\"mapped\",[1589]],[[65213,65216],\"mapped\",[1590]],[[65217,65220],\"mapped\",[1591]],[[65221,65224],\"mapped\",[1592]],[[65225,65228],\"mapped\",[1593]],[[65229,65232],\"mapped\",[1594]],[[65233,65236],\"mapped\",[1601]],[[65237,65240],\"mapped\",[1602]],[[65241,65244],\"mapped\",[1603]],[[65245,65248],\"mapped\",[1604]],[[65249,65252],\"mapped\",[1605]],[[65253,65256],\"mapped\",[1606]],[[65257,65260],\"mapped\",[1607]],[[65261,65262],\"mapped\",[1608]],[[65263,65264],\"mapped\",[1609]],[[65265,65268],\"mapped\",[1610]],[[65269,65270],\"mapped\",[1604,1570]],[[65271,65272],\"mapped\",[1604,1571]],[[65273,65274],\"mapped\",[1604,1573]],[[65275,65276],\"mapped\",[1604,1575]],[[65277,65278],\"disallowed\"],[[65279,65279],\"ignored\"],[[65280,65280],\"disallowed\"],[[65281,65281],\"disallowed_STD3_mapped\",[33]],[[65282,65282],\"disallowed_STD3_mapped\",[34]],[[65283,65283],\"disallowed_STD3_mapped\",[35]],[[65284,65284],\"disallowed_STD3_mapped\",[36]],[[65285,65285],\"disallowed_STD3_mapped\",[37]],[[65286,65286],\"disallowed_STD3_mapped\",[38]],[[65287,65287],\"disallowed_STD3_mapped\",[39]],[[65288,65288],\"disallowed_STD3_mapped\",[40]],[[65289,65289],\"disallowed_STD3_mapped\",[41]],[[65290,65290],\"disallowed_STD3_mapped\",[42]],[[65291,65291],\"disallowed_STD3_mapped\",[43]],[[65292,65292],\"disallowed_STD3_mapped\",[44]],[[65293,65293],\"mapped\",[45]],[[65294,65294],\"mapped\",[46]],[[65295,65295],\"disallowed_STD3_mapped\",[47]],[[65296,65296],\"mapped\",[48]],[[65297,65297],\"mapped\",[49]],[[65298,65298],\"mapped\",[50]],[[65299,65299],\"mapped\",[51]],[[65300,65300],\"mapped\",[52]],[[65301,65301],\"mapped\",[53]],[[65302,65302],\"mapped\",[54]],[[65303,65303],\"mapped\",[55]],[[65304,65304],\"mapped\",[56]],[[65305,65305],\"mapped\",[57]],[[65306,65306],\"disallowed_STD3_mapped\",[58]],[[65307,65307],\"disallowed_STD3_mapped\",[59]],[[65308,65308],\"disallowed_STD3_mapped\",[60]],[[65309,65309],\"disallowed_STD3_mapped\",[61]],[[65310,65310],\"disallowed_STD3_mapped\",[62]],[[65311,65311],\"disallowed_STD3_mapped\",[63]],[[65312,65312],\"disallowed_STD3_mapped\",[64]],[[65313,65313],\"mapped\",[97]],[[65314,65314],\"mapped\",[98]],[[65315,65315],\"mapped\",[99]],[[65316,65316],\"mapped\",[100]],[[65317,65317],\"mapped\",[101]],[[65318,65318],\"mapped\",[102]],[[65319,65319],\"mapped\",[103]],[[65320,65320],\"mapped\",[104]],[[65321,65321],\"mapped\",[105]],[[65322,65322],\"mapped\",[106]],[[65323,65323],\"mapped\",[107]],[[65324,65324],\"mapped\",[108]],[[65325,65325],\"mapped\",[109]],[[65326,65326],\"mapped\",[110]],[[65327,65327],\"mapped\",[111]],[[65328,65328],\"mapped\",[112]],[[65329,65329],\"mapped\",[113]],[[65330,65330],\"mapped\",[114]],[[65331,65331],\"mapped\",[115]],[[65332,65332],\"mapped\",[116]],[[65333,65333],\"mapped\",[117]],[[65334,65334],\"mapped\",[118]],[[65335,65335],\"mapped\",[119]],[[65336,65336],\"mapped\",[120]],[[65337,65337],\"mapped\",[121]],[[65338,65338],\"mapped\",[122]],[[65339,65339],\"disallowed_STD3_mapped\",[91]],[[65340,65340],\"disallowed_STD3_mapped\",[92]],[[65341,65341],\"disallowed_STD3_mapped\",[93]],[[65342,65342],\"disallowed_STD3_mapped\",[94]],[[65343,65343],\"disallowed_STD3_mapped\",[95]],[[65344,65344],\"disallowed_STD3_mapped\",[96]],[[65345,65345],\"mapped\",[97]],[[65346,65346],\"mapped\",[98]],[[65347,65347],\"mapped\",[99]],[[65348,65348],\"mapped\",[100]],[[65349,65349],\"mapped\",[101]],[[65350,65350],\"mapped\",[102]],[[65351,65351],\"mapped\",[103]],[[65352,65352],\"mapped\",[104]],[[65353,65353],\"mapped\",[105]],[[65354,65354],\"mapped\",[106]],[[65355,65355],\"mapped\",[107]],[[65356,65356],\"mapped\",[108]],[[65357,65357],\"mapped\",[109]],[[65358,65358],\"mapped\",[110]],[[65359,65359],\"mapped\",[111]],[[65360,65360],\"mapped\",[112]],[[65361,65361],\"mapped\",[113]],[[65362,65362],\"mapped\",[114]],[[65363,65363],\"mapped\",[115]],[[65364,65364],\"mapped\",[116]],[[65365,65365],\"mapped\",[117]],[[65366,65366],\"mapped\",[118]],[[65367,65367],\"mapped\",[119]],[[65368,65368],\"mapped\",[120]],[[65369,65369],\"mapped\",[121]],[[65370,65370],\"mapped\",[122]],[[65371,65371],\"disallowed_STD3_mapped\",[123]],[[65372,65372],\"disallowed_STD3_mapped\",[124]],[[65373,65373],\"disallowed_STD3_mapped\",[125]],[[65374,65374],\"disallowed_STD3_mapped\",[126]],[[65375,65375],\"mapped\",[10629]],[[65376,65376],\"mapped\",[10630]],[[65377,65377],\"mapped\",[46]],[[65378,65378],\"mapped\",[12300]],[[65379,65379],\"mapped\",[12301]],[[65380,65380],\"mapped\",[12289]],[[65381,65381],\"mapped\",[12539]],[[65382,65382],\"mapped\",[12530]],[[65383,65383],\"mapped\",[12449]],[[65384,65384],\"mapped\",[12451]],[[65385,65385],\"mapped\",[12453]],[[65386,65386],\"mapped\",[12455]],[[65387,65387],\"mapped\",[12457]],[[65388,65388],\"mapped\",[12515]],[[65389,65389],\"mapped\",[12517]],[[65390,65390],\"mapped\",[12519]],[[65391,65391],\"mapped\",[12483]],[[65392,65392],\"mapped\",[12540]],[[65393,65393],\"mapped\",[12450]],[[65394,65394],\"mapped\",[12452]],[[65395,65395],\"mapped\",[12454]],[[65396,65396],\"mapped\",[12456]],[[65397,65397],\"mapped\",[12458]],[[65398,65398],\"mapped\",[12459]],[[65399,65399],\"mapped\",[12461]],[[65400,65400],\"mapped\",[12463]],[[65401,65401],\"mapped\",[12465]],[[65402,65402],\"mapped\",[12467]],[[65403,65403],\"mapped\",[12469]],[[65404,65404],\"mapped\",[12471]],[[65405,65405],\"mapped\",[12473]],[[65406,65406],\"mapped\",[12475]],[[65407,65407],\"mapped\",[12477]],[[65408,65408],\"mapped\",[12479]],[[65409,65409],\"mapped\",[12481]],[[65410,65410],\"mapped\",[12484]],[[65411,65411],\"mapped\",[12486]],[[65412,65412],\"mapped\",[12488]],[[65413,65413],\"mapped\",[12490]],[[65414,65414],\"mapped\",[12491]],[[65415,65415],\"mapped\",[12492]],[[65416,65416],\"mapped\",[12493]],[[65417,65417],\"mapped\",[12494]],[[65418,65418],\"mapped\",[12495]],[[65419,65419],\"mapped\",[12498]],[[65420,65420],\"mapped\",[12501]],[[65421,65421],\"mapped\",[12504]],[[65422,65422],\"mapped\",[12507]],[[65423,65423],\"mapped\",[12510]],[[65424,65424],\"mapped\",[12511]],[[65425,65425],\"mapped\",[12512]],[[65426,65426],\"mapped\",[12513]],[[65427,65427],\"mapped\",[12514]],[[65428,65428],\"mapped\",[12516]],[[65429,65429],\"mapped\",[12518]],[[65430,65430],\"mapped\",[12520]],[[65431,65431],\"mapped\",[12521]],[[65432,65432],\"mapped\",[12522]],[[65433,65433],\"mapped\",[12523]],[[65434,65434],\"mapped\",[12524]],[[65435,65435],\"mapped\",[12525]],[[65436,65436],\"mapped\",[12527]],[[65437,65437],\"mapped\",[12531]],[[65438,65438],\"mapped\",[12441]],[[65439,65439],\"mapped\",[12442]],[[65440,65440],\"disallowed\"],[[65441,65441],\"mapped\",[4352]],[[65442,65442],\"mapped\",[4353]],[[65443,65443],\"mapped\",[4522]],[[65444,65444],\"mapped\",[4354]],[[65445,65445],\"mapped\",[4524]],[[65446,65446],\"mapped\",[4525]],[[65447,65447],\"mapped\",[4355]],[[65448,65448],\"mapped\",[4356]],[[65449,65449],\"mapped\",[4357]],[[65450,65450],\"mapped\",[4528]],[[65451,65451],\"mapped\",[4529]],[[65452,65452],\"mapped\",[4530]],[[65453,65453],\"mapped\",[4531]],[[65454,65454],\"mapped\",[4532]],[[65455,65455],\"mapped\",[4533]],[[65456,65456],\"mapped\",[4378]],[[65457,65457],\"mapped\",[4358]],[[65458,65458],\"mapped\",[4359]],[[65459,65459],\"mapped\",[4360]],[[65460,65460],\"mapped\",[4385]],[[65461,65461],\"mapped\",[4361]],[[65462,65462],\"mapped\",[4362]],[[65463,65463],\"mapped\",[4363]],[[65464,65464],\"mapped\",[4364]],[[65465,65465],\"mapped\",[4365]],[[65466,65466],\"mapped\",[4366]],[[65467,65467],\"mapped\",[4367]],[[65468,65468],\"mapped\",[4368]],[[65469,65469],\"mapped\",[4369]],[[65470,65470],\"mapped\",[4370]],[[65471,65473],\"disallowed\"],[[65474,65474],\"mapped\",[4449]],[[65475,65475],\"mapped\",[4450]],[[65476,65476],\"mapped\",[4451]],[[65477,65477],\"mapped\",[4452]],[[65478,65478],\"mapped\",[4453]],[[65479,65479],\"mapped\",[4454]],[[65480,65481],\"disallowed\"],[[65482,65482],\"mapped\",[4455]],[[65483,65483],\"mapped\",[4456]],[[65484,65484],\"mapped\",[4457]],[[65485,65485],\"mapped\",[4458]],[[65486,65486],\"mapped\",[4459]],[[65487,65487],\"mapped\",[4460]],[[65488,65489],\"disallowed\"],[[65490,65490],\"mapped\",[4461]],[[65491,65491],\"mapped\",[4462]],[[65492,65492],\"mapped\",[4463]],[[65493,65493],\"mapped\",[4464]],[[65494,65494],\"mapped\",[4465]],[[65495,65495],\"mapped\",[4466]],[[65496,65497],\"disallowed\"],[[65498,65498],\"mapped\",[4467]],[[65499,65499],\"mapped\",[4468]],[[65500,65500],\"mapped\",[4469]],[[65501,65503],\"disallowed\"],[[65504,65504],\"mapped\",[162]],[[65505,65505],\"mapped\",[163]],[[65506,65506],\"mapped\",[172]],[[65507,65507],\"disallowed_STD3_mapped\",[32,772]],[[65508,65508],\"mapped\",[166]],[[65509,65509],\"mapped\",[165]],[[65510,65510],\"mapped\",[8361]],[[65511,65511],\"disallowed\"],[[65512,65512],\"mapped\",[9474]],[[65513,65513],\"mapped\",[8592]],[[65514,65514],\"mapped\",[8593]],[[65515,65515],\"mapped\",[8594]],[[65516,65516],\"mapped\",[8595]],[[65517,65517],\"mapped\",[9632]],[[65518,65518],\"mapped\",[9675]],[[65519,65528],\"disallowed\"],[[65529,65531],\"disallowed\"],[[65532,65532],\"disallowed\"],[[65533,65533],\"disallowed\"],[[65534,65535],\"disallowed\"],[[65536,65547],\"valid\"],[[65548,65548],\"disallowed\"],[[65549,65574],\"valid\"],[[65575,65575],\"disallowed\"],[[65576,65594],\"valid\"],[[65595,65595],\"disallowed\"],[[65596,65597],\"valid\"],[[65598,65598],\"disallowed\"],[[65599,65613],\"valid\"],[[65614,65615],\"disallowed\"],[[65616,65629],\"valid\"],[[65630,65663],\"disallowed\"],[[65664,65786],\"valid\"],[[65787,65791],\"disallowed\"],[[65792,65794],\"valid\",[],\"NV8\"],[[65795,65798],\"disallowed\"],[[65799,65843],\"valid\",[],\"NV8\"],[[65844,65846],\"disallowed\"],[[65847,65855],\"valid\",[],\"NV8\"],[[65856,65930],\"valid\",[],\"NV8\"],[[65931,65932],\"valid\",[],\"NV8\"],[[65933,65935],\"disallowed\"],[[65936,65947],\"valid\",[],\"NV8\"],[[65948,65951],\"disallowed\"],[[65952,65952],\"valid\",[],\"NV8\"],[[65953,65999],\"disallowed\"],[[66000,66044],\"valid\",[],\"NV8\"],[[66045,66045],\"valid\"],[[66046,66175],\"disallowed\"],[[66176,66204],\"valid\"],[[66205,66207],\"disallowed\"],[[66208,66256],\"valid\"],[[66257,66271],\"disallowed\"],[[66272,66272],\"valid\"],[[66273,66299],\"valid\",[],\"NV8\"],[[66300,66303],\"disallowed\"],[[66304,66334],\"valid\"],[[66335,66335],\"valid\"],[[66336,66339],\"valid\",[],\"NV8\"],[[66340,66351],\"disallowed\"],[[66352,66368],\"valid\"],[[66369,66369],\"valid\",[],\"NV8\"],[[66370,66377],\"valid\"],[[66378,66378],\"valid\",[],\"NV8\"],[[66379,66383],\"disallowed\"],[[66384,66426],\"valid\"],[[66427,66431],\"disallowed\"],[[66432,66461],\"valid\"],[[66462,66462],\"disallowed\"],[[66463,66463],\"valid\",[],\"NV8\"],[[66464,66499],\"valid\"],[[66500,66503],\"disallowed\"],[[66504,66511],\"valid\"],[[66512,66517],\"valid\",[],\"NV8\"],[[66518,66559],\"disallowed\"],[[66560,66560],\"mapped\",[66600]],[[66561,66561],\"mapped\",[66601]],[[66562,66562],\"mapped\",[66602]],[[66563,66563],\"mapped\",[66603]],[[66564,66564],\"mapped\",[66604]],[[66565,66565],\"mapped\",[66605]],[[66566,66566],\"mapped\",[66606]],[[66567,66567],\"mapped\",[66607]],[[66568,66568],\"mapped\",[66608]],[[66569,66569],\"mapped\",[66609]],[[66570,66570],\"mapped\",[66610]],[[66571,66571],\"mapped\",[66611]],[[66572,66572],\"mapped\",[66612]],[[66573,66573],\"mapped\",[66613]],[[66574,66574],\"mapped\",[66614]],[[66575,66575],\"mapped\",[66615]],[[66576,66576],\"mapped\",[66616]],[[66577,66577],\"mapped\",[66617]],[[66578,66578],\"mapped\",[66618]],[[66579,66579],\"mapped\",[66619]],[[66580,66580],\"mapped\",[66620]],[[66581,66581],\"mapped\",[66621]],[[66582,66582],\"mapped\",[66622]],[[66583,66583],\"mapped\",[66623]],[[66584,66584],\"mapped\",[66624]],[[66585,66585],\"mapped\",[66625]],[[66586,66586],\"mapped\",[66626]],[[66587,66587],\"mapped\",[66627]],[[66588,66588],\"mapped\",[66628]],[[66589,66589],\"mapped\",[66629]],[[66590,66590],\"mapped\",[66630]],[[66591,66591],\"mapped\",[66631]],[[66592,66592],\"mapped\",[66632]],[[66593,66593],\"mapped\",[66633]],[[66594,66594],\"mapped\",[66634]],[[66595,66595],\"mapped\",[66635]],[[66596,66596],\"mapped\",[66636]],[[66597,66597],\"mapped\",[66637]],[[66598,66598],\"mapped\",[66638]],[[66599,66599],\"mapped\",[66639]],[[66600,66637],\"valid\"],[[66638,66717],\"valid\"],[[66718,66719],\"disallowed\"],[[66720,66729],\"valid\"],[[66730,66815],\"disallowed\"],[[66816,66855],\"valid\"],[[66856,66863],\"disallowed\"],[[66864,66915],\"valid\"],[[66916,66926],\"disallowed\"],[[66927,66927],\"valid\",[],\"NV8\"],[[66928,67071],\"disallowed\"],[[67072,67382],\"valid\"],[[67383,67391],\"disallowed\"],[[67392,67413],\"valid\"],[[67414,67423],\"disallowed\"],[[67424,67431],\"valid\"],[[67432,67583],\"disallowed\"],[[67584,67589],\"valid\"],[[67590,67591],\"disallowed\"],[[67592,67592],\"valid\"],[[67593,67593],\"disallowed\"],[[67594,67637],\"valid\"],[[67638,67638],\"disallowed\"],[[67639,67640],\"valid\"],[[67641,67643],\"disallowed\"],[[67644,67644],\"valid\"],[[67645,67646],\"disallowed\"],[[67647,67647],\"valid\"],[[67648,67669],\"valid\"],[[67670,67670],\"disallowed\"],[[67671,67679],\"valid\",[],\"NV8\"],[[67680,67702],\"valid\"],[[67703,67711],\"valid\",[],\"NV8\"],[[67712,67742],\"valid\"],[[67743,67750],\"disallowed\"],[[67751,67759],\"valid\",[],\"NV8\"],[[67760,67807],\"disallowed\"],[[67808,67826],\"valid\"],[[67827,67827],\"disallowed\"],[[67828,67829],\"valid\"],[[67830,67834],\"disallowed\"],[[67835,67839],\"valid\",[],\"NV8\"],[[67840,67861],\"valid\"],[[67862,67865],\"valid\",[],\"NV8\"],[[67866,67867],\"valid\",[],\"NV8\"],[[67868,67870],\"disallowed\"],[[67871,67871],\"valid\",[],\"NV8\"],[[67872,67897],\"valid\"],[[67898,67902],\"disallowed\"],[[67903,67903],\"valid\",[],\"NV8\"],[[67904,67967],\"disallowed\"],[[67968,68023],\"valid\"],[[68024,68027],\"disallowed\"],[[68028,68029],\"valid\",[],\"NV8\"],[[68030,68031],\"valid\"],[[68032,68047],\"valid\",[],\"NV8\"],[[68048,68049],\"disallowed\"],[[68050,68095],\"valid\",[],\"NV8\"],[[68096,68099],\"valid\"],[[68100,68100],\"disallowed\"],[[68101,68102],\"valid\"],[[68103,68107],\"disallowed\"],[[68108,68115],\"valid\"],[[68116,68116],\"disallowed\"],[[68117,68119],\"valid\"],[[68120,68120],\"disallowed\"],[[68121,68147],\"valid\"],[[68148,68151],\"disallowed\"],[[68152,68154],\"valid\"],[[68155,68158],\"disallowed\"],[[68159,68159],\"valid\"],[[68160,68167],\"valid\",[],\"NV8\"],[[68168,68175],\"disallowed\"],[[68176,68184],\"valid\",[],\"NV8\"],[[68185,68191],\"disallowed\"],[[68192,68220],\"valid\"],[[68221,68223],\"valid\",[],\"NV8\"],[[68224,68252],\"valid\"],[[68253,68255],\"valid\",[],\"NV8\"],[[68256,68287],\"disallowed\"],[[68288,68295],\"valid\"],[[68296,68296],\"valid\",[],\"NV8\"],[[68297,68326],\"valid\"],[[68327,68330],\"disallowed\"],[[68331,68342],\"valid\",[],\"NV8\"],[[68343,68351],\"disallowed\"],[[68352,68405],\"valid\"],[[68406,68408],\"disallowed\"],[[68409,68415],\"valid\",[],\"NV8\"],[[68416,68437],\"valid\"],[[68438,68439],\"disallowed\"],[[68440,68447],\"valid\",[],\"NV8\"],[[68448,68466],\"valid\"],[[68467,68471],\"disallowed\"],[[68472,68479],\"valid\",[],\"NV8\"],[[68480,68497],\"valid\"],[[68498,68504],\"disallowed\"],[[68505,68508],\"valid\",[],\"NV8\"],[[68509,68520],\"disallowed\"],[[68521,68527],\"valid\",[],\"NV8\"],[[68528,68607],\"disallowed\"],[[68608,68680],\"valid\"],[[68681,68735],\"disallowed\"],[[68736,68736],\"mapped\",[68800]],[[68737,68737],\"mapped\",[68801]],[[68738,68738],\"mapped\",[68802]],[[68739,68739],\"mapped\",[68803]],[[68740,68740],\"mapped\",[68804]],[[68741,68741],\"mapped\",[68805]],[[68742,68742],\"mapped\",[68806]],[[68743,68743],\"mapped\",[68807]],[[68744,68744],\"mapped\",[68808]],[[68745,68745],\"mapped\",[68809]],[[68746,68746],\"mapped\",[68810]],[[68747,68747],\"mapped\",[68811]],[[68748,68748],\"mapped\",[68812]],[[68749,68749],\"mapped\",[68813]],[[68750,68750],\"mapped\",[68814]],[[68751,68751],\"mapped\",[68815]],[[68752,68752],\"mapped\",[68816]],[[68753,68753],\"mapped\",[68817]],[[68754,68754],\"mapped\",[68818]],[[68755,68755],\"mapped\",[68819]],[[68756,68756],\"mapped\",[68820]],[[68757,68757],\"mapped\",[68821]],[[68758,68758],\"mapped\",[68822]],[[68759,68759],\"mapped\",[68823]],[[68760,68760],\"mapped\",[68824]],[[68761,68761],\"mapped\",[68825]],[[68762,68762],\"mapped\",[68826]],[[68763,68763],\"mapped\",[68827]],[[68764,68764],\"mapped\",[68828]],[[68765,68765],\"mapped\",[68829]],[[68766,68766],\"mapped\",[68830]],[[68767,68767],\"mapped\",[68831]],[[68768,68768],\"mapped\",[68832]],[[68769,68769],\"mapped\",[68833]],[[68770,68770],\"mapped\",[68834]],[[68771,68771],\"mapped\",[68835]],[[68772,68772],\"mapped\",[68836]],[[68773,68773],\"mapped\",[68837]],[[68774,68774],\"mapped\",[68838]],[[68775,68775],\"mapped\",[68839]],[[68776,68776],\"mapped\",[68840]],[[68777,68777],\"mapped\",[68841]],[[68778,68778],\"mapped\",[68842]],[[68779,68779],\"mapped\",[68843]],[[68780,68780],\"mapped\",[68844]],[[68781,68781],\"mapped\",[68845]],[[68782,68782],\"mapped\",[68846]],[[68783,68783],\"mapped\",[68847]],[[68784,68784],\"mapped\",[68848]],[[68785,68785],\"mapped\",[68849]],[[68786,68786],\"mapped\",[68850]],[[68787,68799],\"disallowed\"],[[68800,68850],\"valid\"],[[68851,68857],\"disallowed\"],[[68858,68863],\"valid\",[],\"NV8\"],[[68864,69215],\"disallowed\"],[[69216,69246],\"valid\",[],\"NV8\"],[[69247,69631],\"disallowed\"],[[69632,69702],\"valid\"],[[69703,69709],\"valid\",[],\"NV8\"],[[69710,69713],\"disallowed\"],[[69714,69733],\"valid\",[],\"NV8\"],[[69734,69743],\"valid\"],[[69744,69758],\"disallowed\"],[[69759,69759],\"valid\"],[[69760,69818],\"valid\"],[[69819,69820],\"valid\",[],\"NV8\"],[[69821,69821],\"disallowed\"],[[69822,69825],\"valid\",[],\"NV8\"],[[69826,69839],\"disallowed\"],[[69840,69864],\"valid\"],[[69865,69871],\"disallowed\"],[[69872,69881],\"valid\"],[[69882,69887],\"disallowed\"],[[69888,69940],\"valid\"],[[69941,69941],\"disallowed\"],[[69942,69951],\"valid\"],[[69952,69955],\"valid\",[],\"NV8\"],[[69956,69967],\"disallowed\"],[[69968,70003],\"valid\"],[[70004,70005],\"valid\",[],\"NV8\"],[[70006,70006],\"valid\"],[[70007,70015],\"disallowed\"],[[70016,70084],\"valid\"],[[70085,70088],\"valid\",[],\"NV8\"],[[70089,70089],\"valid\",[],\"NV8\"],[[70090,70092],\"valid\"],[[70093,70093],\"valid\",[],\"NV8\"],[[70094,70095],\"disallowed\"],[[70096,70105],\"valid\"],[[70106,70106],\"valid\"],[[70107,70107],\"valid\",[],\"NV8\"],[[70108,70108],\"valid\"],[[70109,70111],\"valid\",[],\"NV8\"],[[70112,70112],\"disallowed\"],[[70113,70132],\"valid\",[],\"NV8\"],[[70133,70143],\"disallowed\"],[[70144,70161],\"valid\"],[[70162,70162],\"disallowed\"],[[70163,70199],\"valid\"],[[70200,70205],\"valid\",[],\"NV8\"],[[70206,70271],\"disallowed\"],[[70272,70278],\"valid\"],[[70279,70279],\"disallowed\"],[[70280,70280],\"valid\"],[[70281,70281],\"disallowed\"],[[70282,70285],\"valid\"],[[70286,70286],\"disallowed\"],[[70287,70301],\"valid\"],[[70302,70302],\"disallowed\"],[[70303,70312],\"valid\"],[[70313,70313],\"valid\",[],\"NV8\"],[[70314,70319],\"disallowed\"],[[70320,70378],\"valid\"],[[70379,70383],\"disallowed\"],[[70384,70393],\"valid\"],[[70394,70399],\"disallowed\"],[[70400,70400],\"valid\"],[[70401,70403],\"valid\"],[[70404,70404],\"disallowed\"],[[70405,70412],\"valid\"],[[70413,70414],\"disallowed\"],[[70415,70416],\"valid\"],[[70417,70418],\"disallowed\"],[[70419,70440],\"valid\"],[[70441,70441],\"disallowed\"],[[70442,70448],\"valid\"],[[70449,70449],\"disallowed\"],[[70450,70451],\"valid\"],[[70452,70452],\"disallowed\"],[[70453,70457],\"valid\"],[[70458,70459],\"disallowed\"],[[70460,70468],\"valid\"],[[70469,70470],\"disallowed\"],[[70471,70472],\"valid\"],[[70473,70474],\"disallowed\"],[[70475,70477],\"valid\"],[[70478,70479],\"disallowed\"],[[70480,70480],\"valid\"],[[70481,70486],\"disallowed\"],[[70487,70487],\"valid\"],[[70488,70492],\"disallowed\"],[[70493,70499],\"valid\"],[[70500,70501],\"disallowed\"],[[70502,70508],\"valid\"],[[70509,70511],\"disallowed\"],[[70512,70516],\"valid\"],[[70517,70783],\"disallowed\"],[[70784,70853],\"valid\"],[[70854,70854],\"valid\",[],\"NV8\"],[[70855,70855],\"valid\"],[[70856,70863],\"disallowed\"],[[70864,70873],\"valid\"],[[70874,71039],\"disallowed\"],[[71040,71093],\"valid\"],[[71094,71095],\"disallowed\"],[[71096,71104],\"valid\"],[[71105,71113],\"valid\",[],\"NV8\"],[[71114,71127],\"valid\",[],\"NV8\"],[[71128,71133],\"valid\"],[[71134,71167],\"disallowed\"],[[71168,71232],\"valid\"],[[71233,71235],\"valid\",[],\"NV8\"],[[71236,71236],\"valid\"],[[71237,71247],\"disallowed\"],[[71248,71257],\"valid\"],[[71258,71295],\"disallowed\"],[[71296,71351],\"valid\"],[[71352,71359],\"disallowed\"],[[71360,71369],\"valid\"],[[71370,71423],\"disallowed\"],[[71424,71449],\"valid\"],[[71450,71452],\"disallowed\"],[[71453,71467],\"valid\"],[[71468,71471],\"disallowed\"],[[71472,71481],\"valid\"],[[71482,71487],\"valid\",[],\"NV8\"],[[71488,71839],\"disallowed\"],[[71840,71840],\"mapped\",[71872]],[[71841,71841],\"mapped\",[71873]],[[71842,71842],\"mapped\",[71874]],[[71843,71843],\"mapped\",[71875]],[[71844,71844],\"mapped\",[71876]],[[71845,71845],\"mapped\",[71877]],[[71846,71846],\"mapped\",[71878]],[[71847,71847],\"mapped\",[71879]],[[71848,71848],\"mapped\",[71880]],[[71849,71849],\"mapped\",[71881]],[[71850,71850],\"mapped\",[71882]],[[71851,71851],\"mapped\",[71883]],[[71852,71852],\"mapped\",[71884]],[[71853,71853],\"mapped\",[71885]],[[71854,71854],\"mapped\",[71886]],[[71855,71855],\"mapped\",[71887]],[[71856,71856],\"mapped\",[71888]],[[71857,71857],\"mapped\",[71889]],[[71858,71858],\"mapped\",[71890]],[[71859,71859],\"mapped\",[71891]],[[71860,71860],\"mapped\",[71892]],[[71861,71861],\"mapped\",[71893]],[[71862,71862],\"mapped\",[71894]],[[71863,71863],\"mapped\",[71895]],[[71864,71864],\"mapped\",[71896]],[[71865,71865],\"mapped\",[71897]],[[71866,71866],\"mapped\",[71898]],[[71867,71867],\"mapped\",[71899]],[[71868,71868],\"mapped\",[71900]],[[71869,71869],\"mapped\",[71901]],[[71870,71870],\"mapped\",[71902]],[[71871,71871],\"mapped\",[71903]],[[71872,71913],\"valid\"],[[71914,71922],\"valid\",[],\"NV8\"],[[71923,71934],\"disallowed\"],[[71935,71935],\"valid\"],[[71936,72383],\"disallowed\"],[[72384,72440],\"valid\"],[[72441,73727],\"disallowed\"],[[73728,74606],\"valid\"],[[74607,74648],\"valid\"],[[74649,74649],\"valid\"],[[74650,74751],\"disallowed\"],[[74752,74850],\"valid\",[],\"NV8\"],[[74851,74862],\"valid\",[],\"NV8\"],[[74863,74863],\"disallowed\"],[[74864,74867],\"valid\",[],\"NV8\"],[[74868,74868],\"valid\",[],\"NV8\"],[[74869,74879],\"disallowed\"],[[74880,75075],\"valid\"],[[75076,77823],\"disallowed\"],[[77824,78894],\"valid\"],[[78895,82943],\"disallowed\"],[[82944,83526],\"valid\"],[[83527,92159],\"disallowed\"],[[92160,92728],\"valid\"],[[92729,92735],\"disallowed\"],[[92736,92766],\"valid\"],[[92767,92767],\"disallowed\"],[[92768,92777],\"valid\"],[[92778,92781],\"disallowed\"],[[92782,92783],\"valid\",[],\"NV8\"],[[92784,92879],\"disallowed\"],[[92880,92909],\"valid\"],[[92910,92911],\"disallowed\"],[[92912,92916],\"valid\"],[[92917,92917],\"valid\",[],\"NV8\"],[[92918,92927],\"disallowed\"],[[92928,92982],\"valid\"],[[92983,92991],\"valid\",[],\"NV8\"],[[92992,92995],\"valid\"],[[92996,92997],\"valid\",[],\"NV8\"],[[92998,93007],\"disallowed\"],[[93008,93017],\"valid\"],[[93018,93018],\"disallowed\"],[[93019,93025],\"valid\",[],\"NV8\"],[[93026,93026],\"disallowed\"],[[93027,93047],\"valid\"],[[93048,93052],\"disallowed\"],[[93053,93071],\"valid\"],[[93072,93951],\"disallowed\"],[[93952,94020],\"valid\"],[[94021,94031],\"disallowed\"],[[94032,94078],\"valid\"],[[94079,94094],\"disallowed\"],[[94095,94111],\"valid\"],[[94112,110591],\"disallowed\"],[[110592,110593],\"valid\"],[[110594,113663],\"disallowed\"],[[113664,113770],\"valid\"],[[113771,113775],\"disallowed\"],[[113776,113788],\"valid\"],[[113789,113791],\"disallowed\"],[[113792,113800],\"valid\"],[[113801,113807],\"disallowed\"],[[113808,113817],\"valid\"],[[113818,113819],\"disallowed\"],[[113820,113820],\"valid\",[],\"NV8\"],[[113821,113822],\"valid\"],[[113823,113823],\"valid\",[],\"NV8\"],[[113824,113827],\"ignored\"],[[113828,118783],\"disallowed\"],[[118784,119029],\"valid\",[],\"NV8\"],[[119030,119039],\"disallowed\"],[[119040,119078],\"valid\",[],\"NV8\"],[[119079,119080],\"disallowed\"],[[119081,119081],\"valid\",[],\"NV8\"],[[119082,119133],\"valid\",[],\"NV8\"],[[119134,119134],\"mapped\",[119127,119141]],[[119135,119135],\"mapped\",[119128,119141]],[[119136,119136],\"mapped\",[119128,119141,119150]],[[119137,119137],\"mapped\",[119128,119141,119151]],[[119138,119138],\"mapped\",[119128,119141,119152]],[[119139,119139],\"mapped\",[119128,119141,119153]],[[119140,119140],\"mapped\",[119128,119141,119154]],[[119141,119154],\"valid\",[],\"NV8\"],[[119155,119162],\"disallowed\"],[[119163,119226],\"valid\",[],\"NV8\"],[[119227,119227],\"mapped\",[119225,119141]],[[119228,119228],\"mapped\",[119226,119141]],[[119229,119229],\"mapped\",[119225,119141,119150]],[[119230,119230],\"mapped\",[119226,119141,119150]],[[119231,119231],\"mapped\",[119225,119141,119151]],[[119232,119232],\"mapped\",[119226,119141,119151]],[[119233,119261],\"valid\",[],\"NV8\"],[[119262,119272],\"valid\",[],\"NV8\"],[[119273,119295],\"disallowed\"],[[119296,119365],\"valid\",[],\"NV8\"],[[119366,119551],\"disallowed\"],[[119552,119638],\"valid\",[],\"NV8\"],[[119639,119647],\"disallowed\"],[[119648,119665],\"valid\",[],\"NV8\"],[[119666,119807],\"disallowed\"],[[119808,119808],\"mapped\",[97]],[[119809,119809],\"mapped\",[98]],[[119810,119810],\"mapped\",[99]],[[119811,119811],\"mapped\",[100]],[[119812,119812],\"mapped\",[101]],[[119813,119813],\"mapped\",[102]],[[119814,119814],\"mapped\",[103]],[[119815,119815],\"mapped\",[104]],[[119816,119816],\"mapped\",[105]],[[119817,119817],\"mapped\",[106]],[[119818,119818],\"mapped\",[107]],[[119819,119819],\"mapped\",[108]],[[119820,119820],\"mapped\",[109]],[[119821,119821],\"mapped\",[110]],[[119822,119822],\"mapped\",[111]],[[119823,119823],\"mapped\",[112]],[[119824,119824],\"mapped\",[113]],[[119825,119825],\"mapped\",[114]],[[119826,119826],\"mapped\",[115]],[[119827,119827],\"mapped\",[116]],[[119828,119828],\"mapped\",[117]],[[119829,119829],\"mapped\",[118]],[[119830,119830],\"mapped\",[119]],[[119831,119831],\"mapped\",[120]],[[119832,119832],\"mapped\",[121]],[[119833,119833],\"mapped\",[122]],[[119834,119834],\"mapped\",[97]],[[119835,119835],\"mapped\",[98]],[[119836,119836],\"mapped\",[99]],[[119837,119837],\"mapped\",[100]],[[119838,119838],\"mapped\",[101]],[[119839,119839],\"mapped\",[102]],[[119840,119840],\"mapped\",[103]],[[119841,119841],\"mapped\",[104]],[[119842,119842],\"mapped\",[105]],[[119843,119843],\"mapped\",[106]],[[119844,119844],\"mapped\",[107]],[[119845,119845],\"mapped\",[108]],[[119846,119846],\"mapped\",[109]],[[119847,119847],\"mapped\",[110]],[[119848,119848],\"mapped\",[111]],[[119849,119849],\"mapped\",[112]],[[119850,119850],\"mapped\",[113]],[[119851,119851],\"mapped\",[114]],[[119852,119852],\"mapped\",[115]],[[119853,119853],\"mapped\",[116]],[[119854,119854],\"mapped\",[117]],[[119855,119855],\"mapped\",[118]],[[119856,119856],\"mapped\",[119]],[[119857,119857],\"mapped\",[120]],[[119858,119858],\"mapped\",[121]],[[119859,119859],\"mapped\",[122]],[[119860,119860],\"mapped\",[97]],[[119861,119861],\"mapped\",[98]],[[119862,119862],\"mapped\",[99]],[[119863,119863],\"mapped\",[100]],[[119864,119864],\"mapped\",[101]],[[119865,119865],\"mapped\",[102]],[[119866,119866],\"mapped\",[103]],[[119867,119867],\"mapped\",[104]],[[119868,119868],\"mapped\",[105]],[[119869,119869],\"mapped\",[106]],[[119870,119870],\"mapped\",[107]],[[119871,119871],\"mapped\",[108]],[[119872,119872],\"mapped\",[109]],[[119873,119873],\"mapped\",[110]],[[119874,119874],\"mapped\",[111]],[[119875,119875],\"mapped\",[112]],[[119876,119876],\"mapped\",[113]],[[119877,119877],\"mapped\",[114]],[[119878,119878],\"mapped\",[115]],[[119879,119879],\"mapped\",[116]],[[119880,119880],\"mapped\",[117]],[[119881,119881],\"mapped\",[118]],[[119882,119882],\"mapped\",[119]],[[119883,119883],\"mapped\",[120]],[[119884,119884],\"mapped\",[121]],[[119885,119885],\"mapped\",[122]],[[119886,119886],\"mapped\",[97]],[[119887,119887],\"mapped\",[98]],[[119888,119888],\"mapped\",[99]],[[119889,119889],\"mapped\",[100]],[[119890,119890],\"mapped\",[101]],[[119891,119891],\"mapped\",[102]],[[119892,119892],\"mapped\",[103]],[[119893,119893],\"disallowed\"],[[119894,119894],\"mapped\",[105]],[[119895,119895],\"mapped\",[106]],[[119896,119896],\"mapped\",[107]],[[119897,119897],\"mapped\",[108]],[[119898,119898],\"mapped\",[109]],[[119899,119899],\"mapped\",[110]],[[119900,119900],\"mapped\",[111]],[[119901,119901],\"mapped\",[112]],[[119902,119902],\"mapped\",[113]],[[119903,119903],\"mapped\",[114]],[[119904,119904],\"mapped\",[115]],[[119905,119905],\"mapped\",[116]],[[119906,119906],\"mapped\",[117]],[[119907,119907],\"mapped\",[118]],[[119908,119908],\"mapped\",[119]],[[119909,119909],\"mapped\",[120]],[[119910,119910],\"mapped\",[121]],[[119911,119911],\"mapped\",[122]],[[119912,119912],\"mapped\",[97]],[[119913,119913],\"mapped\",[98]],[[119914,119914],\"mapped\",[99]],[[119915,119915],\"mapped\",[100]],[[119916,119916],\"mapped\",[101]],[[119917,119917],\"mapped\",[102]],[[119918,119918],\"mapped\",[103]],[[119919,119919],\"mapped\",[104]],[[119920,119920],\"mapped\",[105]],[[119921,119921],\"mapped\",[106]],[[119922,119922],\"mapped\",[107]],[[119923,119923],\"mapped\",[108]],[[119924,119924],\"mapped\",[109]],[[119925,119925],\"mapped\",[110]],[[119926,119926],\"mapped\",[111]],[[119927,119927],\"mapped\",[112]],[[119928,119928],\"mapped\",[113]],[[119929,119929],\"mapped\",[114]],[[119930,119930],\"mapped\",[115]],[[119931,119931],\"mapped\",[116]],[[119932,119932],\"mapped\",[117]],[[119933,119933],\"mapped\",[118]],[[119934,119934],\"mapped\",[119]],[[119935,119935],\"mapped\",[120]],[[119936,119936],\"mapped\",[121]],[[119937,119937],\"mapped\",[122]],[[119938,119938],\"mapped\",[97]],[[119939,119939],\"mapped\",[98]],[[119940,119940],\"mapped\",[99]],[[119941,119941],\"mapped\",[100]],[[119942,119942],\"mapped\",[101]],[[119943,119943],\"mapped\",[102]],[[119944,119944],\"mapped\",[103]],[[119945,119945],\"mapped\",[104]],[[119946,119946],\"mapped\",[105]],[[119947,119947],\"mapped\",[106]],[[119948,119948],\"mapped\",[107]],[[119949,119949],\"mapped\",[108]],[[119950,119950],\"mapped\",[109]],[[119951,119951],\"mapped\",[110]],[[119952,119952],\"mapped\",[111]],[[119953,119953],\"mapped\",[112]],[[119954,119954],\"mapped\",[113]],[[119955,119955],\"mapped\",[114]],[[119956,119956],\"mapped\",[115]],[[119957,119957],\"mapped\",[116]],[[119958,119958],\"mapped\",[117]],[[119959,119959],\"mapped\",[118]],[[119960,119960],\"mapped\",[119]],[[119961,119961],\"mapped\",[120]],[[119962,119962],\"mapped\",[121]],[[119963,119963],\"mapped\",[122]],[[119964,119964],\"mapped\",[97]],[[119965,119965],\"disallowed\"],[[119966,119966],\"mapped\",[99]],[[119967,119967],\"mapped\",[100]],[[119968,119969],\"disallowed\"],[[119970,119970],\"mapped\",[103]],[[119971,119972],\"disallowed\"],[[119973,119973],\"mapped\",[106]],[[119974,119974],\"mapped\",[107]],[[119975,119976],\"disallowed\"],[[119977,119977],\"mapped\",[110]],[[119978,119978],\"mapped\",[111]],[[119979,119979],\"mapped\",[112]],[[119980,119980],\"mapped\",[113]],[[119981,119981],\"disallowed\"],[[119982,119982],\"mapped\",[115]],[[119983,119983],\"mapped\",[116]],[[119984,119984],\"mapped\",[117]],[[119985,119985],\"mapped\",[118]],[[119986,119986],\"mapped\",[119]],[[119987,119987],\"mapped\",[120]],[[119988,119988],\"mapped\",[121]],[[119989,119989],\"mapped\",[122]],[[119990,119990],\"mapped\",[97]],[[119991,119991],\"mapped\",[98]],[[119992,119992],\"mapped\",[99]],[[119993,119993],\"mapped\",[100]],[[119994,119994],\"disallowed\"],[[119995,119995],\"mapped\",[102]],[[119996,119996],\"disallowed\"],[[119997,119997],\"mapped\",[104]],[[119998,119998],\"mapped\",[105]],[[119999,119999],\"mapped\",[106]],[[120000,120000],\"mapped\",[107]],[[120001,120001],\"mapped\",[108]],[[120002,120002],\"mapped\",[109]],[[120003,120003],\"mapped\",[110]],[[120004,120004],\"disallowed\"],[[120005,120005],\"mapped\",[112]],[[120006,120006],\"mapped\",[113]],[[120007,120007],\"mapped\",[114]],[[120008,120008],\"mapped\",[115]],[[120009,120009],\"mapped\",[116]],[[120010,120010],\"mapped\",[117]],[[120011,120011],\"mapped\",[118]],[[120012,120012],\"mapped\",[119]],[[120013,120013],\"mapped\",[120]],[[120014,120014],\"mapped\",[121]],[[120015,120015],\"mapped\",[122]],[[120016,120016],\"mapped\",[97]],[[120017,120017],\"mapped\",[98]],[[120018,120018],\"mapped\",[99]],[[120019,120019],\"mapped\",[100]],[[120020,120020],\"mapped\",[101]],[[120021,120021],\"mapped\",[102]],[[120022,120022],\"mapped\",[103]],[[120023,120023],\"mapped\",[104]],[[120024,120024],\"mapped\",[105]],[[120025,120025],\"mapped\",[106]],[[120026,120026],\"mapped\",[107]],[[120027,120027],\"mapped\",[108]],[[120028,120028],\"mapped\",[109]],[[120029,120029],\"mapped\",[110]],[[120030,120030],\"mapped\",[111]],[[120031,120031],\"mapped\",[112]],[[120032,120032],\"mapped\",[113]],[[120033,120033],\"mapped\",[114]],[[120034,120034],\"mapped\",[115]],[[120035,120035],\"mapped\",[116]],[[120036,120036],\"mapped\",[117]],[[120037,120037],\"mapped\",[118]],[[120038,120038],\"mapped\",[119]],[[120039,120039],\"mapped\",[120]],[[120040,120040],\"mapped\",[121]],[[120041,120041],\"mapped\",[122]],[[120042,120042],\"mapped\",[97]],[[120043,120043],\"mapped\",[98]],[[120044,120044],\"mapped\",[99]],[[120045,120045],\"mapped\",[100]],[[120046,120046],\"mapped\",[101]],[[120047,120047],\"mapped\",[102]],[[120048,120048],\"mapped\",[103]],[[120049,120049],\"mapped\",[104]],[[120050,120050],\"mapped\",[105]],[[120051,120051],\"mapped\",[106]],[[120052,120052],\"mapped\",[107]],[[120053,120053],\"mapped\",[108]],[[120054,120054],\"mapped\",[109]],[[120055,120055],\"mapped\",[110]],[[120056,120056],\"mapped\",[111]],[[120057,120057],\"mapped\",[112]],[[120058,120058],\"mapped\",[113]],[[120059,120059],\"mapped\",[114]],[[120060,120060],\"mapped\",[115]],[[120061,120061],\"mapped\",[116]],[[120062,120062],\"mapped\",[117]],[[120063,120063],\"mapped\",[118]],[[120064,120064],\"mapped\",[119]],[[120065,120065],\"mapped\",[120]],[[120066,120066],\"mapped\",[121]],[[120067,120067],\"mapped\",[122]],[[120068,120068],\"mapped\",[97]],[[120069,120069],\"mapped\",[98]],[[120070,120070],\"disallowed\"],[[120071,120071],\"mapped\",[100]],[[120072,120072],\"mapped\",[101]],[[120073,120073],\"mapped\",[102]],[[120074,120074],\"mapped\",[103]],[[120075,120076],\"disallowed\"],[[120077,120077],\"mapped\",[106]],[[120078,120078],\"mapped\",[107]],[[120079,120079],\"mapped\",[108]],[[120080,120080],\"mapped\",[109]],[[120081,120081],\"mapped\",[110]],[[120082,120082],\"mapped\",[111]],[[120083,120083],\"mapped\",[112]],[[120084,120084],\"mapped\",[113]],[[120085,120085],\"disallowed\"],[[120086,120086],\"mapped\",[115]],[[120087,120087],\"mapped\",[116]],[[120088,120088],\"mapped\",[117]],[[120089,120089],\"mapped\",[118]],[[120090,120090],\"mapped\",[119]],[[120091,120091],\"mapped\",[120]],[[120092,120092],\"mapped\",[121]],[[120093,120093],\"disallowed\"],[[120094,120094],\"mapped\",[97]],[[120095,120095],\"mapped\",[98]],[[120096,120096],\"mapped\",[99]],[[120097,120097],\"mapped\",[100]],[[120098,120098],\"mapped\",[101]],[[120099,120099],\"mapped\",[102]],[[120100,120100],\"mapped\",[103]],[[120101,120101],\"mapped\",[104]],[[120102,120102],\"mapped\",[105]],[[120103,120103],\"mapped\",[106]],[[120104,120104],\"mapped\",[107]],[[120105,120105],\"mapped\",[108]],[[120106,120106],\"mapped\",[109]],[[120107,120107],\"mapped\",[110]],[[120108,120108],\"mapped\",[111]],[[120109,120109],\"mapped\",[112]],[[120110,120110],\"mapped\",[113]],[[120111,120111],\"mapped\",[114]],[[120112,120112],\"mapped\",[115]],[[120113,120113],\"mapped\",[116]],[[120114,120114],\"mapped\",[117]],[[120115,120115],\"mapped\",[118]],[[120116,120116],\"mapped\",[119]],[[120117,120117],\"mapped\",[120]],[[120118,120118],\"mapped\",[121]],[[120119,120119],\"mapped\",[122]],[[120120,120120],\"mapped\",[97]],[[120121,120121],\"mapped\",[98]],[[120122,120122],\"disallowed\"],[[120123,120123],\"mapped\",[100]],[[120124,120124],\"mapped\",[101]],[[120125,120125],\"mapped\",[102]],[[120126,120126],\"mapped\",[103]],[[120127,120127],\"disallowed\"],[[120128,120128],\"mapped\",[105]],[[120129,120129],\"mapped\",[106]],[[120130,120130],\"mapped\",[107]],[[120131,120131],\"mapped\",[108]],[[120132,120132],\"mapped\",[109]],[[120133,120133],\"disallowed\"],[[120134,120134],\"mapped\",[111]],[[120135,120137],\"disallowed\"],[[120138,120138],\"mapped\",[115]],[[120139,120139],\"mapped\",[116]],[[120140,120140],\"mapped\",[117]],[[120141,120141],\"mapped\",[118]],[[120142,120142],\"mapped\",[119]],[[120143,120143],\"mapped\",[120]],[[120144,120144],\"mapped\",[121]],[[120145,120145],\"disallowed\"],[[120146,120146],\"mapped\",[97]],[[120147,120147],\"mapped\",[98]],[[120148,120148],\"mapped\",[99]],[[120149,120149],\"mapped\",[100]],[[120150,120150],\"mapped\",[101]],[[120151,120151],\"mapped\",[102]],[[120152,120152],\"mapped\",[103]],[[120153,120153],\"mapped\",[104]],[[120154,120154],\"mapped\",[105]],[[120155,120155],\"mapped\",[106]],[[120156,120156],\"mapped\",[107]],[[120157,120157],\"mapped\",[108]],[[120158,120158],\"mapped\",[109]],[[120159,120159],\"mapped\",[110]],[[120160,120160],\"mapped\",[111]],[[120161,120161],\"mapped\",[112]],[[120162,120162],\"mapped\",[113]],[[120163,120163],\"mapped\",[114]],[[120164,120164],\"mapped\",[115]],[[120165,120165],\"mapped\",[116]],[[120166,120166],\"mapped\",[117]],[[120167,120167],\"mapped\",[118]],[[120168,120168],\"mapped\",[119]],[[120169,120169],\"mapped\",[120]],[[120170,120170],\"mapped\",[121]],[[120171,120171],\"mapped\",[122]],[[120172,120172],\"mapped\",[97]],[[120173,120173],\"mapped\",[98]],[[120174,120174],\"mapped\",[99]],[[120175,120175],\"mapped\",[100]],[[120176,120176],\"mapped\",[101]],[[120177,120177],\"mapped\",[102]],[[120178,120178],\"mapped\",[103]],[[120179,120179],\"mapped\",[104]],[[120180,120180],\"mapped\",[105]],[[120181,120181],\"mapped\",[106]],[[120182,120182],\"mapped\",[107]],[[120183,120183],\"mapped\",[108]],[[120184,120184],\"mapped\",[109]],[[120185,120185],\"mapped\",[110]],[[120186,120186],\"mapped\",[111]],[[120187,120187],\"mapped\",[112]],[[120188,120188],\"mapped\",[113]],[[120189,120189],\"mapped\",[114]],[[120190,120190],\"mapped\",[115]],[[120191,120191],\"mapped\",[116]],[[120192,120192],\"mapped\",[117]],[[120193,120193],\"mapped\",[118]],[[120194,120194],\"mapped\",[119]],[[120195,120195],\"mapped\",[120]],[[120196,120196],\"mapped\",[121]],[[120197,120197],\"mapped\",[122]],[[120198,120198],\"mapped\",[97]],[[120199,120199],\"mapped\",[98]],[[120200,120200],\"mapped\",[99]],[[120201,120201],\"mapped\",[100]],[[120202,120202],\"mapped\",[101]],[[120203,120203],\"mapped\",[102]],[[120204,120204],\"mapped\",[103]],[[120205,120205],\"mapped\",[104]],[[120206,120206],\"mapped\",[105]],[[120207,120207],\"mapped\",[106]],[[120208,120208],\"mapped\",[107]],[[120209,120209],\"mapped\",[108]],[[120210,120210],\"mapped\",[109]],[[120211,120211],\"mapped\",[110]],[[120212,120212],\"mapped\",[111]],[[120213,120213],\"mapped\",[112]],[[120214,120214],\"mapped\",[113]],[[120215,120215],\"mapped\",[114]],[[120216,120216],\"mapped\",[115]],[[120217,120217],\"mapped\",[116]],[[120218,120218],\"mapped\",[117]],[[120219,120219],\"mapped\",[118]],[[120220,120220],\"mapped\",[119]],[[120221,120221],\"mapped\",[120]],[[120222,120222],\"mapped\",[121]],[[120223,120223],\"mapped\",[122]],[[120224,120224],\"mapped\",[97]],[[120225,120225],\"mapped\",[98]],[[120226,120226],\"mapped\",[99]],[[120227,120227],\"mapped\",[100]],[[120228,120228],\"mapped\",[101]],[[120229,120229],\"mapped\",[102]],[[120230,120230],\"mapped\",[103]],[[120231,120231],\"mapped\",[104]],[[120232,120232],\"mapped\",[105]],[[120233,120233],\"mapped\",[106]],[[120234,120234],\"mapped\",[107]],[[120235,120235],\"mapped\",[108]],[[120236,120236],\"mapped\",[109]],[[120237,120237],\"mapped\",[110]],[[120238,120238],\"mapped\",[111]],[[120239,120239],\"mapped\",[112]],[[120240,120240],\"mapped\",[113]],[[120241,120241],\"mapped\",[114]],[[120242,120242],\"mapped\",[115]],[[120243,120243],\"mapped\",[116]],[[120244,120244],\"mapped\",[117]],[[120245,120245],\"mapped\",[118]],[[120246,120246],\"mapped\",[119]],[[120247,120247],\"mapped\",[120]],[[120248,120248],\"mapped\",[121]],[[120249,120249],\"mapped\",[122]],[[120250,120250],\"mapped\",[97]],[[120251,120251],\"mapped\",[98]],[[120252,120252],\"mapped\",[99]],[[120253,120253],\"mapped\",[100]],[[120254,120254],\"mapped\",[101]],[[120255,120255],\"mapped\",[102]],[[120256,120256],\"mapped\",[103]],[[120257,120257],\"mapped\",[104]],[[120258,120258],\"mapped\",[105]],[[120259,120259],\"mapped\",[106]],[[120260,120260],\"mapped\",[107]],[[120261,120261],\"mapped\",[108]],[[120262,120262],\"mapped\",[109]],[[120263,120263],\"mapped\",[110]],[[120264,120264],\"mapped\",[111]],[[120265,120265],\"mapped\",[112]],[[120266,120266],\"mapped\",[113]],[[120267,120267],\"mapped\",[114]],[[120268,120268],\"mapped\",[115]],[[120269,120269],\"mapped\",[116]],[[120270,120270],\"mapped\",[117]],[[120271,120271],\"mapped\",[118]],[[120272,120272],\"mapped\",[119]],[[120273,120273],\"mapped\",[120]],[[120274,120274],\"mapped\",[121]],[[120275,120275],\"mapped\",[122]],[[120276,120276],\"mapped\",[97]],[[120277,120277],\"mapped\",[98]],[[120278,120278],\"mapped\",[99]],[[120279,120279],\"mapped\",[100]],[[120280,120280],\"mapped\",[101]],[[120281,120281],\"mapped\",[102]],[[120282,120282],\"mapped\",[103]],[[120283,120283],\"mapped\",[104]],[[120284,120284],\"mapped\",[105]],[[120285,120285],\"mapped\",[106]],[[120286,120286],\"mapped\",[107]],[[120287,120287],\"mapped\",[108]],[[120288,120288],\"mapped\",[109]],[[120289,120289],\"mapped\",[110]],[[120290,120290],\"mapped\",[111]],[[120291,120291],\"mapped\",[112]],[[120292,120292],\"mapped\",[113]],[[120293,120293],\"mapped\",[114]],[[120294,120294],\"mapped\",[115]],[[120295,120295],\"mapped\",[116]],[[120296,120296],\"mapped\",[117]],[[120297,120297],\"mapped\",[118]],[[120298,120298],\"mapped\",[119]],[[120299,120299],\"mapped\",[120]],[[120300,120300],\"mapped\",[121]],[[120301,120301],\"mapped\",[122]],[[120302,120302],\"mapped\",[97]],[[120303,120303],\"mapped\",[98]],[[120304,120304],\"mapped\",[99]],[[120305,120305],\"mapped\",[100]],[[120306,120306],\"mapped\",[101]],[[120307,120307],\"mapped\",[102]],[[120308,120308],\"mapped\",[103]],[[120309,120309],\"mapped\",[104]],[[120310,120310],\"mapped\",[105]],[[120311,120311],\"mapped\",[106]],[[120312,120312],\"mapped\",[107]],[[120313,120313],\"mapped\",[108]],[[120314,120314],\"mapped\",[109]],[[120315,120315],\"mapped\",[110]],[[120316,120316],\"mapped\",[111]],[[120317,120317],\"mapped\",[112]],[[120318,120318],\"mapped\",[113]],[[120319,120319],\"mapped\",[114]],[[120320,120320],\"mapped\",[115]],[[120321,120321],\"mapped\",[116]],[[120322,120322],\"mapped\",[117]],[[120323,120323],\"mapped\",[118]],[[120324,120324],\"mapped\",[119]],[[120325,120325],\"mapped\",[120]],[[120326,120326],\"mapped\",[121]],[[120327,120327],\"mapped\",[122]],[[120328,120328],\"mapped\",[97]],[[120329,120329],\"mapped\",[98]],[[120330,120330],\"mapped\",[99]],[[120331,120331],\"mapped\",[100]],[[120332,120332],\"mapped\",[101]],[[120333,120333],\"mapped\",[102]],[[120334,120334],\"mapped\",[103]],[[120335,120335],\"mapped\",[104]],[[120336,120336],\"mapped\",[105]],[[120337,120337],\"mapped\",[106]],[[120338,120338],\"mapped\",[107]],[[120339,120339],\"mapped\",[108]],[[120340,120340],\"mapped\",[109]],[[120341,120341],\"mapped\",[110]],[[120342,120342],\"mapped\",[111]],[[120343,120343],\"mapped\",[112]],[[120344,120344],\"mapped\",[113]],[[120345,120345],\"mapped\",[114]],[[120346,120346],\"mapped\",[115]],[[120347,120347],\"mapped\",[116]],[[120348,120348],\"mapped\",[117]],[[120349,120349],\"mapped\",[118]],[[120350,120350],\"mapped\",[119]],[[120351,120351],\"mapped\",[120]],[[120352,120352],\"mapped\",[121]],[[120353,120353],\"mapped\",[122]],[[120354,120354],\"mapped\",[97]],[[120355,120355],\"mapped\",[98]],[[120356,120356],\"mapped\",[99]],[[120357,120357],\"mapped\",[100]],[[120358,120358],\"mapped\",[101]],[[120359,120359],\"mapped\",[102]],[[120360,120360],\"mapped\",[103]],[[120361,120361],\"mapped\",[104]],[[120362,120362],\"mapped\",[105]],[[120363,120363],\"mapped\",[106]],[[120364,120364],\"mapped\",[107]],[[120365,120365],\"mapped\",[108]],[[120366,120366],\"mapped\",[109]],[[120367,120367],\"mapped\",[110]],[[120368,120368],\"mapped\",[111]],[[120369,120369],\"mapped\",[112]],[[120370,120370],\"mapped\",[113]],[[120371,120371],\"mapped\",[114]],[[120372,120372],\"mapped\",[115]],[[120373,120373],\"mapped\",[116]],[[120374,120374],\"mapped\",[117]],[[120375,120375],\"mapped\",[118]],[[120376,120376],\"mapped\",[119]],[[120377,120377],\"mapped\",[120]],[[120378,120378],\"mapped\",[121]],[[120379,120379],\"mapped\",[122]],[[120380,120380],\"mapped\",[97]],[[120381,120381],\"mapped\",[98]],[[120382,120382],\"mapped\",[99]],[[120383,120383],\"mapped\",[100]],[[120384,120384],\"mapped\",[101]],[[120385,120385],\"mapped\",[102]],[[120386,120386],\"mapped\",[103]],[[120387,120387],\"mapped\",[104]],[[120388,120388],\"mapped\",[105]],[[120389,120389],\"mapped\",[106]],[[120390,120390],\"mapped\",[107]],[[120391,120391],\"mapped\",[108]],[[120392,120392],\"mapped\",[109]],[[120393,120393],\"mapped\",[110]],[[120394,120394],\"mapped\",[111]],[[120395,120395],\"mapped\",[112]],[[120396,120396],\"mapped\",[113]],[[120397,120397],\"mapped\",[114]],[[120398,120398],\"mapped\",[115]],[[120399,120399],\"mapped\",[116]],[[120400,120400],\"mapped\",[117]],[[120401,120401],\"mapped\",[118]],[[120402,120402],\"mapped\",[119]],[[120403,120403],\"mapped\",[120]],[[120404,120404],\"mapped\",[121]],[[120405,120405],\"mapped\",[122]],[[120406,120406],\"mapped\",[97]],[[120407,120407],\"mapped\",[98]],[[120408,120408],\"mapped\",[99]],[[120409,120409],\"mapped\",[100]],[[120410,120410],\"mapped\",[101]],[[120411,120411],\"mapped\",[102]],[[120412,120412],\"mapped\",[103]],[[120413,120413],\"mapped\",[104]],[[120414,120414],\"mapped\",[105]],[[120415,120415],\"mapped\",[106]],[[120416,120416],\"mapped\",[107]],[[120417,120417],\"mapped\",[108]],[[120418,120418],\"mapped\",[109]],[[120419,120419],\"mapped\",[110]],[[120420,120420],\"mapped\",[111]],[[120421,120421],\"mapped\",[112]],[[120422,120422],\"mapped\",[113]],[[120423,120423],\"mapped\",[114]],[[120424,120424],\"mapped\",[115]],[[120425,120425],\"mapped\",[116]],[[120426,120426],\"mapped\",[117]],[[120427,120427],\"mapped\",[118]],[[120428,120428],\"mapped\",[119]],[[120429,120429],\"mapped\",[120]],[[120430,120430],\"mapped\",[121]],[[120431,120431],\"mapped\",[122]],[[120432,120432],\"mapped\",[97]],[[120433,120433],\"mapped\",[98]],[[120434,120434],\"mapped\",[99]],[[120435,120435],\"mapped\",[100]],[[120436,120436],\"mapped\",[101]],[[120437,120437],\"mapped\",[102]],[[120438,120438],\"mapped\",[103]],[[120439,120439],\"mapped\",[104]],[[120440,120440],\"mapped\",[105]],[[120441,120441],\"mapped\",[106]],[[120442,120442],\"mapped\",[107]],[[120443,120443],\"mapped\",[108]],[[120444,120444],\"mapped\",[109]],[[120445,120445],\"mapped\",[110]],[[120446,120446],\"mapped\",[111]],[[120447,120447],\"mapped\",[112]],[[120448,120448],\"mapped\",[113]],[[120449,120449],\"mapped\",[114]],[[120450,120450],\"mapped\",[115]],[[120451,120451],\"mapped\",[116]],[[120452,120452],\"mapped\",[117]],[[120453,120453],\"mapped\",[118]],[[120454,120454],\"mapped\",[119]],[[120455,120455],\"mapped\",[120]],[[120456,120456],\"mapped\",[121]],[[120457,120457],\"mapped\",[122]],[[120458,120458],\"mapped\",[97]],[[120459,120459],\"mapped\",[98]],[[120460,120460],\"mapped\",[99]],[[120461,120461],\"mapped\",[100]],[[120462,120462],\"mapped\",[101]],[[120463,120463],\"mapped\",[102]],[[120464,120464],\"mapped\",[103]],[[120465,120465],\"mapped\",[104]],[[120466,120466],\"mapped\",[105]],[[120467,120467],\"mapped\",[106]],[[120468,120468],\"mapped\",[107]],[[120469,120469],\"mapped\",[108]],[[120470,120470],\"mapped\",[109]],[[120471,120471],\"mapped\",[110]],[[120472,120472],\"mapped\",[111]],[[120473,120473],\"mapped\",[112]],[[120474,120474],\"mapped\",[113]],[[120475,120475],\"mapped\",[114]],[[120476,120476],\"mapped\",[115]],[[120477,120477],\"mapped\",[116]],[[120478,120478],\"mapped\",[117]],[[120479,120479],\"mapped\",[118]],[[120480,120480],\"mapped\",[119]],[[120481,120481],\"mapped\",[120]],[[120482,120482],\"mapped\",[121]],[[120483,120483],\"mapped\",[122]],[[120484,120484],\"mapped\",[305]],[[120485,120485],\"mapped\",[567]],[[120486,120487],\"disallowed\"],[[120488,120488],\"mapped\",[945]],[[120489,120489],\"mapped\",[946]],[[120490,120490],\"mapped\",[947]],[[120491,120491],\"mapped\",[948]],[[120492,120492],\"mapped\",[949]],[[120493,120493],\"mapped\",[950]],[[120494,120494],\"mapped\",[951]],[[120495,120495],\"mapped\",[952]],[[120496,120496],\"mapped\",[953]],[[120497,120497],\"mapped\",[954]],[[120498,120498],\"mapped\",[955]],[[120499,120499],\"mapped\",[956]],[[120500,120500],\"mapped\",[957]],[[120501,120501],\"mapped\",[958]],[[120502,120502],\"mapped\",[959]],[[120503,120503],\"mapped\",[960]],[[120504,120504],\"mapped\",[961]],[[120505,120505],\"mapped\",[952]],[[120506,120506],\"mapped\",[963]],[[120507,120507],\"mapped\",[964]],[[120508,120508],\"mapped\",[965]],[[120509,120509],\"mapped\",[966]],[[120510,120510],\"mapped\",[967]],[[120511,120511],\"mapped\",[968]],[[120512,120512],\"mapped\",[969]],[[120513,120513],\"mapped\",[8711]],[[120514,120514],\"mapped\",[945]],[[120515,120515],\"mapped\",[946]],[[120516,120516],\"mapped\",[947]],[[120517,120517],\"mapped\",[948]],[[120518,120518],\"mapped\",[949]],[[120519,120519],\"mapped\",[950]],[[120520,120520],\"mapped\",[951]],[[120521,120521],\"mapped\",[952]],[[120522,120522],\"mapped\",[953]],[[120523,120523],\"mapped\",[954]],[[120524,120524],\"mapped\",[955]],[[120525,120525],\"mapped\",[956]],[[120526,120526],\"mapped\",[957]],[[120527,120527],\"mapped\",[958]],[[120528,120528],\"mapped\",[959]],[[120529,120529],\"mapped\",[960]],[[120530,120530],\"mapped\",[961]],[[120531,120532],\"mapped\",[963]],[[120533,120533],\"mapped\",[964]],[[120534,120534],\"mapped\",[965]],[[120535,120535],\"mapped\",[966]],[[120536,120536],\"mapped\",[967]],[[120537,120537],\"mapped\",[968]],[[120538,120538],\"mapped\",[969]],[[120539,120539],\"mapped\",[8706]],[[120540,120540],\"mapped\",[949]],[[120541,120541],\"mapped\",[952]],[[120542,120542],\"mapped\",[954]],[[120543,120543],\"mapped\",[966]],[[120544,120544],\"mapped\",[961]],[[120545,120545],\"mapped\",[960]],[[120546,120546],\"mapped\",[945]],[[120547,120547],\"mapped\",[946]],[[120548,120548],\"mapped\",[947]],[[120549,120549],\"mapped\",[948]],[[120550,120550],\"mapped\",[949]],[[120551,120551],\"mapped\",[950]],[[120552,120552],\"mapped\",[951]],[[120553,120553],\"mapped\",[952]],[[120554,120554],\"mapped\",[953]],[[120555,120555],\"mapped\",[954]],[[120556,120556],\"mapped\",[955]],[[120557,120557],\"mapped\",[956]],[[120558,120558],\"mapped\",[957]],[[120559,120559],\"mapped\",[958]],[[120560,120560],\"mapped\",[959]],[[120561,120561],\"mapped\",[960]],[[120562,120562],\"mapped\",[961]],[[120563,120563],\"mapped\",[952]],[[120564,120564],\"mapped\",[963]],[[120565,120565],\"mapped\",[964]],[[120566,120566],\"mapped\",[965]],[[120567,120567],\"mapped\",[966]],[[120568,120568],\"mapped\",[967]],[[120569,120569],\"mapped\",[968]],[[120570,120570],\"mapped\",[969]],[[120571,120571],\"mapped\",[8711]],[[120572,120572],\"mapped\",[945]],[[120573,120573],\"mapped\",[946]],[[120574,120574],\"mapped\",[947]],[[120575,120575],\"mapped\",[948]],[[120576,120576],\"mapped\",[949]],[[120577,120577],\"mapped\",[950]],[[120578,120578],\"mapped\",[951]],[[120579,120579],\"mapped\",[952]],[[120580,120580],\"mapped\",[953]],[[120581,120581],\"mapped\",[954]],[[120582,120582],\"mapped\",[955]],[[120583,120583],\"mapped\",[956]],[[120584,120584],\"mapped\",[957]],[[120585,120585],\"mapped\",[958]],[[120586,120586],\"mapped\",[959]],[[120587,120587],\"mapped\",[960]],[[120588,120588],\"mapped\",[961]],[[120589,120590],\"mapped\",[963]],[[120591,120591],\"mapped\",[964]],[[120592,120592],\"mapped\",[965]],[[120593,120593],\"mapped\",[966]],[[120594,120594],\"mapped\",[967]],[[120595,120595],\"mapped\",[968]],[[120596,120596],\"mapped\",[969]],[[120597,120597],\"mapped\",[8706]],[[120598,120598],\"mapped\",[949]],[[120599,120599],\"mapped\",[952]],[[120600,120600],\"mapped\",[954]],[[120601,120601],\"mapped\",[966]],[[120602,120602],\"mapped\",[961]],[[120603,120603],\"mapped\",[960]],[[120604,120604],\"mapped\",[945]],[[120605,120605],\"mapped\",[946]],[[120606,120606],\"mapped\",[947]],[[120607,120607],\"mapped\",[948]],[[120608,120608],\"mapped\",[949]],[[120609,120609],\"mapped\",[950]],[[120610,120610],\"mapped\",[951]],[[120611,120611],\"mapped\",[952]],[[120612,120612],\"mapped\",[953]],[[120613,120613],\"mapped\",[954]],[[120614,120614],\"mapped\",[955]],[[120615,120615],\"mapped\",[956]],[[120616,120616],\"mapped\",[957]],[[120617,120617],\"mapped\",[958]],[[120618,120618],\"mapped\",[959]],[[120619,120619],\"mapped\",[960]],[[120620,120620],\"mapped\",[961]],[[120621,120621],\"mapped\",[952]],[[120622,120622],\"mapped\",[963]],[[120623,120623],\"mapped\",[964]],[[120624,120624],\"mapped\",[965]],[[120625,120625],\"mapped\",[966]],[[120626,120626],\"mapped\",[967]],[[120627,120627],\"mapped\",[968]],[[120628,120628],\"mapped\",[969]],[[120629,120629],\"mapped\",[8711]],[[120630,120630],\"mapped\",[945]],[[120631,120631],\"mapped\",[946]],[[120632,120632],\"mapped\",[947]],[[120633,120633],\"mapped\",[948]],[[120634,120634],\"mapped\",[949]],[[120635,120635],\"mapped\",[950]],[[120636,120636],\"mapped\",[951]],[[120637,120637],\"mapped\",[952]],[[120638,120638],\"mapped\",[953]],[[120639,120639],\"mapped\",[954]],[[120640,120640],\"mapped\",[955]],[[120641,120641],\"mapped\",[956]],[[120642,120642],\"mapped\",[957]],[[120643,120643],\"mapped\",[958]],[[120644,120644],\"mapped\",[959]],[[120645,120645],\"mapped\",[960]],[[120646,120646],\"mapped\",[961]],[[120647,120648],\"mapped\",[963]],[[120649,120649],\"mapped\",[964]],[[120650,120650],\"mapped\",[965]],[[120651,120651],\"mapped\",[966]],[[120652,120652],\"mapped\",[967]],[[120653,120653],\"mapped\",[968]],[[120654,120654],\"mapped\",[969]],[[120655,120655],\"mapped\",[8706]],[[120656,120656],\"mapped\",[949]],[[120657,120657],\"mapped\",[952]],[[120658,120658],\"mapped\",[954]],[[120659,120659],\"mapped\",[966]],[[120660,120660],\"mapped\",[961]],[[120661,120661],\"mapped\",[960]],[[120662,120662],\"mapped\",[945]],[[120663,120663],\"mapped\",[946]],[[120664,120664],\"mapped\",[947]],[[120665,120665],\"mapped\",[948]],[[120666,120666],\"mapped\",[949]],[[120667,120667],\"mapped\",[950]],[[120668,120668],\"mapped\",[951]],[[120669,120669],\"mapped\",[952]],[[120670,120670],\"mapped\",[953]],[[120671,120671],\"mapped\",[954]],[[120672,120672],\"mapped\",[955]],[[120673,120673],\"mapped\",[956]],[[120674,120674],\"mapped\",[957]],[[120675,120675],\"mapped\",[958]],[[120676,120676],\"mapped\",[959]],[[120677,120677],\"mapped\",[960]],[[120678,120678],\"mapped\",[961]],[[120679,120679],\"mapped\",[952]],[[120680,120680],\"mapped\",[963]],[[120681,120681],\"mapped\",[964]],[[120682,120682],\"mapped\",[965]],[[120683,120683],\"mapped\",[966]],[[120684,120684],\"mapped\",[967]],[[120685,120685],\"mapped\",[968]],[[120686,120686],\"mapped\",[969]],[[120687,120687],\"mapped\",[8711]],[[120688,120688],\"mapped\",[945]],[[120689,120689],\"mapped\",[946]],[[120690,120690],\"mapped\",[947]],[[120691,120691],\"mapped\",[948]],[[120692,120692],\"mapped\",[949]],[[120693,120693],\"mapped\",[950]],[[120694,120694],\"mapped\",[951]],[[120695,120695],\"mapped\",[952]],[[120696,120696],\"mapped\",[953]],[[120697,120697],\"mapped\",[954]],[[120698,120698],\"mapped\",[955]],[[120699,120699],\"mapped\",[956]],[[120700,120700],\"mapped\",[957]],[[120701,120701],\"mapped\",[958]],[[120702,120702],\"mapped\",[959]],[[120703,120703],\"mapped\",[960]],[[120704,120704],\"mapped\",[961]],[[120705,120706],\"mapped\",[963]],[[120707,120707],\"mapped\",[964]],[[120708,120708],\"mapped\",[965]],[[120709,120709],\"mapped\",[966]],[[120710,120710],\"mapped\",[967]],[[120711,120711],\"mapped\",[968]],[[120712,120712],\"mapped\",[969]],[[120713,120713],\"mapped\",[8706]],[[120714,120714],\"mapped\",[949]],[[120715,120715],\"mapped\",[952]],[[120716,120716],\"mapped\",[954]],[[120717,120717],\"mapped\",[966]],[[120718,120718],\"mapped\",[961]],[[120719,120719],\"mapped\",[960]],[[120720,120720],\"mapped\",[945]],[[120721,120721],\"mapped\",[946]],[[120722,120722],\"mapped\",[947]],[[120723,120723],\"mapped\",[948]],[[120724,120724],\"mapped\",[949]],[[120725,120725],\"mapped\",[950]],[[120726,120726],\"mapped\",[951]],[[120727,120727],\"mapped\",[952]],[[120728,120728],\"mapped\",[953]],[[120729,120729],\"mapped\",[954]],[[120730,120730],\"mapped\",[955]],[[120731,120731],\"mapped\",[956]],[[120732,120732],\"mapped\",[957]],[[120733,120733],\"mapped\",[958]],[[120734,120734],\"mapped\",[959]],[[120735,120735],\"mapped\",[960]],[[120736,120736],\"mapped\",[961]],[[120737,120737],\"mapped\",[952]],[[120738,120738],\"mapped\",[963]],[[120739,120739],\"mapped\",[964]],[[120740,120740],\"mapped\",[965]],[[120741,120741],\"mapped\",[966]],[[120742,120742],\"mapped\",[967]],[[120743,120743],\"mapped\",[968]],[[120744,120744],\"mapped\",[969]],[[120745,120745],\"mapped\",[8711]],[[120746,120746],\"mapped\",[945]],[[120747,120747],\"mapped\",[946]],[[120748,120748],\"mapped\",[947]],[[120749,120749],\"mapped\",[948]],[[120750,120750],\"mapped\",[949]],[[120751,120751],\"mapped\",[950]],[[120752,120752],\"mapped\",[951]],[[120753,120753],\"mapped\",[952]],[[120754,120754],\"mapped\",[953]],[[120755,120755],\"mapped\",[954]],[[120756,120756],\"mapped\",[955]],[[120757,120757],\"mapped\",[956]],[[120758,120758],\"mapped\",[957]],[[120759,120759],\"mapped\",[958]],[[120760,120760],\"mapped\",[959]],[[120761,120761],\"mapped\",[960]],[[120762,120762],\"mapped\",[961]],[[120763,120764],\"mapped\",[963]],[[120765,120765],\"mapped\",[964]],[[120766,120766],\"mapped\",[965]],[[120767,120767],\"mapped\",[966]],[[120768,120768],\"mapped\",[967]],[[120769,120769],\"mapped\",[968]],[[120770,120770],\"mapped\",[969]],[[120771,120771],\"mapped\",[8706]],[[120772,120772],\"mapped\",[949]],[[120773,120773],\"mapped\",[952]],[[120774,120774],\"mapped\",[954]],[[120775,120775],\"mapped\",[966]],[[120776,120776],\"mapped\",[961]],[[120777,120777],\"mapped\",[960]],[[120778,120779],\"mapped\",[989]],[[120780,120781],\"disallowed\"],[[120782,120782],\"mapped\",[48]],[[120783,120783],\"mapped\",[49]],[[120784,120784],\"mapped\",[50]],[[120785,120785],\"mapped\",[51]],[[120786,120786],\"mapped\",[52]],[[120787,120787],\"mapped\",[53]],[[120788,120788],\"mapped\",[54]],[[120789,120789],\"mapped\",[55]],[[120790,120790],\"mapped\",[56]],[[120791,120791],\"mapped\",[57]],[[120792,120792],\"mapped\",[48]],[[120793,120793],\"mapped\",[49]],[[120794,120794],\"mapped\",[50]],[[120795,120795],\"mapped\",[51]],[[120796,120796],\"mapped\",[52]],[[120797,120797],\"mapped\",[53]],[[120798,120798],\"mapped\",[54]],[[120799,120799],\"mapped\",[55]],[[120800,120800],\"mapped\",[56]],[[120801,120801],\"mapped\",[57]],[[120802,120802],\"mapped\",[48]],[[120803,120803],\"mapped\",[49]],[[120804,120804],\"mapped\",[50]],[[120805,120805],\"mapped\",[51]],[[120806,120806],\"mapped\",[52]],[[120807,120807],\"mapped\",[53]],[[120808,120808],\"mapped\",[54]],[[120809,120809],\"mapped\",[55]],[[120810,120810],\"mapped\",[56]],[[120811,120811],\"mapped\",[57]],[[120812,120812],\"mapped\",[48]],[[120813,120813],\"mapped\",[49]],[[120814,120814],\"mapped\",[50]],[[120815,120815],\"mapped\",[51]],[[120816,120816],\"mapped\",[52]],[[120817,120817],\"mapped\",[53]],[[120818,120818],\"mapped\",[54]],[[120819,120819],\"mapped\",[55]],[[120820,120820],\"mapped\",[56]],[[120821,120821],\"mapped\",[57]],[[120822,120822],\"mapped\",[48]],[[120823,120823],\"mapped\",[49]],[[120824,120824],\"mapped\",[50]],[[120825,120825],\"mapped\",[51]],[[120826,120826],\"mapped\",[52]],[[120827,120827],\"mapped\",[53]],[[120828,120828],\"mapped\",[54]],[[120829,120829],\"mapped\",[55]],[[120830,120830],\"mapped\",[56]],[[120831,120831],\"mapped\",[57]],[[120832,121343],\"valid\",[],\"NV8\"],[[121344,121398],\"valid\"],[[121399,121402],\"valid\",[],\"NV8\"],[[121403,121452],\"valid\"],[[121453,121460],\"valid\",[],\"NV8\"],[[121461,121461],\"valid\"],[[121462,121475],\"valid\",[],\"NV8\"],[[121476,121476],\"valid\"],[[121477,121483],\"valid\",[],\"NV8\"],[[121484,121498],\"disallowed\"],[[121499,121503],\"valid\"],[[121504,121504],\"disallowed\"],[[121505,121519],\"valid\"],[[121520,124927],\"disallowed\"],[[124928,125124],\"valid\"],[[125125,125126],\"disallowed\"],[[125127,125135],\"valid\",[],\"NV8\"],[[125136,125142],\"valid\"],[[125143,126463],\"disallowed\"],[[126464,126464],\"mapped\",[1575]],[[126465,126465],\"mapped\",[1576]],[[126466,126466],\"mapped\",[1580]],[[126467,126467],\"mapped\",[1583]],[[126468,126468],\"disallowed\"],[[126469,126469],\"mapped\",[1608]],[[126470,126470],\"mapped\",[1586]],[[126471,126471],\"mapped\",[1581]],[[126472,126472],\"mapped\",[1591]],[[126473,126473],\"mapped\",[1610]],[[126474,126474],\"mapped\",[1603]],[[126475,126475],\"mapped\",[1604]],[[126476,126476],\"mapped\",[1605]],[[126477,126477],\"mapped\",[1606]],[[126478,126478],\"mapped\",[1587]],[[126479,126479],\"mapped\",[1593]],[[126480,126480],\"mapped\",[1601]],[[126481,126481],\"mapped\",[1589]],[[126482,126482],\"mapped\",[1602]],[[126483,126483],\"mapped\",[1585]],[[126484,126484],\"mapped\",[1588]],[[126485,126485],\"mapped\",[1578]],[[126486,126486],\"mapped\",[1579]],[[126487,126487],\"mapped\",[1582]],[[126488,126488],\"mapped\",[1584]],[[126489,126489],\"mapped\",[1590]],[[126490,126490],\"mapped\",[1592]],[[126491,126491],\"mapped\",[1594]],[[126492,126492],\"mapped\",[1646]],[[126493,126493],\"mapped\",[1722]],[[126494,126494],\"mapped\",[1697]],[[126495,126495],\"mapped\",[1647]],[[126496,126496],\"disallowed\"],[[126497,126497],\"mapped\",[1576]],[[126498,126498],\"mapped\",[1580]],[[126499,126499],\"disallowed\"],[[126500,126500],\"mapped\",[1607]],[[126501,126502],\"disallowed\"],[[126503,126503],\"mapped\",[1581]],[[126504,126504],\"disallowed\"],[[126505,126505],\"mapped\",[1610]],[[126506,126506],\"mapped\",[1603]],[[126507,126507],\"mapped\",[1604]],[[126508,126508],\"mapped\",[1605]],[[126509,126509],\"mapped\",[1606]],[[126510,126510],\"mapped\",[1587]],[[126511,126511],\"mapped\",[1593]],[[126512,126512],\"mapped\",[1601]],[[126513,126513],\"mapped\",[1589]],[[126514,126514],\"mapped\",[1602]],[[126515,126515],\"disallowed\"],[[126516,126516],\"mapped\",[1588]],[[126517,126517],\"mapped\",[1578]],[[126518,126518],\"mapped\",[1579]],[[126519,126519],\"mapped\",[1582]],[[126520,126520],\"disallowed\"],[[126521,126521],\"mapped\",[1590]],[[126522,126522],\"disallowed\"],[[126523,126523],\"mapped\",[1594]],[[126524,126529],\"disallowed\"],[[126530,126530],\"mapped\",[1580]],[[126531,126534],\"disallowed\"],[[126535,126535],\"mapped\",[1581]],[[126536,126536],\"disallowed\"],[[126537,126537],\"mapped\",[1610]],[[126538,126538],\"disallowed\"],[[126539,126539],\"mapped\",[1604]],[[126540,126540],\"disallowed\"],[[126541,126541],\"mapped\",[1606]],[[126542,126542],\"mapped\",[1587]],[[126543,126543],\"mapped\",[1593]],[[126544,126544],\"disallowed\"],[[126545,126545],\"mapped\",[1589]],[[126546,126546],\"mapped\",[1602]],[[126547,126547],\"disallowed\"],[[126548,126548],\"mapped\",[1588]],[[126549,126550],\"disallowed\"],[[126551,126551],\"mapped\",[1582]],[[126552,126552],\"disallowed\"],[[126553,126553],\"mapped\",[1590]],[[126554,126554],\"disallowed\"],[[126555,126555],\"mapped\",[1594]],[[126556,126556],\"disallowed\"],[[126557,126557],\"mapped\",[1722]],[[126558,126558],\"disallowed\"],[[126559,126559],\"mapped\",[1647]],[[126560,126560],\"disallowed\"],[[126561,126561],\"mapped\",[1576]],[[126562,126562],\"mapped\",[1580]],[[126563,126563],\"disallowed\"],[[126564,126564],\"mapped\",[1607]],[[126565,126566],\"disallowed\"],[[126567,126567],\"mapped\",[1581]],[[126568,126568],\"mapped\",[1591]],[[126569,126569],\"mapped\",[1610]],[[126570,126570],\"mapped\",[1603]],[[126571,126571],\"disallowed\"],[[126572,126572],\"mapped\",[1605]],[[126573,126573],\"mapped\",[1606]],[[126574,126574],\"mapped\",[1587]],[[126575,126575],\"mapped\",[1593]],[[126576,126576],\"mapped\",[1601]],[[126577,126577],\"mapped\",[1589]],[[126578,126578],\"mapped\",[1602]],[[126579,126579],\"disallowed\"],[[126580,126580],\"mapped\",[1588]],[[126581,126581],\"mapped\",[1578]],[[126582,126582],\"mapped\",[1579]],[[126583,126583],\"mapped\",[1582]],[[126584,126584],\"disallowed\"],[[126585,126585],\"mapped\",[1590]],[[126586,126586],\"mapped\",[1592]],[[126587,126587],\"mapped\",[1594]],[[126588,126588],\"mapped\",[1646]],[[126589,126589],\"disallowed\"],[[126590,126590],\"mapped\",[1697]],[[126591,126591],\"disallowed\"],[[126592,126592],\"mapped\",[1575]],[[126593,126593],\"mapped\",[1576]],[[126594,126594],\"mapped\",[1580]],[[126595,126595],\"mapped\",[1583]],[[126596,126596],\"mapped\",[1607]],[[126597,126597],\"mapped\",[1608]],[[126598,126598],\"mapped\",[1586]],[[126599,126599],\"mapped\",[1581]],[[126600,126600],\"mapped\",[1591]],[[126601,126601],\"mapped\",[1610]],[[126602,126602],\"disallowed\"],[[126603,126603],\"mapped\",[1604]],[[126604,126604],\"mapped\",[1605]],[[126605,126605],\"mapped\",[1606]],[[126606,126606],\"mapped\",[1587]],[[126607,126607],\"mapped\",[1593]],[[126608,126608],\"mapped\",[1601]],[[126609,126609],\"mapped\",[1589]],[[126610,126610],\"mapped\",[1602]],[[126611,126611],\"mapped\",[1585]],[[126612,126612],\"mapped\",[1588]],[[126613,126613],\"mapped\",[1578]],[[126614,126614],\"mapped\",[1579]],[[126615,126615],\"mapped\",[1582]],[[126616,126616],\"mapped\",[1584]],[[126617,126617],\"mapped\",[1590]],[[126618,126618],\"mapped\",[1592]],[[126619,126619],\"mapped\",[1594]],[[126620,126624],\"disallowed\"],[[126625,126625],\"mapped\",[1576]],[[126626,126626],\"mapped\",[1580]],[[126627,126627],\"mapped\",[1583]],[[126628,126628],\"disallowed\"],[[126629,126629],\"mapped\",[1608]],[[126630,126630],\"mapped\",[1586]],[[126631,126631],\"mapped\",[1581]],[[126632,126632],\"mapped\",[1591]],[[126633,126633],\"mapped\",[1610]],[[126634,126634],\"disallowed\"],[[126635,126635],\"mapped\",[1604]],[[126636,126636],\"mapped\",[1605]],[[126637,126637],\"mapped\",[1606]],[[126638,126638],\"mapped\",[1587]],[[126639,126639],\"mapped\",[1593]],[[126640,126640],\"mapped\",[1601]],[[126641,126641],\"mapped\",[1589]],[[126642,126642],\"mapped\",[1602]],[[126643,126643],\"mapped\",[1585]],[[126644,126644],\"mapped\",[1588]],[[126645,126645],\"mapped\",[1578]],[[126646,126646],\"mapped\",[1579]],[[126647,126647],\"mapped\",[1582]],[[126648,126648],\"mapped\",[1584]],[[126649,126649],\"mapped\",[1590]],[[126650,126650],\"mapped\",[1592]],[[126651,126651],\"mapped\",[1594]],[[126652,126703],\"disallowed\"],[[126704,126705],\"valid\",[],\"NV8\"],[[126706,126975],\"disallowed\"],[[126976,127019],\"valid\",[],\"NV8\"],[[127020,127023],\"disallowed\"],[[127024,127123],\"valid\",[],\"NV8\"],[[127124,127135],\"disallowed\"],[[127136,127150],\"valid\",[],\"NV8\"],[[127151,127152],\"disallowed\"],[[127153,127166],\"valid\",[],\"NV8\"],[[127167,127167],\"valid\",[],\"NV8\"],[[127168,127168],\"disallowed\"],[[127169,127183],\"valid\",[],\"NV8\"],[[127184,127184],\"disallowed\"],[[127185,127199],\"valid\",[],\"NV8\"],[[127200,127221],\"valid\",[],\"NV8\"],[[127222,127231],\"disallowed\"],[[127232,127232],\"disallowed\"],[[127233,127233],\"disallowed_STD3_mapped\",[48,44]],[[127234,127234],\"disallowed_STD3_mapped\",[49,44]],[[127235,127235],\"disallowed_STD3_mapped\",[50,44]],[[127236,127236],\"disallowed_STD3_mapped\",[51,44]],[[127237,127237],\"disallowed_STD3_mapped\",[52,44]],[[127238,127238],\"disallowed_STD3_mapped\",[53,44]],[[127239,127239],\"disallowed_STD3_mapped\",[54,44]],[[127240,127240],\"disallowed_STD3_mapped\",[55,44]],[[127241,127241],\"disallowed_STD3_mapped\",[56,44]],[[127242,127242],\"disallowed_STD3_mapped\",[57,44]],[[127243,127244],\"valid\",[],\"NV8\"],[[127245,127247],\"disallowed\"],[[127248,127248],\"disallowed_STD3_mapped\",[40,97,41]],[[127249,127249],\"disallowed_STD3_mapped\",[40,98,41]],[[127250,127250],\"disallowed_STD3_mapped\",[40,99,41]],[[127251,127251],\"disallowed_STD3_mapped\",[40,100,41]],[[127252,127252],\"disallowed_STD3_mapped\",[40,101,41]],[[127253,127253],\"disallowed_STD3_mapped\",[40,102,41]],[[127254,127254],\"disallowed_STD3_mapped\",[40,103,41]],[[127255,127255],\"disallowed_STD3_mapped\",[40,104,41]],[[127256,127256],\"disallowed_STD3_mapped\",[40,105,41]],[[127257,127257],\"disallowed_STD3_mapped\",[40,106,41]],[[127258,127258],\"disallowed_STD3_mapped\",[40,107,41]],[[127259,127259],\"disallowed_STD3_mapped\",[40,108,41]],[[127260,127260],\"disallowed_STD3_mapped\",[40,109,41]],[[127261,127261],\"disallowed_STD3_mapped\",[40,110,41]],[[127262,127262],\"disallowed_STD3_mapped\",[40,111,41]],[[127263,127263],\"disallowed_STD3_mapped\",[40,112,41]],[[127264,127264],\"disallowed_STD3_mapped\",[40,113,41]],[[127265,127265],\"disallowed_STD3_mapped\",[40,114,41]],[[127266,127266],\"disallowed_STD3_mapped\",[40,115,41]],[[127267,127267],\"disallowed_STD3_mapped\",[40,116,41]],[[127268,127268],\"disallowed_STD3_mapped\",[40,117,41]],[[127269,127269],\"disallowed_STD3_mapped\",[40,118,41]],[[127270,127270],\"disallowed_STD3_mapped\",[40,119,41]],[[127271,127271],\"disallowed_STD3_mapped\",[40,120,41]],[[127272,127272],\"disallowed_STD3_mapped\",[40,121,41]],[[127273,127273],\"disallowed_STD3_mapped\",[40,122,41]],[[127274,127274],\"mapped\",[12308,115,12309]],[[127275,127275],\"mapped\",[99]],[[127276,127276],\"mapped\",[114]],[[127277,127277],\"mapped\",[99,100]],[[127278,127278],\"mapped\",[119,122]],[[127279,127279],\"disallowed\"],[[127280,127280],\"mapped\",[97]],[[127281,127281],\"mapped\",[98]],[[127282,127282],\"mapped\",[99]],[[127283,127283],\"mapped\",[100]],[[127284,127284],\"mapped\",[101]],[[127285,127285],\"mapped\",[102]],[[127286,127286],\"mapped\",[103]],[[127287,127287],\"mapped\",[104]],[[127288,127288],\"mapped\",[105]],[[127289,127289],\"mapped\",[106]],[[127290,127290],\"mapped\",[107]],[[127291,127291],\"mapped\",[108]],[[127292,127292],\"mapped\",[109]],[[127293,127293],\"mapped\",[110]],[[127294,127294],\"mapped\",[111]],[[127295,127295],\"mapped\",[112]],[[127296,127296],\"mapped\",[113]],[[127297,127297],\"mapped\",[114]],[[127298,127298],\"mapped\",[115]],[[127299,127299],\"mapped\",[116]],[[127300,127300],\"mapped\",[117]],[[127301,127301],\"mapped\",[118]],[[127302,127302],\"mapped\",[119]],[[127303,127303],\"mapped\",[120]],[[127304,127304],\"mapped\",[121]],[[127305,127305],\"mapped\",[122]],[[127306,127306],\"mapped\",[104,118]],[[127307,127307],\"mapped\",[109,118]],[[127308,127308],\"mapped\",[115,100]],[[127309,127309],\"mapped\",[115,115]],[[127310,127310],\"mapped\",[112,112,118]],[[127311,127311],\"mapped\",[119,99]],[[127312,127318],\"valid\",[],\"NV8\"],[[127319,127319],\"valid\",[],\"NV8\"],[[127320,127326],\"valid\",[],\"NV8\"],[[127327,127327],\"valid\",[],\"NV8\"],[[127328,127337],\"valid\",[],\"NV8\"],[[127338,127338],\"mapped\",[109,99]],[[127339,127339],\"mapped\",[109,100]],[[127340,127343],\"disallowed\"],[[127344,127352],\"valid\",[],\"NV8\"],[[127353,127353],\"valid\",[],\"NV8\"],[[127354,127354],\"valid\",[],\"NV8\"],[[127355,127356],\"valid\",[],\"NV8\"],[[127357,127358],\"valid\",[],\"NV8\"],[[127359,127359],\"valid\",[],\"NV8\"],[[127360,127369],\"valid\",[],\"NV8\"],[[127370,127373],\"valid\",[],\"NV8\"],[[127374,127375],\"valid\",[],\"NV8\"],[[127376,127376],\"mapped\",[100,106]],[[127377,127386],\"valid\",[],\"NV8\"],[[127387,127461],\"disallowed\"],[[127462,127487],\"valid\",[],\"NV8\"],[[127488,127488],\"mapped\",[12411,12363]],[[127489,127489],\"mapped\",[12467,12467]],[[127490,127490],\"mapped\",[12469]],[[127491,127503],\"disallowed\"],[[127504,127504],\"mapped\",[25163]],[[127505,127505],\"mapped\",[23383]],[[127506,127506],\"mapped\",[21452]],[[127507,127507],\"mapped\",[12487]],[[127508,127508],\"mapped\",[20108]],[[127509,127509],\"mapped\",[22810]],[[127510,127510],\"mapped\",[35299]],[[127511,127511],\"mapped\",[22825]],[[127512,127512],\"mapped\",[20132]],[[127513,127513],\"mapped\",[26144]],[[127514,127514],\"mapped\",[28961]],[[127515,127515],\"mapped\",[26009]],[[127516,127516],\"mapped\",[21069]],[[127517,127517],\"mapped\",[24460]],[[127518,127518],\"mapped\",[20877]],[[127519,127519],\"mapped\",[26032]],[[127520,127520],\"mapped\",[21021]],[[127521,127521],\"mapped\",[32066]],[[127522,127522],\"mapped\",[29983]],[[127523,127523],\"mapped\",[36009]],[[127524,127524],\"mapped\",[22768]],[[127525,127525],\"mapped\",[21561]],[[127526,127526],\"mapped\",[28436]],[[127527,127527],\"mapped\",[25237]],[[127528,127528],\"mapped\",[25429]],[[127529,127529],\"mapped\",[19968]],[[127530,127530],\"mapped\",[19977]],[[127531,127531],\"mapped\",[36938]],[[127532,127532],\"mapped\",[24038]],[[127533,127533],\"mapped\",[20013]],[[127534,127534],\"mapped\",[21491]],[[127535,127535],\"mapped\",[25351]],[[127536,127536],\"mapped\",[36208]],[[127537,127537],\"mapped\",[25171]],[[127538,127538],\"mapped\",[31105]],[[127539,127539],\"mapped\",[31354]],[[127540,127540],\"mapped\",[21512]],[[127541,127541],\"mapped\",[28288]],[[127542,127542],\"mapped\",[26377]],[[127543,127543],\"mapped\",[26376]],[[127544,127544],\"mapped\",[30003]],[[127545,127545],\"mapped\",[21106]],[[127546,127546],\"mapped\",[21942]],[[127547,127551],\"disallowed\"],[[127552,127552],\"mapped\",[12308,26412,12309]],[[127553,127553],\"mapped\",[12308,19977,12309]],[[127554,127554],\"mapped\",[12308,20108,12309]],[[127555,127555],\"mapped\",[12308,23433,12309]],[[127556,127556],\"mapped\",[12308,28857,12309]],[[127557,127557],\"mapped\",[12308,25171,12309]],[[127558,127558],\"mapped\",[12308,30423,12309]],[[127559,127559],\"mapped\",[12308,21213,12309]],[[127560,127560],\"mapped\",[12308,25943,12309]],[[127561,127567],\"disallowed\"],[[127568,127568],\"mapped\",[24471]],[[127569,127569],\"mapped\",[21487]],[[127570,127743],\"disallowed\"],[[127744,127776],\"valid\",[],\"NV8\"],[[127777,127788],\"valid\",[],\"NV8\"],[[127789,127791],\"valid\",[],\"NV8\"],[[127792,127797],\"valid\",[],\"NV8\"],[[127798,127798],\"valid\",[],\"NV8\"],[[127799,127868],\"valid\",[],\"NV8\"],[[127869,127869],\"valid\",[],\"NV8\"],[[127870,127871],\"valid\",[],\"NV8\"],[[127872,127891],\"valid\",[],\"NV8\"],[[127892,127903],\"valid\",[],\"NV8\"],[[127904,127940],\"valid\",[],\"NV8\"],[[127941,127941],\"valid\",[],\"NV8\"],[[127942,127946],\"valid\",[],\"NV8\"],[[127947,127950],\"valid\",[],\"NV8\"],[[127951,127955],\"valid\",[],\"NV8\"],[[127956,127967],\"valid\",[],\"NV8\"],[[127968,127984],\"valid\",[],\"NV8\"],[[127985,127991],\"valid\",[],\"NV8\"],[[127992,127999],\"valid\",[],\"NV8\"],[[128000,128062],\"valid\",[],\"NV8\"],[[128063,128063],\"valid\",[],\"NV8\"],[[128064,128064],\"valid\",[],\"NV8\"],[[128065,128065],\"valid\",[],\"NV8\"],[[128066,128247],\"valid\",[],\"NV8\"],[[128248,128248],\"valid\",[],\"NV8\"],[[128249,128252],\"valid\",[],\"NV8\"],[[128253,128254],\"valid\",[],\"NV8\"],[[128255,128255],\"valid\",[],\"NV8\"],[[128256,128317],\"valid\",[],\"NV8\"],[[128318,128319],\"valid\",[],\"NV8\"],[[128320,128323],\"valid\",[],\"NV8\"],[[128324,128330],\"valid\",[],\"NV8\"],[[128331,128335],\"valid\",[],\"NV8\"],[[128336,128359],\"valid\",[],\"NV8\"],[[128360,128377],\"valid\",[],\"NV8\"],[[128378,128378],\"disallowed\"],[[128379,128419],\"valid\",[],\"NV8\"],[[128420,128420],\"disallowed\"],[[128421,128506],\"valid\",[],\"NV8\"],[[128507,128511],\"valid\",[],\"NV8\"],[[128512,128512],\"valid\",[],\"NV8\"],[[128513,128528],\"valid\",[],\"NV8\"],[[128529,128529],\"valid\",[],\"NV8\"],[[128530,128532],\"valid\",[],\"NV8\"],[[128533,128533],\"valid\",[],\"NV8\"],[[128534,128534],\"valid\",[],\"NV8\"],[[128535,128535],\"valid\",[],\"NV8\"],[[128536,128536],\"valid\",[],\"NV8\"],[[128537,128537],\"valid\",[],\"NV8\"],[[128538,128538],\"valid\",[],\"NV8\"],[[128539,128539],\"valid\",[],\"NV8\"],[[128540,128542],\"valid\",[],\"NV8\"],[[128543,128543],\"valid\",[],\"NV8\"],[[128544,128549],\"valid\",[],\"NV8\"],[[128550,128551],\"valid\",[],\"NV8\"],[[128552,128555],\"valid\",[],\"NV8\"],[[128556,128556],\"valid\",[],\"NV8\"],[[128557,128557],\"valid\",[],\"NV8\"],[[128558,128559],\"valid\",[],\"NV8\"],[[128560,128563],\"valid\",[],\"NV8\"],[[128564,128564],\"valid\",[],\"NV8\"],[[128565,128576],\"valid\",[],\"NV8\"],[[128577,128578],\"valid\",[],\"NV8\"],[[128579,128580],\"valid\",[],\"NV8\"],[[128581,128591],\"valid\",[],\"NV8\"],[[128592,128639],\"valid\",[],\"NV8\"],[[128640,128709],\"valid\",[],\"NV8\"],[[128710,128719],\"valid\",[],\"NV8\"],[[128720,128720],\"valid\",[],\"NV8\"],[[128721,128735],\"disallowed\"],[[128736,128748],\"valid\",[],\"NV8\"],[[128749,128751],\"disallowed\"],[[128752,128755],\"valid\",[],\"NV8\"],[[128756,128767],\"disallowed\"],[[128768,128883],\"valid\",[],\"NV8\"],[[128884,128895],\"disallowed\"],[[128896,128980],\"valid\",[],\"NV8\"],[[128981,129023],\"disallowed\"],[[129024,129035],\"valid\",[],\"NV8\"],[[129036,129039],\"disallowed\"],[[129040,129095],\"valid\",[],\"NV8\"],[[129096,129103],\"disallowed\"],[[129104,129113],\"valid\",[],\"NV8\"],[[129114,129119],\"disallowed\"],[[129120,129159],\"valid\",[],\"NV8\"],[[129160,129167],\"disallowed\"],[[129168,129197],\"valid\",[],\"NV8\"],[[129198,129295],\"disallowed\"],[[129296,129304],\"valid\",[],\"NV8\"],[[129305,129407],\"disallowed\"],[[129408,129412],\"valid\",[],\"NV8\"],[[129413,129471],\"disallowed\"],[[129472,129472],\"valid\",[],\"NV8\"],[[129473,131069],\"disallowed\"],[[131070,131071],\"disallowed\"],[[131072,173782],\"valid\"],[[173783,173823],\"disallowed\"],[[173824,177972],\"valid\"],[[177973,177983],\"disallowed\"],[[177984,178205],\"valid\"],[[178206,178207],\"disallowed\"],[[178208,183969],\"valid\"],[[183970,194559],\"disallowed\"],[[194560,194560],\"mapped\",[20029]],[[194561,194561],\"mapped\",[20024]],[[194562,194562],\"mapped\",[20033]],[[194563,194563],\"mapped\",[131362]],[[194564,194564],\"mapped\",[20320]],[[194565,194565],\"mapped\",[20398]],[[194566,194566],\"mapped\",[20411]],[[194567,194567],\"mapped\",[20482]],[[194568,194568],\"mapped\",[20602]],[[194569,194569],\"mapped\",[20633]],[[194570,194570],\"mapped\",[20711]],[[194571,194571],\"mapped\",[20687]],[[194572,194572],\"mapped\",[13470]],[[194573,194573],\"mapped\",[132666]],[[194574,194574],\"mapped\",[20813]],[[194575,194575],\"mapped\",[20820]],[[194576,194576],\"mapped\",[20836]],[[194577,194577],\"mapped\",[20855]],[[194578,194578],\"mapped\",[132380]],[[194579,194579],\"mapped\",[13497]],[[194580,194580],\"mapped\",[20839]],[[194581,194581],\"mapped\",[20877]],[[194582,194582],\"mapped\",[132427]],[[194583,194583],\"mapped\",[20887]],[[194584,194584],\"mapped\",[20900]],[[194585,194585],\"mapped\",[20172]],[[194586,194586],\"mapped\",[20908]],[[194587,194587],\"mapped\",[20917]],[[194588,194588],\"mapped\",[168415]],[[194589,194589],\"mapped\",[20981]],[[194590,194590],\"mapped\",[20995]],[[194591,194591],\"mapped\",[13535]],[[194592,194592],\"mapped\",[21051]],[[194593,194593],\"mapped\",[21062]],[[194594,194594],\"mapped\",[21106]],[[194595,194595],\"mapped\",[21111]],[[194596,194596],\"mapped\",[13589]],[[194597,194597],\"mapped\",[21191]],[[194598,194598],\"mapped\",[21193]],[[194599,194599],\"mapped\",[21220]],[[194600,194600],\"mapped\",[21242]],[[194601,194601],\"mapped\",[21253]],[[194602,194602],\"mapped\",[21254]],[[194603,194603],\"mapped\",[21271]],[[194604,194604],\"mapped\",[21321]],[[194605,194605],\"mapped\",[21329]],[[194606,194606],\"mapped\",[21338]],[[194607,194607],\"mapped\",[21363]],[[194608,194608],\"mapped\",[21373]],[[194609,194611],\"mapped\",[21375]],[[194612,194612],\"mapped\",[133676]],[[194613,194613],\"mapped\",[28784]],[[194614,194614],\"mapped\",[21450]],[[194615,194615],\"mapped\",[21471]],[[194616,194616],\"mapped\",[133987]],[[194617,194617],\"mapped\",[21483]],[[194618,194618],\"mapped\",[21489]],[[194619,194619],\"mapped\",[21510]],[[194620,194620],\"mapped\",[21662]],[[194621,194621],\"mapped\",[21560]],[[194622,194622],\"mapped\",[21576]],[[194623,194623],\"mapped\",[21608]],[[194624,194624],\"mapped\",[21666]],[[194625,194625],\"mapped\",[21750]],[[194626,194626],\"mapped\",[21776]],[[194627,194627],\"mapped\",[21843]],[[194628,194628],\"mapped\",[21859]],[[194629,194630],\"mapped\",[21892]],[[194631,194631],\"mapped\",[21913]],[[194632,194632],\"mapped\",[21931]],[[194633,194633],\"mapped\",[21939]],[[194634,194634],\"mapped\",[21954]],[[194635,194635],\"mapped\",[22294]],[[194636,194636],\"mapped\",[22022]],[[194637,194637],\"mapped\",[22295]],[[194638,194638],\"mapped\",[22097]],[[194639,194639],\"mapped\",[22132]],[[194640,194640],\"mapped\",[20999]],[[194641,194641],\"mapped\",[22766]],[[194642,194642],\"mapped\",[22478]],[[194643,194643],\"mapped\",[22516]],[[194644,194644],\"mapped\",[22541]],[[194645,194645],\"mapped\",[22411]],[[194646,194646],\"mapped\",[22578]],[[194647,194647],\"mapped\",[22577]],[[194648,194648],\"mapped\",[22700]],[[194649,194649],\"mapped\",[136420]],[[194650,194650],\"mapped\",[22770]],[[194651,194651],\"mapped\",[22775]],[[194652,194652],\"mapped\",[22790]],[[194653,194653],\"mapped\",[22810]],[[194654,194654],\"mapped\",[22818]],[[194655,194655],\"mapped\",[22882]],[[194656,194656],\"mapped\",[136872]],[[194657,194657],\"mapped\",[136938]],[[194658,194658],\"mapped\",[23020]],[[194659,194659],\"mapped\",[23067]],[[194660,194660],\"mapped\",[23079]],[[194661,194661],\"mapped\",[23000]],[[194662,194662],\"mapped\",[23142]],[[194663,194663],\"mapped\",[14062]],[[194664,194664],\"disallowed\"],[[194665,194665],\"mapped\",[23304]],[[194666,194667],\"mapped\",[23358]],[[194668,194668],\"mapped\",[137672]],[[194669,194669],\"mapped\",[23491]],[[194670,194670],\"mapped\",[23512]],[[194671,194671],\"mapped\",[23527]],[[194672,194672],\"mapped\",[23539]],[[194673,194673],\"mapped\",[138008]],[[194674,194674],\"mapped\",[23551]],[[194675,194675],\"mapped\",[23558]],[[194676,194676],\"disallowed\"],[[194677,194677],\"mapped\",[23586]],[[194678,194678],\"mapped\",[14209]],[[194679,194679],\"mapped\",[23648]],[[194680,194680],\"mapped\",[23662]],[[194681,194681],\"mapped\",[23744]],[[194682,194682],\"mapped\",[23693]],[[194683,194683],\"mapped\",[138724]],[[194684,194684],\"mapped\",[23875]],[[194685,194685],\"mapped\",[138726]],[[194686,194686],\"mapped\",[23918]],[[194687,194687],\"mapped\",[23915]],[[194688,194688],\"mapped\",[23932]],[[194689,194689],\"mapped\",[24033]],[[194690,194690],\"mapped\",[24034]],[[194691,194691],\"mapped\",[14383]],[[194692,194692],\"mapped\",[24061]],[[194693,194693],\"mapped\",[24104]],[[194694,194694],\"mapped\",[24125]],[[194695,194695],\"mapped\",[24169]],[[194696,194696],\"mapped\",[14434]],[[194697,194697],\"mapped\",[139651]],[[194698,194698],\"mapped\",[14460]],[[194699,194699],\"mapped\",[24240]],[[194700,194700],\"mapped\",[24243]],[[194701,194701],\"mapped\",[24246]],[[194702,194702],\"mapped\",[24266]],[[194703,194703],\"mapped\",[172946]],[[194704,194704],\"mapped\",[24318]],[[194705,194706],\"mapped\",[140081]],[[194707,194707],\"mapped\",[33281]],[[194708,194709],\"mapped\",[24354]],[[194710,194710],\"mapped\",[14535]],[[194711,194711],\"mapped\",[144056]],[[194712,194712],\"mapped\",[156122]],[[194713,194713],\"mapped\",[24418]],[[194714,194714],\"mapped\",[24427]],[[194715,194715],\"mapped\",[14563]],[[194716,194716],\"mapped\",[24474]],[[194717,194717],\"mapped\",[24525]],[[194718,194718],\"mapped\",[24535]],[[194719,194719],\"mapped\",[24569]],[[194720,194720],\"mapped\",[24705]],[[194721,194721],\"mapped\",[14650]],[[194722,194722],\"mapped\",[14620]],[[194723,194723],\"mapped\",[24724]],[[194724,194724],\"mapped\",[141012]],[[194725,194725],\"mapped\",[24775]],[[194726,194726],\"mapped\",[24904]],[[194727,194727],\"mapped\",[24908]],[[194728,194728],\"mapped\",[24910]],[[194729,194729],\"mapped\",[24908]],[[194730,194730],\"mapped\",[24954]],[[194731,194731],\"mapped\",[24974]],[[194732,194732],\"mapped\",[25010]],[[194733,194733],\"mapped\",[24996]],[[194734,194734],\"mapped\",[25007]],[[194735,194735],\"mapped\",[25054]],[[194736,194736],\"mapped\",[25074]],[[194737,194737],\"mapped\",[25078]],[[194738,194738],\"mapped\",[25104]],[[194739,194739],\"mapped\",[25115]],[[194740,194740],\"mapped\",[25181]],[[194741,194741],\"mapped\",[25265]],[[194742,194742],\"mapped\",[25300]],[[194743,194743],\"mapped\",[25424]],[[194744,194744],\"mapped\",[142092]],[[194745,194745],\"mapped\",[25405]],[[194746,194746],\"mapped\",[25340]],[[194747,194747],\"mapped\",[25448]],[[194748,194748],\"mapped\",[25475]],[[194749,194749],\"mapped\",[25572]],[[194750,194750],\"mapped\",[142321]],[[194751,194751],\"mapped\",[25634]],[[194752,194752],\"mapped\",[25541]],[[194753,194753],\"mapped\",[25513]],[[194754,194754],\"mapped\",[14894]],[[194755,194755],\"mapped\",[25705]],[[194756,194756],\"mapped\",[25726]],[[194757,194757],\"mapped\",[25757]],[[194758,194758],\"mapped\",[25719]],[[194759,194759],\"mapped\",[14956]],[[194760,194760],\"mapped\",[25935]],[[194761,194761],\"mapped\",[25964]],[[194762,194762],\"mapped\",[143370]],[[194763,194763],\"mapped\",[26083]],[[194764,194764],\"mapped\",[26360]],[[194765,194765],\"mapped\",[26185]],[[194766,194766],\"mapped\",[15129]],[[194767,194767],\"mapped\",[26257]],[[194768,194768],\"mapped\",[15112]],[[194769,194769],\"mapped\",[15076]],[[194770,194770],\"mapped\",[20882]],[[194771,194771],\"mapped\",[20885]],[[194772,194772],\"mapped\",[26368]],[[194773,194773],\"mapped\",[26268]],[[194774,194774],\"mapped\",[32941]],[[194775,194775],\"mapped\",[17369]],[[194776,194776],\"mapped\",[26391]],[[194777,194777],\"mapped\",[26395]],[[194778,194778],\"mapped\",[26401]],[[194779,194779],\"mapped\",[26462]],[[194780,194780],\"mapped\",[26451]],[[194781,194781],\"mapped\",[144323]],[[194782,194782],\"mapped\",[15177]],[[194783,194783],\"mapped\",[26618]],[[194784,194784],\"mapped\",[26501]],[[194785,194785],\"mapped\",[26706]],[[194786,194786],\"mapped\",[26757]],[[194787,194787],\"mapped\",[144493]],[[194788,194788],\"mapped\",[26766]],[[194789,194789],\"mapped\",[26655]],[[194790,194790],\"mapped\",[26900]],[[194791,194791],\"mapped\",[15261]],[[194792,194792],\"mapped\",[26946]],[[194793,194793],\"mapped\",[27043]],[[194794,194794],\"mapped\",[27114]],[[194795,194795],\"mapped\",[27304]],[[194796,194796],\"mapped\",[145059]],[[194797,194797],\"mapped\",[27355]],[[194798,194798],\"mapped\",[15384]],[[194799,194799],\"mapped\",[27425]],[[194800,194800],\"mapped\",[145575]],[[194801,194801],\"mapped\",[27476]],[[194802,194802],\"mapped\",[15438]],[[194803,194803],\"mapped\",[27506]],[[194804,194804],\"mapped\",[27551]],[[194805,194805],\"mapped\",[27578]],[[194806,194806],\"mapped\",[27579]],[[194807,194807],\"mapped\",[146061]],[[194808,194808],\"mapped\",[138507]],[[194809,194809],\"mapped\",[146170]],[[194810,194810],\"mapped\",[27726]],[[194811,194811],\"mapped\",[146620]],[[194812,194812],\"mapped\",[27839]],[[194813,194813],\"mapped\",[27853]],[[194814,194814],\"mapped\",[27751]],[[194815,194815],\"mapped\",[27926]],[[194816,194816],\"mapped\",[27966]],[[194817,194817],\"mapped\",[28023]],[[194818,194818],\"mapped\",[27969]],[[194819,194819],\"mapped\",[28009]],[[194820,194820],\"mapped\",[28024]],[[194821,194821],\"mapped\",[28037]],[[194822,194822],\"mapped\",[146718]],[[194823,194823],\"mapped\",[27956]],[[194824,194824],\"mapped\",[28207]],[[194825,194825],\"mapped\",[28270]],[[194826,194826],\"mapped\",[15667]],[[194827,194827],\"mapped\",[28363]],[[194828,194828],\"mapped\",[28359]],[[194829,194829],\"mapped\",[147153]],[[194830,194830],\"mapped\",[28153]],[[194831,194831],\"mapped\",[28526]],[[194832,194832],\"mapped\",[147294]],[[194833,194833],\"mapped\",[147342]],[[194834,194834],\"mapped\",[28614]],[[194835,194835],\"mapped\",[28729]],[[194836,194836],\"mapped\",[28702]],[[194837,194837],\"mapped\",[28699]],[[194838,194838],\"mapped\",[15766]],[[194839,194839],\"mapped\",[28746]],[[194840,194840],\"mapped\",[28797]],[[194841,194841],\"mapped\",[28791]],[[194842,194842],\"mapped\",[28845]],[[194843,194843],\"mapped\",[132389]],[[194844,194844],\"mapped\",[28997]],[[194845,194845],\"mapped\",[148067]],[[194846,194846],\"mapped\",[29084]],[[194847,194847],\"disallowed\"],[[194848,194848],\"mapped\",[29224]],[[194849,194849],\"mapped\",[29237]],[[194850,194850],\"mapped\",[29264]],[[194851,194851],\"mapped\",[149000]],[[194852,194852],\"mapped\",[29312]],[[194853,194853],\"mapped\",[29333]],[[194854,194854],\"mapped\",[149301]],[[194855,194855],\"mapped\",[149524]],[[194856,194856],\"mapped\",[29562]],[[194857,194857],\"mapped\",[29579]],[[194858,194858],\"mapped\",[16044]],[[194859,194859],\"mapped\",[29605]],[[194860,194861],\"mapped\",[16056]],[[194862,194862],\"mapped\",[29767]],[[194863,194863],\"mapped\",[29788]],[[194864,194864],\"mapped\",[29809]],[[194865,194865],\"mapped\",[29829]],[[194866,194866],\"mapped\",[29898]],[[194867,194867],\"mapped\",[16155]],[[194868,194868],\"mapped\",[29988]],[[194869,194869],\"mapped\",[150582]],[[194870,194870],\"mapped\",[30014]],[[194871,194871],\"mapped\",[150674]],[[194872,194872],\"mapped\",[30064]],[[194873,194873],\"mapped\",[139679]],[[194874,194874],\"mapped\",[30224]],[[194875,194875],\"mapped\",[151457]],[[194876,194876],\"mapped\",[151480]],[[194877,194877],\"mapped\",[151620]],[[194878,194878],\"mapped\",[16380]],[[194879,194879],\"mapped\",[16392]],[[194880,194880],\"mapped\",[30452]],[[194881,194881],\"mapped\",[151795]],[[194882,194882],\"mapped\",[151794]],[[194883,194883],\"mapped\",[151833]],[[194884,194884],\"mapped\",[151859]],[[194885,194885],\"mapped\",[30494]],[[194886,194887],\"mapped\",[30495]],[[194888,194888],\"mapped\",[30538]],[[194889,194889],\"mapped\",[16441]],[[194890,194890],\"mapped\",[30603]],[[194891,194891],\"mapped\",[16454]],[[194892,194892],\"mapped\",[16534]],[[194893,194893],\"mapped\",[152605]],[[194894,194894],\"mapped\",[30798]],[[194895,194895],\"mapped\",[30860]],[[194896,194896],\"mapped\",[30924]],[[194897,194897],\"mapped\",[16611]],[[194898,194898],\"mapped\",[153126]],[[194899,194899],\"mapped\",[31062]],[[194900,194900],\"mapped\",[153242]],[[194901,194901],\"mapped\",[153285]],[[194902,194902],\"mapped\",[31119]],[[194903,194903],\"mapped\",[31211]],[[194904,194904],\"mapped\",[16687]],[[194905,194905],\"mapped\",[31296]],[[194906,194906],\"mapped\",[31306]],[[194907,194907],\"mapped\",[31311]],[[194908,194908],\"mapped\",[153980]],[[194909,194910],\"mapped\",[154279]],[[194911,194911],\"disallowed\"],[[194912,194912],\"mapped\",[16898]],[[194913,194913],\"mapped\",[154539]],[[194914,194914],\"mapped\",[31686]],[[194915,194915],\"mapped\",[31689]],[[194916,194916],\"mapped\",[16935]],[[194917,194917],\"mapped\",[154752]],[[194918,194918],\"mapped\",[31954]],[[194919,194919],\"mapped\",[17056]],[[194920,194920],\"mapped\",[31976]],[[194921,194921],\"mapped\",[31971]],[[194922,194922],\"mapped\",[32000]],[[194923,194923],\"mapped\",[155526]],[[194924,194924],\"mapped\",[32099]],[[194925,194925],\"mapped\",[17153]],[[194926,194926],\"mapped\",[32199]],[[194927,194927],\"mapped\",[32258]],[[194928,194928],\"mapped\",[32325]],[[194929,194929],\"mapped\",[17204]],[[194930,194930],\"mapped\",[156200]],[[194931,194931],\"mapped\",[156231]],[[194932,194932],\"mapped\",[17241]],[[194933,194933],\"mapped\",[156377]],[[194934,194934],\"mapped\",[32634]],[[194935,194935],\"mapped\",[156478]],[[194936,194936],\"mapped\",[32661]],[[194937,194937],\"mapped\",[32762]],[[194938,194938],\"mapped\",[32773]],[[194939,194939],\"mapped\",[156890]],[[194940,194940],\"mapped\",[156963]],[[194941,194941],\"mapped\",[32864]],[[194942,194942],\"mapped\",[157096]],[[194943,194943],\"mapped\",[32880]],[[194944,194944],\"mapped\",[144223]],[[194945,194945],\"mapped\",[17365]],[[194946,194946],\"mapped\",[32946]],[[194947,194947],\"mapped\",[33027]],[[194948,194948],\"mapped\",[17419]],[[194949,194949],\"mapped\",[33086]],[[194950,194950],\"mapped\",[23221]],[[194951,194951],\"mapped\",[157607]],[[194952,194952],\"mapped\",[157621]],[[194953,194953],\"mapped\",[144275]],[[194954,194954],\"mapped\",[144284]],[[194955,194955],\"mapped\",[33281]],[[194956,194956],\"mapped\",[33284]],[[194957,194957],\"mapped\",[36766]],[[194958,194958],\"mapped\",[17515]],[[194959,194959],\"mapped\",[33425]],[[194960,194960],\"mapped\",[33419]],[[194961,194961],\"mapped\",[33437]],[[194962,194962],\"mapped\",[21171]],[[194963,194963],\"mapped\",[33457]],[[194964,194964],\"mapped\",[33459]],[[194965,194965],\"mapped\",[33469]],[[194966,194966],\"mapped\",[33510]],[[194967,194967],\"mapped\",[158524]],[[194968,194968],\"mapped\",[33509]],[[194969,194969],\"mapped\",[33565]],[[194970,194970],\"mapped\",[33635]],[[194971,194971],\"mapped\",[33709]],[[194972,194972],\"mapped\",[33571]],[[194973,194973],\"mapped\",[33725]],[[194974,194974],\"mapped\",[33767]],[[194975,194975],\"mapped\",[33879]],[[194976,194976],\"mapped\",[33619]],[[194977,194977],\"mapped\",[33738]],[[194978,194978],\"mapped\",[33740]],[[194979,194979],\"mapped\",[33756]],[[194980,194980],\"mapped\",[158774]],[[194981,194981],\"mapped\",[159083]],[[194982,194982],\"mapped\",[158933]],[[194983,194983],\"mapped\",[17707]],[[194984,194984],\"mapped\",[34033]],[[194985,194985],\"mapped\",[34035]],[[194986,194986],\"mapped\",[34070]],[[194987,194987],\"mapped\",[160714]],[[194988,194988],\"mapped\",[34148]],[[194989,194989],\"mapped\",[159532]],[[194990,194990],\"mapped\",[17757]],[[194991,194991],\"mapped\",[17761]],[[194992,194992],\"mapped\",[159665]],[[194993,194993],\"mapped\",[159954]],[[194994,194994],\"mapped\",[17771]],[[194995,194995],\"mapped\",[34384]],[[194996,194996],\"mapped\",[34396]],[[194997,194997],\"mapped\",[34407]],[[194998,194998],\"mapped\",[34409]],[[194999,194999],\"mapped\",[34473]],[[195000,195000],\"mapped\",[34440]],[[195001,195001],\"mapped\",[34574]],[[195002,195002],\"mapped\",[34530]],[[195003,195003],\"mapped\",[34681]],[[195004,195004],\"mapped\",[34600]],[[195005,195005],\"mapped\",[34667]],[[195006,195006],\"mapped\",[34694]],[[195007,195007],\"disallowed\"],[[195008,195008],\"mapped\",[34785]],[[195009,195009],\"mapped\",[34817]],[[195010,195010],\"mapped\",[17913]],[[195011,195011],\"mapped\",[34912]],[[195012,195012],\"mapped\",[34915]],[[195013,195013],\"mapped\",[161383]],[[195014,195014],\"mapped\",[35031]],[[195015,195015],\"mapped\",[35038]],[[195016,195016],\"mapped\",[17973]],[[195017,195017],\"mapped\",[35066]],[[195018,195018],\"mapped\",[13499]],[[195019,195019],\"mapped\",[161966]],[[195020,195020],\"mapped\",[162150]],[[195021,195021],\"mapped\",[18110]],[[195022,195022],\"mapped\",[18119]],[[195023,195023],\"mapped\",[35488]],[[195024,195024],\"mapped\",[35565]],[[195025,195025],\"mapped\",[35722]],[[195026,195026],\"mapped\",[35925]],[[195027,195027],\"mapped\",[162984]],[[195028,195028],\"mapped\",[36011]],[[195029,195029],\"mapped\",[36033]],[[195030,195030],\"mapped\",[36123]],[[195031,195031],\"mapped\",[36215]],[[195032,195032],\"mapped\",[163631]],[[195033,195033],\"mapped\",[133124]],[[195034,195034],\"mapped\",[36299]],[[195035,195035],\"mapped\",[36284]],[[195036,195036],\"mapped\",[36336]],[[195037,195037],\"mapped\",[133342]],[[195038,195038],\"mapped\",[36564]],[[195039,195039],\"mapped\",[36664]],[[195040,195040],\"mapped\",[165330]],[[195041,195041],\"mapped\",[165357]],[[195042,195042],\"mapped\",[37012]],[[195043,195043],\"mapped\",[37105]],[[195044,195044],\"mapped\",[37137]],[[195045,195045],\"mapped\",[165678]],[[195046,195046],\"mapped\",[37147]],[[195047,195047],\"mapped\",[37432]],[[195048,195048],\"mapped\",[37591]],[[195049,195049],\"mapped\",[37592]],[[195050,195050],\"mapped\",[37500]],[[195051,195051],\"mapped\",[37881]],[[195052,195052],\"mapped\",[37909]],[[195053,195053],\"mapped\",[166906]],[[195054,195054],\"mapped\",[38283]],[[195055,195055],\"mapped\",[18837]],[[195056,195056],\"mapped\",[38327]],[[195057,195057],\"mapped\",[167287]],[[195058,195058],\"mapped\",[18918]],[[195059,195059],\"mapped\",[38595]],[[195060,195060],\"mapped\",[23986]],[[195061,195061],\"mapped\",[38691]],[[195062,195062],\"mapped\",[168261]],[[195063,195063],\"mapped\",[168474]],[[195064,195064],\"mapped\",[19054]],[[195065,195065],\"mapped\",[19062]],[[195066,195066],\"mapped\",[38880]],[[195067,195067],\"mapped\",[168970]],[[195068,195068],\"mapped\",[19122]],[[195069,195069],\"mapped\",[169110]],[[195070,195071],\"mapped\",[38923]],[[195072,195072],\"mapped\",[38953]],[[195073,195073],\"mapped\",[169398]],[[195074,195074],\"mapped\",[39138]],[[195075,195075],\"mapped\",[19251]],[[195076,195076],\"mapped\",[39209]],[[195077,195077],\"mapped\",[39335]],[[195078,195078],\"mapped\",[39362]],[[195079,195079],\"mapped\",[39422]],[[195080,195080],\"mapped\",[19406]],[[195081,195081],\"mapped\",[170800]],[[195082,195082],\"mapped\",[39698]],[[195083,195083],\"mapped\",[40000]],[[195084,195084],\"mapped\",[40189]],[[195085,195085],\"mapped\",[19662]],[[195086,195086],\"mapped\",[19693]],[[195087,195087],\"mapped\",[40295]],[[195088,195088],\"mapped\",[172238]],[[195089,195089],\"mapped\",[19704]],[[195090,195090],\"mapped\",[172293]],[[195091,195091],\"mapped\",[172558]],[[195092,195092],\"mapped\",[172689]],[[195093,195093],\"mapped\",[40635]],[[195094,195094],\"mapped\",[19798]],[[195095,195095],\"mapped\",[40697]],[[195096,195096],\"mapped\",[40702]],[[195097,195097],\"mapped\",[40709]],[[195098,195098],\"mapped\",[40719]],[[195099,195099],\"mapped\",[40726]],[[195100,195100],\"mapped\",[40763]],[[195101,195101],\"mapped\",[173568]],[[195102,196605],\"disallowed\"],[[196606,196607],\"disallowed\"],[[196608,262141],\"disallowed\"],[[262142,262143],\"disallowed\"],[[262144,327677],\"disallowed\"],[[327678,327679],\"disallowed\"],[[327680,393213],\"disallowed\"],[[393214,393215],\"disallowed\"],[[393216,458749],\"disallowed\"],[[458750,458751],\"disallowed\"],[[458752,524285],\"disallowed\"],[[524286,524287],\"disallowed\"],[[524288,589821],\"disallowed\"],[[589822,589823],\"disallowed\"],[[589824,655357],\"disallowed\"],[[655358,655359],\"disallowed\"],[[655360,720893],\"disallowed\"],[[720894,720895],\"disallowed\"],[[720896,786429],\"disallowed\"],[[786430,786431],\"disallowed\"],[[786432,851965],\"disallowed\"],[[851966,851967],\"disallowed\"],[[851968,917501],\"disallowed\"],[[917502,917503],\"disallowed\"],[[917504,917504],\"disallowed\"],[[917505,917505],\"disallowed\"],[[917506,917535],\"disallowed\"],[[917536,917631],\"disallowed\"],[[917632,917759],\"disallowed\"],[[917760,917999],\"ignored\"],[[918000,983037],\"disallowed\"],[[983038,983039],\"disallowed\"],[[983040,1048573],\"disallowed\"],[[1048574,1048575],\"disallowed\"],[[1048576,1114109],\"disallowed\"],[[1114110,1114111],\"disallowed\"]]","\"use strict\";\n\nvar punycode = require(\"punycode\");\nvar mappingTable = require(\"./lib/mappingTable.json\");\n\nvar PROCESSING_OPTIONS = {\n  TRANSITIONAL: 0,\n  NONTRANSITIONAL: 1\n};\n\nfunction normalize(str) { // fix bug in v8\n  return str.split('\\u0000').map(function (s) { return s.normalize('NFC'); }).join('\\u0000');\n}\n\nfunction findStatus(val) {\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n\n    var target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      return target;\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction countSymbols(string) {\n  return string\n    // replace every surrogate pair with a BMP symbol\n    .replace(regexAstralSymbols, '_')\n    // then get the length\n    .length;\n}\n\nfunction mapChars(domain_name, useSTD3, processing_option) {\n  var hasError = false;\n  var processed = \"\";\n\n  var len = countSymbols(domain_name);\n  for (var i = 0; i < len; ++i) {\n    var codePoint = domain_name.codePointAt(i);\n    var status = findStatus(codePoint);\n\n    switch (status[1]) {\n      case \"disallowed\":\n        hasError = true;\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += String.fromCodePoint.apply(String, status[2]);\n        break;\n      case \"deviation\":\n        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        } else {\n          processed += String.fromCodePoint(codePoint);\n        }\n        break;\n      case \"valid\":\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"disallowed_STD3_mapped\":\n        if (useSTD3) {\n          hasError = true;\n          processed += String.fromCodePoint(codePoint);\n        } else {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        }\n        break;\n      case \"disallowed_STD3_valid\":\n        if (useSTD3) {\n          hasError = true;\n        }\n\n        processed += String.fromCodePoint(codePoint);\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nvar combiningMarksRegex = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2D]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF01-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDE30-\\uDE40\\uDEAB-\\uDEB7]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nfunction validateLabel(label, processing_option) {\n  if (label.substr(0, 4) === \"xn--\") {\n    label = punycode.toUnicode(label);\n    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;\n  }\n\n  var error = false;\n\n  if (normalize(label) !== label ||\n      (label[3] === \"-\" && label[4] === \"-\") ||\n      label[0] === \"-\" || label[label.length - 1] === \"-\" ||\n      label.indexOf(\".\") !== -1 ||\n      label.search(combiningMarksRegex) === 0) {\n    error = true;\n  }\n\n  var len = countSymbols(label);\n  for (var i = 0; i < len; ++i) {\n    var status = findStatus(label.codePointAt(i));\n    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== \"valid\") ||\n        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&\n         status[1] !== \"valid\" && status[1] !== \"deviation\")) {\n      error = true;\n      break;\n    }\n  }\n\n  return {\n    label: label,\n    error: error\n  };\n}\n\nfunction processing(domain_name, useSTD3, processing_option) {\n  var result = mapChars(domain_name, useSTD3, processing_option);\n  result.string = normalize(result.string);\n\n  var labels = result.string.split(\".\");\n  for (var i = 0; i < labels.length; ++i) {\n    try {\n      var validation = validateLabel(labels[i]);\n      labels[i] = validation.label;\n      result.error = result.error || validation.error;\n    } catch(e) {\n      result.error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: result.error\n  };\n}\n\nmodule.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {\n  var result = processing(domain_name, useSTD3, processing_option);\n  var labels = result.string.split(\".\");\n  labels = labels.map(function(l) {\n    try {\n      return punycode.toASCII(l);\n    } catch(e) {\n      result.error = true;\n      return l;\n    }\n  });\n\n  if (verifyDnsLength) {\n    var total = labels.slice(0, labels.length - 1).join(\".\").length;\n    if (total.length > 253 || total.length === 0) {\n      result.error = true;\n    }\n\n    for (var i=0; i < labels.length; ++i) {\n      if (labels.length > 63 || labels.length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) return null;\n  return labels.join(\".\");\n};\n\nmodule.exports.toUnicode = function(domain_name, useSTD3) {\n  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n};\n\nmodule.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;\n","\"use strict\";\r\nconst punycode = require(\"punycode\");\r\nconst tr46 = require(\"tr46\");\r\n\r\nconst specialSchemes = {\r\n  ftp: 21,\r\n  file: null,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443\r\n};\r\n\r\nconst failure = Symbol(\"failure\");\r\n\r\nfunction countSymbols(str) {\r\n  return punycode.ucs2.decode(str).length;\r\n}\r\n\r\nfunction at(input, idx) {\r\n  const c = input[idx];\r\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\r\n}\r\n\r\nfunction isASCIIDigit(c) {\r\n  return c >= 0x30 && c <= 0x39;\r\n}\r\n\r\nfunction isASCIIAlpha(c) {\r\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\r\n}\r\n\r\nfunction isASCIIAlphanumeric(c) {\r\n  return isASCIIAlpha(c) || isASCIIDigit(c);\r\n}\r\n\r\nfunction isASCIIHex(c) {\r\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\r\n}\r\n\r\nfunction isSingleDot(buffer) {\r\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\r\n}\r\n\r\nfunction isDoubleDot(buffer) {\r\n  buffer = buffer.toLowerCase();\r\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\r\n}\r\n\r\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\r\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\r\n}\r\n\r\nfunction isWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\r\n}\r\n\r\nfunction containsForbiddenHostCodePoint(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction isSpecialScheme(scheme) {\r\n  return specialSchemes[scheme] !== undefined;\r\n}\r\n\r\nfunction isSpecial(url) {\r\n  return isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction defaultPort(scheme) {\r\n  return specialSchemes[scheme];\r\n}\r\n\r\nfunction percentEncode(c) {\r\n  let hex = c.toString(16).toUpperCase();\r\n  if (hex.length === 1) {\r\n    hex = \"0\" + hex;\r\n  }\r\n\r\n  return \"%\" + hex;\r\n}\r\n\r\nfunction utf8PercentEncode(c) {\r\n  const buf = new Buffer(c);\r\n\r\n  let str = \"\";\r\n\r\n  for (let i = 0; i < buf.length; ++i) {\r\n    str += percentEncode(buf[i]);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\nfunction utf8PercentDecode(str) {\r\n  const input = new Buffer(str);\r\n  const output = [];\r\n  for (let i = 0; i < input.length; ++i) {\r\n    if (input[i] !== 37) {\r\n      output.push(input[i]);\r\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\r\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\r\n      i += 2;\r\n    } else {\r\n      output.push(input[i]);\r\n    }\r\n  }\r\n  return new Buffer(output).toString();\r\n}\r\n\r\nfunction isC0ControlPercentEncode(c) {\r\n  return c <= 0x1F || c > 0x7E;\r\n}\r\n\r\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\r\nfunction isPathPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\r\n}\r\n\r\nconst extraUserinfoPercentEncodeSet =\r\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\r\nfunction isUserinfoPercentEncode(c) {\r\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\r\n}\r\n\r\nfunction percentEncodeChar(c, encodeSetPredicate) {\r\n  const cStr = String.fromCodePoint(c);\r\n\r\n  if (encodeSetPredicate(c)) {\r\n    return utf8PercentEncode(cStr);\r\n  }\r\n\r\n  return cStr;\r\n}\r\n\r\nfunction parseIPv4Number(input) {\r\n  let R = 10;\r\n\r\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\r\n    input = input.substring(2);\r\n    R = 16;\r\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\r\n    input = input.substring(1);\r\n    R = 8;\r\n  }\r\n\r\n  if (input === \"\") {\r\n    return 0;\r\n  }\r\n\r\n  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);\r\n  if (regex.test(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return parseInt(input, R);\r\n}\r\n\r\nfunction parseIPv4(input) {\r\n  const parts = input.split(\".\");\r\n  if (parts[parts.length - 1] === \"\") {\r\n    if (parts.length > 1) {\r\n      parts.pop();\r\n    }\r\n  }\r\n\r\n  if (parts.length > 4) {\r\n    return input;\r\n  }\r\n\r\n  const numbers = [];\r\n  for (const part of parts) {\r\n    if (part === \"\") {\r\n      return input;\r\n    }\r\n    const n = parseIPv4Number(part);\r\n    if (n === failure) {\r\n      return input;\r\n    }\r\n\r\n    numbers.push(n);\r\n  }\r\n\r\n  for (let i = 0; i < numbers.length - 1; ++i) {\r\n    if (numbers[i] > 255) {\r\n      return failure;\r\n    }\r\n  }\r\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\r\n    return failure;\r\n  }\r\n\r\n  let ipv4 = numbers.pop();\r\n  let counter = 0;\r\n\r\n  for (const n of numbers) {\r\n    ipv4 += n * Math.pow(256, 3 - counter);\r\n    ++counter;\r\n  }\r\n\r\n  return ipv4;\r\n}\r\n\r\nfunction serializeIPv4(address) {\r\n  let output = \"\";\r\n  let n = address;\r\n\r\n  for (let i = 1; i <= 4; ++i) {\r\n    output = String(n % 256) + output;\r\n    if (i !== 4) {\r\n      output = \".\" + output;\r\n    }\r\n    n = Math.floor(n / 256);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseIPv6(input) {\r\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\r\n  let pieceIndex = 0;\r\n  let compress = null;\r\n  let pointer = 0;\r\n\r\n  input = punycode.ucs2.decode(input);\r\n\r\n  if (input[pointer] === 58) {\r\n    if (input[pointer + 1] !== 58) {\r\n      return failure;\r\n    }\r\n\r\n    pointer += 2;\r\n    ++pieceIndex;\r\n    compress = pieceIndex;\r\n  }\r\n\r\n  while (pointer < input.length) {\r\n    if (pieceIndex === 8) {\r\n      return failure;\r\n    }\r\n\r\n    if (input[pointer] === 58) {\r\n      if (compress !== null) {\r\n        return failure;\r\n      }\r\n      ++pointer;\r\n      ++pieceIndex;\r\n      compress = pieceIndex;\r\n      continue;\r\n    }\r\n\r\n    let value = 0;\r\n    let length = 0;\r\n\r\n    while (length < 4 && isASCIIHex(input[pointer])) {\r\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\r\n      ++pointer;\r\n      ++length;\r\n    }\r\n\r\n    if (input[pointer] === 46) {\r\n      if (length === 0) {\r\n        return failure;\r\n      }\r\n\r\n      pointer -= length;\r\n\r\n      if (pieceIndex > 6) {\r\n        return failure;\r\n      }\r\n\r\n      let numbersSeen = 0;\r\n\r\n      while (input[pointer] !== undefined) {\r\n        let ipv4Piece = null;\r\n\r\n        if (numbersSeen > 0) {\r\n          if (input[pointer] === 46 && numbersSeen < 4) {\r\n            ++pointer;\r\n          } else {\r\n            return failure;\r\n          }\r\n        }\r\n\r\n        if (!isASCIIDigit(input[pointer])) {\r\n          return failure;\r\n        }\r\n\r\n        while (isASCIIDigit(input[pointer])) {\r\n          const number = parseInt(at(input, pointer));\r\n          if (ipv4Piece === null) {\r\n            ipv4Piece = number;\r\n          } else if (ipv4Piece === 0) {\r\n            return failure;\r\n          } else {\r\n            ipv4Piece = ipv4Piece * 10 + number;\r\n          }\r\n          if (ipv4Piece > 255) {\r\n            return failure;\r\n          }\r\n          ++pointer;\r\n        }\r\n\r\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\r\n\r\n        ++numbersSeen;\r\n\r\n        if (numbersSeen === 2 || numbersSeen === 4) {\r\n          ++pieceIndex;\r\n        }\r\n      }\r\n\r\n      if (numbersSeen !== 4) {\r\n        return failure;\r\n      }\r\n\r\n      break;\r\n    } else if (input[pointer] === 58) {\r\n      ++pointer;\r\n      if (input[pointer] === undefined) {\r\n        return failure;\r\n      }\r\n    } else if (input[pointer] !== undefined) {\r\n      return failure;\r\n    }\r\n\r\n    address[pieceIndex] = value;\r\n    ++pieceIndex;\r\n  }\r\n\r\n  if (compress !== null) {\r\n    let swaps = pieceIndex - compress;\r\n    pieceIndex = 7;\r\n    while (pieceIndex !== 0 && swaps > 0) {\r\n      const temp = address[compress + swaps - 1];\r\n      address[compress + swaps - 1] = address[pieceIndex];\r\n      address[pieceIndex] = temp;\r\n      --pieceIndex;\r\n      --swaps;\r\n    }\r\n  } else if (compress === null && pieceIndex !== 8) {\r\n    return failure;\r\n  }\r\n\r\n  return address;\r\n}\r\n\r\nfunction serializeIPv6(address) {\r\n  let output = \"\";\r\n  const seqResult = findLongestZeroSequence(address);\r\n  const compress = seqResult.idx;\r\n  let ignore0 = false;\r\n\r\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\r\n    if (ignore0 && address[pieceIndex] === 0) {\r\n      continue;\r\n    } else if (ignore0) {\r\n      ignore0 = false;\r\n    }\r\n\r\n    if (compress === pieceIndex) {\r\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\r\n      output += separator;\r\n      ignore0 = true;\r\n      continue;\r\n    }\r\n\r\n    output += address[pieceIndex].toString(16);\r\n\r\n    if (pieceIndex !== 7) {\r\n      output += \":\";\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseHost(input, isSpecialArg) {\r\n  if (input[0] === \"[\") {\r\n    if (input[input.length - 1] !== \"]\") {\r\n      return failure;\r\n    }\r\n\r\n    return parseIPv6(input.substring(1, input.length - 1));\r\n  }\r\n\r\n  if (!isSpecialArg) {\r\n    return parseOpaqueHost(input);\r\n  }\r\n\r\n  const domain = utf8PercentDecode(input);\r\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\r\n  if (asciiDomain === null) {\r\n    return failure;\r\n  }\r\n\r\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\r\n    return failure;\r\n  }\r\n\r\n  const ipv4Host = parseIPv4(asciiDomain);\r\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\r\n    return ipv4Host;\r\n  }\r\n\r\n  return asciiDomain;\r\n}\r\n\r\nfunction parseOpaqueHost(input) {\r\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\r\n    return failure;\r\n  }\r\n\r\n  let output = \"\";\r\n  const decoded = punycode.ucs2.decode(input);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction findLongestZeroSequence(arr) {\r\n  let maxIdx = null;\r\n  let maxLen = 1; // only find elements > 1\r\n  let currStart = null;\r\n  let currLen = 0;\r\n\r\n  for (let i = 0; i < arr.length; ++i) {\r\n    if (arr[i] !== 0) {\r\n      if (currLen > maxLen) {\r\n        maxIdx = currStart;\r\n        maxLen = currLen;\r\n      }\r\n\r\n      currStart = null;\r\n      currLen = 0;\r\n    } else {\r\n      if (currStart === null) {\r\n        currStart = i;\r\n      }\r\n      ++currLen;\r\n    }\r\n  }\r\n\r\n  // if trailing zeros\r\n  if (currLen > maxLen) {\r\n    maxIdx = currStart;\r\n    maxLen = currLen;\r\n  }\r\n\r\n  return {\r\n    idx: maxIdx,\r\n    len: maxLen\r\n  };\r\n}\r\n\r\nfunction serializeHost(host) {\r\n  if (typeof host === \"number\") {\r\n    return serializeIPv4(host);\r\n  }\r\n\r\n  // IPv6 serializer\r\n  if (host instanceof Array) {\r\n    return \"[\" + serializeIPv6(host) + \"]\";\r\n  }\r\n\r\n  return host;\r\n}\r\n\r\nfunction trimControlChars(url) {\r\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\r\n}\r\n\r\nfunction trimTabAndNewline(url) {\r\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\r\n}\r\n\r\nfunction shortenPath(url) {\r\n  const path = url.path;\r\n  if (path.length === 0) {\r\n    return;\r\n  }\r\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\r\n    return;\r\n  }\r\n\r\n  path.pop();\r\n}\r\n\r\nfunction includesCredentials(url) {\r\n  return url.username !== \"\" || url.password !== \"\";\r\n}\r\n\r\nfunction cannotHaveAUsernamePasswordPort(url) {\r\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetter(string) {\r\n  return /^[A-Za-z]:$/.test(string);\r\n}\r\n\r\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\r\n  this.pointer = 0;\r\n  this.input = input;\r\n  this.base = base || null;\r\n  this.encodingOverride = encodingOverride || \"utf-8\";\r\n  this.stateOverride = stateOverride;\r\n  this.url = url;\r\n  this.failure = false;\r\n  this.parseError = false;\r\n\r\n  if (!this.url) {\r\n    this.url = {\r\n      scheme: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      host: null,\r\n      port: null,\r\n      path: [],\r\n      query: null,\r\n      fragment: null,\r\n\r\n      cannotBeABaseURL: false\r\n    };\r\n\r\n    const res = trimControlChars(this.input);\r\n    if (res !== this.input) {\r\n      this.parseError = true;\r\n    }\r\n    this.input = res;\r\n  }\r\n\r\n  const res = trimTabAndNewline(this.input);\r\n  if (res !== this.input) {\r\n    this.parseError = true;\r\n  }\r\n  this.input = res;\r\n\r\n  this.state = stateOverride || \"scheme start\";\r\n\r\n  this.buffer = \"\";\r\n  this.atFlag = false;\r\n  this.arrFlag = false;\r\n  this.passwordTokenSeenFlag = false;\r\n\r\n  this.input = punycode.ucs2.decode(this.input);\r\n\r\n  for (; this.pointer <= this.input.length; ++this.pointer) {\r\n    const c = this.input[this.pointer];\r\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\r\n\r\n    // exec state machine\r\n    const ret = this[\"parse \" + this.state](c, cStr);\r\n    if (!ret) {\r\n      break; // terminate algorithm\r\n    } else if (ret === failure) {\r\n      this.failure = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\r\n  if (isASCIIAlpha(c)) {\r\n    this.buffer += cStr.toLowerCase();\r\n    this.state = \"scheme\";\r\n  } else if (!this.stateOverride) {\r\n    this.state = \"no scheme\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\r\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\r\n    this.buffer += cStr.toLowerCase();\r\n  } else if (c === 58) {\r\n    if (this.stateOverride) {\r\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\r\n        return false;\r\n      }\r\n\r\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\r\n        return false;\r\n      }\r\n    }\r\n    this.url.scheme = this.buffer;\r\n    this.buffer = \"\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    if (this.url.scheme === \"file\") {\r\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\r\n        this.parseError = true;\r\n      }\r\n      this.state = \"file\";\r\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\r\n      this.state = \"special relative or authority\";\r\n    } else if (isSpecial(this.url)) {\r\n      this.state = \"special authority slashes\";\r\n    } else if (this.input[this.pointer + 1] === 47) {\r\n      this.state = \"path or authority\";\r\n      ++this.pointer;\r\n    } else {\r\n      this.url.cannotBeABaseURL = true;\r\n      this.url.path.push(\"\");\r\n      this.state = \"cannot-be-a-base-URL path\";\r\n    }\r\n  } else if (!this.stateOverride) {\r\n    this.buffer = \"\";\r\n    this.state = \"no scheme\";\r\n    this.pointer = -1;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\r\n  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {\r\n    return failure;\r\n  } else if (this.base.cannotBeABaseURL && c === 35) {\r\n    this.url.scheme = this.base.scheme;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.url.cannotBeABaseURL = true;\r\n    this.state = \"fragment\";\r\n  } else if (this.base.scheme === \"file\") {\r\n    this.state = \"file\";\r\n    --this.pointer;\r\n  } else {\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\r\n  if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\r\n  this.url.scheme = this.base.scheme;\r\n  if (isNaN(c)) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n  } else if (c === 47) {\r\n    this.state = \"relative slash\";\r\n  } else if (c === 63) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (isSpecial(this.url) && c === 92) {\r\n    this.parseError = true;\r\n    this.state = \"relative slash\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\r\n\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\r\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"special authority ignore slashes\";\r\n  } else if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"special authority ignore slashes\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\r\n  if (c !== 47 && c !== 92) {\r\n    this.state = \"authority\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\r\n  if (c === 64) {\r\n    this.parseError = true;\r\n    if (this.atFlag) {\r\n      this.buffer = \"%40\" + this.buffer;\r\n    }\r\n    this.atFlag = true;\r\n\r\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\r\n    const len = countSymbols(this.buffer);\r\n    for (let pointer = 0; pointer < len; ++pointer) {\r\n      const codePoint = this.buffer.codePointAt(pointer);\r\n\r\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\r\n        this.passwordTokenSeenFlag = true;\r\n        continue;\r\n      }\r\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\r\n      if (this.passwordTokenSeenFlag) {\r\n        this.url.password += encodedCodePoints;\r\n      } else {\r\n        this.url.username += encodedCodePoints;\r\n      }\r\n    }\r\n    this.buffer = \"\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    if (this.atFlag && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n    this.pointer -= countSymbols(this.buffer) + 1;\r\n    this.buffer = \"\";\r\n    this.state = \"host\";\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse hostname\"] =\r\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\r\n  if (this.stateOverride && this.url.scheme === \"file\") {\r\n    --this.pointer;\r\n    this.state = \"file host\";\r\n  } else if (c === 58 && !this.arrFlag) {\r\n    if (this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"port\";\r\n    if (this.stateOverride === \"hostname\") {\r\n      return false;\r\n    }\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    --this.pointer;\r\n    if (isSpecial(this.url) && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    } else if (this.stateOverride && this.buffer === \"\" &&\r\n               (includesCredentials(this.url) || this.url.port !== null)) {\r\n      this.parseError = true;\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"path start\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (c === 91) {\r\n      this.arrFlag = true;\r\n    } else if (c === 93) {\r\n      this.arrFlag = false;\r\n    }\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\r\n  if (isASCIIDigit(c)) {\r\n    this.buffer += cStr;\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92) ||\r\n             this.stateOverride) {\r\n    if (this.buffer !== \"\") {\r\n      const port = parseInt(this.buffer);\r\n      if (port > Math.pow(2, 16) - 1) {\r\n        this.parseError = true;\r\n        return failure;\r\n      }\r\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\r\n      this.buffer = \"\";\r\n    }\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    this.state = \"path start\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\r\n\r\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\r\n  this.url.scheme = \"file\";\r\n\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file slash\";\r\n  } else if (this.base !== null && this.base.scheme === \"file\") {\r\n    if (isNaN(c)) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n    } else if (c === 63) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else {\r\n      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points\r\n          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||\r\n          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points\r\n           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {\r\n        this.url.host = this.base.host;\r\n        this.url.path = this.base.path.slice();\r\n        shortenPath(this.url);\r\n      } else {\r\n        this.parseError = true;\r\n      }\r\n\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file host\";\r\n  } else {\r\n    if (this.base !== null && this.base.scheme === \"file\") {\r\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\r\n        this.url.path.push(this.base.path[0]);\r\n      } else {\r\n        this.url.host = this.base.host;\r\n      }\r\n    }\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\r\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\r\n    --this.pointer;\r\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\r\n      this.parseError = true;\r\n      this.state = \"path\";\r\n    } else if (this.buffer === \"\") {\r\n      this.url.host = \"\";\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n      this.state = \"path start\";\r\n    } else {\r\n      let host = parseHost(this.buffer, isSpecial(this.url));\r\n      if (host === failure) {\r\n        return failure;\r\n      }\r\n      if (host === \"localhost\") {\r\n        host = \"\";\r\n      }\r\n      this.url.host = host;\r\n\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n\r\n      this.buffer = \"\";\r\n      this.state = \"path start\";\r\n    }\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\r\n  if (isSpecial(this.url)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"path\";\r\n\r\n    if (c !== 47 && c !== 92) {\r\n      --this.pointer;\r\n    }\r\n  } else if (!this.stateOverride && c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (!this.stateOverride && c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (c !== undefined) {\r\n    this.state = \"path\";\r\n    if (c !== 47) {\r\n      --this.pointer;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\r\n  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||\r\n      (!this.stateOverride && (c === 63 || c === 35))) {\r\n    if (isSpecial(this.url) && c === 92) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (isDoubleDot(this.buffer)) {\r\n      shortenPath(this.url);\r\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\r\n        this.url.path.push(\"\");\r\n      }\r\n    } else if (isSingleDot(this.buffer) && c !== 47 &&\r\n               !(isSpecial(this.url) && c === 92)) {\r\n      this.url.path.push(\"\");\r\n    } else if (!isSingleDot(this.buffer)) {\r\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\r\n        if (this.url.host !== \"\" && this.url.host !== null) {\r\n          this.parseError = true;\r\n          this.url.host = \"\";\r\n        }\r\n        this.buffer = this.buffer[0] + \":\";\r\n      }\r\n      this.url.path.push(this.buffer);\r\n    }\r\n    this.buffer = \"\";\r\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\r\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\r\n        this.parseError = true;\r\n        this.url.path.shift();\r\n      }\r\n    }\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    }\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\r\n  if (c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else {\r\n    // TODO: Add: not a URL code point\r\n    if (!isNaN(c) && c !== 37) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (c === 37 &&\r\n        (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n         !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (!isNaN(c)) {\r\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\r\n  if (isNaN(c) || (!this.stateOverride && c === 35)) {\r\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\r\n      this.encodingOverride = \"utf-8\";\r\n    }\r\n\r\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\r\n    for (let i = 0; i < buffer.length; ++i) {\r\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||\r\n          buffer[i] === 0x3C || buffer[i] === 0x3E) {\r\n        this.url.query += percentEncode(buffer[i]);\r\n      } else {\r\n        this.url.query += String.fromCodePoint(buffer[i]);\r\n      }\r\n    }\r\n\r\n    this.buffer = \"\";\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\r\n  if (isNaN(c)) { // do nothing\r\n  } else if (c === 0x0) {\r\n    this.parseError = true;\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction serializeURL(url, excludeFragment) {\r\n  let output = url.scheme + \":\";\r\n  if (url.host !== null) {\r\n    output += \"//\";\r\n\r\n    if (url.username !== \"\" || url.password !== \"\") {\r\n      output += url.username;\r\n      if (url.password !== \"\") {\r\n        output += \":\" + url.password;\r\n      }\r\n      output += \"@\";\r\n    }\r\n\r\n    output += serializeHost(url.host);\r\n\r\n    if (url.port !== null) {\r\n      output += \":\" + url.port;\r\n    }\r\n  } else if (url.host === null && url.scheme === \"file\") {\r\n    output += \"//\";\r\n  }\r\n\r\n  if (url.cannotBeABaseURL) {\r\n    output += url.path[0];\r\n  } else {\r\n    for (const string of url.path) {\r\n      output += \"/\" + string;\r\n    }\r\n  }\r\n\r\n  if (url.query !== null) {\r\n    output += \"?\" + url.query;\r\n  }\r\n\r\n  if (!excludeFragment && url.fragment !== null) {\r\n    output += \"#\" + url.fragment;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction serializeOrigin(tuple) {\r\n  let result = tuple.scheme + \"://\";\r\n  result += serializeHost(tuple.host);\r\n\r\n  if (tuple.port !== null) {\r\n    result += \":\" + tuple.port;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports.serializeURL = serializeURL;\r\n\r\nmodule.exports.serializeURLOrigin = function (url) {\r\n  // https://url.spec.whatwg.org/#concept-url-origin\r\n  switch (url.scheme) {\r\n    case \"blob\":\r\n      try {\r\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\r\n      } catch (e) {\r\n        // serializing an opaque origin returns \"null\"\r\n        return \"null\";\r\n      }\r\n    case \"ftp\":\r\n    case \"gopher\":\r\n    case \"http\":\r\n    case \"https\":\r\n    case \"ws\":\r\n    case \"wss\":\r\n      return serializeOrigin({\r\n        scheme: url.scheme,\r\n        host: url.host,\r\n        port: url.port\r\n      });\r\n    case \"file\":\r\n      // spec says \"exercise to the reader\", chrome says \"file://\"\r\n      return \"file://\";\r\n    default:\r\n      // serializing an opaque origin returns \"null\"\r\n      return \"null\";\r\n  }\r\n};\r\n\r\nmodule.exports.basicURLParse = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\r\n  if (usm.failure) {\r\n    return \"failure\";\r\n  }\r\n\r\n  return usm.url;\r\n};\r\n\r\nmodule.exports.setTheUsername = function (url, username) {\r\n  url.username = \"\";\r\n  const decoded = punycode.ucs2.decode(username);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.setThePassword = function (url, password) {\r\n  url.password = \"\";\r\n  const decoded = punycode.ucs2.decode(password);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.serializeHost = serializeHost;\r\n\r\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\r\n\r\nmodule.exports.serializeInteger = function (integer) {\r\n  return String(integer);\r\n};\r\n\r\nmodule.exports.parseURL = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  // We don't handle blobs, so this just delegates:\r\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\r\n};\r\n","\"use strict\";\nconst usm = require(\"./url-state-machine\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Impl = require(\".//URL-impl.js\");\n\nconst impl = utils.implSymbol;\n\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n  args[1] = conversions[\"USVString\"](args[1]);\n  }\n\n  module.exports.setup(this, args);\n}\n\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\n\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\n\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: { URL: URL },\n    Worker: { URL: URL }\n  }\n};\n\n","\"use strict\";\n\nexports.URL = require(\"./URL\").interface;\nexports.serializeURL = require(\"./url-state-machine\").serializeURL;\nexports.serializeURLOrigin = require(\"./url-state-machine\").serializeURLOrigin;\nexports.basicURLParse = require(\"./url-state-machine\").basicURLParse;\nexports.setTheUsername = require(\"./url-state-machine\").setTheUsername;\nexports.setThePassword = require(\"./url-state-machine\").setThePassword;\nexports.serializeHost = require(\"./url-state-machine\").serializeHost;\nexports.serializeInteger = require(\"./url-state-machine\").serializeInteger;\nexports.parseURL = require(\"./url-state-machine\").parseURL;\n","/**\n * @license\n * web-streams-polyfill v4.0.0-beta.3\n * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */\nconst e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function t(){}function r(e){return\"object\"==typeof e&&null!==e||\"function\"==typeof e}const o=t;function n(e,t){try{Object.defineProperty(e,\"name\",{value:t,configurable:!0})}catch(e){}}const a=Promise,i=Promise.prototype.then,l=Promise.resolve.bind(a),s=Promise.reject.bind(a);function u(e){return new a(e)}function c(e){return l(e)}function d(e){return s(e)}function f(e,t,r){return i.call(e,t,r)}function b(e,t,r){f(f(e,t,r),void 0,o)}function h(e,t){b(e,t)}function _(e,t){b(e,void 0,t)}function p(e,t,r){return f(e,t,r)}function m(e){f(e,void 0,o)}let y=e=>{if(\"function\"==typeof queueMicrotask)y=queueMicrotask;else{const e=c(void 0);y=t=>f(e,t)}return y(e)};function g(e,t,r){if(\"function\"!=typeof e)throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(e,t,r)}function w(e,t,r){try{return c(g(e,t,r))}catch(e){return d(e)}}class S{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,a=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,a}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(r=r._next,o=r._elements,t=0,0===o.length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}const v=e(\"[[AbortSteps]]\"),R=e(\"[[ErrorSteps]]\"),T=e(\"[[CancelSteps]]\"),q=e(\"[[PullSteps]]\"),C=e(\"[[ReleaseSteps]]\");function E(e,t){e._ownerReadableStream=t,t._reader=e,\"readable\"===t._state?O(e):\"closed\"===t._state?function(e){O(e),j(e)}(e):B(e,t._storedError)}function P(e,t){return Gt(e._ownerReadableStream,t)}function W(e){const t=e._ownerReadableStream;\"readable\"===t._state?A(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):function(e,t){B(e,t)}(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),t._readableStreamController[C](),t._reader=void 0,e._ownerReadableStream=void 0}function k(e){return new TypeError(\"Cannot \"+e+\" a stream using a released reader\")}function O(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function B(e,t){O(e),A(e,t)}function A(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function j(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const z=Number.isFinite||function(e){return\"number\"==typeof e&&isFinite(e)},L=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function F(e,t){if(void 0!==e&&(\"object\"!=typeof(r=e)&&\"function\"!=typeof r))throw new TypeError(`${t} is not an object.`);var r}function I(e,t){if(\"function\"!=typeof e)throw new TypeError(`${t} is not a function.`)}function D(e,t){if(!function(e){return\"object\"==typeof e&&null!==e||\"function\"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function $(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function M(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function Y(e){return Number(e)}function Q(e){return 0===e?0:e}function N(e,t){const r=Number.MAX_SAFE_INTEGER;let o=Number(e);if(o=Q(o),!z(o))throw new TypeError(`${t} is not a finite number`);if(o=function(e){return Q(L(e))}(o),o<0||o>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return z(o)&&0!==o?o:0}function H(e){if(!r(e))return!1;if(\"function\"!=typeof e.getReader)return!1;try{return\"boolean\"==typeof e.locked}catch(e){return!1}}function x(e){if(!r(e))return!1;if(\"function\"!=typeof e.getWriter)return!1;try{return\"boolean\"==typeof e.locked}catch(e){return!1}}function V(e,t){if(!Vt(e))throw new TypeError(`${t} is not a ReadableStream.`)}function U(e,t){e._reader._readRequests.push(t)}function G(e,t,r){const o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function X(e){return e._reader._readRequests.length}function J(e){const t=e._reader;return void 0!==t&&!!K(t)}class ReadableStreamDefaultReader{constructor(e){if($(e,1,\"ReadableStreamDefaultReader\"),V(e,\"First parameter\"),Ut(e))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");E(this,e),this._readRequests=new S}get closed(){return K(this)?this._closedPromise:d(ee(\"closed\"))}cancel(e){return K(this)?void 0===this._ownerReadableStream?d(k(\"cancel\")):P(this,e):d(ee(\"cancel\"))}read(){if(!K(this))return d(ee(\"read\"));if(void 0===this._ownerReadableStream)return d(k(\"read from\"));let e,t;const r=u(((r,o)=>{e=r,t=o}));return function(e,t){const r=e._ownerReadableStream;r._disturbed=!0,\"closed\"===r._state?t._closeSteps():\"errored\"===r._state?t._errorSteps(r._storedError):r._readableStreamController[q](t)}(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!K(this))throw ee(\"releaseLock\");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError(\"Reader was released\");Z(e,t)}(this)}}function K(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readRequests\")&&e instanceof ReadableStreamDefaultReader)}function Z(e,t){const r=e._readRequests;e._readRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function ee(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(ReadableStreamDefaultReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamDefaultReader.prototype.cancel,\"cancel\"),n(ReadableStreamDefaultReader.prototype.read,\"read\"),n(ReadableStreamDefaultReader.prototype.releaseLock,\"releaseLock\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultReader.prototype,e.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});class te{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?p(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?p(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;return void 0===e?d(k(\"iterate\")):f(e.read(),(e=>{var t;return this._ongoingPromise=void 0,e.done&&(this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0),e}),(e=>{var t;throw this._ongoingPromise=void 0,this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0,e}))}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t)return d(k(\"finish iterating\"));if(this._reader=void 0,!this._preventCancel){const r=t.cancel(e);return t.releaseLock(),p(r,(()=>({value:e,done:!0})))}return t.releaseLock(),c({value:e,done:!0})}}const re={next(){return oe(this)?this._asyncIteratorImpl.next():d(ne(\"next\"))},return(e){return oe(this)?this._asyncIteratorImpl.return(e):d(ne(\"return\"))}};function oe(e){if(!r(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,\"_asyncIteratorImpl\"))return!1;try{return e._asyncIteratorImpl instanceof te}catch(e){return!1}}function ne(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}\"symbol\"==typeof e.asyncIterator&&Object.defineProperty(re,e.asyncIterator,{value(){return this},writable:!0,configurable:!0});const ae=Number.isNaN||function(e){return e!=e};function ie(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function le(e){const t=function(e,t,r){if(e.slice)return e.slice(t,r);const o=r-t,n=new ArrayBuffer(o);return ie(n,0,e,t,o),n}(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function se(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function ue(e,t,r){if(\"number\"!=typeof(o=r)||ae(o)||o<0||r===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function ce(e){e._queue=new S,e._queueTotalSize=0}class ReadableStreamBYOBRequest{constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!fe(this))throw Be(\"view\");return this._view}respond(e){if(!fe(this))throw Be(\"respond\");if($(e,1,\"respond\"),e=N(e,\"First parameter\"),void 0===this._associatedReadableByteStreamController)throw new TypeError(\"This BYOB request has been invalidated\");this._view.buffer,function(e,t){const r=e._pendingPullIntos.peek();if(\"closed\"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(0===t)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(r.bytesFilled+t>r.byteLength)throw new RangeError(\"bytesWritten out of range\")}r.buffer=r.buffer,qe(e,t)}(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!fe(this))throw Be(\"respondWithNewView\");if($(e,1,\"respondWithNewView\"),!ArrayBuffer.isView(e))throw new TypeError(\"You can only respond with array buffer views\");if(void 0===this._associatedReadableByteStreamController)throw new TypeError(\"This BYOB request has been invalidated\");e.buffer,function(e,t){const r=e._pendingPullIntos.peek();if(\"closed\"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(0===t.byteLength)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const o=t.byteLength;r.buffer=t.buffer,qe(e,o)}(this._associatedReadableByteStreamController,e)}}Object.defineProperties(ReadableStreamBYOBRequest.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),n(ReadableStreamBYOBRequest.prototype.respond,\"respond\"),n(ReadableStreamBYOBRequest.prototype.respondWithNewView,\"respondWithNewView\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBRequest.prototype,e.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});class ReadableByteStreamController{constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!de(this))throw Ae(\"byobRequest\");return function(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(ReadableStreamBYOBRequest.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(o,e,r),e._byobRequest=o}return e._byobRequest}(this)}get desiredSize(){if(!de(this))throw Ae(\"desiredSize\");return ke(this)}close(){if(!de(this))throw Ae(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const e=this._controlledReadableByteStream._state;if(\"readable\"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function(e){const t=e._controlledReadableByteStream;if(e._closeRequested||\"readable\"!==t._state)return;if(e._queueTotalSize>0)return void(e._closeRequested=!0);if(e._pendingPullIntos.length>0){if(e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw Pe(e,t),t}}Ee(e),Xt(t)}(this)}enqueue(e){if(!de(this))throw Ae(\"enqueue\");if($(e,1,\"enqueue\"),!ArrayBuffer.isView(e))throw new TypeError(\"chunk must be an array buffer view\");if(0===e.byteLength)throw new TypeError(\"chunk must have non-zero byteLength\");if(0===e.buffer.byteLength)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const t=this._controlledReadableByteStream._state;if(\"readable\"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);!function(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||\"readable\"!==r._state)return;const o=t.buffer,n=t.byteOffset,a=t.byteLength,i=o;if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();t.buffer,0,Re(e),t.buffer=t.buffer,\"none\"===t.readerType&&ge(e,t)}if(J(r))if(function(e){const t=e._controlledReadableByteStream._reader;for(;t._readRequests.length>0;){if(0===e._queueTotalSize)return;We(e,t._readRequests.shift())}}(e),0===X(r))me(e,i,n,a);else{e._pendingPullIntos.length>0&&Ce(e);G(r,new Uint8Array(i,n,a),!1)}else Le(r)?(me(e,i,n,a),Te(e)):me(e,i,n,a);be(e)}(this,e)}error(e){if(!de(this))throw Ae(\"error\");Pe(this,e)}[T](e){he(this),ce(this);const t=this._cancelAlgorithm(e);return Ee(this),t}[q](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0)return void We(this,e);const r=this._autoAllocateChunkSize;if(void 0!==r){let t;try{t=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const o={buffer:t,bufferByteLength:r,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(o)}U(t,e),be(this)}[C](){if(this._pendingPullIntos.length>0){const e=this._pendingPullIntos.peek();e.readerType=\"none\",this._pendingPullIntos=new S,this._pendingPullIntos.push(e)}}}function de(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableByteStream\")&&e instanceof ReadableByteStreamController)}function fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_associatedReadableByteStreamController\")&&e instanceof ReadableStreamBYOBRequest)}function be(e){const t=function(e){const t=e._controlledReadableByteStream;if(\"readable\"!==t._state)return!1;if(e._closeRequested)return!1;if(!e._started)return!1;if(J(t)&&X(t)>0)return!0;if(Le(t)&&ze(t)>0)return!0;if(ke(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,be(e)),null)),(t=>(Pe(e,t),null)))}function he(e){Re(e),e._pendingPullIntos=new S}function _e(e,t){let r=!1;\"closed\"===e._state&&(r=!0);const o=pe(t);\"default\"===t.readerType?G(e,o,r):function(e,t,r){const o=e._reader._readIntoRequests.shift();r?o._closeSteps(t):o._chunkSteps(t)}(e,o,r)}function pe(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function me(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function ye(e,t,r,o){let n;try{n=t.slice(r,r+o)}catch(t){throw Pe(e,t),t}me(e,n,0,o)}function ge(e,t){t.bytesFilled>0&&ye(e,t.buffer,t.byteOffset,t.bytesFilled),Ce(e)}function we(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),a=t.bytesFilled+n,i=a-a%r;let l=n,s=!1;i>o&&(l=i-t.bytesFilled,s=!0);const u=e._queue;for(;l>0;){const r=u.peek(),o=Math.min(l,r.byteLength),n=t.byteOffset+t.bytesFilled;ie(t.buffer,n,r.buffer,r.byteOffset,o),r.byteLength===o?u.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Se(e,o,t),l-=o}return s}function Se(e,t,r){r.bytesFilled+=t}function ve(e){0===e._queueTotalSize&&e._closeRequested?(Ee(e),Xt(e._controlledReadableByteStream)):be(e)}function Re(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Te(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();we(e,t)&&(Ce(e),_e(e._controlledReadableByteStream,t))}}function qe(e,t){const r=e._pendingPullIntos.peek();Re(e);\"closed\"===e._controlledReadableByteStream._state?function(e,t){\"none\"===t.readerType&&Ce(e);const r=e._controlledReadableByteStream;if(Le(r))for(;ze(r)>0;)_e(r,Ce(e))}(e,r):function(e,t,r){if(Se(0,t,r),\"none\"===r.readerType)return ge(e,r),void Te(e);if(r.bytesFilled<r.elementSize)return;Ce(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled;ye(e,r.buffer,t-o,o)}r.bytesFilled-=o,_e(e._controlledReadableByteStream,r),Te(e)}(e,t,r),be(e)}function Ce(e){return e._pendingPullIntos.shift()}function Ee(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Pe(e,t){const r=e._controlledReadableByteStream;\"readable\"===r._state&&(he(e),ce(e),Ee(e),Jt(r,t))}function We(e,t){const r=e._queue.shift();e._queueTotalSize-=r.byteLength,ve(e);const o=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);t._chunkSteps(o)}function ke(e){const t=e._controlledReadableByteStream._state;return\"errored\"===t?null:\"closed\"===t?0:e._strategyHWM-e._queueTotalSize}function Oe(e,t,r){const o=Object.create(ReadableByteStreamController.prototype);let n,a,i;n=void 0!==t.start?()=>t.start(o):()=>{},a=void 0!==t.pull?()=>t.pull(o):()=>c(void 0),i=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0);const l=t.autoAllocateChunkSize;if(0===l)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");!function(e,t,r,o,n,a,i){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,ce(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=i,t._pendingPullIntos=new S,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,be(t),null)),(e=>(Pe(t,e),null)))}(e,o,n,a,i,r,l)}function Be(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function Ae(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function je(e,t){e._reader._readIntoRequests.push(t)}function ze(e){return e._reader._readIntoRequests.length}function Le(e){const t=e._reader;return void 0!==t&&!!Fe(t)}Object.defineProperties(ReadableByteStreamController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableByteStreamController.prototype.close,\"close\"),n(ReadableByteStreamController.prototype.enqueue,\"enqueue\"),n(ReadableByteStreamController.prototype.error,\"error\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableByteStreamController.prototype,e.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});class ReadableStreamBYOBReader{constructor(e){if($(e,1,\"ReadableStreamBYOBReader\"),V(e,\"First parameter\"),Ut(e))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!de(e._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");E(this,e),this._readIntoRequests=new S}get closed(){return Fe(this)?this._closedPromise:d(De(\"closed\"))}cancel(e){return Fe(this)?void 0===this._ownerReadableStream?d(k(\"cancel\")):P(this,e):d(De(\"cancel\"))}read(e){if(!Fe(this))return d(De(\"read\"));if(!ArrayBuffer.isView(e))return d(new TypeError(\"view must be an array buffer view\"));if(0===e.byteLength)return d(new TypeError(\"view must have non-zero byteLength\"));if(0===e.buffer.byteLength)return d(new TypeError(\"view's buffer must have non-zero byteLength\"));if(e.buffer,void 0===this._ownerReadableStream)return d(k(\"read from\"));let t,r;const o=u(((e,o)=>{t=e,r=o}));return function(e,t,r){const o=e._ownerReadableStream;o._disturbed=!0,\"errored\"===o._state?r._errorSteps(o._storedError):function(e,t,r){const o=e._controlledReadableByteStream;let n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);const a=t.constructor,i=t.buffer,l={buffer:i,bufferByteLength:i.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:a,readerType:\"byob\"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(l),void je(o,r);if(\"closed\"!==o._state){if(e._queueTotalSize>0){if(we(e,l)){const t=pe(l);return ve(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");return Pe(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(l),je(o,r),be(e)}else{const e=new a(l.buffer,l.byteOffset,0);r._closeSteps(e)}}(o._readableStreamController,t,r)}(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),o}releaseLock(){if(!Fe(this))throw De(\"releaseLock\");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError(\"Reader was released\");Ie(e,t)}(this)}}function Fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readIntoRequests\")&&e instanceof ReadableStreamBYOBReader)}function Ie(e,t){const r=e._readIntoRequests;e._readIntoRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function De(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function $e(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(ae(r)||r<0)throw new RangeError(\"Invalid highWaterMark\");return r}function Me(e){const{size:t}=e;return t||(()=>1)}function Ye(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:Y(r),size:void 0===o?void 0:Qe(o,`${t} has member 'size' that`)}}function Qe(e,t){return I(e,t),t=>Y(e(t))}function Ne(e,t,r){return I(e,r),r=>w(e,t,[r])}function He(e,t,r){return I(e,r),()=>w(e,t,[])}function xe(e,t,r){return I(e,r),r=>g(e,t,[r])}function Ve(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(ReadableStreamBYOBReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamBYOBReader.prototype.cancel,\"cancel\"),n(ReadableStreamBYOBReader.prototype.read,\"read\"),n(ReadableStreamBYOBReader.prototype.releaseLock,\"releaseLock\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBReader.prototype,e.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});const Ue=\"function\"==typeof AbortController;class WritableStream{constructor(e={},t={}){void 0===e?e=null:D(e,\"First parameter\");const r=Ye(t,\"Second parameter\"),o=function(e,t){F(e,t);const r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,a=null==e?void 0:e.type,i=null==e?void 0:e.write;return{abort:void 0===r?void 0:Ne(r,e,`${t} has member 'abort' that`),close:void 0===o?void 0:He(o,e,`${t} has member 'close' that`),start:void 0===n?void 0:xe(n,e,`${t} has member 'start' that`),write:void 0===i?void 0:Ve(i,e,`${t} has member 'write' that`),type:a}}(e,\"First parameter\");var n;(n=this)._state=\"writable\",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new S,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1;if(void 0!==o.type)throw new RangeError(\"Invalid type is specified\");const a=Me(r);!function(e,t,r,o){const n=Object.create(WritableStreamDefaultController.prototype);let a,i,l,s;a=void 0!==t.start?()=>t.start(n):()=>{};i=void 0!==t.write?e=>t.write(e,n):()=>c(void 0);l=void 0!==t.close?()=>t.close():()=>c(void 0);s=void 0!==t.abort?e=>t.abort(e):()=>c(void 0);!function(e,t,r,o,n,a,i,l){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._abortReason=void 0,t._abortController=function(){if(Ue)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=l,t._strategyHWM=i,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=a;const s=bt(t);nt(e,s);const u=r();b(c(u),(()=>(t._started=!0,dt(t),null)),(r=>(t._started=!0,Ze(e,r),null)))}(e,n,a,i,l,s,r,o)}(this,o,$e(r,1),a)}get locked(){if(!Ge(this))throw _t(\"locked\");return Xe(this)}abort(e){return Ge(this)?Xe(this)?d(new TypeError(\"Cannot abort a stream that already has a writer\")):Je(this,e):d(_t(\"abort\"))}close(){return Ge(this)?Xe(this)?d(new TypeError(\"Cannot close a stream that already has a writer\")):rt(this)?d(new TypeError(\"Cannot close an already-closing stream\")):Ke(this):d(_t(\"close\"))}getWriter(){if(!Ge(this))throw _t(\"getWriter\");return new WritableStreamDefaultWriter(this)}}function Ge(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_writableStreamController\")&&e instanceof WritableStream)}function Xe(e){return void 0!==e._writer}function Je(e,t){var r;if(\"closed\"===e._state||\"errored\"===e._state)return c(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort(t);const o=e._state;if(\"closed\"===o||\"errored\"===o)return c(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;\"erroring\"===o&&(n=!0,t=void 0);const a=u(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=a,n||et(e,t),a}function Ke(e){const t=e._state;if(\"closed\"===t||\"errored\"===t)return d(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=u(((t,r)=>{const o={_resolve:t,_reject:r};e._closeRequest=o})),o=e._writer;var n;return void 0!==o&&e._backpressure&&\"writable\"===t&&Et(o),ue(n=e._writableStreamController,lt,0),dt(n),r}function Ze(e,t){\"writable\"!==e._state?tt(e):et(e,t)}function et(e,t){const r=e._writableStreamController;e._state=\"erroring\",e._storedError=t;const o=e._writer;void 0!==o&&it(o,t),!function(e){if(void 0===e._inFlightWriteRequest&&void 0===e._inFlightCloseRequest)return!1;return!0}(e)&&r._started&&tt(e)}function tt(e){e._state=\"errored\",e._writableStreamController[R]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new S,void 0===e._pendingAbortRequest)return void ot(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void ot(e);b(e._writableStreamController[v](r._reason),(()=>(r._resolve(),ot(e),null)),(t=>(r._reject(t),ot(e),null)))}function rt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function ot(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&St(t,e._storedError)}function nt(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){Rt(e)}(r):Et(r)),e._backpressure=t}Object.defineProperties(WritableStream.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),n(WritableStream.prototype.abort,\"abort\"),n(WritableStream.prototype.close,\"close\"),n(WritableStream.prototype.getWriter,\"getWriter\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStream.prototype,e.toStringTag,{value:\"WritableStream\",configurable:!0});class WritableStreamDefaultWriter{constructor(e){if($(e,1,\"WritableStreamDefaultWriter\"),function(e,t){if(!Ge(e))throw new TypeError(`${t} is not a WritableStream.`)}(e,\"First parameter\"),Xe(e))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=e,e._writer=this;const t=e._state;if(\"writable\"===t)!rt(e)&&e._backpressure?Rt(this):qt(this),gt(this);else if(\"erroring\"===t)Tt(this,e._storedError),gt(this);else if(\"closed\"===t)qt(this),gt(r=this),vt(r);else{const t=e._storedError;Tt(this,t),wt(this,t)}var r}get closed(){return at(this)?this._closedPromise:d(mt(\"closed\"))}get desiredSize(){if(!at(this))throw mt(\"desiredSize\");if(void 0===this._ownerWritableStream)throw yt(\"desiredSize\");return function(e){const t=e._ownerWritableStream,r=t._state;if(\"errored\"===r||\"erroring\"===r)return null;if(\"closed\"===r)return 0;return ct(t._writableStreamController)}(this)}get ready(){return at(this)?this._readyPromise:d(mt(\"ready\"))}abort(e){return at(this)?void 0===this._ownerWritableStream?d(yt(\"abort\")):function(e,t){return Je(e._ownerWritableStream,t)}(this,e):d(mt(\"abort\"))}close(){if(!at(this))return d(mt(\"close\"));const e=this._ownerWritableStream;return void 0===e?d(yt(\"close\")):rt(e)?d(new TypeError(\"Cannot close an already-closing stream\")):Ke(this._ownerWritableStream)}releaseLock(){if(!at(this))throw mt(\"releaseLock\");void 0!==this._ownerWritableStream&&function(e){const t=e._ownerWritableStream,r=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");it(e,r),function(e,t){\"pending\"===e._closedPromiseState?St(e,t):function(e,t){wt(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}(this)}write(e){return at(this)?void 0===this._ownerWritableStream?d(yt(\"write to\")):function(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return ft(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return d(yt(\"write to\"));const a=r._state;if(\"errored\"===a)return d(r._storedError);if(rt(r)||\"closed\"===a)return d(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(\"erroring\"===a)return d(r._storedError);const i=function(e){return u(((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)}))}(r);return function(e,t,r){try{ue(e,t,r)}catch(t){return void ft(e,t)}const o=e._controlledWritableStream;if(!rt(o)&&\"writable\"===o._state){nt(o,bt(e))}dt(e)}(o,t,n),i}(this,e):d(mt(\"write\"))}}function at(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_ownerWritableStream\")&&e instanceof WritableStreamDefaultWriter)}function it(e,t){\"pending\"===e._readyPromiseState?Ct(e,t):function(e,t){Tt(e,t)}(e,t)}Object.defineProperties(WritableStreamDefaultWriter.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),n(WritableStreamDefaultWriter.prototype.abort,\"abort\"),n(WritableStreamDefaultWriter.prototype.close,\"close\"),n(WritableStreamDefaultWriter.prototype.releaseLock,\"releaseLock\"),n(WritableStreamDefaultWriter.prototype.write,\"write\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultWriter.prototype,e.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});const lt={};class WritableStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!st(this))throw pt(\"abortReason\");return this._abortReason}get signal(){if(!st(this))throw pt(\"signal\");if(void 0===this._abortController)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(e){if(!st(this))throw pt(\"error\");\"writable\"===this._controlledWritableStream._state&&ht(this,e)}[v](e){const t=this._abortAlgorithm(e);return ut(this),t}[R](){ce(this)}}function st(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledWritableStream\")&&e instanceof WritableStreamDefaultController)}function ut(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function ct(e){return e._strategyHWM-e._queueTotalSize}function dt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if(\"erroring\"===t._state)return void tt(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===lt?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),se(e);const r=e._closeAlgorithm();ut(e),b(r,(()=>(function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,\"erroring\"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state=\"closed\";const t=e._writer;void 0!==t&&vt(t)}(t),null)),(e=>(function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),Ze(e,t)}(t,e),null)))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r);b(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(se(e),!rt(r)&&\"writable\"===t){const t=bt(e);nt(r,t)}return dt(e),null}),(t=>(\"writable\"===r._state&&ut(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,Ze(e,t)}(r,t),null)))}(e,r)}function ft(e,t){\"writable\"===e._controlledWritableStream._state&&ht(e,t)}function bt(e){return ct(e)<=0}function ht(e,t){const r=e._controlledWritableStream;ut(e),et(r,t)}function _t(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function pt(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}function mt(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function yt(e){return new TypeError(\"Cannot \"+e+\" a stream using a released writer\")}function gt(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState=\"pending\"}))}function wt(e,t){gt(e),St(e,t)}function St(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"rejected\")}function vt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"resolved\")}function Rt(e){e._readyPromise=u(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState=\"pending\"}function Tt(e,t){Rt(e),Ct(e,t)}function qt(e){Rt(e),Et(e)}function Ct(e,t){void 0!==e._readyPromise_reject&&(m(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"rejected\")}function Et(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"fulfilled\")}Object.defineProperties(WritableStreamDefaultController.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultController.prototype,e.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});const Pt=\"undefined\"!=typeof DOMException?DOMException:void 0;const Wt=function(e){if(\"function\"!=typeof e&&\"object\"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Pt)?Pt:function(){const e=function(e,t){this.message=e||\"\",this.name=t||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,\"constructor\",{value:e,writable:!0,configurable:!0}),e}();function kt(e,t,r,o,n,a){const i=e.getReader(),l=t.getWriter();Vt(e)&&(e._disturbed=!0);let s,_,g,w=!1,S=!1,v=\"readable\",R=\"writable\",T=!1,q=!1;const C=u((e=>{g=e}));let E=Promise.resolve(void 0);return u(((P,W)=>{let k;function O(){if(w)return;const e=u(((e,t)=>{!function r(o){o?e():f(function(){if(w)return c(!0);return f(l.ready,(()=>f(i.read(),(e=>!!e.done||(E=l.write(e.value),m(E),!1)))))}(),r,t)}(!1)}));m(e)}function B(){return v=\"closed\",r?L():z((()=>(Ge(t)&&(T=rt(t),R=t._state),T||\"closed\"===R?c(void 0):\"erroring\"===R||\"errored\"===R?d(_):(T=!0,l.close()))),!1,void 0),null}function A(e){return w||(v=\"errored\",s=e,o?L(!0,e):z((()=>l.abort(e)),!0,e)),null}function j(e){return S||(R=\"errored\",_=e,n?L(!0,e):z((()=>i.cancel(e)),!0,e)),null}if(void 0!==a&&(k=()=>{const e=void 0!==a.reason?a.reason:new Wt(\"Aborted\",\"AbortError\"),t=[];o||t.push((()=>\"writable\"===R?l.abort(e):c(void 0))),n||t.push((()=>\"readable\"===v?i.cancel(e):c(void 0))),z((()=>Promise.all(t.map((e=>e())))),!0,e)},a.aborted?k():a.addEventListener(\"abort\",k)),Vt(e)&&(v=e._state,s=e._storedError),Ge(t)&&(R=t._state,_=t._storedError,T=rt(t)),Vt(e)&&Ge(t)&&(q=!0,g()),\"errored\"===v)A(s);else if(\"erroring\"===R||\"errored\"===R)j(_);else if(\"closed\"===v)B();else if(T||\"closed\"===R){const e=new TypeError(\"the destination writable stream closed before all data could be piped to it\");n?L(!0,e):z((()=>i.cancel(e)),!0,e)}function z(e,t,r){function o(){return\"writable\"!==R||T?n():h(function(){let e;return c(function t(){if(e!==E)return e=E,p(E,t,t)}())}(),n),null}function n(){return e?b(e(),(()=>F(t,r)),(e=>F(!0,e))):F(t,r),null}w||(w=!0,q?o():h(C,o))}function L(e,t){z(void 0,e,t)}function F(e,t){return S=!0,l.releaseLock(),i.releaseLock(),void 0!==a&&a.removeEventListener(\"abort\",k),e?W(t):P(void 0),null}w||(b(i.closed,B,A),b(l.closed,(function(){return S||(R=\"closed\"),null}),j)),q?O():y((()=>{q=!0,g(),O()}))}))}function Ot(e,t){return function(e){try{return e.getReader({mode:\"byob\"}).releaseLock(),!0}catch(e){return!1}}(e)?function(e){let t,r,o,n,a,i=e.getReader(),l=!1,s=!1,d=!1,f=!1,h=!1,p=!1;const m=u((e=>{a=e}));function y(e){_(e.closed,(t=>(e!==i||(o.error(t),n.error(t),h&&p||a(void 0)),null)))}function g(){l&&(i.releaseLock(),i=e.getReader(),y(i),l=!1),b(i.read(),(e=>{var t,r;if(d=!1,f=!1,e.done)return h||o.close(),p||n.close(),null===(t=o.byobRequest)||void 0===t||t.respond(0),null===(r=n.byobRequest)||void 0===r||r.respond(0),h&&p||a(void 0),null;const l=e.value,u=l;let c=l;if(!h&&!p)try{c=le(l)}catch(e){return o.error(e),n.error(e),a(i.cancel(e)),null}return h||o.enqueue(u),p||n.enqueue(c),s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function w(t,r){l||(i.releaseLock(),i=e.getReader({mode:\"byob\"}),y(i),l=!0);const u=r?n:o,c=r?o:n;b(i.read(t),(e=>{var t;d=!1,f=!1;const o=r?p:h,n=r?h:p;if(e.done){o||u.close(),n||c.close();const r=e.value;return void 0!==r&&(o||u.byobRequest.respondWithNewView(r),n||null===(t=c.byobRequest)||void 0===t||t.respond(0)),o&&n||a(void 0),null}const l=e.value;if(n)o||u.byobRequest.respondWithNewView(l);else{let e;try{e=le(l)}catch(e){return u.error(e),c.error(e),a(i.cancel(e)),null}o||u.byobRequest.respondWithNewView(l),c.enqueue(e)}return s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function S(){if(s)return d=!0,c(void 0);s=!0;const e=o.byobRequest;return null===e?g():w(e.view,!1),c(void 0)}function v(){if(s)return f=!0,c(void 0);s=!0;const e=n.byobRequest;return null===e?g():w(e.view,!0),c(void 0)}function R(e){if(h=!0,t=e,p){const e=[t,r],o=i.cancel(e);a(o)}return m}function T(e){if(p=!0,r=e,h){const e=[t,r],o=i.cancel(e);a(o)}return m}const q=new ReadableStream({type:\"bytes\",start(e){o=e},pull:S,cancel:R}),C=new ReadableStream({type:\"bytes\",start(e){n=e},pull:v,cancel:T});return y(i),[q,C]}(e):function(e,t){const r=e.getReader();let o,n,a,i,l,s=!1,d=!1,f=!1,h=!1;const p=u((e=>{l=e}));function m(){return s?(d=!0,c(void 0)):(s=!0,b(r.read(),(e=>{if(d=!1,e.done)return f||a.close(),h||i.close(),f&&h||l(void 0),null;const t=e.value,r=t,o=t;return f||a.enqueue(r),h||i.enqueue(o),s=!1,d&&m(),null}),(()=>(s=!1,null))),c(void 0))}function y(e){if(f=!0,o=e,h){const e=[o,n],t=r.cancel(e);l(t)}return p}function g(e){if(h=!0,n=e,f){const e=[o,n],t=r.cancel(e);l(t)}return p}const w=new ReadableStream({start(e){a=e},pull:m,cancel:y}),S=new ReadableStream({start(e){i=e},pull:m,cancel:g});return _(r.closed,(e=>(a.error(e),i.error(e),f&&h||l(void 0),null))),[w,S]}(e)}class ReadableStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Bt(this))throw Dt(\"desiredSize\");return Lt(this)}close(){if(!Bt(this))throw Dt(\"close\");if(!Ft(this))throw new TypeError(\"The stream is not in a state that permits close\");!function(e){if(!Ft(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(jt(e),Xt(t))}(this)}enqueue(e){if(!Bt(this))throw Dt(\"enqueue\");if(!Ft(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return function(e,t){if(!Ft(e))return;const r=e._controlledReadableStream;if(Ut(r)&&X(r)>0)G(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw zt(e,t),t}try{ue(e,t,r)}catch(t){throw zt(e,t),t}}At(e)}(this,e)}error(e){if(!Bt(this))throw Dt(\"error\");zt(this,e)}[T](e){ce(this);const t=this._cancelAlgorithm(e);return jt(this),t}[q](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=se(this);this._closeRequested&&0===this._queue.length?(jt(this),Xt(t)):At(this),e._chunkSteps(r)}else U(t,e),At(this)}[C](){}}function Bt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableStream\")&&e instanceof ReadableStreamDefaultController)}function At(e){const t=function(e){const t=e._controlledReadableStream;if(!Ft(e))return!1;if(!e._started)return!1;if(Ut(t)&&X(t)>0)return!0;if(Lt(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,At(e)),null)),(t=>(zt(e,t),null)))}function jt(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function zt(e,t){const r=e._controlledReadableStream;\"readable\"===r._state&&(ce(e),jt(e),Jt(r,t))}function Lt(e){const t=e._controlledReadableStream._state;return\"errored\"===t?null:\"closed\"===t?0:e._strategyHWM-e._queueTotalSize}function Ft(e){return!e._closeRequested&&\"readable\"===e._controlledReadableStream._state}function It(e,t,r,o){const n=Object.create(ReadableStreamDefaultController.prototype);let a,i,l;a=void 0!==t.start?()=>t.start(n):()=>{},i=void 0!==t.pull?()=>t.pull(n):()=>c(void 0),l=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0),function(e,t,r,o,n,a,i){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=i,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,At(t),null)),(e=>(zt(t,e),null)))}(e,n,a,i,l,r,o)}function Dt(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function $t(e,t,r){return I(e,r),r=>w(e,t,[r])}function Mt(e,t,r){return I(e,r),r=>w(e,t,[r])}function Yt(e,t,r){return I(e,r),r=>g(e,t,[r])}function Qt(e,t){if(\"bytes\"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function Nt(e,t){if(\"byob\"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function Ht(e,t){F(e,t);const r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,a=null==e?void 0:e.signal;return void 0!==a&&function(e,t){if(!function(e){if(\"object\"!=typeof e||null===e)return!1;try{return\"boolean\"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(a,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:a}}function xt(e,t){F(e,t);const r=null==e?void 0:e.readable;M(r,\"readable\",\"ReadableWritablePair\"),function(e,t){if(!H(e))throw new TypeError(`${t} is not a ReadableStream.`)}(r,`${t} has member 'readable' that`);const o=null==e?void 0:e.writable;return M(o,\"writable\",\"ReadableWritablePair\"),function(e,t){if(!x(e))throw new TypeError(`${t} is not a WritableStream.`)}(o,`${t} has member 'writable' that`),{readable:r,writable:o}}Object.defineProperties(ReadableStreamDefaultController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableStreamDefaultController.prototype.close,\"close\"),n(ReadableStreamDefaultController.prototype.enqueue,\"enqueue\"),n(ReadableStreamDefaultController.prototype.error,\"error\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultController.prototype,e.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});class ReadableStream{constructor(e={},t={}){void 0===e?e=null:D(e,\"First parameter\");const r=Ye(t,\"Second parameter\"),o=function(e,t){F(e,t);const r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,a=null==r?void 0:r.pull,i=null==r?void 0:r.start,l=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:N(o,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===n?void 0:$t(n,r,`${t} has member 'cancel' that`),pull:void 0===a?void 0:Mt(a,r,`${t} has member 'pull' that`),start:void 0===i?void 0:Yt(i,r,`${t} has member 'start' that`),type:void 0===l?void 0:Qt(l,`${t} has member 'type' that`)}}(e,\"First parameter\");var n;if((n=this)._state=\"readable\",n._reader=void 0,n._storedError=void 0,n._disturbed=!1,\"bytes\"===o.type){if(void 0!==r.size)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");Oe(this,o,$e(r,0))}else{const e=Me(r);It(this,o,$e(r,1),e)}}get locked(){if(!Vt(this))throw Kt(\"locked\");return Ut(this)}cancel(e){return Vt(this)?Ut(this)?d(new TypeError(\"Cannot cancel a stream that already has a reader\")):Gt(this,e):d(Kt(\"cancel\"))}getReader(e){if(!Vt(this))throw Kt(\"getReader\");return void 0===function(e,t){F(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:Nt(r,`${t} has member 'mode' that`)}}(e,\"First parameter\").mode?new ReadableStreamDefaultReader(this):function(e){return new ReadableStreamBYOBReader(e)}(this)}pipeThrough(e,t={}){if(!H(this))throw Kt(\"pipeThrough\");$(e,1,\"pipeThrough\");const r=xt(e,\"First parameter\"),o=Ht(t,\"Second parameter\");if(this.locked)throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(r.writable.locked)throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");return m(kt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable}pipeTo(e,t={}){if(!H(this))return d(Kt(\"pipeTo\"));if(void 0===e)return d(\"Parameter 1 is required in 'pipeTo'.\");if(!x(e))return d(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let r;try{r=Ht(t,\"Second parameter\")}catch(e){return d(e)}return this.locked?d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):e.locked?d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):kt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!H(this))throw Kt(\"tee\");if(this.locked)throw new TypeError(\"Cannot tee a stream that already has a reader\");return Ot(this)}values(e){if(!H(this))throw Kt(\"values\");return function(e,t){const r=e.getReader(),o=new te(r,t),n=Object.create(re);return n._asyncIteratorImpl=o,n}(this,function(e,t){F(e,t);const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e,\"First parameter\").preventCancel)}}function Vt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readableStreamController\")&&e instanceof ReadableStream)}function Ut(e){return void 0!==e._reader}function Gt(e,r){if(e._disturbed=!0,\"closed\"===e._state)return c(void 0);if(\"errored\"===e._state)return d(e._storedError);Xt(e);const o=e._reader;if(void 0!==o&&Fe(o)){const e=o._readIntoRequests;o._readIntoRequests=new S,e.forEach((e=>{e._closeSteps(void 0)}))}return p(e._readableStreamController[T](r),t)}function Xt(e){e._state=\"closed\";const t=e._reader;if(void 0!==t&&(j(t),K(t))){const e=t._readRequests;t._readRequests=new S,e.forEach((e=>{e._closeSteps()}))}}function Jt(e,t){e._state=\"errored\",e._storedError=t;const r=e._reader;void 0!==r&&(A(r,t),K(r)?Z(r,t):Ie(r,t))}function Kt(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function Zt(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark;return M(r,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:Y(r)}}Object.defineProperties(ReadableStream.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),n(ReadableStream.prototype.cancel,\"cancel\"),n(ReadableStream.prototype.getReader,\"getReader\"),n(ReadableStream.prototype.pipeThrough,\"pipeThrough\"),n(ReadableStream.prototype.pipeTo,\"pipeTo\"),n(ReadableStream.prototype.tee,\"tee\"),n(ReadableStream.prototype.values,\"values\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStream.prototype,e.toStringTag,{value:\"ReadableStream\",configurable:!0}),\"symbol\"==typeof e.asyncIterator&&Object.defineProperty(ReadableStream.prototype,e.asyncIterator,{value:ReadableStream.prototype.values,writable:!0,configurable:!0});const er=e=>e.byteLength;n(er,\"size\");class ByteLengthQueuingStrategy{constructor(e){$(e,1,\"ByteLengthQueuingStrategy\"),e=Zt(e,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!rr(this))throw tr(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!rr(this))throw tr(\"size\");return er}}function tr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function rr(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_byteLengthQueuingStrategyHighWaterMark\")&&e instanceof ByteLengthQueuingStrategy)}Object.defineProperties(ByteLengthQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ByteLengthQueuingStrategy.prototype,e.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});const or=()=>1;n(or,\"size\");class CountQueuingStrategy{constructor(e){$(e,1,\"CountQueuingStrategy\"),e=Zt(e,\"First parameter\"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!ar(this))throw nr(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!ar(this))throw nr(\"size\");return or}}function nr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function ar(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_countQueuingStrategyHighWaterMark\")&&e instanceof CountQueuingStrategy)}function ir(e,t,r){return I(e,r),r=>w(e,t,[r])}function lr(e,t,r){return I(e,r),r=>g(e,t,[r])}function sr(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(CountQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(CountQueuingStrategy.prototype,e.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});class TransformStream{constructor(e={},t={},r={}){void 0===e&&(e=null);const o=Ye(t,\"Second parameter\"),n=Ye(r,\"Third parameter\"),a=function(e,t){F(e,t);const r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,a=null==e?void 0:e.transform,i=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:ir(r,e,`${t} has member 'flush' that`),readableType:o,start:void 0===n?void 0:lr(n,e,`${t} has member 'start' that`),transform:void 0===a?void 0:sr(a,e,`${t} has member 'transform' that`),writableType:i}}(e,\"First parameter\");if(void 0!==a.readableType)throw new RangeError(\"Invalid readableType specified\");if(void 0!==a.writableType)throw new RangeError(\"Invalid writableType specified\");const i=$e(n,0),l=Me(n),s=$e(o,1),f=Me(o);let b;!function(e,t,r,o,n,a){function i(){return t}function l(t){return function(e,t){const r=e._transformStreamController;if(e._backpressure){return p(e._backpressureChangePromise,(()=>{if(\"erroring\"===(Ge(e._writable)?e._writable._state:e._writableState))throw Ge(e._writable)?e._writable._storedError:e._writableStoredError;return pr(r,t)}))}return pr(r,t)}(e,t)}function s(t){return function(e,t){return cr(e,t),c(void 0)}(e,t)}function u(){return function(e){const t=e._transformStreamController,r=t._flushAlgorithm();return hr(t),p(r,(()=>{if(\"errored\"===e._readableState)throw e._readableStoredError;gr(e)&&wr(e)}),(t=>{throw cr(e,t),e._readableStoredError}))}(e)}function d(){return function(e){return fr(e,!1),e._backpressureChangePromise}(e)}function f(t){return dr(e,t),c(void 0)}e._writableState=\"writable\",e._writableStoredError=void 0,e._writableHasInFlightOperation=!1,e._writableStarted=!1,e._writable=function(e,t,r,o,n,a,i){return new WritableStream({start(r){e._writableController=r;try{const t=r.signal;void 0!==t&&t.addEventListener(\"abort\",(()=>{\"writable\"===e._writableState&&(e._writableState=\"erroring\",t.reason&&(e._writableStoredError=t.reason))}))}catch(e){}return p(t(),(()=>(e._writableStarted=!0,Cr(e),null)),(t=>{throw e._writableStarted=!0,Rr(e,t),t}))},write:t=>(function(e){e._writableHasInFlightOperation=!0}(e),p(r(t),(()=>(function(e){e._writableHasInFlightOperation=!1}(e),Cr(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,Rr(e,t)}(e,t),t}))),close:()=>(function(e){e._writableHasInFlightOperation=!0}(e),p(o(),(()=>(function(e){e._writableHasInFlightOperation=!1;\"erroring\"===e._writableState&&(e._writableStoredError=void 0);e._writableState=\"closed\"}(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,e._writableState,Rr(e,t)}(e,t),t}))),abort:t=>(e._writableState=\"errored\",e._writableStoredError=t,n(t))},{highWaterMark:a,size:i})}(e,i,l,u,s,r,o),e._readableState=\"readable\",e._readableStoredError=void 0,e._readableCloseRequested=!1,e._readablePulling=!1,e._readable=function(e,t,r,o,n,a){return new ReadableStream({start:r=>(e._readableController=r,t().catch((t=>{Sr(e,t)}))),pull:()=>(e._readablePulling=!0,r().catch((t=>{Sr(e,t)}))),cancel:t=>(e._readableState=\"closed\",o(t))},{highWaterMark:n,size:a})}(e,i,d,f,n,a),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,fr(e,!0),e._transformStreamController=void 0}(this,u((e=>{b=e})),s,f,i,l),function(e,t){const r=Object.create(TransformStreamDefaultController.prototype);let o,n;o=void 0!==t.transform?e=>t.transform(e,r):e=>{try{return _r(r,e),c(void 0)}catch(e){return d(e)}};n=void 0!==t.flush?()=>t.flush(r):()=>c(void 0);!function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,n)}(this,a),void 0!==a.start?b(a.start(this._transformStreamController)):b(void 0)}get readable(){if(!ur(this))throw yr(\"readable\");return this._readable}get writable(){if(!ur(this))throw yr(\"writable\");return this._writable}}function ur(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_transformStreamController\")&&e instanceof TransformStream)}function cr(e,t){Sr(e,t),dr(e,t)}function dr(e,t){hr(e._transformStreamController),function(e,t){e._writableController.error(t);\"writable\"===e._writableState&&Tr(e,t)}(e,t),e._backpressure&&fr(e,!1)}function fr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=u((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(TransformStream.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(TransformStream.prototype,e.toStringTag,{value:\"TransformStream\",configurable:!0});class TransformStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!br(this))throw mr(\"desiredSize\");return vr(this._controlledTransformStream)}enqueue(e){if(!br(this))throw mr(\"enqueue\");_r(this,e)}error(e){if(!br(this))throw mr(\"error\");var t;t=e,cr(this._controlledTransformStream,t)}terminate(){if(!br(this))throw mr(\"terminate\");!function(e){const t=e._controlledTransformStream;gr(t)&&wr(t);const r=new TypeError(\"TransformStream terminated\");dr(t,r)}(this)}}function br(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledTransformStream\")&&e instanceof TransformStreamDefaultController)}function hr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function _r(e,t){const r=e._controlledTransformStream;if(!gr(r))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{!function(e,t){e._readablePulling=!1;try{e._readableController.enqueue(t)}catch(t){throw Sr(e,t),t}}(r,t)}catch(e){throw dr(r,e),r._readableStoredError}const o=function(e){return!function(e){if(!gr(e))return!1;if(e._readablePulling)return!0;if(vr(e)>0)return!0;return!1}(e)}(r);o!==r._backpressure&&fr(r,!0)}function pr(e,t){return p(e._transformAlgorithm(t),void 0,(t=>{throw cr(e._controlledTransformStream,t),t}))}function mr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function yr(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}function gr(e){return!e._readableCloseRequested&&\"readable\"===e._readableState}function wr(e){e._readableState=\"closed\",e._readableCloseRequested=!0,e._readableController.close()}function Sr(e,t){\"readable\"===e._readableState&&(e._readableState=\"errored\",e._readableStoredError=t),e._readableController.error(t)}function vr(e){return e._readableController.desiredSize}function Rr(e,t){\"writable\"!==e._writableState?qr(e):Tr(e,t)}function Tr(e,t){e._writableState=\"erroring\",e._writableStoredError=t,!function(e){return e._writableHasInFlightOperation}(e)&&e._writableStarted&&qr(e)}function qr(e){e._writableState=\"errored\"}function Cr(e){\"erroring\"===e._writableState&&qr(e)}Object.defineProperties(TransformStreamDefaultController.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),n(TransformStreamDefaultController.prototype.enqueue,\"enqueue\"),n(TransformStreamDefaultController.prototype.error,\"error\"),n(TransformStreamDefaultController.prototype.terminate,\"terminate\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(TransformStreamDefaultController.prototype,e.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});export{ByteLengthQueuingStrategy,CountQueuingStrategy,ReadableByteStreamController,ReadableStream,ReadableStreamBYOBReader,ReadableStreamBYOBRequest,ReadableStreamDefaultController,ReadableStreamDefaultReader,TransformStream,TransformStreamDefaultController,WritableStream,WritableStreamDefaultController,WritableStreamDefaultWriter};\n","export const isFunction = (value) => (typeof value === \"function\");\n","/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */\nimport { isFunction } from \"./isFunction.js\";\nconst CHUNK_SIZE = 65536;\nasync function* clonePart(part) {\n    const end = part.byteOffset + part.byteLength;\n    let position = part.byteOffset;\n    while (position !== end) {\n        const size = Math.min(end - position, CHUNK_SIZE);\n        const chunk = part.buffer.slice(position, position + size);\n        position += chunk.byteLength;\n        yield new Uint8Array(chunk);\n    }\n}\nasync function* consumeNodeBlob(blob) {\n    let position = 0;\n    while (position !== blob.size) {\n        const chunk = blob.slice(position, Math.min(blob.size, position + CHUNK_SIZE));\n        const buffer = await chunk.arrayBuffer();\n        position += buffer.byteLength;\n        yield new Uint8Array(buffer);\n    }\n}\nexport async function* consumeBlobParts(parts, clone = false) {\n    for (const part of parts) {\n        if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                yield* clonePart(part);\n            }\n            else {\n                yield part;\n            }\n        }\n        else if (isFunction(part.stream)) {\n            yield* part.stream();\n        }\n        else {\n            yield* consumeNodeBlob(part);\n        }\n    }\n}\nexport function* sliceBlob(blobParts, blobSize, start = 0, end) {\n    end !== null && end !== void 0 ? end : (end = blobSize);\n    let relativeStart = start < 0\n        ? Math.max(blobSize + start, 0)\n        : Math.min(start, blobSize);\n    let relativeEnd = end < 0\n        ? Math.max(blobSize + end, 0)\n        : Math.min(end, blobSize);\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    let added = 0;\n    for (const part of blobParts) {\n        if (added >= span) {\n            break;\n        }\n        const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n        if (relativeStart && partSize <= relativeStart) {\n            relativeStart -= partSize;\n            relativeEnd -= partSize;\n        }\n        else {\n            let chunk;\n            if (ArrayBuffer.isView(part)) {\n                chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.byteLength;\n            }\n            else {\n                chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.size;\n            }\n            relativeEnd -= partSize;\n            relativeStart = 0;\n            yield chunk;\n        }\n    }\n}\n","/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Blob_parts, _Blob_type, _Blob_size;\nimport { ReadableStream } from \"web-streams-polyfill\";\nimport { isFunction } from \"./isFunction.js\";\nimport { consumeBlobParts, sliceBlob } from \"./blobHelpers.js\";\nexport class Blob {\n    constructor(blobParts = [], options = {}) {\n        _Blob_parts.set(this, []);\n        _Blob_type.set(this, \"\");\n        _Blob_size.set(this, 0);\n        options !== null && options !== void 0 ? options : (options = {});\n        if (typeof blobParts !== \"object\" || blobParts === null) {\n            throw new TypeError(\"Failed to construct 'Blob': \"\n                + \"The provided value cannot be converted to a sequence.\");\n        }\n        if (!isFunction(blobParts[Symbol.iterator])) {\n            throw new TypeError(\"Failed to construct 'Blob': \"\n                + \"The object must have a callable @@iterator property.\");\n        }\n        if (typeof options !== \"object\" && !isFunction(options)) {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        }\n        const encoder = new TextEncoder();\n        for (const raw of blobParts) {\n            let part;\n            if (ArrayBuffer.isView(raw)) {\n                part = new Uint8Array(raw.buffer.slice(raw.byteOffset, raw.byteOffset + raw.byteLength));\n            }\n            else if (raw instanceof ArrayBuffer) {\n                part = new Uint8Array(raw.slice(0));\n            }\n            else if (raw instanceof Blob) {\n                part = raw;\n            }\n            else {\n                part = encoder.encode(String(raw));\n            }\n            __classPrivateFieldSet(this, _Blob_size, __classPrivateFieldGet(this, _Blob_size, \"f\") + (ArrayBuffer.isView(part) ? part.byteLength : part.size), \"f\");\n            __classPrivateFieldGet(this, _Blob_parts, \"f\").push(part);\n        }\n        const type = options.type === undefined ? \"\" : String(options.type);\n        __classPrivateFieldSet(this, _Blob_type, /^[\\x20-\\x7E]*$/.test(type) ? type : \"\", \"f\");\n    }\n    static [(_Blob_parts = new WeakMap(), _Blob_type = new WeakMap(), _Blob_size = new WeakMap(), Symbol.hasInstance)](value) {\n        return Boolean(value\n            && typeof value === \"object\"\n            && isFunction(value.constructor)\n            && (isFunction(value.stream)\n                || isFunction(value.arrayBuffer))\n            && /^(Blob|File)$/.test(value[Symbol.toStringTag]));\n    }\n    get type() {\n        return __classPrivateFieldGet(this, _Blob_type, \"f\");\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _Blob_size, \"f\");\n    }\n    slice(start, end, contentType) {\n        return new Blob(sliceBlob(__classPrivateFieldGet(this, _Blob_parts, \"f\"), this.size, start, end), {\n            type: contentType\n        });\n    }\n    async text() {\n        const decoder = new TextDecoder();\n        let result = \"\";\n        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"))) {\n            result += decoder.decode(chunk, { stream: true });\n        }\n        result += decoder.decode();\n        return result;\n    }\n    async arrayBuffer() {\n        const view = new Uint8Array(this.size);\n        let offset = 0;\n        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"))) {\n            view.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return view.buffer;\n    }\n    stream() {\n        const iterator = consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"), true);\n        return new ReadableStream({\n            async pull(controller) {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    return queueMicrotask(() => controller.close());\n                }\n                controller.enqueue(value);\n            },\n            async cancel() {\n                await iterator.return();\n            }\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n}\nObject.defineProperties(Blob.prototype, {\n    type: { enumerable: true },\n    size: { enumerable: true },\n    slice: { enumerable: true },\n    stream: { enumerable: true },\n    text: { enumerable: true },\n    arrayBuffer: { enumerable: true }\n});\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _File_name, _File_lastModified;\nimport { Blob } from \"./Blob.js\";\nexport class File extends Blob {\n    constructor(fileBits, name, options = {}) {\n        super(fileBits, options);\n        _File_name.set(this, void 0);\n        _File_lastModified.set(this, 0);\n        if (arguments.length < 2) {\n            throw new TypeError(\"Failed to construct 'File': 2 arguments required, \"\n                + `but only ${arguments.length} present.`);\n        }\n        __classPrivateFieldSet(this, _File_name, String(name), \"f\");\n        const lastModified = options.lastModified === undefined\n            ? Date.now()\n            : Number(options.lastModified);\n        if (!Number.isNaN(lastModified)) {\n            __classPrivateFieldSet(this, _File_lastModified, lastModified, \"f\");\n        }\n    }\n    static [(_File_name = new WeakMap(), _File_lastModified = new WeakMap(), Symbol.hasInstance)](value) {\n        return value instanceof Blob\n            && value[Symbol.toStringTag] === \"File\"\n            && typeof value.name === \"string\";\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _File_name, \"f\");\n    }\n    get lastModified() {\n        return __classPrivateFieldGet(this, _File_lastModified, \"f\");\n    }\n    get webkitRelativePath() {\n        return \"\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n}\n","import { File } from \"./File.js\";\nexport const isFile = (value) => value instanceof File;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/*!\n * humanize-ms - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar ms = require('ms');\n\nmodule.exports = function (t) {\n  if (typeof t === 'number') return t;\n  var r = ms(t);\n  if (r === undefined) {\n    var err = new Error(util.format('humanize-ms(%j) result undefined', t));\n    console.warn(err.stack);\n  }\n  return r;\n};\n","'use strict';\n\nmodule.exports = {\n  // agent\n  CURRENT_ID: Symbol('agentkeepalive#currentId'),\n  CREATE_ID: Symbol('agentkeepalive#createId'),\n  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\n  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\n  // socket\n  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\n  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\n  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\n};\n","'use strict';\n\nconst OriginalAgent = require('http').Agent;\nconst ms = require('humanize-ms');\nconst debug = require('util').debuglog('agentkeepalive');\nconst {\n  INIT_SOCKET,\n  CURRENT_ID,\n  CREATE_ID,\n  SOCKET_CREATED_TIME,\n  SOCKET_NAME,\n  SOCKET_REQUEST_COUNT,\n  SOCKET_REQUEST_FINISHED_COUNT,\n} = require('./constants');\n\n// OriginalAgent come from\n// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\n// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\n\n// node <= 10\nlet defaultTimeoutListenerCount = 1;\nconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\nif (majorVersion >= 11 && majorVersion <= 12) {\n  defaultTimeoutListenerCount = 2;\n} else if (majorVersion >= 13) {\n  defaultTimeoutListenerCount = 3;\n}\n\nfunction deprecate(message) {\n  console.log('[agentkeepalive:deprecated] %s', message);\n}\n\nclass Agent extends OriginalAgent {\n  constructor(options) {\n    options = options || {};\n    options.keepAlive = options.keepAlive !== false;\n    // default is keep-alive and 4s free socket timeout\n    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\n    if (options.freeSocketTimeout === undefined) {\n      options.freeSocketTimeout = 4000;\n    }\n    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.keepAliveTimeout) {\n      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.keepAliveTimeout;\n      delete options.keepAliveTimeout;\n    }\n    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.freeSocketKeepAliveTimeout) {\n      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\n      delete options.freeSocketKeepAliveTimeout;\n    }\n\n    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\n    // By default is double free socket timeout.\n    if (options.timeout === undefined) {\n      // make sure socket default inactivity timeout >= 8s\n      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\n    }\n\n    // support humanize format\n    options.timeout = ms(options.timeout);\n    options.freeSocketTimeout = ms(options.freeSocketTimeout);\n    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\n\n    super(options);\n\n    this[CURRENT_ID] = 0;\n\n    // create socket success counter\n    this.createSocketCount = 0;\n    this.createSocketCountLastCheck = 0;\n\n    this.createSocketErrorCount = 0;\n    this.createSocketErrorCountLastCheck = 0;\n\n    this.closeSocketCount = 0;\n    this.closeSocketCountLastCheck = 0;\n\n    // socket error event count\n    this.errorSocketCount = 0;\n    this.errorSocketCountLastCheck = 0;\n\n    // request finished counter\n    this.requestCount = 0;\n    this.requestCountLastCheck = 0;\n\n    // including free socket timeout counter\n    this.timeoutSocketCount = 0;\n    this.timeoutSocketCountLastCheck = 0;\n\n    this.on('free', socket => {\n      // https://github.com/nodejs/node/pull/32000\n      // Node.js native agent will check socket timeout eqs agent.options.timeout.\n      // Use the ttl or freeSocketTimeout to overwrite.\n      const timeout = this.calcSocketTimeout(socket);\n      if (timeout > 0 && socket.timeout !== timeout) {\n        socket.setTimeout(timeout);\n      }\n    });\n  }\n\n  get freeSocketKeepAliveTimeout() {\n    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\n    return this.options.freeSocketTimeout;\n  }\n\n  get timeout() {\n    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\n    return this.options.timeout;\n  }\n\n  get socketActiveTTL() {\n    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\n    return this.options.socketActiveTTL;\n  }\n\n  calcSocketTimeout(socket) {\n    /**\n     * return <= 0: should free socket\n     * return > 0: should update socket timeout\n     * return undefined: not find custom timeout\n     */\n    let freeSocketTimeout = this.options.freeSocketTimeout;\n    const socketActiveTTL = this.options.socketActiveTTL;\n    if (socketActiveTTL) {\n      // check socketActiveTTL\n      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\n      const diff = socketActiveTTL - aliveTime;\n      if (diff <= 0) {\n        return diff;\n      }\n      if (freeSocketTimeout && diff < freeSocketTimeout) {\n        freeSocketTimeout = diff;\n      }\n    }\n    // set freeSocketTimeout\n    if (freeSocketTimeout) {\n      // set free keepalive timer\n      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\n      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\n      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\n      return customFreeSocketTimeout || freeSocketTimeout;\n    }\n  }\n\n  keepSocketAlive(socket) {\n    const result = super.keepSocketAlive(socket);\n    // should not keepAlive, do nothing\n    if (!result) return result;\n\n    const customTimeout = this.calcSocketTimeout(socket);\n    if (typeof customTimeout === 'undefined') {\n      return true;\n    }\n    if (customTimeout <= 0) {\n      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\n      return false;\n    }\n    if (socket.timeout !== customTimeout) {\n      socket.setTimeout(customTimeout);\n    }\n    return true;\n  }\n\n  // only call on addRequest\n  reuseSocket(...args) {\n    // reuseSocket(socket, req)\n    super.reuseSocket(...args);\n    const socket = args[0];\n    const req = args[1];\n    req.reusedSocket = true;\n    const agentTimeout = this.options.timeout;\n    if (getSocketTimeout(socket) !== agentTimeout) {\n      // reset timeout before use\n      socket.setTimeout(agentTimeout);\n      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\n    }\n    socket[SOCKET_REQUEST_COUNT]++;\n    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      getSocketTimeout(socket));\n  }\n\n  [CREATE_ID]() {\n    const id = this[CURRENT_ID]++;\n    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\n    return id;\n  }\n\n  [INIT_SOCKET](socket, options) {\n    // bugfix here.\n    // https on node 8, 10 won't set agent.options.timeout by default\n    // TODO: need to fix on node itself\n    if (options.timeout) {\n      const timeout = getSocketTimeout(socket);\n      if (!timeout) {\n        socket.setTimeout(options.timeout);\n      }\n    }\n\n    if (this.options.keepAlive) {\n      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\n      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\n      socket.setNoDelay(true);\n    }\n    this.createSocketCount++;\n    if (this.options.socketActiveTTL) {\n      socket[SOCKET_CREATED_TIME] = Date.now();\n    }\n    // don't show the hole '-----BEGIN CERTIFICATE----' key string\n    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\n    socket[SOCKET_REQUEST_COUNT] = 1;\n    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\n    installListeners(this, socket, options);\n  }\n\n  createConnection(options, oncreate) {\n    let called = false;\n    const onNewCreate = (err, socket) => {\n      if (called) return;\n      called = true;\n\n      if (err) {\n        this.createSocketErrorCount++;\n        return oncreate(err);\n      }\n      this[INIT_SOCKET](socket, options);\n      oncreate(err, socket);\n    };\n\n    const newSocket = super.createConnection(options, onNewCreate);\n    if (newSocket) onNewCreate(null, newSocket);\n    return newSocket;\n  }\n\n  get statusChanged() {\n    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\n      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\n      this.closeSocketCount !== this.closeSocketCountLastCheck ||\n      this.errorSocketCount !== this.errorSocketCountLastCheck ||\n      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\n      this.requestCount !== this.requestCountLastCheck;\n    if (changed) {\n      this.createSocketCountLastCheck = this.createSocketCount;\n      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\n      this.closeSocketCountLastCheck = this.closeSocketCount;\n      this.errorSocketCountLastCheck = this.errorSocketCount;\n      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\n      this.requestCountLastCheck = this.requestCount;\n    }\n    return changed;\n  }\n\n  getCurrentStatus() {\n    return {\n      createSocketCount: this.createSocketCount,\n      createSocketErrorCount: this.createSocketErrorCount,\n      closeSocketCount: this.closeSocketCount,\n      errorSocketCount: this.errorSocketCount,\n      timeoutSocketCount: this.timeoutSocketCount,\n      requestCount: this.requestCount,\n      freeSockets: inspect(this.freeSockets),\n      sockets: inspect(this.sockets),\n      requests: inspect(this.requests),\n    };\n  }\n}\n\n// node 8 don't has timeout attribute on socket\n// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\nfunction getSocketTimeout(socket) {\n  return socket.timeout || socket._idleTimeout;\n}\n\nfunction installListeners(agent, socket, options) {\n  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\n\n  // listener socket events: close, timeout, error, free\n  function onFree() {\n    // create and socket.emit('free') logic\n    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\n    // no req on the socket, it should be the new socket\n    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\n\n    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\n    agent.requestCount++;\n    debug('%s(requests: %s, finished: %s) free',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\n    // should reuse on pedding requests?\n    const name = agent.getName(options);\n    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\n      // will be reuse on agent free listener\n      socket[SOCKET_REQUEST_COUNT]++;\n      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    }\n  }\n  socket.on('free', onFree);\n\n  function onClose(isError) {\n    debug('%s(requests: %s, finished: %s) close, isError: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\n    agent.closeSocketCount++;\n  }\n  socket.on('close', onClose);\n\n  // start socket timeout handler\n  function onTimeout() {\n    // onTimeout and emitRequestTimeout(_http_client.js)\n    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\n    const listenerCount = socket.listeners('timeout').length;\n    // node <= 10, default listenerCount is 1, onTimeout\n    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\n    // node >= 13, default listenerCount is 3, onTimeout,\n    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\n    //   and emitRequestTimeout\n    const timeout = getSocketTimeout(socket);\n    const req = socket._httpMessage;\n    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\n    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\n    if (debug.enabled) {\n      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\n    }\n    agent.timeoutSocketCount++;\n    const name = agent.getName(options);\n    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\n      // free socket timeout, destroy quietly\n      socket.destroy();\n      // Remove it from freeSockets list immediately to prevent new requests\n      // from being sent through this socket.\n      agent.removeSocket(socket, options);\n      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\n    } else {\n      // if there is no any request socket timeout handler,\n      // agent need to handle socket timeout itself.\n      //\n      // custom request socket timeout handle logic must follow these rules:\n      //  1. Destroy socket first\n      //  2. Must emit socket 'agentRemove' event tell agent remove socket\n      //     from freeSockets list immediately.\n      //     Otherise you may be get 'socket hang up' error when reuse\n      //     free socket and timeout happen in the same time.\n      if (reqTimeoutListenerCount === 0) {\n        const error = new Error('Socket timeout');\n        error.code = 'ERR_SOCKET_TIMEOUT';\n        error.timeout = timeout;\n        // must manually call socket.end() or socket.destroy() to end the connection.\n        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\n        socket.destroy(error);\n        agent.removeSocket(socket, options);\n        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\n      }\n    }\n  }\n  socket.on('timeout', onTimeout);\n\n  function onError(err) {\n    const listenerCount = socket.listeners('error').length;\n    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      err, listenerCount);\n    agent.errorSocketCount++;\n    if (listenerCount === 1) {\n      // if socket don't contain error event handler, don't catch it, emit it again\n      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\n      socket.removeListener('error', onError);\n      socket.emit('error', err);\n    }\n  }\n  socket.on('error', onError);\n\n  function onRemove() {\n    debug('%s(requests: %s, finished: %s) agentRemove',\n      socket[SOCKET_NAME],\n      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    // We need this function for cases like HTTP 'upgrade'\n    // (defined by WebSockets) where we need to remove a socket from the\n    // pool because it'll be locked up indefinitely\n    socket.removeListener('close', onClose);\n    socket.removeListener('error', onError);\n    socket.removeListener('free', onFree);\n    socket.removeListener('timeout', onTimeout);\n    socket.removeListener('agentRemove', onRemove);\n  }\n  socket.on('agentRemove', onRemove);\n}\n\nmodule.exports = Agent;\n\nfunction inspect(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key].length;\n  }\n  return res;\n}\n","'use strict';\n\nconst OriginalHttpsAgent = require('https').Agent;\nconst HttpAgent = require('./agent');\nconst {\n  INIT_SOCKET,\n  CREATE_HTTPS_CONNECTION,\n} = require('./constants');\n\nclass HttpsAgent extends HttpAgent {\n  constructor(options) {\n    super(options);\n\n    this.defaultPort = 443;\n    this.protocol = 'https:';\n    this.maxCachedSessions = this.options.maxCachedSessions;\n    /* istanbul ignore next */\n    if (this.maxCachedSessions === undefined) {\n      this.maxCachedSessions = 100;\n    }\n\n    this._sessionCache = {\n      map: {},\n      list: [],\n    };\n  }\n\n  createConnection(options, oncreate) {\n    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);\n    this[INIT_SOCKET](socket, options);\n    return socket;\n  }\n}\n\n// https://github.com/nodejs/node/blob/master/lib/https.js#L89\nHttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\n\n[\n  'getName',\n  '_getSession',\n  '_cacheSession',\n  // https://github.com/nodejs/node/pull/4982\n  '_evictSession',\n].forEach(function(method) {\n  /* istanbul ignore next */\n  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\n    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];\n  }\n});\n\nmodule.exports = HttpsAgent;\n","'use strict';\n\nconst HttpAgent = require('./lib/agent');\nmodule.exports = HttpAgent;\nmodule.exports.HttpAgent = HttpAgent;\nmodule.exports.HttpsAgent = require('./lib/https_agent');\nmodule.exports.constants = require('./lib/constants');\n","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","import {\n    // Event,\n    EventTarget,\n    // Type,\n    defineEventAttribute,\n} from \"event-target-shim\"\n\n// Known Limitation\n//   Use `any` because the type of `AbortSignal` in `lib.dom.d.ts` is wrong and\n//   to make assignable our `AbortSignal` into that.\n//   https://github.com/Microsoft/TSJS-lib-generator/pull/623\ntype Events = {\n    abort: any // Event & Type<\"abort\">\n}\ntype EventAttributes = {\n    onabort: any // Event & Type<\"abort\">\n}\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nexport default class AbortSignal extends EventTarget<Events, EventAttributes> {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    public constructor() {\n        super()\n        throw new TypeError(\"AbortSignal cannot be constructed directly\")\n    }\n\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    public get aborted(): boolean {\n        const aborted = abortedFlags.get(this)\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(\n                `Expected 'this' to be an 'AbortSignal' object, but got ${\n                    this === null ? \"null\" : typeof this\n                }`,\n            )\n        }\n        return aborted\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\")\n\n/**\n * Create an AbortSignal object.\n */\nexport function createAbortSignal(): AbortSignal {\n    const signal = Object.create(AbortSignal.prototype)\n    EventTarget.call(signal)\n    abortedFlags.set(signal, false)\n    return signal\n}\n\n/**\n * Abort a given signal.\n */\nexport function abortSignal(signal: AbortSignal): void {\n    if (abortedFlags.get(signal) !== false) {\n        return\n    }\n\n    abortedFlags.set(signal, true)\n    signal.dispatchEvent<\"abort\">({ type: \"abort\" })\n}\n\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap<AbortSignal, boolean>()\n\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n})\n\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    })\n}\n","import AbortSignal, { abortSignal, createAbortSignal } from \"./abort-signal\"\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nexport default class AbortController {\n    /**\n     * Initialize this controller.\n     */\n    public constructor() {\n        signals.set(this, createAbortSignal())\n    }\n\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    public get signal(): AbortSignal {\n        return getSignal(this)\n    }\n\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    public abort(): void {\n        abortSignal(getSignal(this))\n    }\n}\n\n/**\n * Associated signals.\n */\nconst signals = new WeakMap<AbortController, AbortSignal>()\n\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller: AbortController): AbortSignal {\n    const signal = signals.get(controller)\n    if (signal == null) {\n        throw new TypeError(\n            `Expected 'this' to be an 'AbortController' object, but got ${\n                controller === null ? \"null\" : typeof controller\n            }`,\n        )\n    }\n    return signal\n}\n\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n})\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    })\n}\n\nexport { AbortController, AbortSignal }\n","/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nif (!globalThis.DOMException) {\n  try {\n    const { MessageChannel } = require('worker_threads'),\n    port = new MessageChannel().port1,\n    ab = new ArrayBuffer()\n    port.postMessage(ab, [ab, ab])\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (\n      globalThis.DOMException = err.constructor\n    )\n  }\n}\n\nmodule.exports = globalThis.DOMException\n","const getType = (value) => (Object.prototype.toString.call(value).slice(8, -1).toLowerCase());\nfunction isPlainObject(value) {\n    if (getType(value) !== \"object\") {\n        return false;\n    }\n    const pp = Object.getPrototypeOf(value);\n    if (pp === null || pp === undefined) {\n        return true;\n    }\n    const Ctor = pp.constructor && pp.constructor.toString();\n    return Ctor === Object.toString();\n}\nexport default isPlainObject;\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FileFromPath_path, _FileFromPath_start;\nimport { statSync, createReadStream, promises as fs } from \"fs\";\nimport { basename } from \"path\";\nimport DOMException from \"node-domexception\";\nimport { File } from \"./File.js\";\nimport isPlainObject from \"./isPlainObject.js\";\nexport * from \"./isFile.js\";\nconst MESSAGE = \"The requested file could not be read, \"\n    + \"typically due to permission problems that have occurred after a reference \"\n    + \"to a file was acquired.\";\nclass FileFromPath {\n    constructor(input) {\n        _FileFromPath_path.set(this, void 0);\n        _FileFromPath_start.set(this, void 0);\n        __classPrivateFieldSet(this, _FileFromPath_path, input.path, \"f\");\n        __classPrivateFieldSet(this, _FileFromPath_start, input.start || 0, \"f\");\n        this.name = basename(__classPrivateFieldGet(this, _FileFromPath_path, \"f\"));\n        this.size = input.size;\n        this.lastModified = input.lastModified;\n    }\n    slice(start, end) {\n        return new FileFromPath({\n            path: __classPrivateFieldGet(this, _FileFromPath_path, \"f\"),\n            lastModified: this.lastModified,\n            size: end - start,\n            start\n        });\n    }\n    async *stream() {\n        const { mtimeMs } = await fs.stat(__classPrivateFieldGet(this, _FileFromPath_path, \"f\"));\n        if (mtimeMs > this.lastModified) {\n            throw new DOMException(MESSAGE, \"NotReadableError\");\n        }\n        if (this.size) {\n            yield* createReadStream(__classPrivateFieldGet(this, _FileFromPath_path, \"f\"), {\n                start: __classPrivateFieldGet(this, _FileFromPath_start, \"f\"),\n                end: __classPrivateFieldGet(this, _FileFromPath_start, \"f\") + this.size - 1\n            });\n        }\n    }\n    get [(_FileFromPath_path = new WeakMap(), _FileFromPath_start = new WeakMap(), Symbol.toStringTag)]() {\n        return \"File\";\n    }\n}\nfunction createFileFromPath(path, { mtimeMs, size }, filenameOrOptions, options = {}) {\n    let filename;\n    if (isPlainObject(filenameOrOptions)) {\n        [options, filename] = [filenameOrOptions, undefined];\n    }\n    else {\n        filename = filenameOrOptions;\n    }\n    const file = new FileFromPath({ path, size, lastModified: mtimeMs });\n    if (!filename) {\n        filename = file.name;\n    }\n    return new File([file], filename, {\n        ...options, lastModified: file.lastModified\n    });\n}\nexport function fileFromPathSync(path, filenameOrOptions, options = {}) {\n    const stats = statSync(path);\n    return createFileFromPath(path, stats, filenameOrOptions, options);\n}\nexport async function fileFromPath(path, filenameOrOptions, options) {\n    const stats = await fs.stat(path);\n    return createFileFromPath(path, stats, filenameOrOptions, options);\n}\n","export function noop(): undefined {\n  return undefined;\n}\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n\nexport function setFunctionName(fn: Function, name: string): void {\n  try {\n    Object.defineProperty(fn, 'name', {\n      value: name,\n      configurable: true\n    });\n  } catch {\n    // This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n}\n","import { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\n// https://webidl.spec.whatwg.org/#a-new-promise\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\n// https://webidl.spec.whatwg.org/#a-promise-resolved-with\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return newPromise(resolve => resolve(value));\n}\n\n// https://webidl.spec.whatwg.org/#a-promise-rejected-with\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\n// Bluebird logs a warning when a promise is created within a fulfillment handler, but then isn't returned\n// from that handler. To prevent this, return null instead of void from all handlers.\n// http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => null | PromiseLike<null>,\n  onRejected?: (reason: any) => null | PromiseLike<null>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => null | PromiseLike<null>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => null | PromiseLike<null>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nlet _queueMicrotask: (callback: () => void) => void = callback => {\n  if (typeof queueMicrotask === 'function') {\n    _queueMicrotask = queueMicrotask;\n  } else {\n    const resolvedPromise = promiseResolvedWith(undefined);\n    _queueMicrotask = cb => PerformPromiseThen(resolvedPromise, cb);\n  }\n  return _queueMicrotask(callback);\n};\n\nexport { _queueMicrotask as queueMicrotask };\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\nexport const ReleaseSteps = Symbol('[[ReleaseSteps]]');\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, type ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\nimport { ReleaseSteps } from '../abstract-ops/internal-methods';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  assert(stream._reader === reader);\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  stream._readableStreamController[ReleaseSteps]();\n\n  stream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T>(x: T | undefined,\n                                          position: number,\n                                          context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T>(x: T | undefined,\n                                       field: string,\n                                       context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { setFunctionName, typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    ReadableStreamDefaultReaderRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nsetFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');\nsetFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');\nsetFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\nexport function ReadableStreamDefaultReaderRelease(reader: ReadableStreamDefaultReader) {\n  ReadableStreamReaderGenericRelease(reader);\n  const e = new TypeError('Reader was released');\n  ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n}\n\nexport function ReadableStreamDefaultReaderErrorReadRequests(reader: ReadableStreamDefaultReader, e: any) {\n  const readRequests = reader._readRequests;\n  reader._readRequests = new SimpleQueue();\n  readRequests.forEach(readRequest => {\n    readRequest._errorSteps(e);\n  });\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\n/* eslint-disable @typescript-eslint/no-empty-function */\nexport const AsyncIteratorPrototype: AsyncIterable<any> =\n  Object.getPrototypeOf(Object.getPrototypeOf(async function* (): AsyncIterableIterator<any> {}).prototype);\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  type ReadableStreamDefaultReadResult,\n  type ReadRequest\n} from './default-reader';\nimport { ReadableStreamReaderGenericCancel, ReadableStreamReaderGenericRelease } from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterableIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    assert(reader._ownerReadableStream !== undefined);\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    assert(reader._ownerReadableStream !== undefined);\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ninterface ReadableStreamAsyncIteratorInstance<R> extends ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nObject.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","import { reflectCall } from 'lib/helpers/webidl';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport assert from '../../stub/assert';\n\ndeclare global {\n  interface ArrayBuffer {\n    readonly detached: boolean;\n\n    transfer(): ArrayBuffer;\n  }\n\n  function structuredClone<T>(value: T, options: { transfer: ArrayBuffer[] }): T;\n}\n\nexport function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\nexport let TransferArrayBuffer = (O: ArrayBuffer): ArrayBuffer => {\n  if (typeof O.transfer === 'function') {\n    TransferArrayBuffer = buffer => buffer.transfer();\n  } else if (typeof structuredClone === 'function') {\n    TransferArrayBuffer = buffer => structuredClone(buffer, { transfer: [buffer] });\n  } else {\n    // Not implemented correctly\n    TransferArrayBuffer = buffer => buffer;\n  }\n  return TransferArrayBuffer(O);\n};\n\nexport function CanTransferArrayBuffer(O: ArrayBuffer): boolean {\n  return !IsDetachedBuffer(O);\n}\n\nexport let IsDetachedBuffer = (O: ArrayBuffer): boolean => {\n  if (typeof O.detached === 'boolean') {\n    IsDetachedBuffer = buffer => buffer.detached;\n  } else {\n    // Not implemented correctly\n    IsDetachedBuffer = buffer => buffer.byteLength === 0;\n  }\n  return IsDetachedBuffer(O);\n};\n\nexport function ArrayBufferSlice(buffer: ArrayBuffer, begin: number, end: number): ArrayBuffer {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n\nexport type MethodName<T> = {\n  [P in keyof T]: T[P] extends Function | undefined ? P : never;\n}[keyof T];\n\nexport function GetMethod<T, K extends MethodName<T>>(receiver: T, prop: K): T[K] | undefined {\n  const func = receiver[prop];\n  if (func === undefined || func === null) {\n    return undefined;\n  }\n  if (typeof func !== 'function') {\n    throw new TypeError(`${String(prop)} is not a function`);\n  }\n  return func;\n}\n\nexport interface SyncIteratorRecord<T> {\n  iterator: Iterator<T>,\n  nextMethod: Iterator<T>['next'],\n  done: boolean;\n}\n\nexport interface AsyncIteratorRecord<T> {\n  iterator: AsyncIterator<T>,\n  nextMethod: AsyncIterator<T>['next'],\n  done: boolean;\n}\n\nexport type SyncOrAsyncIteratorRecord<T> = SyncIteratorRecord<T> | AsyncIteratorRecord<T>;\n\nexport function CreateAsyncFromSyncIterator<T>(syncIteratorRecord: SyncIteratorRecord<T>): AsyncIteratorRecord<T> {\n  // Instead of re-implementing CreateAsyncFromSyncIterator and %AsyncFromSyncIteratorPrototype%,\n  // we use yield* inside an async generator function to achieve the same result.\n\n  // Wrap the sync iterator inside a sync iterable, so we can use it with yield*.\n  const syncIterable = {\n    [Symbol.iterator]: () => syncIteratorRecord.iterator\n  };\n  // Create an async generator function and immediately invoke it.\n  const asyncIterator = (async function* () {\n    return yield* syncIterable;\n  }());\n  // Return as an async iterator record.\n  const nextMethod = asyncIterator.next;\n  return { iterator: asyncIterator, nextMethod, done: false };\n}\n\n// Aligns with core-js/modules/es.symbol.async-iterator.js\nexport const SymbolAsyncIterator: (typeof Symbol)['asyncIterator'] =\n  Symbol.asyncIterator ??\n  Symbol.for?.('Symbol.asyncIterator') ??\n  '@@asyncIterator';\n\nexport type SyncOrAsyncIterable<T> = Iterable<T> | AsyncIterable<T>;\nexport type SyncOrAsyncIteratorMethod<T> = () => (Iterator<T> | AsyncIterator<T>);\n\nfunction GetIterator<T>(\n  obj: SyncOrAsyncIterable<T>,\n  hint: 'async',\n  method?: SyncOrAsyncIteratorMethod<T>\n): AsyncIteratorRecord<T>;\nfunction GetIterator<T>(\n  obj: Iterable<T>,\n  hint: 'sync',\n  method?: SyncOrAsyncIteratorMethod<T>\n): SyncIteratorRecord<T>;\nfunction GetIterator<T>(\n  obj: SyncOrAsyncIterable<T>,\n  hint = 'sync',\n  method?: SyncOrAsyncIteratorMethod<T>\n): SyncOrAsyncIteratorRecord<T> {\n  assert(hint === 'sync' || hint === 'async');\n  if (method === undefined) {\n    if (hint === 'async') {\n      method = GetMethod(obj as AsyncIterable<T>, SymbolAsyncIterator);\n      if (method === undefined) {\n        const syncMethod = GetMethod(obj as Iterable<T>, Symbol.iterator);\n        const syncIteratorRecord = GetIterator(obj as Iterable<T>, 'sync', syncMethod);\n        return CreateAsyncFromSyncIterator(syncIteratorRecord);\n      }\n    } else {\n      method = GetMethod(obj as Iterable<T>, Symbol.iterator);\n    }\n  }\n  if (method === undefined) {\n    throw new TypeError('The object is not iterable');\n  }\n  const iterator = reflectCall(method, obj, []);\n  if (!typeIsObject(iterator)) {\n    throw new TypeError('The iterator method must return an object');\n  }\n  const nextMethod = iterator.next;\n  return { iterator, nextMethod, done: false } as SyncOrAsyncIteratorRecord<T>;\n}\n\nexport { GetIterator };\n\nexport function IteratorNext<T>(iteratorRecord: AsyncIteratorRecord<T>): Promise<IteratorResult<T>> {\n  const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);\n  if (!typeIsObject(result)) {\n    throw new TypeError('The iterator.next() method must return an object');\n  }\n  return result;\n}\n\nexport function IteratorComplete<TReturn>(\n  iterResult: IteratorResult<unknown, TReturn>\n): iterResult is IteratorReturnResult<TReturn> {\n  assert(typeIsObject(iterResult));\n  return Boolean(iterResult.done);\n}\n\nexport function IteratorValue<T>(iterResult: IteratorYieldResult<T>): T {\n  assert(typeIsObject(iterResult));\n  return iterResult.value;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\nimport type { NonShared } from '../helpers/array-buffer-view';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: NonShared<ArrayBufferView>): NonShared<Uint8Array> {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer) as NonShared<Uint8Array>;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","export type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport type NonShared<T extends ArrayBufferView> = T & {\n  buffer: ArrayBuffer;\n}\n\nexport interface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBuffer, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> extends ArrayBufferViewConstructor<T> {\n  readonly BYTES_PER_ELEMENT: number;\n}\n\nexport type DataViewConstructor = ArrayBufferViewConstructor<DataView>;\n\nfunction isDataViewConstructor(ctor: Function): ctor is DataViewConstructor {\n  return ctor === DataView;\n}\n\nexport function isDataView(view: ArrayBufferView): view is DataView {\n  return isDataViewConstructor(view.constructor);\n}\n\nexport function arrayBufferViewElementSize<T extends ArrayBufferView>(ctor: ArrayBufferViewConstructor<T>): number {\n  if (isDataViewConstructor(ctor)) {\n    return 1;\n  }\n  return (ctor as unknown as TypedArrayConstructor).BYTES_PER_ELEMENT;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  IsReadableStreamDefaultReader,\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  type ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  type ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  type ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport type { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { setFunctionName, typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps, ReleaseSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\nimport {\n  type ArrayBufferViewConstructor,\n  arrayBufferViewElementSize,\n  type NonShared,\n  type TypedArrayConstructor\n} from '../helpers/array-buffer-view';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: NonShared<ArrayBufferView> | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: NonShared<ArrayBufferView>): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nsetFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');\nsetFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, 'respondWithNewView');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBuffer;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends NonShared<ArrayBufferView> = NonShared<ArrayBufferView>> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBuffer;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  minimumFill: number;\n  elementSize: number;\n  viewConstructor: TypedArrayConstructor<Uint8Array>;\n  readerType: 'default' | 'none';\n}\n\ninterface BYOBPullIntoDescriptor<T extends NonShared<ArrayBufferView> = NonShared<ArrayBufferView>> {\n  buffer: ArrayBuffer;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  minimumFill: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob' | 'none';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: NonShared<ArrayBufferView>): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<NonShared<Uint8Array>>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        minimumFill: 1,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n\n  /** @internal */\n  [ReleaseSteps](): void {\n    if (this._pendingPullIntos.length > 0) {\n      const firstPullInto = this._pendingPullIntos.peek();\n      firstPullInto.readerType = 'none';\n\n      this._pendingPullIntos = new SimpleQueue();\n      this._pendingPullIntos.push(firstPullInto);\n    }\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nsetFunctionName(ReadableByteStreamController.prototype.close, 'close');\nsetFunctionName(ReadableByteStreamController.prototype.enqueue, 'enqueue');\nsetFunctionName(ReadableByteStreamController.prototype.error, 'error');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n\n      return null;\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n      return null;\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends NonShared<ArrayBufferView>>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n  assert(pullIntoDescriptor.readerType !== 'none');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as NonShared<Uint8Array>, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends NonShared<ArrayBufferView>>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBuffer,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller: ReadableByteStreamController,\n                                                               buffer: ArrayBuffer,\n                                                               byteOffset: number,\n                                                               byteLength: number) {\n  let clonedChunk;\n  try {\n    clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);\n  } catch (cloneE) {\n    ReadableByteStreamControllerError(controller, cloneE);\n    throw cloneE;\n  }\n  ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);\n}\n\nfunction ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller: ReadableByteStreamController,\n                                                                    firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.readerType === 'none');\n  if (firstDescriptor.bytesFilled > 0) {\n    ReadableByteStreamControllerEnqueueClonedChunkToQueue(\n      controller,\n      firstDescriptor.buffer,\n      firstDescriptor.byteOffset,\n      firstDescriptor.bytesFilled\n    );\n  }\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill);\n  const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;\n  const maxAlignedBytes = maxBytesFilled - remainderBytes;\n  // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n  // of the queue, so the underlying source can keep filling it.\n  if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n    assert(pullIntoDescriptor.readerType !== 'none');\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller: ReadableByteStreamController) {\n  const reader = controller._controlledReadableByteStream._reader;\n  assert(IsReadableStreamDefaultReader(reader));\n  while (reader._readRequests.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n    const readRequest = reader._readRequests.shift();\n    ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends NonShared<ArrayBufferView>>(\n  controller: ReadableByteStreamController,\n  view: T,\n  min: number,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n  const elementSize = arrayBufferViewElementSize(ctor);\n\n  const { byteOffset, byteLength } = view;\n\n  const minimumFill = min * elementSize;\n  assert(minimumFill >= elementSize && minimumFill <= byteLength);\n  assert(minimumFill % elementSize === 0);\n\n  let buffer: ArrayBuffer;\n  try {\n    buffer = TransferArrayBuffer(view.buffer);\n  } catch (e) {\n    readIntoRequest._errorSteps(e);\n    return;\n  }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset,\n    byteLength,\n    bytesFilled: 0,\n    minimumFill,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled % firstDescriptor.elementSize === 0);\n\n  if (firstDescriptor.readerType === 'none') {\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n  }\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.readerType === 'none') {\n    ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    return;\n  }\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {\n    // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n    // of the queue, so the underlying source can keep filling it.\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    ReadableByteStreamControllerEnqueueClonedChunkToQueue(\n      controller,\n      pullIntoDescriptor.buffer,\n      end - remainderSize,\n      remainderSize\n    );\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(\n  controller: ReadableByteStreamController,\n  chunk: NonShared<ArrayBufferView>\n) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const { buffer, byteOffset, byteLength } = chunk;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    if (firstPendingPullInto.readerType === 'none') {\n      ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);\n    }\n  }\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView as NonShared<Uint8Array>, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerFillReadRequestFromQueue(\n  controller: ReadableByteStreamController,\n  readRequest: ReadRequest<NonShared<Uint8Array>>\n) {\n  assert(controller._queueTotalSize > 0);\n\n  const entry = controller._queue.shift();\n  controller._queueTotalSize -= entry.byteLength;\n\n  ReadableByteStreamControllerHandleQueueDrain(controller);\n\n  const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n  readRequest._chunkSteps(view as NonShared<Uint8Array>);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view as NonShared<Uint8Array>);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: NonShared<ArrayBufferView>) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n      return null;\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n      return null;\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void>;\n  let pullAlgorithm: () => Promise<void>;\n  let cancelAlgorithm: (reason: any) => Promise<void>;\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  } else {\n    startAlgorithm = () => undefined;\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  } else {\n    pullAlgorithm = () => promiseResolvedWith(undefined);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  } else {\n    cancelAlgorithm = () => promiseResolvedWith(undefined);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: NonShared<ArrayBufferView>) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import { assertDictionary, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport type {\n  ReadableStreamBYOBReaderReadOptions,\n  ReadableStreamGetReaderOptions,\n  ValidatedReadableStreamBYOBReaderReadOptions\n} from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n\nexport function convertByobReadOptions(\n  options: ReadableStreamBYOBReaderReadOptions | null | undefined,\n  context: string\n): ValidatedReadableStreamBYOBReaderReadOptions {\n  assertDictionary(options, context);\n  const min = options?.min ?? 1;\n  return {\n    min: convertUnsignedLongLongWithEnforceRange(\n      min,\n      `${context} has member 'min' that`\n    )\n  };\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, type ReadableByteStream, type ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { setFunctionName, typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\nimport type {\n  ReadableStreamBYOBReaderReadOptions,\n  ValidatedReadableStreamBYOBReaderReadOptions\n} from './reader-options';\nimport { convertByobReadOptions } from '../validators/reader-options';\nimport { isDataView, type NonShared, type TypedArray } from '../helpers/array-buffer-view';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream as ReadableStream<Uint8Array>);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends NonShared<ArrayBufferView>>(\n  stream: ReadableByteStream,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends NonShared<ArrayBufferView>> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableStream<Uint8Array>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(\n    view: T,\n    options?: ReadableStreamBYOBReaderReadOptions\n  ): Promise<ReadableStreamBYOBReadResult<T>>;\n  read<T extends NonShared<ArrayBufferView>>(\n    view: T,\n    rawOptions: ReadableStreamBYOBReaderReadOptions | null | undefined = {}\n  ): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    let options: ValidatedReadableStreamBYOBReaderReadOptions;\n    try {\n      options = convertByobReadOptions(rawOptions, 'options');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n    const min = options.min;\n    if (min === 0) {\n      return promiseRejectedWith(new TypeError('options.min must be greater than 0'));\n    }\n    if (!isDataView(view)) {\n      if (min > (view as unknown as TypedArray).length) {\n        return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s length'));\n      }\n    } else if (min > view.byteLength) {\n      return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s byteLength'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    ReadableStreamBYOBReaderRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nsetFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');\nsetFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');\nsetFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends NonShared<ArrayBufferView>>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  min: number,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      min,\n      readIntoRequest\n    );\n  }\n}\n\nexport function ReadableStreamBYOBReaderRelease(reader: ReadableStreamBYOBReader) {\n  ReadableStreamReaderGenericRelease(reader);\n  const e = new TypeError('Reader was released');\n  ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n}\n\nexport function ReadableStreamBYOBReaderErrorReadIntoRequests(reader: ReadableStreamBYOBReader, e: any) {\n  const readIntoRequests = reader._readIntoRequests;\n  reader._readIntoRequests = new SimpleQueue();\n  readIntoRequests.forEach(readIntoRequest => {\n    readIntoRequest._errorSteps(e);\n  });\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import type { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import type { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport type {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * If aborted, returns the reason for aborting.\n   */\n  readonly reason?: any;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(reason?: any): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  type QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport type { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { setFunctionName, typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport type {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { type AbortController, type AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nsetFunctionName(WritableStream.prototype.abort, 'abort');\nsetFunctionName(WritableStream.prototype.close, 'close');\nsetFunctionName(WritableStream.prototype.getWriter, 'getWriter');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight\n};\n\nexport type {\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort(reason);\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return null;\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return null;\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nsetFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');\nsetFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');\nsetFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock');\nsetFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n      return null;\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n      return null;\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void>;\n  let writeAlgorithm: (chunk: W) => Promise<void>;\n  let closeAlgorithm: () => Promise<void>;\n  let abortAlgorithm: (reason: any) => Promise<void>;\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  } else {\n    startAlgorithm = () => undefined;\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  } else {\n    writeAlgorithm = () => promiseResolvedWith(undefined);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  } else {\n    closeAlgorithm = () => promiseResolvedWith(undefined);\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  } else {\n    abortAlgorithm = () => promiseResolvedWith(undefined);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n      return null;\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n      return null;\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n      return null;\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n      return null;\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\n\nfunction getGlobals(): typeof globalThis | undefined {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  } else if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","/// <reference types=\"node\" />\nimport { globals } from '../globals';\nimport { setFunctionName } from '../lib/helpers/miscellaneous';\n\ninterface DOMException extends Error {\n  name: string;\n  message: string;\n}\n\ntype DOMExceptionConstructor = new (message?: string, name?: string) => DOMException;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  if ((ctor as DOMExceptionConstructor).name !== 'DOMException') {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Support:\n * - Web browsers\n * - Node 18 and higher (https://github.com/nodejs/node/commit/e4b1fb5e6422c1ff151234bb9de792d45dd88d87)\n */\nfunction getFromGlobal(): DOMExceptionConstructor | undefined {\n  const ctor = globals?.DOMException;\n  return isDOMExceptionConstructor(ctor) ? ctor : undefined;\n}\n\n/**\n * Support:\n * - All platforms\n */\nfunction createPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  setFunctionName(ctor, 'DOMException');\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst DOMException: DOMExceptionConstructor = getFromGlobal() || createPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { type AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = signal.reason !== undefined ? signal.reason : new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n      return null;\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n      return null;\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n      return null;\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => null) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => null) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest(): null {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n        return null;\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any): null {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n\n      return null;\n    }\n  });\n}\n","import type { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, type QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  type ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport type { ValidatedUnderlyingSource } from './underlying-source';\nimport { setFunctionName, typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps, ReleaseSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n\n  /** @internal */\n  [ReleaseSteps](): void {\n    // Do nothing.\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nsetFunctionName(ReadableStreamDefaultController.prototype.close, 'close');\nsetFunctionName(ReadableStreamDefaultController.prototype.enqueue, 'enqueue');\nsetFunctionName(ReadableStreamDefaultController.prototype.error, 'error');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n\n      return null;\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n      return null;\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      return null;\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n      return null;\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void>;\n  let pullAlgorithm: () => Promise<void>;\n  let cancelAlgorithm: (reason: any) => Promise<void>;\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  } else {\n    startAlgorithm = () => undefined;\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  } else {\n    pullAlgorithm = () => promiseResolvedWith(undefined);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  } else {\n    cancelAlgorithm = () => promiseResolvedWith(undefined);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  type DefaultReadableStream,\n  IsReadableStream,\n  type ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  type ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  type ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  type ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\nimport type { NonShared } from '../helpers/array-buffer-view';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(\n  stream: ReadableStream<R>,\n  cloneForBranch2: boolean\n): [DefaultReadableStream<R>, DefaultReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: DefaultReadableStream<R>;\n  let branch2: DefaultReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n    return null;\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<NonShared<Uint8Array>> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<NonShared<Uint8Array>>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return null;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n      return null;\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<NonShared<Uint8Array>> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: NonShared<ArrayBufferView>, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<NonShared<Uint8Array>>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<NonShared<ArrayBufferView>> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { typeIsObject } from '../helpers/miscellaneous';\nimport type { ReadableStreamDefaultReadResult } from './default-reader';\n\n/**\n * A common interface for a `ReadadableStream` implementation.\n *\n * @public\n */\nexport interface ReadableStreamLike<R = any> {\n  readonly locked: boolean;\n\n  getReader(): ReadableStreamDefaultReaderLike<R>;\n}\n\n/**\n * A common interface for a `ReadableStreamDefaultReader` implementation.\n *\n * @public\n */\nexport interface ReadableStreamDefaultReaderLike<R = any> {\n  readonly closed: Promise<undefined>;\n\n  cancel(reason?: any): Promise<void>;\n\n  read(): Promise<ReadableStreamDefaultReadResult<R>>;\n\n  releaseLock(): void;\n}\n\nexport function isReadableStreamLike<R>(stream: unknown): stream is ReadableStreamLike<R> {\n  return typeIsObject(stream) && typeof (stream as ReadableStreamLike<R>).getReader !== 'undefined';\n}\n","import { CreateReadableStream, type DefaultReadableStream } from '../readable-stream';\nimport {\n  isReadableStreamLike,\n  type ReadableStreamDefaultReaderLike,\n  type ReadableStreamLike\n} from './readable-stream-like';\nimport { ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue } from './default-controller';\nimport { GetIterator, GetMethod, IteratorComplete, IteratorNext, IteratorValue } from '../abstract-ops/ecmascript';\nimport { promiseRejectedWith, promiseResolvedWith, reflectCall, transformPromiseWith } from '../helpers/webidl';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { noop } from '../../utils';\n\nexport function ReadableStreamFrom<R>(\n  source: Iterable<R> | AsyncIterable<R> | ReadableStreamLike<R>\n): DefaultReadableStream<R> {\n  if (isReadableStreamLike(source)) {\n    return ReadableStreamFromDefaultReader(source.getReader());\n  }\n  return ReadableStreamFromIterable(source);\n}\n\nexport function ReadableStreamFromIterable<R>(asyncIterable: Iterable<R> | AsyncIterable<R>): DefaultReadableStream<R> {\n  let stream: DefaultReadableStream<R>;\n  const iteratorRecord = GetIterator(asyncIterable, 'async');\n\n  const startAlgorithm = noop;\n\n  function pullAlgorithm(): Promise<void> {\n    let nextResult;\n    try {\n      nextResult = IteratorNext(iteratorRecord);\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n    const nextPromise = promiseResolvedWith(nextResult);\n    return transformPromiseWith(nextPromise, iterResult => {\n      if (!typeIsObject(iterResult)) {\n        throw new TypeError('The promise returned by the iterator.next() method must fulfill with an object');\n      }\n      const done = IteratorComplete(iterResult);\n      if (done) {\n        ReadableStreamDefaultControllerClose(stream._readableStreamController);\n      } else {\n        const value = IteratorValue(iterResult);\n        ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n      }\n    });\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    const iterator = iteratorRecord.iterator;\n    let returnMethod: (typeof iterator)['return'] | undefined;\n    try {\n      returnMethod = GetMethod(iterator, 'return');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n    if (returnMethod === undefined) {\n      return promiseResolvedWith(undefined);\n    }\n    let returnResult: IteratorResult<R> | Promise<IteratorResult<R>>;\n    try {\n      returnResult = reflectCall(returnMethod, iterator, [reason]);\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n    const returnPromise = promiseResolvedWith(returnResult);\n    return transformPromiseWith(returnPromise, iterResult => {\n      if (!typeIsObject(iterResult)) {\n        throw new TypeError('The promise returned by the iterator.return() method must fulfill with an object');\n      }\n      return undefined;\n    });\n  }\n\n  stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n  return stream;\n}\n\nexport function ReadableStreamFromDefaultReader<R>(\n  reader: ReadableStreamDefaultReaderLike<R>\n): DefaultReadableStream<R> {\n  let stream: DefaultReadableStream<R>;\n\n  const startAlgorithm = noop;\n\n  function pullAlgorithm(): Promise<void> {\n    let readPromise;\n    try {\n      readPromise = reader.read();\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n    return transformPromiseWith(readPromise, readResult => {\n      if (!typeIsObject(readResult)) {\n        throw new TypeError('The promise returned by the reader.read() method must fulfill with an object');\n      }\n      if (readResult.done) {\n        ReadableStreamDefaultControllerClose(stream._readableStreamController);\n      } else {\n        const value = readResult.value;\n        ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n      }\n    });\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    try {\n      return promiseResolvedWith(reader.cancel(reason));\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n  }\n\n  stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n  return stream;\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport type {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport type {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { assertDictionary } from './basic';\nimport type { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { type AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport type { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, type ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderErrorReadRequests,\n  type ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderErrorReadIntoRequests,\n  type ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { ReadableStreamFrom } from './readable-stream/from';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport type {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { setFunctionName, typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList, SymbolAsyncIterator } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport type {\n  ReadableStreamBYOBReaderReadOptions,\n  ReadableStreamGetReaderOptions\n} from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport type { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport type { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport type { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\nimport type { ReadableStreamDefaultReaderLike, ReadableStreamLike } from './readable-stream/readable-stream-like';\nimport type { NonShared } from './helpers/array-buffer-view';\n\nexport type DefaultReadableStream<R = any> = ReadableStream<R> & {\n  _readableStreamController: ReadableStreamDefaultController<R>\n};\n\nexport type ReadableByteStream = ReadableStream<NonShared<Uint8Array>> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> implements AsyncIterable<R> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator](options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n\n  [SymbolAsyncIterator](options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R> {\n    // Stub implementation, overridden below\n    return this.values(options);\n  }\n\n  /**\n   * Creates a new ReadableStream wrapping the provided iterable or async iterable.\n   *\n   * This can be used to adapt various kinds of objects into a readable stream,\n   * such as an array, an async generator, or a Node.js readable stream.\n   */\n  static from<R>(asyncIterable: Iterable<R> | AsyncIterable<R> | ReadableStreamLike<R>): ReadableStream<R> {\n    return ReadableStreamFrom(asyncIterable);\n  }\n}\n\nObject.defineProperties(ReadableStream, {\n  from: { enumerable: true }\n});\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nsetFunctionName(ReadableStream.from, 'from');\nsetFunctionName(ReadableStream.prototype.cancel, 'cancel');\nsetFunctionName(ReadableStream.prototype.getReader, 'getReader');\nsetFunctionName(ReadableStream.prototype.pipeThrough, 'pipeThrough');\nsetFunctionName(ReadableStream.prototype.pipeTo, 'pipeTo');\nsetFunctionName(ReadableStream.prototype.tee, 'tee');\nsetFunctionName(ReadableStream.prototype.values, 'values');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nObject.defineProperty(ReadableStream.prototype, SymbolAsyncIterator, {\n  value: ReadableStream.prototype.values,\n  writable: true,\n  configurable: true\n});\n\nexport type {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  ReadableStreamBYOBReaderReadOptions,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions,\n  ReadableStreamLike,\n  ReadableStreamDefaultReaderLike\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>,\n  highWaterMark = 1,\n  sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1\n): DefaultReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: DefaultReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    const readIntoRequests = reader._readIntoRequests;\n    reader._readIntoRequests = new SimpleQueue();\n    readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    const readRequests = reader._readRequests;\n    reader._readRequests = new SimpleQueue();\n    readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n    ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import type { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import type { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { setFunctionName, typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\nsetFunctionName(byteLengthSizeFunction, 'size');\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import type { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { setFunctionName, typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\nsetFunctionName(countSizeFunction, 'size');\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport type {\n  Transformer,\n  TransformerCancelCallback,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const cancel = original?.cancel;\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    cancel: cancel === undefined ?\n      undefined :\n      convertTransformerCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n\nfunction convertTransformerCancelCallback<I, O>(\n  fn: TransformerCancelCallback,\n  original: Transformer<I, O>,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith,\n  uponPromise\n} from './helpers/webidl';\nimport { CreateReadableStream, type DefaultReadableStream, ReadableStream } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport type { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { setFunctionName, typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport type {\n  Transformer,\n  TransformerCancelCallback,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: DefaultReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport type {\n  Transformer,\n  TransformerCancelCallback,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            cancelAlgorithm: (reason: any) => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  TransformStreamUnblockWrite(stream);\n}\n\nfunction TransformStreamUnblockWrite(stream: TransformStream) {\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _finishPromise: Promise<undefined> | undefined;\n  /** @internal */\n  _finishPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _finishPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nsetFunctionName(TransformStreamDefaultController.prototype.enqueue, 'enqueue');\nsetFunctionName(TransformStreamDefaultController.prototype.error, 'error');\nsetFunctionName(TransformStreamDefaultController.prototype.terminate, 'terminate');\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>,\n                                                     cancelAlgorithm: (reason: any) => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._finishPromise = undefined;\n  controller._finishPromise_resolve = undefined;\n  controller._finishPromise_reject = undefined;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm: (chunk: I) => Promise<void>;\n  let flushAlgorithm: () => Promise<void>;\n  let cancelAlgorithm: (reason: any) => Promise<void>;\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  } else {\n    transformAlgorithm = chunk => {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n  }\n\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  } else {\n    flushAlgorithm = () => promiseResolvedWith(undefined);\n  }\n\n  if (transformer.cancel !== undefined) {\n    cancelAlgorithm = reason => transformer.cancel!(reason);\n  } else {\n    cancelAlgorithm = () => promiseResolvedWith(undefined);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm<I, O>(stream: TransformStream<I, O>, reason: any): Promise<void> {\n  const controller = stream._transformStreamController;\n  if (controller._finishPromise !== undefined) {\n    return controller._finishPromise;\n  }\n\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  // Assign the _finishPromise now so that if _cancelAlgorithm calls readable.cancel() internally,\n  // we don't run the _cancelAlgorithm again.\n  controller._finishPromise = newPromise((resolve, reject) => {\n    controller._finishPromise_resolve = resolve;\n    controller._finishPromise_reject = reject;\n  });\n\n  const cancelPromise = controller._cancelAlgorithm(reason);\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  uponPromise(cancelPromise, () => {\n    if (readable._state === 'errored') {\n      defaultControllerFinishPromiseReject(controller, readable._storedError);\n    } else {\n      ReadableStreamDefaultControllerError(readable._readableStreamController, reason);\n      defaultControllerFinishPromiseResolve(controller);\n    }\n    return null;\n  }, r => {\n    ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n    defaultControllerFinishPromiseReject(controller, r);\n    return null;\n  });\n\n  return controller._finishPromise;\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  const controller = stream._transformStreamController;\n  if (controller._finishPromise !== undefined) {\n    return controller._finishPromise;\n  }\n\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  // Assign the _finishPromise now so that if _flushAlgorithm calls readable.cancel() internally,\n  // we don't also run the _cancelAlgorithm.\n  controller._finishPromise = newPromise((resolve, reject) => {\n    controller._finishPromise_resolve = resolve;\n    controller._finishPromise_reject = reject;\n  });\n\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  uponPromise(flushPromise, () => {\n    if (readable._state === 'errored') {\n      defaultControllerFinishPromiseReject(controller, readable._storedError);\n    } else {\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n      defaultControllerFinishPromiseResolve(controller);\n    }\n    return null;\n  }, r => {\n    ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n    defaultControllerFinishPromiseReject(controller, r);\n    return null;\n  });\n\n  return controller._finishPromise;\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\nfunction TransformStreamDefaultSourceCancelAlgorithm<I, O>(stream: TransformStream<I, O>, reason: any): Promise<void> {\n  const controller = stream._transformStreamController;\n  if (controller._finishPromise !== undefined) {\n    return controller._finishPromise;\n  }\n\n  // stream._writable cannot change after construction, so caching it across a call to user code is safe.\n  const writable = stream._writable;\n\n  // Assign the _finishPromise now so that if _flushAlgorithm calls writable.abort() or\n  // writable.cancel() internally, we don't run the _cancelAlgorithm again, or also run the\n  // _flushAlgorithm.\n  controller._finishPromise = newPromise((resolve, reject) => {\n    controller._finishPromise_resolve = resolve;\n    controller._finishPromise_reject = reject;\n  });\n\n  const cancelPromise = controller._cancelAlgorithm(reason);\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  uponPromise(cancelPromise, () => {\n    if (writable._state === 'errored') {\n      defaultControllerFinishPromiseReject(controller, writable._storedError);\n    } else {\n      WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);\n      TransformStreamUnblockWrite(stream);\n      defaultControllerFinishPromiseResolve(controller);\n    }\n    return null;\n  }, r => {\n    WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r);\n    TransformStreamUnblockWrite(stream);\n    defaultControllerFinishPromiseReject(controller, r);\n    return null;\n  });\n\n  return controller._finishPromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\nexport function defaultControllerFinishPromiseResolve(controller: TransformStreamDefaultController<any>) {\n  if (controller._finishPromise_resolve === undefined) {\n    return;\n  }\n\n  controller._finishPromise_resolve();\n  controller._finishPromise_resolve = undefined;\n  controller._finishPromise_reject = undefined;\n}\n\nexport function defaultControllerFinishPromiseReject(controller: TransformStreamDefaultController<any>, reason: any) {\n  if (controller._finishPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(controller._finishPromise!);\n  controller._finishPromise_reject(reason);\n  controller._finishPromise_resolve = undefined;\n  controller._finishPromise_reject = undefined;\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","export interface MimeBuffer extends Buffer {\n\ttype: string;\n\ttypeFull: string;\n\tcharset: string;\n}\n\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri: string): MimeBuffer {\n\tif (!/^data:/i.test(uri)) {\n\t\tthrow new TypeError(\n\t\t\t'`uri` does not appear to be a Data URI (must begin with \"data:\")'\n\t\t);\n\t}\n\n\t// strip newlines\n\turi = uri.replace(/\\r?\\n/g, '');\n\n\t// split the URI up into the \"metadata\" and the \"data\" portions\n\tconst firstComma = uri.indexOf(',');\n\tif (firstComma === -1 || firstComma <= 4) {\n\t\tthrow new TypeError('malformed data: URI');\n\t}\n\n\t// remove the \"data:\" scheme and parse the metadata\n\tconst meta = uri.substring(5, firstComma).split(';');\n\n\tlet charset = '';\n\tlet base64 = false;\n\tconst type = meta[0] || 'text/plain';\n\tlet typeFull = type;\n\tfor (let i = 1; i < meta.length; i++) {\n\t\tif (meta[i] === 'base64') {\n\t\t\tbase64 = true;\n\t\t} else if(meta[i]) {\n\t\t\ttypeFull += `;${  meta[i]}`;\n\t\t\tif (meta[i].indexOf('charset=') === 0) {\n\t\t\t\tcharset = meta[i].substring(8);\n\t\t\t}\n\t\t}\n\t}\n\t// defaults to US-ASCII only if type is not provided\n\tif (!meta[0] && !charset.length) {\n\t\ttypeFull += ';charset=US-ASCII';\n\t\tcharset = 'US-ASCII';\n\t}\n\n\t// get the encoded data portion and decode URI-encoded chars\n\tconst encoding = base64 ? 'base64' : 'ascii';\n\tconst data = unescape(uri.substring(firstComma + 1));\n\tconst buffer = Buffer.from(data, encoding) as MimeBuffer;\n\n\t// set `.type` and `.typeFull` properties to MIME type\n\tbuffer.type = type;\n\tbuffer.typeFull = typeFull;\n\n\t// set the `.charset` property\n\tbuffer.charset = charset;\n\n\treturn buffer;\n}\n\nexport default dataUriToBuffer;\n","/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n","/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n","import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof Blob &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n","/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nimport C from 'fetch-blob'\nimport F from 'fetch-blob/file.js'\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new F([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}\n\nexport const File = F\n\n/** @type {typeof globalThis.FormData} */\nexport const FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a))}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}\n*entries(){yield*this.#d}\n*keys(){for(var[a]of this)yield a}\n*values(){for(var[,a]of this)yield a}}\n\n/** @param {FormData} F */\nexport function formDataToBlob (F,B=C){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'))\nc.push(`--${b}--`)\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n","export class FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n","\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n","/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n","import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n","import {File} from 'fetch-blob/from.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\n\nlet s = 0;\nconst S = {\n\tSTART_BOUNDARY: s++,\n\tHEADER_FIELD_START: s++,\n\tHEADER_FIELD: s++,\n\tHEADER_VALUE_START: s++,\n\tHEADER_VALUE: s++,\n\tHEADER_VALUE_ALMOST_DONE: s++,\n\tHEADERS_ALMOST_DONE: s++,\n\tPART_DATA_START: s++,\n\tPART_DATA: s++,\n\tEND: s++\n};\n\nlet f = 1;\nconst F = {\n\tPART_BOUNDARY: f,\n\tLAST_BOUNDARY: f *= 2\n};\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nconst lower = c => c | 0x20;\n\nconst noop = () => {};\n\nclass MultipartParser {\n\t/**\n\t * @param {string} boundary\n\t */\n\tconstructor(boundary) {\n\t\tthis.index = 0;\n\t\tthis.flags = 0;\n\n\t\tthis.onHeaderEnd = noop;\n\t\tthis.onHeaderField = noop;\n\t\tthis.onHeadersEnd = noop;\n\t\tthis.onHeaderValue = noop;\n\t\tthis.onPartBegin = noop;\n\t\tthis.onPartData = noop;\n\t\tthis.onPartEnd = noop;\n\n\t\tthis.boundaryChars = {};\n\n\t\tboundary = '\\r\\n--' + boundary;\n\t\tconst ui8a = new Uint8Array(boundary.length);\n\t\tfor (let i = 0; i < boundary.length; i++) {\n\t\t\tui8a[i] = boundary.charCodeAt(i);\n\t\t\tthis.boundaryChars[ui8a[i]] = true;\n\t\t}\n\n\t\tthis.boundary = ui8a;\n\t\tthis.lookbehind = new Uint8Array(this.boundary.length + 8);\n\t\tthis.state = S.START_BOUNDARY;\n\t}\n\n\t/**\n\t * @param {Uint8Array} data\n\t */\n\twrite(data) {\n\t\tlet i = 0;\n\t\tconst length_ = data.length;\n\t\tlet previousIndex = this.index;\n\t\tlet {lookbehind, boundary, boundaryChars, index, state, flags} = this;\n\t\tconst boundaryLength = this.boundary.length;\n\t\tconst boundaryEnd = boundaryLength - 1;\n\t\tconst bufferLength = data.length;\n\t\tlet c;\n\t\tlet cl;\n\n\t\tconst mark = name => {\n\t\t\tthis[name + 'Mark'] = i;\n\t\t};\n\n\t\tconst clear = name => {\n\t\t\tdelete this[name + 'Mark'];\n\t\t};\n\n\t\tconst callback = (callbackSymbol, start, end, ui8a) => {\n\t\t\tif (start === undefined || start !== end) {\n\t\t\t\tthis[callbackSymbol](ui8a && ui8a.subarray(start, end));\n\t\t\t}\n\t\t};\n\n\t\tconst dataCallback = (name, clear) => {\n\t\t\tconst markSymbol = name + 'Mark';\n\t\t\tif (!(markSymbol in this)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clear) {\n\t\t\t\tcallback(name, this[markSymbol], i, data);\n\t\t\t\tdelete this[markSymbol];\n\t\t\t} else {\n\t\t\t\tcallback(name, this[markSymbol], data.length, data);\n\t\t\t\tthis[markSymbol] = 0;\n\t\t\t}\n\t\t};\n\n\t\tfor (i = 0; i < length_; i++) {\n\t\t\tc = data[i];\n\n\t\t\tswitch (state) {\n\t\t\t\tcase S.START_BOUNDARY:\n\t\t\t\t\tif (index === boundary.length - 2) {\n\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else if (c !== CR) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (index - 1 === boundary.length - 2) {\n\t\t\t\t\t\tif (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t} else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c !== boundary[index + 2]) {\n\t\t\t\t\t\tindex = -2;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === boundary[index + 2]) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_FIELD_START:\n\t\t\t\t\tstate = S.HEADER_FIELD;\n\t\t\t\t\tmark('onHeaderField');\n\t\t\t\t\tindex = 0;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_FIELD:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tclear('onHeaderField');\n\t\t\t\t\t\tstate = S.HEADERS_ALMOST_DONE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === COLON) {\n\t\t\t\t\t\tif (index === 1) {\n\t\t\t\t\t\t\t// empty header field\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdataCallback('onHeaderField', true);\n\t\t\t\t\t\tstate = S.HEADER_VALUE_START;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcl = lower(c);\n\t\t\t\t\tif (cl < A || cl > Z) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_START:\n\t\t\t\t\tif (c === SPACE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmark('onHeaderValue');\n\t\t\t\t\tstate = S.HEADER_VALUE;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_VALUE:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tdataCallback('onHeaderValue', true);\n\t\t\t\t\t\tcallback('onHeaderEnd');\n\t\t\t\t\t\tstate = S.HEADER_VALUE_ALMOST_DONE;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADERS_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback('onHeadersEnd');\n\t\t\t\t\tstate = S.PART_DATA_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.PART_DATA_START:\n\t\t\t\t\tstate = S.PART_DATA;\n\t\t\t\t\tmark('onPartData');\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.PART_DATA:\n\t\t\t\t\tpreviousIndex = index;\n\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t// boyer-moore derrived algorithm to safely skip non-boundary data\n\t\t\t\t\t\ti += boundaryEnd;\n\t\t\t\t\t\twhile (i < bufferLength && !(data[i] in boundaryChars)) {\n\t\t\t\t\t\t\ti += boundaryLength;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti -= boundaryEnd;\n\t\t\t\t\t\tc = data[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < boundary.length) {\n\t\t\t\t\t\tif (boundary[index] === c) {\n\t\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\t\tdataCallback('onPartData', true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index === boundary.length) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\t\t// CR = part boundary\n\t\t\t\t\t\t\tflags |= F.PART_BOUNDARY;\n\t\t\t\t\t\t} else if (c === HYPHEN) {\n\t\t\t\t\t\t\t// HYPHEN = end boundary\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index - 1 === boundary.length) {\n\t\t\t\t\t\tif (flags & F.PART_BOUNDARY) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tif (c === LF) {\n\t\t\t\t\t\t\t\t// unset the PART_BOUNDARY flag\n\t\t\t\t\t\t\t\tflags &= ~F.PART_BOUNDARY;\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (flags & F.LAST_BOUNDARY) {\n\t\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t// when matching a possible boundary, keep a lookbehind reference\n\t\t\t\t\t\t// in case it turns out to be a false lead\n\t\t\t\t\t\tlookbehind[index - 1] = c;\n\t\t\t\t\t} else if (previousIndex > 0) {\n\t\t\t\t\t\t// if our boundary turned out to be rubbish, the captured lookbehind\n\t\t\t\t\t\t// belongs to partData\n\t\t\t\t\t\tconst _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n\t\t\t\t\t\tcallback('onPartData', 0, previousIndex, _lookbehind);\n\t\t\t\t\t\tpreviousIndex = 0;\n\t\t\t\t\t\tmark('onPartData');\n\n\t\t\t\t\t\t// reconsider the current character even so it interrupted the sequence\n\t\t\t\t\t\t// it could be the beginning of a new sequence\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.END:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected state entered: ${state}`);\n\t\t\t}\n\t\t}\n\n\t\tdataCallback('onHeaderField');\n\t\tdataCallback('onHeaderValue');\n\t\tdataCallback('onPartData');\n\n\t\t// Update properties for the next call\n\t\tthis.index = index;\n\t\tthis.state = state;\n\t\tthis.flags = flags;\n\t}\n\n\tend() {\n\t\tif ((this.state === S.HEADER_FIELD_START && this.index === 0) ||\n\t\t\t(this.state === S.PART_DATA && this.index === this.boundary.length)) {\n\t\t\tthis.onPartEnd();\n\t\t} else if (this.state !== S.END) {\n\t\t\tthrow new Error('MultipartParser.end(): stream ended unexpectedly');\n\t\t}\n\t}\n}\n\nfunction _fileName(headerValue) {\n\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\tconst m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n\tif (!m) {\n\t\treturn;\n\t}\n\n\tconst match = m[2] || m[3] || '';\n\tlet filename = match.slice(match.lastIndexOf('\\\\') + 1);\n\tfilename = filename.replace(/%22/g, '\"');\n\tfilename = filename.replace(/&#(\\d{4});/g, (m, code) => {\n\t\treturn String.fromCharCode(code);\n\t});\n\treturn filename;\n}\n\nexport async function toFormData(Body, ct) {\n\tif (!/multipart/i.test(ct)) {\n\t\tthrow new TypeError('Failed to fetch');\n\t}\n\n\tconst m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n\n\tif (!m) {\n\t\tthrow new TypeError('no or bad content-type header, no multipart boundary');\n\t}\n\n\tconst parser = new MultipartParser(m[1] || m[2]);\n\n\tlet headerField;\n\tlet headerValue;\n\tlet entryValue;\n\tlet entryName;\n\tlet contentType;\n\tlet filename;\n\tconst entryChunks = [];\n\tconst formData = new FormData();\n\n\tconst onPartData = ui8a => {\n\t\tentryValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tconst appendToFile = ui8a => {\n\t\tentryChunks.push(ui8a);\n\t};\n\n\tconst appendFileToFormData = () => {\n\t\tconst file = new File(entryChunks, filename, {type: contentType});\n\t\tformData.append(entryName, file);\n\t};\n\n\tconst appendEntryToFormData = () => {\n\t\tformData.append(entryName, entryValue);\n\t};\n\n\tconst decoder = new TextDecoder('utf-8');\n\tdecoder.decode();\n\n\tparser.onPartBegin = function () {\n\t\tparser.onPartData = onPartData;\n\t\tparser.onPartEnd = appendEntryToFormData;\n\n\t\theaderField = '';\n\t\theaderValue = '';\n\t\tentryValue = '';\n\t\tentryName = '';\n\t\tcontentType = '';\n\t\tfilename = null;\n\t\tentryChunks.length = 0;\n\t};\n\n\tparser.onHeaderField = function (ui8a) {\n\t\theaderField += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderValue = function (ui8a) {\n\t\theaderValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderEnd = function () {\n\t\theaderValue += decoder.decode();\n\t\theaderField = headerField.toLowerCase();\n\n\t\tif (headerField === 'content-disposition') {\n\t\t\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\t\t\tconst m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n\n\t\t\tif (m) {\n\t\t\t\tentryName = m[2] || m[3] || '';\n\t\t\t}\n\n\t\t\tfilename = _fileName(headerValue);\n\n\t\t\tif (filename) {\n\t\t\t\tparser.onPartData = appendToFile;\n\t\t\t\tparser.onPartEnd = appendFileToFormData;\n\t\t\t}\n\t\t} else if (headerField === 'content-type') {\n\t\t\tcontentType = headerValue;\n\t\t}\n\n\t\theaderValue = '';\n\t\theaderField = '';\n\t};\n\n\tfor await (const chunk of Body) {\n\t\tparser.write(chunk);\n\t}\n\n\tparser.end();\n\n\treturn formData;\n}\n","\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n","/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n","const redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nexport const isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n","/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tstatic json(data = undefined, init = {}) {\n\t\tconst body = JSON.stringify(data);\n\n\t\tif (body === undefined) {\n\t\t\tthrow new TypeError('data is not JSON serializable');\n\t\t}\n\n\t\tconst headers = new Headers(init && init.headers);\n\n\t\tif (!headers.has('content-type')) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t}\n\n\t\treturn new Response(body, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n","export const getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n","import {isIP} from 'node:net';\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nexport function stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nexport const ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nexport const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nexport function validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nexport function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nexport function parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n","/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport {format as formatUrl} from 'node:url';\nimport {deprecate} from 'node:util';\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType, getTotalBytes} from './body.js';\nimport {isAbortSignal} from './utils/is.js';\nimport {getSearch} from './utils/get-search.js';\nimport {\n\tvalidateReferrerPolicy, determineRequestsReferrer, DEFAULT_REFERRER_POLICY\n} from './utils/referrer.js';\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = deprecate(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nexport default class Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn formatUrl(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nexport const getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n","import {FetchBaseError} from './base.js';\n\n/**\n * AbortError interface for cancelled requests\n */\nexport class AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n","/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n","'use strict'\n\nexports.fromCallback = function (fn) {\n  return Object.defineProperty(function (...args) {\n    if (typeof args[args.length - 1] === 'function') fn.apply(this, args)\n    else {\n      return new Promise((resolve, reject) => {\n        args.push((err, res) => (err != null) ? reject(err) : resolve(res))\n        fn.apply(this, args)\n      })\n    }\n  }, 'name', { value: fn.name })\n}\n\nexports.fromPromise = function (fn) {\n  return Object.defineProperty(function (...args) {\n    const cb = args[args.length - 1]\n    if (typeof cb !== 'function') return fn.apply(this, args)\n    else {\n      args.pop()\n      fn.apply(this, args).then(r => cb(null, r), cb)\n    }\n  }, 'name', { value: fn.name })\n}\n","var constants = require('constants')\n\nvar origCwd = process.cwd\nvar cwd = null\n\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform\n\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === 'function') {\n  var chdir = process.chdir\n  process.chdir = function (d) {\n    cwd = null\n    chdir.call(process, d)\n  }\n  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.chown = chownFix(fs.chown)\n  fs.fchown = chownFix(fs.fchown)\n  fs.lchown = chownFix(fs.lchown)\n\n  fs.chmod = chmodFix(fs.chmod)\n  fs.fchmod = chmodFix(fs.fchmod)\n  fs.lchmod = chmodFix(fs.lchmod)\n\n  fs.chownSync = chownFixSync(fs.chownSync)\n  fs.fchownSync = chownFixSync(fs.fchownSync)\n  fs.lchownSync = chownFixSync(fs.lchownSync)\n\n  fs.chmodSync = chmodFixSync(fs.chmodSync)\n  fs.fchmodSync = chmodFixSync(fs.fchmodSync)\n  fs.lchmodSync = chmodFixSync(fs.lchmodSync)\n\n  fs.stat = statFix(fs.stat)\n  fs.fstat = statFix(fs.fstat)\n  fs.lstat = statFix(fs.lstat)\n\n  fs.statSync = statFixSync(fs.statSync)\n  fs.fstatSync = statFixSync(fs.fstatSync)\n  fs.lstatSync = statFixSync(fs.lstatSync)\n\n  // if lchmod/lchown do not exist, then make them no-ops\n  if (fs.chmod && !fs.lchmod) {\n    fs.lchmod = function (path, mode, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchmodSync = function () {}\n  }\n  if (fs.chown && !fs.lchown) {\n    fs.lchown = function (path, uid, gid, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchownSync = function () {}\n  }\n\n  // on Windows, A/V software can lock the directory, causing this\n  // to fail with an EACCES or EPERM if the directory contains newly\n  // created files.  Try again on failure, for up to 60 seconds.\n\n  // Set the timeout this long because some Windows Anti-Virus, such as Parity\n  // bit9, may lock files for up to a minute, causing npm package install\n  // failures. Also, take care to yield the scheduler. Windows scheduling gives\n  // CPU to a busy looping process, which can cause the program causing the lock\n  // contention to be starved of CPU by node, so the contention doesn't resolve.\n  if (platform === \"win32\") {\n    fs.rename = typeof fs.rename !== 'function' ? fs.rename\n    : (function (fs$rename) {\n      function rename (from, to, cb) {\n        var start = Date.now()\n        var backoff = 0;\n        fs$rename(from, to, function CB (er) {\n          if (er\n              && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\")\n              && Date.now() - start < 60000) {\n            setTimeout(function() {\n              fs.stat(to, function (stater, st) {\n                if (stater && stater.code === \"ENOENT\")\n                  fs$rename(from, to, CB);\n                else\n                  cb(er)\n              })\n            }, backoff)\n            if (backoff < 100)\n              backoff += 10;\n            return;\n          }\n          if (cb) cb(er)\n        })\n      }\n      if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename)\n      return rename\n    })(fs.rename)\n  }\n\n  // if read() returns EAGAIN, then just try it again.\n  fs.read = typeof fs.read !== 'function' ? fs.read\n  : (function (fs$read) {\n    function read (fd, buffer, offset, length, position, callback_) {\n      var callback\n      if (callback_ && typeof callback_ === 'function') {\n        var eagCounter = 0\n        callback = function (er, _, __) {\n          if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n            eagCounter ++\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n          }\n          callback_.apply(this, arguments)\n        }\n      }\n      return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n    }\n\n    // This ensures `util.promisify` works as it does for native `fs.read`.\n    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)\n    return read\n  })(fs.read)\n\n  fs.readSync = typeof fs.readSync !== 'function' ? fs.readSync\n  : (function (fs$readSync) { return function (fd, buffer, offset, length, position) {\n    var eagCounter = 0\n    while (true) {\n      try {\n        return fs$readSync.call(fs, fd, buffer, offset, length, position)\n      } catch (er) {\n        if (er.code === 'EAGAIN' && eagCounter < 10) {\n          eagCounter ++\n          continue\n        }\n        throw er\n      }\n    }\n  }})(fs.readSync)\n\n  function patchLchmod (fs) {\n    fs.lchmod = function (path, mode, callback) {\n      fs.open( path\n             , constants.O_WRONLY | constants.O_SYMLINK\n             , mode\n             , function (err, fd) {\n        if (err) {\n          if (callback) callback(err)\n          return\n        }\n        // prefer to return the chmod error, if one occurs,\n        // but still try to close, and report closing errors if they occur.\n        fs.fchmod(fd, mode, function (err) {\n          fs.close(fd, function(err2) {\n            if (callback) callback(err || err2)\n          })\n        })\n      })\n    }\n\n    fs.lchmodSync = function (path, mode) {\n      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      var threw = true\n      var ret\n      try {\n        ret = fs.fchmodSync(fd, mode)\n        threw = false\n      } finally {\n        if (threw) {\n          try {\n            fs.closeSync(fd)\n          } catch (er) {}\n        } else {\n          fs.closeSync(fd)\n        }\n      }\n      return ret\n    }\n  }\n\n  function patchLutimes (fs) {\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n      fs.lutimes = function (path, at, mt, cb) {\n        fs.open(path, constants.O_SYMLINK, function (er, fd) {\n          if (er) {\n            if (cb) cb(er)\n            return\n          }\n          fs.futimes(fd, at, mt, function (er) {\n            fs.close(fd, function (er2) {\n              if (cb) cb(er || er2)\n            })\n          })\n        })\n      }\n\n      fs.lutimesSync = function (path, at, mt) {\n        var fd = fs.openSync(path, constants.O_SYMLINK)\n        var ret\n        var threw = true\n        try {\n          ret = fs.futimesSync(fd, at, mt)\n          threw = false\n        } finally {\n          if (threw) {\n            try {\n              fs.closeSync(fd)\n            } catch (er) {}\n          } else {\n            fs.closeSync(fd)\n          }\n        }\n        return ret\n      }\n\n    } else if (fs.futimes) {\n      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }\n      fs.lutimesSync = function () {}\n    }\n  }\n\n  function chmodFix (orig) {\n    if (!orig) return orig\n    return function (target, mode, cb) {\n      return orig.call(fs, target, mode, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chmodFixSync (orig) {\n    if (!orig) return orig\n    return function (target, mode) {\n      try {\n        return orig.call(fs, target, mode)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n\n  function chownFix (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid, cb) {\n      return orig.call(fs, target, uid, gid, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chownFixSync (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid) {\n      try {\n        return orig.call(fs, target, uid, gid)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n  function statFix (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options, cb) {\n      if (typeof options === 'function') {\n        cb = options\n        options = null\n      }\n      function callback (er, stats) {\n        if (stats) {\n          if (stats.uid < 0) stats.uid += 0x100000000\n          if (stats.gid < 0) stats.gid += 0x100000000\n        }\n        if (cb) cb.apply(this, arguments)\n      }\n      return options ? orig.call(fs, target, options, callback)\n        : orig.call(fs, target, callback)\n    }\n  }\n\n  function statFixSync (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options) {\n      var stats = options ? orig.call(fs, target, options)\n        : orig.call(fs, target)\n      if (stats) {\n        if (stats.uid < 0) stats.uid += 0x100000000\n        if (stats.gid < 0) stats.gid += 0x100000000\n      }\n      return stats;\n    }\n  }\n\n  // ENOSYS means that the fs doesn't support the op. Just ignore\n  // that, because it doesn't matter.\n  //\n  // if there's no getuid, or if getuid() is something other\n  // than 0, and the error is EINVAL or EPERM, then just ignore\n  // it.\n  //\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  //\n  // When running as root, or if other types of errors are\n  // encountered, then it's strict.\n  function chownErOk (er) {\n    if (!er)\n      return true\n\n    if (er.code === \"ENOSYS\")\n      return true\n\n    var nonroot = !process.getuid || process.getuid() !== 0\n    if (nonroot) {\n      if (er.code === \"EINVAL\" || er.code === \"EPERM\")\n        return true\n    }\n\n    return false\n  }\n}\n","var Stream = require('stream').Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end === undefined) {\n        this.end = Infinity;\n      } else if ('number' !== typeof this.end) {\n        throw TypeError('end must be a Number');\n      }\n\n      if (this.start > this.end) {\n        throw new Error('start must be <= end');\n      }\n\n      this.pos = this.start;\n    }\n\n    if (this.fd !== null) {\n      process.nextTick(function() {\n        self._read();\n      });\n      return;\n    }\n\n    fs.open(this.path, this.flags, this.mode, function (err, fd) {\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n        return;\n      }\n\n      self.fd = fd;\n      self.emit('open', fd);\n      self._read();\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n\n    Stream.call(this);\n\n    this.path = path;\n    this.fd = null;\n    this.writable = true;\n\n    this.flags = 'w';\n    this.encoding = 'binary';\n    this.mode = 438; /*=0666*/\n    this.bytesWritten = 0;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.start < 0) {\n        throw new Error('start must be >= zero');\n      }\n\n      this.pos = this.start;\n    }\n\n    this.busy = false;\n    this._queue = [];\n\n    if (this.fd === null) {\n      this._open = fs.open;\n      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);\n      this.flush();\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = clone\n\nvar getPrototypeOf = Object.getPrototypeOf || function (obj) {\n  return obj.__proto__\n}\n\nfunction clone (obj) {\n  if (obj === null || typeof obj !== 'object')\n    return obj\n\n  if (obj instanceof Object)\n    var copy = { __proto__: getPrototypeOf(obj) }\n  else\n    var copy = Object.create(null)\n\n  Object.getOwnPropertyNames(obj).forEach(function (key) {\n    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))\n  })\n\n  return copy\n}\n","var fs = require('fs')\nvar polyfills = require('./polyfills.js')\nvar legacy = require('./legacy-streams.js')\nvar clone = require('./clone.js')\n\nvar util = require('util')\n\n/* istanbul ignore next - node 0.x polyfill */\nvar gracefulQueue\nvar previousSymbol\n\n/* istanbul ignore else - node 0.x polyfill */\nif (typeof Symbol === 'function' && typeof Symbol.for === 'function') {\n  gracefulQueue = Symbol.for('graceful-fs.queue')\n  // This is used in testing by future versions\n  previousSymbol = Symbol.for('graceful-fs.previous')\n} else {\n  gracefulQueue = '___graceful-fs.queue'\n  previousSymbol = '___graceful-fs.previous'\n}\n\nfunction noop () {}\n\nfunction publishQueue(context, queue) {\n  Object.defineProperty(context, gracefulQueue, {\n    get: function() {\n      return queue\n    }\n  })\n}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\n// Once time initialization\nif (!fs[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = global[gracefulQueue] || []\n  publishQueue(fs, queue)\n\n  // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n  fs.close = (function (fs$close) {\n    function close (fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          resetQueue()\n        }\n\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n      })\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    })\n    return close\n  })(fs.close)\n\n  fs.closeSync = (function (fs$closeSync) {\n    function closeSync (fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments)\n      resetQueue()\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    })\n    return closeSync\n  })(fs.closeSync)\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function() {\n      debug(fs[gracefulQueue])\n      require('assert').equal(fs[gracefulQueue].length, 0)\n    })\n  }\n}\n\nif (!global[gracefulQueue]) {\n  publishQueue(global, fs[gracefulQueue]);\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb, startTime) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb, startTime) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb, startTime) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$copyFile = fs.copyFile\n  if (fs$copyFile)\n    fs.copyFile = copyFile\n  function copyFile (src, dest, flags, cb) {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 0\n    }\n    return go$copyFile(src, dest, flags, cb)\n\n    function go$copyFile (src, dest, flags, cb, startTime) {\n      return fs$copyFile(src, dest, flags, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  var noReaddirOptionVersions = /^v[0-5]\\./\n  function readdir (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    var go$readdir = noReaddirOptionVersions.test(process.version)\n      ? function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n      : function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, options, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n\n    return go$readdir(path, options, cb)\n\n    function fs$readdirCallback (path, options, cb, startTime) {\n      return function (err, files) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([\n            go$readdir,\n            [path, options, cb],\n            err,\n            startTime || Date.now(),\n            Date.now()\n          ])\n        else {\n          if (files && files.sort)\n            files.sort()\n\n          if (typeof cb === 'function')\n            cb.call(this, err, files)\n        }\n      }\n    }\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  // legacy names\n  var FileReadStream = ReadStream\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function () {\n      return FileReadStream\n    },\n    set: function (val) {\n      FileReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  var FileWriteStream = WriteStream\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function () {\n      return FileWriteStream\n    },\n    set: function (val) {\n      FileWriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new fs.ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new fs.WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb, startTime) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  fs[gracefulQueue].push(elem)\n  retry()\n}\n\n// keep track of the timeout between retry() calls\nvar retryTimer\n\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue () {\n  var now = Date.now()\n  for (var i = 0; i < fs[gracefulQueue].length; ++i) {\n    // entries that are only a length of 2 are from an older version, don't\n    // bother modifying those since they'll be retried anyway.\n    if (fs[gracefulQueue][i].length > 2) {\n      fs[gracefulQueue][i][3] = now // startTime\n      fs[gracefulQueue][i][4] = now // lastTime\n    }\n  }\n  // call retry to make sure we're actively processing the queue\n  retry()\n}\n\nfunction retry () {\n  // clear the timer and remove it to help prevent unintended concurrency\n  clearTimeout(retryTimer)\n  retryTimer = undefined\n\n  if (fs[gracefulQueue].length === 0)\n    return\n\n  var elem = fs[gracefulQueue].shift()\n  var fn = elem[0]\n  var args = elem[1]\n  // these items may be unset if they were added by an older graceful-fs\n  var err = elem[2]\n  var startTime = elem[3]\n  var lastTime = elem[4]\n\n  // if we don't have a startTime we have no way of knowing if we've waited\n  // long enough, so go ahead and retry this item now\n  if (startTime === undefined) {\n    debug('RETRY', fn.name, args)\n    fn.apply(null, args)\n  } else if (Date.now() - startTime >= 60000) {\n    // it's been more than 60 seconds total, bail now\n    debug('TIMEOUT', fn.name, args)\n    var cb = args.pop()\n    if (typeof cb === 'function')\n      cb.call(null, err)\n  } else {\n    // the amount of time between the last attempt and right now\n    var sinceAttempt = Date.now() - lastTime\n    // the amount of time between when we first tried, and when we last tried\n    // rounded up to at least 1\n    var sinceStart = Math.max(lastTime - startTime, 1)\n    // backoff. wait longer than the total time we've been retrying, but only\n    // up to a maximum of 100ms\n    var desiredDelay = Math.min(sinceStart * 1.2, 100)\n    // it's been long enough since the last retry, do it again\n    if (sinceAttempt >= desiredDelay) {\n      debug('RETRY', fn.name, args)\n      fn.apply(null, args.concat([startTime]))\n    } else {\n      // if we can't do this job yet, push it to the end of the queue\n      // and let the next iteration check again\n      fs[gracefulQueue].push(elem)\n    }\n  }\n\n  // schedule our next run if one isn't already scheduled\n  if (retryTimer === undefined) {\n    retryTimer = setTimeout(retry, 0)\n  }\n}\n","'use strict'\n// This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\n\nconst api = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'close',\n  'copyFile',\n  'cp',\n  'fchmod',\n  'fchown',\n  'fdatasync',\n  'fstat',\n  'fsync',\n  'ftruncate',\n  'futimes',\n  'glob',\n  'lchmod',\n  'lchown',\n  'lutimes',\n  'link',\n  'lstat',\n  'mkdir',\n  'mkdtemp',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'rename',\n  'rm',\n  'rmdir',\n  'stat',\n  'statfs',\n  'symlink',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile'\n].filter(key => {\n  // Some commands are not available on some systems. Ex:\n  // fs.cp was added in Node.js v16.7.0\n  // fs.statfs was added in Node v19.6.0, v18.15.0\n  // fs.glob was added in Node.js v22.0.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function'\n})\n\n// Export cloned fs:\nObject.assign(exports, fs)\n\n// Universalify async methods:\napi.forEach(method => {\n  exports[method] = u(fs[method])\n})\n\n// We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback)\n  }\n  return new Promise(resolve => {\n    return fs.exists(filename, resolve)\n  })\n}\n\n// fs.read(), fs.write(), fs.readv(), & fs.writev() need special treatment due to multiple callback args\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback)\n  }\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffer })\n    })\n  })\n}\n\n// Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\nexports.write = function (fd, buffer, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write(fd, buffer, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffer })\n    })\n  })\n}\n\n// Function signature is\n// s.readv(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.readv = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.readv(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.readv(fd, buffers, ...args, (err, bytesRead, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffers })\n    })\n  })\n}\n\n// Function signature is\n// s.writev(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.writev = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.writev(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffers })\n    })\n  })\n}\n\n// fs.realpath.native sometimes not available if fs is monkey-patched\nif (typeof fs.realpath.native === 'function') {\n  exports.realpath.native = u(fs.realpath.native)\n} else {\n  process.emitWarning(\n    'fs.realpath.native is not a function. Is fs being monkey-patched?',\n    'Warning', 'fs-extra-WARN0003'\n  )\n}\n","// Adapted from https://github.com/sindresorhus/make-dir\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict'\nconst path = require('path')\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nmodule.exports.checkPath = function checkPath (pth) {\n  if (process.platform === 'win32') {\n    const pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''))\n\n    if (pathHasInvalidWinCharacters) {\n      const error = new Error(`Path contains invalid characters: ${pth}`)\n      error.code = 'EINVAL'\n      throw error\n    }\n  }\n}\n","'use strict'\nconst fs = require('../fs')\nconst { checkPath } = require('./utils')\n\nconst getMode = options => {\n  const defaults = { mode: 0o777 }\n  if (typeof options === 'number') return options\n  return ({ ...defaults, ...options }).mode\n}\n\nmodule.exports.makeDir = async (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdir(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n\nmodule.exports.makeDirSync = (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdirSync(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n","'use strict'\nconst u = require('universalify').fromPromise\nconst { makeDir: _makeDir, makeDirSync } = require('./make-dir')\nconst makeDir = u(_makeDir)\n\nmodule.exports = {\n  mkdirs: makeDir,\n  mkdirsSync: makeDirSync,\n  // alias\n  mkdirp: makeDir,\n  mkdirpSync: makeDirSync,\n  ensureDir: makeDir,\n  ensureDirSync: makeDirSync\n}\n","'use strict'\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\n\nfunction pathExists (path) {\n  return fs.access(path).then(() => true).catch(() => false)\n}\n\nmodule.exports = {\n  pathExists: u(pathExists),\n  pathExistsSync: fs.existsSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function utimesMillis (path, atime, mtime) {\n  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)\n  const fd = await fs.open(path, 'r+')\n\n  let closeErr = null\n\n  try {\n    await fs.futimes(fd, atime, mtime)\n  } finally {\n    try {\n      await fs.close(fd)\n    } catch (e) {\n      closeErr = e\n    }\n  }\n\n  if (closeErr) {\n    throw closeErr\n  }\n}\n\nfunction utimesMillisSync (path, atime, mtime) {\n  const fd = fs.openSync(path, 'r+')\n  fs.futimesSync(fd, atime, mtime)\n  return fs.closeSync(fd)\n}\n\nmodule.exports = {\n  utimesMillis: u(utimesMillis),\n  utimesMillisSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst u = require('universalify').fromPromise\n\nfunction getStats (src, dest, opts) {\n  const statFunc = opts.dereference\n    ? (file) => fs.stat(file, { bigint: true })\n    : (file) => fs.lstat(file, { bigint: true })\n  return Promise.all([\n    statFunc(src),\n    statFunc(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest, opts) {\n  let destStat\n  const statFunc = opts.dereference\n    ? (file) => fs.statSync(file, { bigint: true })\n    : (file) => fs.lstatSync(file, { bigint: true })\n  const srcStat = statFunc(src)\n  try {\n    destStat = statFunc(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nasync function checkPaths (src, dest, funcName, opts) {\n  const { srcStat, destStat } = await getStats(src, dest, opts)\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return { srcStat, destStat }\n}\n\nfunction checkPathsSync (src, dest, funcName, opts) {\n  const { srcStat, destStat } = getStatsSync(src, dest, opts)\n\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n\n  let destStat\n  try {\n    destStat = await fs.stat(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return checkParentPaths(src, srcStat, destParent, funcName)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = fs.statSync(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  // stat.dev can be 0n on windows when node version >= 22.x.x\n  return destStat.ino !== undefined && destStat.dev !== undefined && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.every((cur, i) => destArr[i] === cur)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  // checkPaths\n  checkPaths: u(checkPaths),\n  checkPathsSync,\n  // checkParent\n  checkParentPaths: u(checkParentPaths),\n  checkParentPathsSync,\n  // Misc\n  isSrcSubdir,\n  areIdentical\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { mkdirs } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { utimesMillis } = require('../util/utimes')\nconst stat = require('../util/stat')\n\nasync function copy (src, dest, opts = {}) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0001'\n    )\n  }\n\n  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'copy')\n\n  const include = await runFilter(src, dest, opts)\n\n  if (!include) return\n\n  // check if the parent of dest exists, and create it if it doesn't exist\n  const destParent = path.dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (!dirExists) {\n    await mkdirs(destParent)\n  }\n\n  await getStatsAndPerformCopy(destStat, src, dest, opts)\n}\n\nasync function runFilter (src, dest, opts) {\n  if (!opts.filter) return true\n  return opts.filter(src, dest)\n}\n\nasync function getStatsAndPerformCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? fs.stat : fs.lstat\n  const srcStat = await statFn(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n\n  if (\n    srcStat.isFile() ||\n    srcStat.isCharacterDevice() ||\n    srcStat.isBlockDevice()\n  ) return onFile(srcStat, destStat, src, dest, opts)\n\n  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nasync function onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n\n  if (opts.overwrite) {\n    await fs.unlink(dest)\n    return copyFile(srcStat, src, dest, opts)\n  }\n  if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nasync function copyFile (srcStat, src, dest, opts) {\n  await fs.copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    // Make sure the file is writable before setting the timestamp\n    // otherwise open fails with EPERM when invoked with 'r+'\n    // (through utimes call)\n    if (fileIsNotWritable(srcStat.mode)) {\n      await makeFileWritable(dest, srcStat.mode)\n    }\n\n    // Set timestamps and mode correspondingly\n\n    // Note that The initial srcStat.atime cannot be trusted\n    // because it is modified by the read(2) system call\n    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n    const updatedSrcStat = await fs.stat(src)\n    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n  }\n\n  return fs.chmod(dest, srcStat.mode)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return fs.chmod(dest, srcMode | 0o200)\n}\n\nasync function onDir (srcStat, destStat, src, dest, opts) {\n  // the dest directory might not exist, create it\n  if (!destStat) {\n    await fs.mkdir(dest)\n  }\n\n  const promises = []\n\n  // loop through the files in the current directory to copy everything\n  for await (const item of await fs.opendir(src)) {\n    const srcItem = path.join(src, item.name)\n    const destItem = path.join(dest, item.name)\n\n    promises.push(\n      runFilter(srcItem, destItem, opts).then(include => {\n        if (include) {\n          // only copy the item if it matches the filter function\n          return stat.checkPaths(srcItem, destItem, 'copy', opts).then(({ destStat }) => {\n            // If the item is a copyable file, `getStatsAndPerformCopy` will copy it\n            // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively\n            return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)\n          })\n        }\n      })\n    )\n  }\n\n  await Promise.all(promises)\n\n  if (!destStat) {\n    await fs.chmod(dest, srcStat.mode)\n  }\n}\n\nasync function onLink (destStat, src, dest, opts) {\n  let resolvedSrc = await fs.readlink(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n  if (!destStat) {\n    return fs.symlink(resolvedSrc, dest)\n  }\n\n  let resolvedDest = null\n  try {\n    resolvedDest = await fs.readlink(dest)\n  } catch (e) {\n    // dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)\n    throw e\n  }\n  if (opts.dereference) {\n    resolvedDest = path.resolve(process.cwd(), resolvedDest)\n  }\n  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n  }\n\n  // do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n  }\n\n  // copy the link\n  await fs.unlink(dest)\n  return fs.symlink(resolvedSrc, dest)\n}\n\nmodule.exports = copy\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirsSync = require('../mkdirs').mkdirsSync\nconst utimesMillisSync = require('../util/utimes').utimesMillisSync\nconst stat = require('../util/stat')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0002'\n    )\n  }\n\n  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy')\n  if (opts.filter && !opts.filter(src, dest)) return\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent)\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest)\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)\n  return setDestMode(dest, srcStat.mode)\n}\n\nfunction handleTimestamps (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)\n  return setDestTimestamps(src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return fs.chmodSync(dest, srcMode)\n}\n\nfunction setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = fs.statSync(src)\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcMode, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nfunction copyDir (src, dest, opts) {\n  const dir = fs.opendirSync(src)\n\n  try {\n    let dirent\n\n    while ((dirent = dir.readSync()) !== null) {\n      copyDirItem(dirent.name, src, dest, opts)\n    }\n  } finally {\n    dir.closeSync()\n  }\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  if (opts.filter && !opts.filter(srcItem, destItem)) return\n  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy', opts)\n  return getStats(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\nmodule.exports = copySync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  copy: u(require('./copy')),\n  copySync: require('./copy-sync')\n}\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst u = require('universalify').fromCallback\n\nfunction remove (path, callback) {\n  fs.rm(path, { recursive: true, force: true }, callback)\n}\n\nfunction removeSync (path) {\n  fs.rmSync(path, { recursive: true, force: true })\n}\n\nmodule.exports = {\n  remove: u(remove),\n  removeSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst remove = require('../remove')\n\nconst emptyDir = u(async function emptyDir (dir) {\n  let items\n  try {\n    items = await fs.readdir(dir)\n  } catch {\n    return mkdir.mkdirs(dir)\n  }\n\n  return Promise.all(items.map(item => remove.remove(path.join(dir, item))))\n})\n\nfunction emptyDirSync (dir) {\n  let items\n  try {\n    items = fs.readdirSync(dir)\n  } catch {\n    return mkdir.mkdirsSync(dir)\n  }\n\n  items.forEach(item => {\n    item = path.join(dir, item)\n    remove.removeSync(item)\n  })\n}\n\nmodule.exports = {\n  emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir,\n  emptydir: emptyDir\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\n\nasync function createFile (file) {\n  let stats\n  try {\n    stats = await fs.stat(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n\n  let dirStats = null\n  try {\n    dirStats = await fs.stat(dir)\n  } catch (err) {\n    // if the directory doesn't exist, make it\n    if (err.code === 'ENOENT') {\n      await mkdir.mkdirs(dir)\n      await fs.writeFile(file, '')\n      return\n    } else {\n      throw err\n    }\n  }\n\n  if (dirStats.isDirectory()) {\n    await fs.writeFile(file, '')\n  } else {\n    // parent is not a directory\n    // This is just to cause an internal ENOTDIR error to be thrown\n    await fs.readdir(dir)\n  }\n}\n\nfunction createFileSync (file) {\n  let stats\n  try {\n    stats = fs.statSync(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir)\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)\n    else throw err\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { areIdentical } = require('../util/stat')\n\nasync function createLink (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = await fs.lstat(dstpath)\n  } catch {\n    // ignore error\n  }\n\n  let srcStat\n  try {\n    srcStat = await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  if (dstStat && areIdentical(srcStat, dstStat)) return\n\n  const dir = path.dirname(dstpath)\n\n  const dirExists = await pathExists(dir)\n\n  if (!dirExists) {\n    await mkdir.mkdirs(dir)\n  }\n\n  await fs.link(srcpath, dstpath)\n}\n\nfunction createLinkSync (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = fs.lstatSync(dstpath)\n  } catch {}\n\n  try {\n    const srcStat = fs.lstatSync(srcpath)\n    if (dstStat && areIdentical(srcStat, dstStat)) return\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  const dir = path.dirname(dstpath)\n  const dirExists = fs.existsSync(dir)\n  if (dirExists) return fs.linkSync(srcpath, dstpath)\n  mkdir.mkdirsSync(dir)\n\n  return fs.linkSync(srcpath, dstpath)\n}\n\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync\n}\n","'use strict'\n\nconst path = require('path')\nconst fs = require('../fs')\nconst { pathExists } = require('../path-exists')\n\nconst u = require('universalify').fromPromise\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nasync function symlinkPaths (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    try {\n      await fs.lstat(srcpath)\n    } catch (err) {\n      err.message = err.message.replace('lstat', 'ensureSymlink')\n      throw err\n    }\n\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n\n  const exists = await pathExists(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  try {\n    await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureSymlink')\n    throw err\n  }\n\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    const exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n  const exists = fs.existsSync(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  const srcExists = fs.existsSync(srcpath)\n  if (!srcExists) throw new Error('relative srcpath does not exist')\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: u(symlinkPaths),\n  symlinkPathsSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function symlinkType (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = await fs.lstat(srcpath)\n  } catch {\n    return 'file'\n  }\n\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nfunction symlinkTypeSync (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = fs.lstatSync(srcpath)\n  } catch {\n    return 'file'\n  }\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nmodule.exports = {\n  symlinkType: u(symlinkType),\n  symlinkTypeSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\n\nconst { mkdirs, mkdirsSync } = require('../mkdirs')\n\nconst { symlinkPaths, symlinkPathsSync } = require('./symlink-paths')\nconst { symlinkType, symlinkTypeSync } = require('./symlink-type')\n\nconst { pathExists } = require('../path-exists')\n\nconst { areIdentical } = require('../util/stat')\n\nasync function createSymlink (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = await fs.lstat(dstpath)\n  } catch { }\n\n  if (stats && stats.isSymbolicLink()) {\n    const [srcStat, dstStat] = await Promise.all([\n      fs.stat(srcpath),\n      fs.stat(dstpath)\n    ])\n\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = await symlinkPaths(srcpath, dstpath)\n  srcpath = relative.toDst\n  const toType = await symlinkType(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n\n  if (!(await pathExists(dir))) {\n    await mkdirs(dir)\n  }\n\n  return fs.symlink(srcpath, dstpath, toType)\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch { }\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n","'use strict'\n\nconst { createFile, createFileSync } = require('./file')\nconst { createLink, createLinkSync } = require('./link')\nconst { createSymlink, createSymlinkSync } = require('./symlink')\n\nmodule.exports = {\n  // file\n  createFile,\n  createFileSync,\n  ensureFile: createFile,\n  ensureFileSync: createFileSync,\n  // link\n  createLink,\n  createLinkSync,\n  ensureLink: createLink,\n  ensureLinkSync: createLinkSync,\n  // symlink\n  createSymlink,\n  createSymlinkSync,\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n}\n","function stringify (obj, { EOL = '\\n', finalEOL = true, replacer = null, spaces } = {}) {\n  const EOF = finalEOL ? EOL : ''\n  const str = JSON.stringify(obj, replacer, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOF\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  return content.replace(/^\\uFEFF/, '')\n}\n\nmodule.exports = { stringify, stripBom }\n","let _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\nconst universalify = require('universalify')\nconst { stringify, stripBom } = require('./utils')\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n","'use strict'\n\nconst jsonFile = require('jsonfile')\n\nmodule.exports = {\n  // jsonfile exports\n  readJson: jsonFile.readFile,\n  readJsonSync: jsonFile.readFileSync,\n  writeJson: jsonFile.writeFile,\n  writeJsonSync: jsonFile.writeFileSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\n\nasync function outputFile (file, data, encoding = 'utf-8') {\n  const dir = path.dirname(file)\n\n  if (!(await pathExists(dir))) {\n    await mkdir.mkdirs(dir)\n  }\n\n  return fs.writeFile(file, data, encoding)\n}\n\nfunction outputFileSync (file, ...args) {\n  const dir = path.dirname(file)\n  if (!fs.existsSync(dir)) {\n    mkdir.mkdirsSync(dir)\n  }\n\n  fs.writeFileSync(file, ...args)\n}\n\nmodule.exports = {\n  outputFile: u(outputFile),\n  outputFileSync\n}\n","'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFile } = require('../output-file')\n\nasync function outputJson (file, data, options = {}) {\n  const str = stringify(data, options)\n\n  await outputFile(file, str, options)\n}\n\nmodule.exports = outputJson\n","'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFileSync } = require('../output-file')\n\nfunction outputJsonSync (file, data, options) {\n  const str = stringify(data, options)\n\n  outputFileSync(file, str, options)\n}\n\nmodule.exports = outputJsonSync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst jsonFile = require('./jsonfile')\n\njsonFile.outputJson = u(require('./output-json'))\njsonFile.outputJsonSync = require('./output-json-sync')\n// aliases\njsonFile.outputJSON = jsonFile.outputJson\njsonFile.outputJSONSync = jsonFile.outputJsonSync\njsonFile.writeJSON = jsonFile.writeJson\njsonFile.writeJSONSync = jsonFile.writeJsonSync\njsonFile.readJSON = jsonFile.readJson\njsonFile.readJSONSync = jsonFile.readJsonSync\n\nmodule.exports = jsonFile\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { copy } = require('../copy')\nconst { remove } = require('../remove')\nconst { mkdirp } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst stat = require('../util/stat')\n\nasync function move (src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'move')\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest)\n  const parsedParentPath = path.parse(destParent)\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent)\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nasync function doRename (src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest)\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.')\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err\n    }\n    await moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nasync function moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n\n  await copy(src, dest, opts)\n  return remove(src)\n}\n\nmodule.exports = move\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copySync = require('../copy').copySync\nconst removeSync = require('../remove').removeSync\nconst mkdirpSync = require('../mkdirs').mkdirpSync\nconst stat = require('../util/stat')\n\nfunction moveSync (src, dest, opts) {\n  opts = opts || {}\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'move')\n  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase) {\n  if (isChangingCase) return rename(src, dest, overwrite)\n  if (overwrite) {\n    removeSync(dest)\n    return rename(src, dest, overwrite)\n  }\n  if (fs.existsSync(dest)) throw new Error('dest already exists.')\n  return rename(src, dest, overwrite)\n}\n\nfunction rename (src, dest, overwrite) {\n  try {\n    fs.renameSync(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') throw err\n    return moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nfunction moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copySync(src, dest, opts)\n  return removeSync(src)\n}\n\nmodule.exports = moveSync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  move: u(require('./move')),\n  moveSync: require('./move-sync')\n}\n","'use strict'\n\nmodule.exports = {\n  // Export promiseified graceful-fs:\n  ...require('./fs'),\n  // Export extra methods:\n  ...require('./copy'),\n  ...require('./empty'),\n  ...require('./ensure'),\n  ...require('./json'),\n  ...require('./mkdirs'),\n  ...require('./move'),\n  ...require('./output-file'),\n  ...require('./path-exists'),\n  ...require('./remove')\n}\n","/**\n * MARIA - Intelligent CLI Assistant\n * Entry point for the library\n */\n\n// CLI entry point\nexport { createCLI } from './cli';\n\n// Version\nexport const VERSION = '1.0.0-alpha.1';\n","/**\n * MARIA CLI - Command Line Interface\n */\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport { MariaAI, MariaAIConfig } from './maria-ai';\nimport { createInteractiveSession } from './services/interactive-session';\nimport { loadConfig } from './config/loader';\nimport { printWelcome, printStatus } from './utils/ui';\nimport { HealthStatus } from './types/common';\n\nexport interface CLIOptions {\n  config?: string;\n  priority?: 'privacy-first' | 'performance' | 'cost-effective' | 'auto';\n  provider?: string;\n  model?: string;\n  debug?: boolean;\n  offline?: boolean;\n}\n\nexport function createCLI(): Command {\n  const program = new Command();\n\n  program\n    .name('maria')\n    .description('MARIA - Intelligent CLI Assistant with Multi-Model AI Support')\n    .version('1.0.0');\n\n  // Interactive chat mode (default)\n  program\n    .command('chat', { isDefault: true })\n    .description('Start interactive chat session')\n    .option(\n      '--priority <mode>',\n      'Set priority mode (privacy-first|performance|cost-effective|auto)',\n    )\n    .option('--provider <name>', 'Force specific provider')\n    .option('--model <name>', 'Force specific model')\n    .option('--offline', 'Use only local providers')\n    .option('--debug', 'Enable debug output')\n    .action(async (options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await startInteractiveChat(config);\n    });\n\n  // One-shot commands\n  program\n    .command('ask <message>')\n    .description('Ask a single question')\n    .option('--priority <mode>', 'Set priority mode')\n    .option('--provider <name>', 'Force specific provider')\n    .option('--model <name>', 'Force specific model')\n    .action(async (message: string, options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await askSingle(message, config);\n    });\n\n  program\n    .command('code <prompt>')\n    .description('Generate code')\n    .option('--language <lang>', 'Programming language')\n    .option('--provider <name>', 'Force specific provider')\n    .action(async (prompt: string, options: CLIOptions & { language?: string }) => {\n      const config = await loadConfig(options);\n      await generateCode(prompt, options.language, config);\n    });\n\n  program\n    .command('vision <image> <prompt>')\n    .description('Analyze image with text prompt')\n    .option('--provider <name>', 'Force specific provider')\n    .action(async (imagePath: string, prompt: string, options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await processVision(imagePath, prompt, config);\n    });\n\n  // System commands\n  program\n    .command('status')\n    .description('Show system status and health')\n    .action(async () => {\n      await showStatus();\n    });\n\n  program\n    .command('models')\n    .description('List available models')\n    .option('--provider <name>', 'Filter by provider')\n    .action(async (options: { provider?: string }) => {\n      await listModels(options.provider);\n    });\n\n  program\n    .command('setup')\n    .description('Run setup wizard')\n    .action(async () => {\n      await runSetup();\n    });\n\n  program\n    .command('health')\n    .description('Check system health')\n    .option('--json', 'Output as JSON')\n    .option('--watch', 'Continuous monitoring')\n    .action(async (options: { json?: boolean; watch?: boolean }) => {\n      await checkHealth(options);\n    });\n\n  return program;\n}\n\nasync function startInteractiveChat(config: MariaAIConfig): Promise<void> {\n  printWelcome();\n\n  const maria = new MariaAI(config);\n  const session = createInteractiveSession(maria);\n\n  await session.start();\n}\n\nasync function askSingle(message: string, config: MariaAIConfig): Promise<void> {\n  const maria = new MariaAI(config);\n\n  try {\n    console.log(chalk.blue('🤖 Thinking...'));\n    const response = await maria.chat(message);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function generateCode(\n  prompt: string,\n  language: string | undefined,\n  config: MariaAIConfig,\n): Promise<void> {\n  const maria = new MariaAI(config);\n\n  try {\n    console.log(chalk.blue('🔧 Generating code...'));\n    const response = await maria.generateCode(prompt, language);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function processVision(\n  imagePath: string,\n  prompt: string,\n  config: MariaAIConfig,\n): Promise<void> {\n  const maria = new MariaAI(config);\n  const fs = await import('fs-extra');\n\n  try {\n    console.log(chalk.blue('👁️  Analyzing image...'));\n    const imageBuffer = await fs.readFile(imagePath);\n    const response = await maria.vision(imageBuffer, prompt);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function showStatus(): Promise<void> {\n  const maria = new MariaAI({ autoStart: false });\n  await maria\n    .getHealth()\n    .then((health) => {\n      printStatus(health as HealthStatus);\n    })\n    .catch((error) => {\n      console.error(chalk.red('❌ Failed to get status:'), error);\n    });\n  await maria.close();\n}\n\nasync function listModels(provider?: string): Promise<void> {\n  const maria = new MariaAI({ autoStart: false });\n\n  try {\n    const models = await maria.getModels();\n    const filtered = provider ? models.filter((m) => m.provider === provider) : models;\n\n    console.log(chalk.blue(`\\n📋 Available Models (${filtered.length}):\\n`));\n\n    filtered.forEach((model) => {\n      const status = model.available ? '✅' : '⚠️';\n      const pricing = model.pricing ? ` ($${model.pricing.input}/${model.pricing.output})` : '';\n      console.log(`${status} ${chalk.bold(model.name)} - ${model.provider}${pricing}`);\n      console.log(`   ${chalk.gray(model.description)}`);\n      if (model.capabilities) {\n        console.log(`   ${chalk.cyan('Capabilities:')} ${model.capabilities.join(', ')}`);\n      }\n      console.log('');\n    });\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error listing models:'), error);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function runSetup(): Promise<void> {\n  console.log(chalk.blue('🚀 Running MARIA setup wizard...'));\n\n  const { spawn } = await import('child_process');\n  const setupProcess = spawn('./scripts/setup-wizard.sh', [], {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  });\n\n  setupProcess.on('close', (code) => {\n    if (code === 0) {\n      console.log(chalk.green('✅ Setup completed successfully!'));\n    } else {\n      console.error(chalk.red('❌ Setup failed'));\n      process.exit(1);\n    }\n  });\n}\n\nasync function checkHealth(options: { json?: boolean; watch?: boolean }): Promise<void> {\n  if (options.watch) {\n    console.log(chalk.blue('🔄 Starting health monitoring... Press Ctrl+C to stop'));\n\n    const { spawn } = await import('child_process');\n    const healthProcess = spawn('./scripts/health-monitor.sh', ['monitor'], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n\n    process.on('SIGINT', () => {\n      healthProcess.kill('SIGINT');\n      process.exit(0);\n    });\n  } else {\n    const { spawn } = await import('child_process');\n    const args = options.json ? ['json'] : ['status'];\n    const healthProcess = spawn('./scripts/health-monitor.sh', args, {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n\n    healthProcess.on('close', (code) => {\n      process.exit(code || 0);\n    });\n  }\n}\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = commander;\n","import ansiStyles from '#ansi-styles';\nimport supportsColor from '#supports-color';\nimport { // eslint-disable-line import/order\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex,\n} from './utilities.js';\n\nconst {stdout: stdoutColor, stderr: stderrColor} = supportsColor;\n\nconst GENERATOR = Symbol('GENERATOR');\nconst STYLER = Symbol('STYLER');\nconst IS_EMPTY = Symbol('IS_EMPTY');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m',\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nexport class Chalk {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = (...strings) => strings.join(' ');\n\tapplyOptions(chalk, options);\n\n\tObject.setPrototypeOf(chalk, createChalk.prototype);\n\n\treturn chalk;\n};\n\nfunction createChalk(options) {\n\treturn chalkFactory(options);\n}\n\nObject.setPrototypeOf(createChalk.prototype, Function.prototype);\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t},\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this[STYLER], true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t},\n};\n\nconst getModelAnsi = (model, level, type, ...arguments_) => {\n\tif (model === 'rgb') {\n\t\tif (level === 'ansi16m') {\n\t\t\treturn ansiStyles[type].ansi16m(...arguments_);\n\t\t}\n\n\t\tif (level === 'ansi256') {\n\t\t\treturn ansiStyles[type].ansi256(ansiStyles.rgbToAnsi256(...arguments_));\n\t\t}\n\n\t\treturn ansiStyles[type].ansi(ansiStyles.rgbToAnsi(...arguments_));\n\t}\n\n\tif (model === 'hex') {\n\t\treturn getModelAnsi('rgb', level, type, ...ansiStyles.hexToRgb(...arguments_));\n\t}\n\n\treturn ansiStyles[type][model](...arguments_);\n};\n\nconst usedModels = ['rgb', 'hex', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansiStyles.color.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansiStyles.bgColor.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this[GENERATOR].level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis[GENERATOR].level = level;\n\t\t},\n\t},\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent,\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\t// Single argument is hot path, implicit coercion is faster than anything\n\t// eslint-disable-next-line no-implicit-coercion\n\tconst builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder[GENERATOR] = self;\n\tbuilder[STYLER] = _styler;\n\tbuilder[IS_EMPTY] = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self[IS_EMPTY] ? '' : string;\n\t}\n\n\tlet styler = self[STYLER];\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.includes('\\u001B')) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nObject.defineProperties(createChalk.prototype, styles);\n\nconst chalk = createChalk();\nexport const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});\n\nexport {\n\tmodifierNames,\n\tforegroundColorNames,\n\tbackgroundColorNames,\n\tcolorNames,\n\n\t// TODO: Remove these aliases in the next major version\n\tmodifierNames as modifiers,\n\tforegroundColorNames as foregroundColors,\n\tbackgroundColorNames as backgroundColors,\n\tcolorNames as colors,\n} from './vendor/ansi-styles/index.js';\n\nexport {\n\tstdoutColor as supportsColor,\n\tstderrColor as supportsColorStderr,\n};\n\nexport default chalk;\n","const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nconst styles = {\n\tmodifier: {\n\t\treset: [0, 0],\n\t\t// 21 isn't widely supported and 22 does the same thing\n\t\tbold: [1, 22],\n\t\tdim: [2, 22],\n\t\titalic: [3, 23],\n\t\tunderline: [4, 24],\n\t\toverline: [53, 55],\n\t\tinverse: [7, 27],\n\t\thidden: [8, 28],\n\t\tstrikethrough: [9, 29],\n\t},\n\tcolor: {\n\t\tblack: [30, 39],\n\t\tred: [31, 39],\n\t\tgreen: [32, 39],\n\t\tyellow: [33, 39],\n\t\tblue: [34, 39],\n\t\tmagenta: [35, 39],\n\t\tcyan: [36, 39],\n\t\twhite: [37, 39],\n\n\t\t// Bright color\n\t\tblackBright: [90, 39],\n\t\tgray: [90, 39], // Alias of `blackBright`\n\t\tgrey: [90, 39], // Alias of `blackBright`\n\t\tredBright: [91, 39],\n\t\tgreenBright: [92, 39],\n\t\tyellowBright: [93, 39],\n\t\tblueBright: [94, 39],\n\t\tmagentaBright: [95, 39],\n\t\tcyanBright: [96, 39],\n\t\twhiteBright: [97, 39],\n\t},\n\tbgColor: {\n\t\tbgBlack: [40, 49],\n\t\tbgRed: [41, 49],\n\t\tbgGreen: [42, 49],\n\t\tbgYellow: [43, 49],\n\t\tbgBlue: [44, 49],\n\t\tbgMagenta: [45, 49],\n\t\tbgCyan: [46, 49],\n\t\tbgWhite: [47, 49],\n\n\t\t// Bright color\n\t\tbgBlackBright: [100, 49],\n\t\tbgGray: [100, 49], // Alias of `bgBlackBright`\n\t\tbgGrey: [100, 49], // Alias of `bgBlackBright`\n\t\tbgRedBright: [101, 49],\n\t\tbgGreenBright: [102, 49],\n\t\tbgYellowBright: [103, 49],\n\t\tbgBlueBright: [104, 49],\n\t\tbgMagentaBright: [105, 49],\n\t\tbgCyanBright: [106, 49],\n\t\tbgWhiteBright: [107, 49],\n\t},\n};\n\nexport const modifierNames = Object.keys(styles.modifier);\nexport const foregroundColorNames = Object.keys(styles.color);\nexport const backgroundColorNames = Object.keys(styles.bgColor);\nexport const colorNames = [...foregroundColorNames, ...backgroundColorNames];\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue(red, green, blue) {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue(hex) {\n\t\t\t\tconst matches = /[a-f\\d]{6}|[a-f\\d]{3}/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet [colorString] = matches;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue(code) {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n","import process from 'node:process';\nimport os from 'node:os';\nimport tty from 'node:tty';\n\n// From: https://github.com/sindresorhus/has-flag/blob/main/index.js\n/// function hasFlag(flag, argv = globalThis.Deno?.args ?? process.argv) {\nfunction hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process.argv) {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n}\n\nconst {env} = process;\n\nlet flagForceColor;\nif (\n\thasFlag('no-color')\n\t|| hasFlag('no-colors')\n\t|| hasFlag('color=false')\n\t|| hasFlag('color=never')\n) {\n\tflagForceColor = 0;\n} else if (\n\thasFlag('color')\n\t|| hasFlag('colors')\n\t|| hasFlag('color=true')\n\t|| hasFlag('color=always')\n) {\n\tflagForceColor = 1;\n}\n\nfunction envForceColor() {\n\tif ('FORCE_COLOR' in env) {\n\t\tif (env.FORCE_COLOR === 'true') {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (env.FORCE_COLOR === 'false') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3,\n\t};\n}\n\nfunction _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {\n\tconst noFlagForceColor = envForceColor();\n\tif (noFlagForceColor !== undefined) {\n\t\tflagForceColor = noFlagForceColor;\n\t}\n\n\tconst forceColor = sniffFlags ? flagForceColor : noFlagForceColor;\n\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (sniffFlags) {\n\t\tif (hasFlag('color=16m')\n\t\t\t|| hasFlag('color=full')\n\t\t\t|| hasFlag('color=truecolor')) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (hasFlag('color=256')) {\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\t// Check for Azure DevOps pipelines.\n\t// Has to be above the `!streamIsTTY` check.\n\tif ('TF_BUILD' in env && 'AGENT_NAME' in env) {\n\t\treturn 1;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10\n\t\t\t&& Number(osRelease[2]) >= 10_586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14_931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['GITHUB_ACTIONS', 'GITEA_ACTIONS', 'CIRCLECI'].some(key => key in env)) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (['TRAVIS', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif (env.TERM === 'xterm-kitty') {\n\t\treturn 3;\n\t}\n\n\tif (env.TERM === 'xterm-ghostty') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app': {\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\t}\n\n\t\t\tcase 'Apple_Terminal': {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nexport function createSupportsColor(stream, options = {}) {\n\tconst level = _supportsColor(stream, {\n\t\tstreamIsTTY: stream && stream.isTTY,\n\t\t...options,\n\t});\n\n\treturn translateLevel(level);\n}\n\nconst supportsColor = {\n\tstdout: createSupportsColor({isTTY: tty.isatty(1)}),\n\tstderr: createSupportsColor({isTTY: tty.isatty(2)}),\n};\n\nexport default supportsColor;\n","// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.\nexport function stringReplaceAll(string, substring, replacer) {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.slice(endIndex, index) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n\nexport function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n","/**\n * MARIA AI - Core AI Assistant class\n * Handles provider management and intelligent routing\n */\n\nimport { AIRequest, AIResponse, ModelInfo } from './types';\nimport { AIProviderManager } from './providers/manager';\nimport { IntelligentRouter } from './services/intelligent-router';\nimport { HealthMonitor } from './services/health-monitor';\nimport { ConfigManager } from './config/config-manager';\n\nexport interface MariaAIConfig {\n  priority?: 'privacy-first' | 'performance' | 'cost-effective' | 'auto';\n  enabledProviders?: string[];\n  apiKeys?: Record<string, string>;\n  localProviders?: {\n    lmstudio?: boolean;\n    ollama?: boolean;\n    vllm?: boolean;\n  };\n  autoStart?: boolean;\n  healthMonitoring?: boolean;\n}\n\nexport class MariaAI {\n  private providerManager: AIProviderManager;\n  private router: IntelligentRouter;\n  private healthMonitor: HealthMonitor;\n  private config: ConfigManager;\n\n  constructor(config: MariaAIConfig = {}) {\n    this.config = new ConfigManager(config);\n    this.providerManager = new AIProviderManager(this.config);\n    this.router = new IntelligentRouter(this.providerManager, this.config);\n    this.healthMonitor = new HealthMonitor(this.providerManager);\n\n    if (config.autoStart !== false) {\n      this.initialize();\n    }\n  }\n\n  private async initialize(): Promise<void> {\n    await this.providerManager.initialize();\n\n    if (this.config.get('healthMonitoring', true)) {\n      this.healthMonitor.start();\n    }\n  }\n\n  /**\n   * Send a chat message and get AI response\n   */\n  async chat(message: string, options: Partial<AIRequest> = {}): Promise<AIResponse> {\n    const request: AIRequest = {\n      messages: [{ role: 'user', content: message }],\n      ...options,\n    };\n\n    return this.router.route(request);\n  }\n\n  /**\n   * Stream a chat response\n   */\n  async *chatStream(message: string, options: Partial<AIRequest> = {}): AsyncGenerator<string> {\n    const request: AIRequest = {\n      messages: [{ role: 'user', content: message }],\n      stream: true,\n      ...options,\n    };\n\n    const response = await this.router.route(request);\n    if (response.stream) {\n      yield* response.stream;\n    } else {\n      yield response.content || '';\n    }\n  }\n\n  /**\n   * Process vision tasks (image + text)\n   */\n  async vision(image: Buffer, prompt: string): Promise<AIResponse> {\n    return this.router.routeVision(image, prompt);\n  }\n\n  /**\n   * Generate code\n   */\n  async generateCode(prompt: string, language?: string): Promise<AIResponse> {\n    return this.router.routeCode(prompt, language);\n  }\n\n  /**\n   * Get available models\n   */\n  async getModels(): Promise<ModelInfo[]> {\n    return this.providerManager.getAvailableModels();\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealth(): Promise<unknown> {\n    return this.healthMonitor.getStatus();\n  }\n\n  /**\n   * Switch provider priority mode\n   */\n  setPriorityMode(mode: 'privacy-first' | 'performance' | 'cost-effective' | 'auto'): void {\n    this.config.set('priority', mode);\n    this.router.updatePriorityMode(mode);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): unknown {\n    return this.config.getAll();\n  }\n\n  /**\n   * Close connections and cleanup\n   */\n  async close(): Promise<void> {\n    await this.healthMonitor.stop();\n    await this.providerManager.close();\n  }\n}\n","/**\n * AI Provider Manager\n * Manages all AI providers and their availability\n */\n\nimport { AIProvider, ModelInfo, PriorityMode } from '../types';\nimport { OpenAIProvider } from './openai-provider';\nimport { AnthropicProvider } from './anthropic-provider';\nimport { GoogleProvider } from './google-provider';\nimport { GroqProvider } from './groq-provider';\nimport { GrokProvider } from './grok-provider';\nimport { LMStudioProvider } from './lmstudio-provider';\nimport { OllamaProvider } from './ollama-provider';\nimport { VLLMProvider } from './vllm-provider';\nimport { ConfigManager } from '../config/config-manager';\n\nexport class AIProviderManager {\n  private providers: Map<string, AIProvider> = new Map();\n  private availableProviders: Set<string> = new Set();\n  private config: ConfigManager;\n\n  constructor(config: ConfigManager) {\n    this.config = config;\n  }\n\n  async initialize(): Promise<void> {\n    // Initialize all providers based on configuration\n    await this.initializeProviders();\n    await this.checkAvailability();\n  }\n\n  private async initializeProviders(): Promise<void> {\n    const apiKeys = this.config.get('apiKeys', {} as Record<string, string>);\n    const localProviders = this.config.get('localProviders', {} as Record<string, boolean>);\n\n    // Cloud providers\n    if (apiKeys['OPENAI_API_KEY']) {\n      this.providers.set('openai', new OpenAIProvider(apiKeys['OPENAI_API_KEY']));\n    }\n\n    if (apiKeys['ANTHROPIC_API_KEY']) {\n      this.providers.set('anthropic', new AnthropicProvider(apiKeys['ANTHROPIC_API_KEY']));\n    }\n\n    if (apiKeys['GOOGLE_API_KEY'] || apiKeys['GEMINI_API_KEY']) {\n      this.providers.set(\n        'google',\n        new GoogleProvider(apiKeys['GOOGLE_API_KEY'] || apiKeys['GEMINI_API_KEY']),\n      );\n    }\n\n    if (apiKeys['GROQ_API_KEY']) {\n      this.providers.set('groq', new GroqProvider(apiKeys['GROQ_API_KEY']));\n    }\n\n    if (apiKeys['GROK_API_KEY']) {\n      this.providers.set('grok', new GrokProvider(apiKeys['GROK_API_KEY']));\n    }\n\n    // Local providers\n    if (localProviders['lmstudio'] !== false) {\n      this.providers.set('lmstudio', new LMStudioProvider());\n    }\n\n    if (localProviders['ollama'] !== false) {\n      this.providers.set('ollama', new OllamaProvider());\n    }\n\n    if (localProviders['vllm'] !== false) {\n      this.providers.set('vllm', new VLLMProvider());\n    }\n  }\n\n  private async checkAvailability(): Promise<void> {\n    this.availableProviders.clear();\n\n    const checks = Array.from(this.providers.entries()).map(async ([name, provider]) => {\n      try {\n        const isAvailable = await provider.isAvailable();\n        if (isAvailable) {\n          this.availableProviders.add(name);\n        }\n      } catch (error: unknown) {\n        // Provider not available\n      }\n    });\n\n    await Promise.allSettled(checks);\n  }\n\n  getProvider(name: string): AIProvider | undefined {\n    return this.providers.get(name);\n  }\n\n  getAvailableProviders(): string[] {\n    return Array.from(this.availableProviders);\n  }\n\n  async getAvailableModels(): Promise<ModelInfo[]> {\n    const allModels: ModelInfo[] = [];\n\n    for (const providerName of this.availableProviders) {\n      const provider = this.providers.get(providerName);\n      if (provider) {\n        try {\n          const models = await provider.getModels();\n          allModels.push(...models);\n        } catch (error: unknown) {\n          // Skip provider with model loading issues\n        }\n      }\n    }\n\n    return allModels;\n  }\n\n  selectOptimalProvider(\n    taskType?: string,\n    priorityMode: PriorityMode = 'auto',\n  ): string | undefined {\n    const available = this.getAvailableProviders();\n    if (available.length === 0) return undefined;\n\n    const priorityOrder = this.getPriorityOrder(priorityMode);\n\n    // Find the first available provider in priority order\n    for (const providerName of priorityOrder) {\n      if (available.includes(providerName)) {\n        return providerName;\n      }\n    }\n\n    // Fallback to first available\n    return available[0];\n  }\n\n  private getPriorityOrder(mode: PriorityMode): string[] {\n    switch (mode) {\n      case 'privacy-first':\n        return ['lmstudio', 'ollama', 'vllm', 'anthropic', 'openai', 'google', 'groq', 'grok'];\n\n      case 'performance':\n        return ['groq', 'grok', 'ollama', 'lmstudio', 'google', 'openai', 'anthropic', 'vllm'];\n\n      case 'cost-effective':\n        return ['ollama', 'vllm', 'google', 'groq', 'openai', 'anthropic', 'grok', 'lmstudio'];\n\n      case 'auto':\n      default:\n        return ['lmstudio', 'ollama', 'google', 'groq', 'openai', 'anthropic', 'grok', 'vllm'];\n    }\n  }\n\n  async refreshAvailability(): Promise<void> {\n    await this.checkAvailability();\n  }\n\n  async close(): Promise<void> {\n    // Clean up any connections if needed\n    this.providers.clear();\n    this.availableProviders.clear();\n  }\n\n  // Health check for monitoring\n  async getProviderHealth(): Promise<Record<string, boolean>> {\n    const health: Record<string, boolean> = {};\n\n    const checks = Array.from(this.providers.entries()).map(async ([name, provider]) => {\n      try {\n        health[name] = await provider.isAvailable();\n      } catch {\n        health[name] = false;\n      }\n    });\n\n    await Promise.allSettled(checks);\n    return health;\n  }\n}\n","import OpenAI from 'openai';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class OpenAIProvider extends BaseAIProvider {\n  readonly name = 'OpenAI';\n  readonly models = [\n    'gpt-5-2025-08-07',\n    'gpt-5-mini-2025-08-07',\n    'gpt-4o',\n    'gpt-4o-mini',\n    'gpt-4-turbo',\n    'gpt-4',\n    'gpt-3.5-turbo',\n    'o1-preview',\n    'o1-mini',\n  ];\n\n  private client?: OpenAI;\n\n  async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new OpenAI({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n      organization: config?.['organization'] as string | undefined,\n      maxRetries: (config?.['maxRetries'] as number) || 3,\n    });\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const completion = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n    });\n\n    return completion.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const stream = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content;\n      if (content) {\n        yield content;\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(content);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { type Agent, type RequestInit } from './_shims/index';\nimport * as qs from './internal/qs';\nimport * as Core from './core';\nimport * as Errors from './error';\nimport * as Pagination from './pagination';\nimport { type CursorPageParams, CursorPageResponse, PageResponse } from './pagination';\nimport * as Uploads from './uploads';\nimport * as API from './resources/index';\nimport {\n  Batch,\n  BatchCreateParams,\n  BatchError,\n  BatchListParams,\n  BatchRequestCounts,\n  Batches,\n  BatchesPage,\n} from './resources/batches';\nimport {\n  Completion,\n  CompletionChoice,\n  CompletionCreateParams,\n  CompletionCreateParamsNonStreaming,\n  CompletionCreateParamsStreaming,\n  CompletionUsage,\n  Completions,\n} from './resources/completions';\nimport {\n  CreateEmbeddingResponse,\n  Embedding,\n  EmbeddingCreateParams,\n  EmbeddingModel,\n  Embeddings,\n} from './resources/embeddings';\nimport {\n  FileContent,\n  FileCreateParams,\n  FileDeleted,\n  FileListParams,\n  FileObject,\n  FileObjectsPage,\n  FilePurpose,\n  Files,\n} from './resources/files';\nimport {\n  Image,\n  ImageCreateVariationParams,\n  ImageEditParams,\n  ImageGenerateParams,\n  ImageModel,\n  Images,\n  ImagesResponse,\n} from './resources/images';\nimport { Model, ModelDeleted, Models, ModelsPage } from './resources/models';\nimport {\n  Moderation,\n  ModerationCreateParams,\n  ModerationCreateResponse,\n  ModerationImageURLInput,\n  ModerationModel,\n  ModerationMultiModalInput,\n  ModerationTextInput,\n  Moderations,\n} from './resources/moderations';\nimport { Audio, AudioModel, AudioResponseFormat } from './resources/audio/audio';\nimport { Beta } from './resources/beta/beta';\nimport { Chat } from './resources/chat/chat';\nimport {\n  ContainerCreateParams,\n  ContainerCreateResponse,\n  ContainerListParams,\n  ContainerListResponse,\n  ContainerListResponsesPage,\n  ContainerRetrieveResponse,\n  Containers,\n} from './resources/containers/containers';\nimport {\n  EvalCreateParams,\n  EvalCreateResponse,\n  EvalCustomDataSourceConfig,\n  EvalDeleteResponse,\n  EvalListParams,\n  EvalListResponse,\n  EvalListResponsesPage,\n  EvalRetrieveResponse,\n  EvalStoredCompletionsDataSourceConfig,\n  EvalUpdateParams,\n  EvalUpdateResponse,\n  Evals,\n} from './resources/evals/evals';\nimport { FineTuning } from './resources/fine-tuning/fine-tuning';\nimport { Graders } from './resources/graders/graders';\nimport { Responses } from './resources/responses/responses';\nimport {\n  Upload,\n  UploadCompleteParams,\n  UploadCreateParams,\n  Uploads as UploadsAPIUploads,\n} from './resources/uploads/uploads';\nimport {\n  AutoFileChunkingStrategyParam,\n  FileChunkingStrategy,\n  FileChunkingStrategyParam,\n  OtherFileChunkingStrategyObject,\n  StaticFileChunkingStrategy,\n  StaticFileChunkingStrategyObject,\n  StaticFileChunkingStrategyObjectParam,\n  VectorStore,\n  VectorStoreCreateParams,\n  VectorStoreDeleted,\n  VectorStoreListParams,\n  VectorStoreSearchParams,\n  VectorStoreSearchResponse,\n  VectorStoreSearchResponsesPage,\n  VectorStoreUpdateParams,\n  VectorStores,\n  VectorStoresPage,\n} from './resources/vector-stores/vector-stores';\nimport {\n  ChatCompletion,\n  ChatCompletionAssistantMessageParam,\n  ChatCompletionAudio,\n  ChatCompletionAudioParam,\n  ChatCompletionChunk,\n  ChatCompletionContentPart,\n  ChatCompletionContentPartImage,\n  ChatCompletionContentPartInputAudio,\n  ChatCompletionContentPartRefusal,\n  ChatCompletionContentPartText,\n  ChatCompletionCreateParams,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionCreateParamsStreaming,\n  ChatCompletionDeleted,\n  ChatCompletionDeveloperMessageParam,\n  ChatCompletionFunctionCallOption,\n  ChatCompletionFunctionMessageParam,\n  ChatCompletionListParams,\n  ChatCompletionMessage,\n  ChatCompletionMessageParam,\n  ChatCompletionMessageToolCall,\n  ChatCompletionModality,\n  ChatCompletionNamedToolChoice,\n  ChatCompletionPredictionContent,\n  ChatCompletionReasoningEffort,\n  ChatCompletionRole,\n  ChatCompletionStoreMessage,\n  ChatCompletionStreamOptions,\n  ChatCompletionSystemMessageParam,\n  ChatCompletionTokenLogprob,\n  ChatCompletionTool,\n  ChatCompletionToolChoiceOption,\n  ChatCompletionToolMessageParam,\n  ChatCompletionUpdateParams,\n  ChatCompletionUserMessageParam,\n  ChatCompletionsPage,\n  CreateChatCompletionRequestMessage,\n} from './resources/chat/completions/completions';\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['OPENAI_API_KEY'].\n   */\n  apiKey?: string | undefined;\n\n  /**\n   * Defaults to process.env['OPENAI_ORG_ID'].\n   */\n  organization?: string | null | undefined;\n\n  /**\n   * Defaults to process.env['OPENAI_PROJECT_ID'].\n   */\n  project?: string | null | undefined;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   *\n   * Defaults to process.env['OPENAI_BASE_URL'].\n   */\n  baseURL?: string | null | undefined;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number | undefined;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent | undefined;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number | undefined;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers | undefined;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery | undefined;\n\n  /**\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\n   */\n  dangerouslyAllowBrowser?: boolean | undefined;\n}\n\n/**\n * API Client for interfacing with the OpenAI API.\n */\nexport class OpenAI extends Core.APIClient {\n  apiKey: string;\n  organization: string | null;\n  project: string | null;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('OPENAI_BASE_URL'),\n    apiKey = Core.readEnv('OPENAI_API_KEY'),\n    organization = Core.readEnv('OPENAI_ORG_ID') ?? null,\n    project = Core.readEnv('OPENAI_PROJECT_ID') ?? null,\n    ...opts\n  }: ClientOptions = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.OpenAIError(\n        \"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\",\n      );\n    }\n\n    const options: ClientOptions = {\n      apiKey,\n      organization,\n      project,\n      ...opts,\n      baseURL: baseURL || `https://api.openai.com/v1`,\n    };\n\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.OpenAIError(\n        \"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\",\n      );\n    }\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 600000 /* 10 minutes */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n\n    this._options = options;\n\n    this.apiKey = apiKey;\n    this.organization = organization;\n    this.project = project;\n  }\n\n  completions: API.Completions = new API.Completions(this);\n  chat: API.Chat = new API.Chat(this);\n  embeddings: API.Embeddings = new API.Embeddings(this);\n  files: API.Files = new API.Files(this);\n  images: API.Images = new API.Images(this);\n  audio: API.Audio = new API.Audio(this);\n  moderations: API.Moderations = new API.Moderations(this);\n  models: API.Models = new API.Models(this);\n  fineTuning: API.FineTuning = new API.FineTuning(this);\n  graders: API.Graders = new API.Graders(this);\n  vectorStores: API.VectorStores = new API.VectorStores(this);\n  beta: API.Beta = new API.Beta(this);\n  batches: API.Batches = new API.Batches(this);\n  uploads: API.Uploads = new API.Uploads(this);\n  responses: API.Responses = new API.Responses(this);\n  evals: API.Evals = new API.Evals(this);\n  containers: API.Containers = new API.Containers(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      'OpenAI-Organization': this.organization,\n      'OpenAI-Project': this.project,\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n\n  protected override stringifyQuery(query: Record<string, unknown>): string {\n    return qs.stringify(query, { arrayFormat: 'brackets' });\n  }\n\n  static OpenAI = this;\n  static DEFAULT_TIMEOUT = 600000; // 10 minutes\n\n  static OpenAIError = Errors.OpenAIError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n\n  static toFile = Uploads.toFile;\n  static fileFromPath = Uploads.fileFromPath;\n}\n\nOpenAI.Completions = Completions;\nOpenAI.Chat = Chat;\nOpenAI.ChatCompletionsPage = ChatCompletionsPage;\nOpenAI.Embeddings = Embeddings;\nOpenAI.Files = Files;\nOpenAI.FileObjectsPage = FileObjectsPage;\nOpenAI.Images = Images;\nOpenAI.Audio = Audio;\nOpenAI.Moderations = Moderations;\nOpenAI.Models = Models;\nOpenAI.ModelsPage = ModelsPage;\nOpenAI.FineTuning = FineTuning;\nOpenAI.Graders = Graders;\nOpenAI.VectorStores = VectorStores;\nOpenAI.VectorStoresPage = VectorStoresPage;\nOpenAI.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;\nOpenAI.Beta = Beta;\nOpenAI.Batches = Batches;\nOpenAI.BatchesPage = BatchesPage;\nOpenAI.Uploads = UploadsAPIUploads;\nOpenAI.Responses = Responses;\nOpenAI.Evals = Evals;\nOpenAI.EvalListResponsesPage = EvalListResponsesPage;\nOpenAI.Containers = Containers;\nOpenAI.ContainerListResponsesPage = ContainerListResponsesPage;\nexport declare namespace OpenAI {\n  export type RequestOptions = Core.RequestOptions;\n\n  export import Page = Pagination.Page;\n  export { type PageResponse as PageResponse };\n\n  export import CursorPage = Pagination.CursorPage;\n  export { type CursorPageParams as CursorPageParams, type CursorPageResponse as CursorPageResponse };\n\n  export {\n    Completions as Completions,\n    type Completion as Completion,\n    type CompletionChoice as CompletionChoice,\n    type CompletionUsage as CompletionUsage,\n    type CompletionCreateParams as CompletionCreateParams,\n    type CompletionCreateParamsNonStreaming as CompletionCreateParamsNonStreaming,\n    type CompletionCreateParamsStreaming as CompletionCreateParamsStreaming,\n  };\n\n  export {\n    Chat as Chat,\n    type ChatCompletion as ChatCompletion,\n    type ChatCompletionAssistantMessageParam as ChatCompletionAssistantMessageParam,\n    type ChatCompletionAudio as ChatCompletionAudio,\n    type ChatCompletionAudioParam as ChatCompletionAudioParam,\n    type ChatCompletionChunk as ChatCompletionChunk,\n    type ChatCompletionContentPart as ChatCompletionContentPart,\n    type ChatCompletionContentPartImage as ChatCompletionContentPartImage,\n    type ChatCompletionContentPartInputAudio as ChatCompletionContentPartInputAudio,\n    type ChatCompletionContentPartRefusal as ChatCompletionContentPartRefusal,\n    type ChatCompletionContentPartText as ChatCompletionContentPartText,\n    type ChatCompletionDeleted as ChatCompletionDeleted,\n    type ChatCompletionDeveloperMessageParam as ChatCompletionDeveloperMessageParam,\n    type ChatCompletionFunctionCallOption as ChatCompletionFunctionCallOption,\n    type ChatCompletionFunctionMessageParam as ChatCompletionFunctionMessageParam,\n    type ChatCompletionMessage as ChatCompletionMessage,\n    type ChatCompletionMessageParam as ChatCompletionMessageParam,\n    type ChatCompletionMessageToolCall as ChatCompletionMessageToolCall,\n    type ChatCompletionModality as ChatCompletionModality,\n    type ChatCompletionNamedToolChoice as ChatCompletionNamedToolChoice,\n    type ChatCompletionPredictionContent as ChatCompletionPredictionContent,\n    type ChatCompletionRole as ChatCompletionRole,\n    type ChatCompletionStoreMessage as ChatCompletionStoreMessage,\n    type ChatCompletionStreamOptions as ChatCompletionStreamOptions,\n    type ChatCompletionSystemMessageParam as ChatCompletionSystemMessageParam,\n    type ChatCompletionTokenLogprob as ChatCompletionTokenLogprob,\n    type ChatCompletionTool as ChatCompletionTool,\n    type ChatCompletionToolChoiceOption as ChatCompletionToolChoiceOption,\n    type ChatCompletionToolMessageParam as ChatCompletionToolMessageParam,\n    type ChatCompletionUserMessageParam as ChatCompletionUserMessageParam,\n    type CreateChatCompletionRequestMessage as CreateChatCompletionRequestMessage,\n    type ChatCompletionReasoningEffort as ChatCompletionReasoningEffort,\n    ChatCompletionsPage as ChatCompletionsPage,\n    type ChatCompletionCreateParams as ChatCompletionCreateParams,\n    type ChatCompletionCreateParamsNonStreaming as ChatCompletionCreateParamsNonStreaming,\n    type ChatCompletionCreateParamsStreaming as ChatCompletionCreateParamsStreaming,\n    type ChatCompletionUpdateParams as ChatCompletionUpdateParams,\n    type ChatCompletionListParams as ChatCompletionListParams,\n  };\n\n  export {\n    Embeddings as Embeddings,\n    type CreateEmbeddingResponse as CreateEmbeddingResponse,\n    type Embedding as Embedding,\n    type EmbeddingModel as EmbeddingModel,\n    type EmbeddingCreateParams as EmbeddingCreateParams,\n  };\n\n  export {\n    Files as Files,\n    type FileContent as FileContent,\n    type FileDeleted as FileDeleted,\n    type FileObject as FileObject,\n    type FilePurpose as FilePurpose,\n    FileObjectsPage as FileObjectsPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n\n  export {\n    Images as Images,\n    type Image as Image,\n    type ImageModel as ImageModel,\n    type ImagesResponse as ImagesResponse,\n    type ImageCreateVariationParams as ImageCreateVariationParams,\n    type ImageEditParams as ImageEditParams,\n    type ImageGenerateParams as ImageGenerateParams,\n  };\n\n  export { Audio as Audio, type AudioModel as AudioModel, type AudioResponseFormat as AudioResponseFormat };\n\n  export {\n    Moderations as Moderations,\n    type Moderation as Moderation,\n    type ModerationImageURLInput as ModerationImageURLInput,\n    type ModerationModel as ModerationModel,\n    type ModerationMultiModalInput as ModerationMultiModalInput,\n    type ModerationTextInput as ModerationTextInput,\n    type ModerationCreateResponse as ModerationCreateResponse,\n    type ModerationCreateParams as ModerationCreateParams,\n  };\n\n  export {\n    Models as Models,\n    type Model as Model,\n    type ModelDeleted as ModelDeleted,\n    ModelsPage as ModelsPage,\n  };\n\n  export { FineTuning as FineTuning };\n\n  export { Graders as Graders };\n\n  export {\n    VectorStores as VectorStores,\n    type AutoFileChunkingStrategyParam as AutoFileChunkingStrategyParam,\n    type FileChunkingStrategy as FileChunkingStrategy,\n    type FileChunkingStrategyParam as FileChunkingStrategyParam,\n    type OtherFileChunkingStrategyObject as OtherFileChunkingStrategyObject,\n    type StaticFileChunkingStrategy as StaticFileChunkingStrategy,\n    type StaticFileChunkingStrategyObject as StaticFileChunkingStrategyObject,\n    type StaticFileChunkingStrategyObjectParam as StaticFileChunkingStrategyObjectParam,\n    type VectorStore as VectorStore,\n    type VectorStoreDeleted as VectorStoreDeleted,\n    type VectorStoreSearchResponse as VectorStoreSearchResponse,\n    VectorStoresPage as VectorStoresPage,\n    VectorStoreSearchResponsesPage as VectorStoreSearchResponsesPage,\n    type VectorStoreCreateParams as VectorStoreCreateParams,\n    type VectorStoreUpdateParams as VectorStoreUpdateParams,\n    type VectorStoreListParams as VectorStoreListParams,\n    type VectorStoreSearchParams as VectorStoreSearchParams,\n  };\n\n  export { Beta as Beta };\n\n  export {\n    Batches as Batches,\n    type Batch as Batch,\n    type BatchError as BatchError,\n    type BatchRequestCounts as BatchRequestCounts,\n    BatchesPage as BatchesPage,\n    type BatchCreateParams as BatchCreateParams,\n    type BatchListParams as BatchListParams,\n  };\n\n  export {\n    UploadsAPIUploads as Uploads,\n    type Upload as Upload,\n    type UploadCreateParams as UploadCreateParams,\n    type UploadCompleteParams as UploadCompleteParams,\n  };\n\n  export { Responses as Responses };\n\n  export {\n    Evals as Evals,\n    type EvalCustomDataSourceConfig as EvalCustomDataSourceConfig,\n    type EvalStoredCompletionsDataSourceConfig as EvalStoredCompletionsDataSourceConfig,\n    type EvalCreateResponse as EvalCreateResponse,\n    type EvalRetrieveResponse as EvalRetrieveResponse,\n    type EvalUpdateResponse as EvalUpdateResponse,\n    type EvalListResponse as EvalListResponse,\n    type EvalDeleteResponse as EvalDeleteResponse,\n    EvalListResponsesPage as EvalListResponsesPage,\n    type EvalCreateParams as EvalCreateParams,\n    type EvalUpdateParams as EvalUpdateParams,\n    type EvalListParams as EvalListParams,\n  };\n\n  export {\n    Containers as Containers,\n    type ContainerCreateResponse as ContainerCreateResponse,\n    type ContainerRetrieveResponse as ContainerRetrieveResponse,\n    type ContainerListResponse as ContainerListResponse,\n    ContainerListResponsesPage as ContainerListResponsesPage,\n    type ContainerCreateParams as ContainerCreateParams,\n    type ContainerListParams as ContainerListParams,\n  };\n\n  export type AllModels = API.AllModels;\n  export type ChatModel = API.ChatModel;\n  export type ComparisonFilter = API.ComparisonFilter;\n  export type CompoundFilter = API.CompoundFilter;\n  export type ErrorObject = API.ErrorObject;\n  export type FunctionDefinition = API.FunctionDefinition;\n  export type FunctionParameters = API.FunctionParameters;\n  export type Metadata = API.Metadata;\n  export type Reasoning = API.Reasoning;\n  export type ReasoningEffort = API.ReasoningEffort;\n  export type ResponseFormatJSONObject = API.ResponseFormatJSONObject;\n  export type ResponseFormatJSONSchema = API.ResponseFormatJSONSchema;\n  export type ResponseFormatText = API.ResponseFormatText;\n  export type ResponsesModel = API.ResponsesModel;\n}\n\n// ---------------------- Azure ----------------------\n\n/** API Client for interfacing with the Azure OpenAI API. */\nexport interface AzureClientOptions extends ClientOptions {\n  /**\n   * Defaults to process.env['OPENAI_API_VERSION'].\n   */\n  apiVersion?: string | undefined;\n\n  /**\n   * Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n   */\n  endpoint?: string | undefined;\n\n  /**\n   * A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n   * Note: this means you won't be able to use non-deployment endpoints. Not supported with Assistants APIs.\n   */\n  deployment?: string | undefined;\n\n  /**\n   * Defaults to process.env['AZURE_OPENAI_API_KEY'].\n   */\n  apiKey?: string | undefined;\n\n  /**\n   * A function that returns an access token for Microsoft Entra (formerly known as Azure Active Directory),\n   * which will be invoked on every request.\n   */\n  azureADTokenProvider?: (() => Promise<string>) | undefined;\n}\n\n/** API Client for interfacing with the Azure OpenAI API. */\nexport class AzureOpenAI extends OpenAI {\n  private _azureADTokenProvider: (() => Promise<string>) | undefined;\n  deploymentName: string | undefined;\n  apiVersion: string = '';\n  /**\n   * API Client for interfacing with the Azure OpenAI API.\n   *\n   * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n   * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n   * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n   * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('OPENAI_BASE_URL'),\n    apiKey = Core.readEnv('AZURE_OPENAI_API_KEY'),\n    apiVersion = Core.readEnv('OPENAI_API_VERSION'),\n    endpoint,\n    deployment,\n    azureADTokenProvider,\n    dangerouslyAllowBrowser,\n    ...opts\n  }: AzureClientOptions = {}) {\n    if (!apiVersion) {\n      throw new Errors.OpenAIError(\n        \"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\",\n      );\n    }\n\n    if (typeof azureADTokenProvider === 'function') {\n      dangerouslyAllowBrowser = true;\n    }\n\n    if (!azureADTokenProvider && !apiKey) {\n      throw new Errors.OpenAIError(\n        'Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.',\n      );\n    }\n\n    if (azureADTokenProvider && apiKey) {\n      throw new Errors.OpenAIError(\n        'The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.',\n      );\n    }\n\n    // define a sentinel value to avoid any typing issues\n    apiKey ??= API_KEY_SENTINEL;\n\n    opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };\n\n    if (!baseURL) {\n      if (!endpoint) {\n        endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\n      }\n\n      if (!endpoint) {\n        throw new Errors.OpenAIError(\n          'Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable',\n        );\n      }\n\n      baseURL = `${endpoint}/openai`;\n    } else {\n      if (endpoint) {\n        throw new Errors.OpenAIError('baseURL and endpoint are mutually exclusive');\n      }\n    }\n\n    super({\n      apiKey,\n      baseURL,\n      ...opts,\n      ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),\n    });\n\n    this._azureADTokenProvider = azureADTokenProvider;\n    this.apiVersion = apiVersion;\n    this.deploymentName = deployment;\n  }\n\n  override buildRequest(\n    options: Core.FinalRequestOptions<unknown>,\n    props: { retryCount?: number } = {},\n  ): {\n    req: RequestInit;\n    url: string;\n    timeout: number;\n  } {\n    if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\n      if (!Core.isObj(options.body)) {\n        throw new Error('Expected request body to be an object');\n      }\n      const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\n      if (model !== undefined && !this.baseURL.includes('/deployments')) {\n        options.path = `/deployments/${model}${options.path}`;\n      }\n    }\n    return super.buildRequest(options, props);\n  }\n\n  async _getAzureADToken(): Promise<string | undefined> {\n    if (typeof this._azureADTokenProvider === 'function') {\n      const token = await this._azureADTokenProvider();\n      if (!token || typeof token !== 'string') {\n        throw new Errors.OpenAIError(\n          `Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`,\n        );\n      }\n      return token;\n    }\n    return undefined;\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {};\n  }\n\n  protected override async prepareOptions(opts: Core.FinalRequestOptions<unknown>): Promise<void> {\n    /**\n     * The user should provide a bearer token provider if they want\n     * to use Azure AD authentication. The user shouldn't set the\n     * Authorization header manually because the header is overwritten\n     * with the Azure AD token if a bearer token provider is provided.\n     */\n    if (opts.headers?.['api-key']) {\n      return super.prepareOptions(opts);\n    }\n    const token = await this._getAzureADToken();\n    opts.headers ??= {};\n    if (token) {\n      opts.headers['Authorization'] = `Bearer ${token}`;\n    } else if (this.apiKey !== API_KEY_SENTINEL) {\n      opts.headers['api-key'] = this.apiKey;\n    } else {\n      throw new Errors.OpenAIError('Unable to handle auth');\n    }\n    return super.prepareOptions(opts);\n  }\n}\n\nconst _deployments_endpoints = new Set([\n  '/completions',\n  '/chat/completions',\n  '/embeddings',\n  '/audio/transcriptions',\n  '/audio/translations',\n  '/audio/speech',\n  '/images/generations',\n  '/images/edits',\n]);\n\nconst API_KEY_SENTINEL = '<Missing Key>';\n\n// ---------------------- End Azure ----------------------\n\nexport { toFile, fileFromPath } from './uploads';\nexport {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} from './error';\n\nexport default OpenAI;\n","import type { Format } from './types';\n\nexport const default_format: Format = 'RFC3986';\nexport const formatters: Record<Format, (str: PropertyKey) => string> = {\n  RFC1738: (v: PropertyKey) => String(v).replace(/%20/g, '+'),\n  RFC3986: (v: PropertyKey) => String(v),\n};\nexport const RFC1738 = 'RFC1738';\nexport const RFC3986 = 'RFC3986';\n","import { RFC1738 } from './formats';\nimport type { DefaultEncoder, Format } from './types';\n\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\n\nconst hex_table = (() => {\n  const array = [];\n  for (let i = 0; i < 256; ++i) {\n    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n  }\n\n  return array;\n})();\n\nfunction compact_queue<T extends Record<string, any>>(queue: Array<{ obj: T; prop: string }>) {\n  while (queue.length > 1) {\n    const item = queue.pop();\n    if (!item) continue;\n\n    const obj = item.obj[item.prop];\n\n    if (is_array(obj)) {\n      const compacted: unknown[] = [];\n\n      for (let j = 0; j < obj.length; ++j) {\n        if (typeof obj[j] !== 'undefined') {\n          compacted.push(obj[j]);\n        }\n      }\n\n      // @ts-ignore\n      item.obj[item.prop] = compacted;\n    }\n  }\n}\n\nfunction array_to_object(source: any[], options: { plainObjects: boolean }) {\n  const obj = options && options.plainObjects ? Object.create(null) : {};\n  for (let i = 0; i < source.length; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i];\n    }\n  }\n\n  return obj;\n}\n\nexport function merge(\n  target: any,\n  source: any,\n  options: { plainObjects?: boolean; allowPrototypes?: boolean } = {},\n) {\n  if (!source) {\n    return target;\n  }\n\n  if (typeof source !== 'object') {\n    if (is_array(target)) {\n      target.push(source);\n    } else if (target && typeof target === 'object') {\n      if (\n        (options && (options.plainObjects || options.allowPrototypes)) ||\n        !has.call(Object.prototype, source)\n      ) {\n        target[source] = true;\n      }\n    } else {\n      return [target, source];\n    }\n\n    return target;\n  }\n\n  if (!target || typeof target !== 'object') {\n    return [target].concat(source);\n  }\n\n  let mergeTarget = target;\n  if (is_array(target) && !is_array(source)) {\n    // @ts-ignore\n    mergeTarget = array_to_object(target, options);\n  }\n\n  if (is_array(target) && is_array(source)) {\n    source.forEach(function (item, i) {\n      if (has.call(target, i)) {\n        const targetItem = target[i];\n        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n          target[i] = merge(targetItem, item, options);\n        } else {\n          target.push(item);\n        }\n      } else {\n        target[i] = item;\n      }\n    });\n    return target;\n  }\n\n  return Object.keys(source).reduce(function (acc, key) {\n    const value = source[key];\n\n    if (has.call(acc, key)) {\n      acc[key] = merge(acc[key], value, options);\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, mergeTarget);\n}\n\nexport function assign_single_source(target: any, source: any) {\n  return Object.keys(source).reduce(function (acc, key) {\n    acc[key] = source[key];\n    return acc;\n  }, target);\n}\n\nexport function decode(str: string, _: any, charset: string) {\n  const strWithoutPlus = str.replace(/\\+/g, ' ');\n  if (charset === 'iso-8859-1') {\n    // unescape never throws, no try...catch needed:\n    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n  }\n  // utf-8\n  try {\n    return decodeURIComponent(strWithoutPlus);\n  } catch (e) {\n    return strWithoutPlus;\n  }\n}\n\nconst limit = 1024;\n\nexport const encode: (\n  str: any,\n  defaultEncoder: DefaultEncoder,\n  charset: string,\n  type: 'key' | 'value',\n  format: Format,\n) => string = (str, _defaultEncoder, charset, _kind, format: Format) => {\n  // This code was originally written by Brian White for the io.js core querystring library.\n  // It has been adapted here for stricter adherence to RFC 3986\n  if (str.length === 0) {\n    return str;\n  }\n\n  let string = str;\n  if (typeof str === 'symbol') {\n    string = Symbol.prototype.toString.call(str);\n  } else if (typeof str !== 'string') {\n    string = String(str);\n  }\n\n  if (charset === 'iso-8859-1') {\n    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n    });\n  }\n\n  let out = '';\n  for (let j = 0; j < string.length; j += limit) {\n    const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n    const arr = [];\n\n    for (let i = 0; i < segment.length; ++i) {\n      let c = segment.charCodeAt(i);\n      if (\n        c === 0x2d || // -\n        c === 0x2e || // .\n        c === 0x5f || // _\n        c === 0x7e || // ~\n        (c >= 0x30 && c <= 0x39) || // 0-9\n        (c >= 0x41 && c <= 0x5a) || // a-z\n        (c >= 0x61 && c <= 0x7a) || // A-Z\n        (format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n      ) {\n        arr[arr.length] = segment.charAt(i);\n        continue;\n      }\n\n      if (c < 0x80) {\n        arr[arr.length] = hex_table[c];\n        continue;\n      }\n\n      if (c < 0x800) {\n        arr[arr.length] = hex_table[0xc0 | (c >> 6)]! + hex_table[0x80 | (c & 0x3f)];\n        continue;\n      }\n\n      if (c < 0xd800 || c >= 0xe000) {\n        arr[arr.length] =\n          hex_table[0xe0 | (c >> 12)]! + hex_table[0x80 | ((c >> 6) & 0x3f)] + hex_table[0x80 | (c & 0x3f)];\n        continue;\n      }\n\n      i += 1;\n      c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));\n\n      arr[arr.length] =\n        hex_table[0xf0 | (c >> 18)]! +\n        hex_table[0x80 | ((c >> 12) & 0x3f)] +\n        hex_table[0x80 | ((c >> 6) & 0x3f)] +\n        hex_table[0x80 | (c & 0x3f)];\n    }\n\n    out += arr.join('');\n  }\n\n  return out;\n};\n\nexport function compact(value: any) {\n  const queue = [{ obj: { o: value }, prop: 'o' }];\n  const refs = [];\n\n  for (let i = 0; i < queue.length; ++i) {\n    const item = queue[i];\n    // @ts-ignore\n    const obj = item.obj[item.prop];\n\n    const keys = Object.keys(obj);\n    for (let j = 0; j < keys.length; ++j) {\n      const key = keys[j]!;\n      const val = obj[key];\n      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n        queue.push({ obj: obj, prop: key });\n        refs.push(val);\n      }\n    }\n  }\n\n  compact_queue(queue);\n\n  return value;\n}\n\nexport function is_regexp(obj: any) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nexport function is_buffer(obj: any) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\n\nexport function combine(a: any, b: any) {\n  return [].concat(a, b);\n}\n\nexport function maybe_map<T>(val: T[], fn: (v: T) => T) {\n  if (is_array(val)) {\n    const mapped = [];\n    for (let i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]!));\n    }\n    return mapped;\n  }\n  return fn(val);\n}\n","import { encode, is_buffer, maybe_map } from './utils';\nimport { default_format, formatters } from './formats';\nimport type { NonNullableProperties, StringifyOptions } from './types';\n\nconst has = Object.prototype.hasOwnProperty;\n\nconst array_prefix_generators = {\n  brackets(prefix: PropertyKey) {\n    return String(prefix) + '[]';\n  },\n  comma: 'comma',\n  indices(prefix: PropertyKey, key: string) {\n    return String(prefix) + '[' + key + ']';\n  },\n  repeat(prefix: PropertyKey) {\n    return String(prefix);\n  },\n};\n\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr: any[], value_or_array: any) {\n  push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\n\nconst to_ISO = Date.prototype.toISOString;\n\nconst defaults = {\n  addQueryPrefix: false,\n  allowDots: false,\n  allowEmptyArrays: false,\n  arrayFormat: 'indices',\n  charset: 'utf-8',\n  charsetSentinel: false,\n  delimiter: '&',\n  encode: true,\n  encodeDotInKeys: false,\n  encoder: encode,\n  encodeValuesOnly: false,\n  format: default_format,\n  formatter: formatters[default_format],\n  /** @deprecated */\n  indices: false,\n  serializeDate(date) {\n    return to_ISO.call(date);\n  },\n  skipNulls: false,\n  strictNullHandling: false,\n} as NonNullableProperties<StringifyOptions & { formatter: (typeof formatters)['RFC1738'] }>;\n\nfunction is_non_nullish_primitive(v: unknown): v is string | number | boolean | symbol | bigint {\n  return (\n    typeof v === 'string' ||\n    typeof v === 'number' ||\n    typeof v === 'boolean' ||\n    typeof v === 'symbol' ||\n    typeof v === 'bigint'\n  );\n}\n\nconst sentinel = {};\n\nfunction inner_stringify(\n  object: any,\n  prefix: PropertyKey,\n  generateArrayPrefix: StringifyOptions['arrayFormat'] | ((prefix: string, key: string) => string),\n  commaRoundTrip: boolean,\n  allowEmptyArrays: boolean,\n  strictNullHandling: boolean,\n  skipNulls: boolean,\n  encodeDotInKeys: boolean,\n  encoder: StringifyOptions['encoder'],\n  filter: StringifyOptions['filter'],\n  sort: StringifyOptions['sort'],\n  allowDots: StringifyOptions['allowDots'],\n  serializeDate: StringifyOptions['serializeDate'],\n  format: StringifyOptions['format'],\n  formatter: StringifyOptions['formatter'],\n  encodeValuesOnly: boolean,\n  charset: StringifyOptions['charset'],\n  sideChannel: WeakMap<any, any>,\n) {\n  let obj = object;\n\n  let tmp_sc = sideChannel;\n  let step = 0;\n  let find_flag = false;\n  while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n    // Where object last appeared in the ref tree\n    const pos = tmp_sc.get(object);\n    step += 1;\n    if (typeof pos !== 'undefined') {\n      if (pos === step) {\n        throw new RangeError('Cyclic object value');\n      } else {\n        find_flag = true; // Break while\n      }\n    }\n    if (typeof tmp_sc.get(sentinel) === 'undefined') {\n      step = 0;\n    }\n  }\n\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj);\n  } else if (obj instanceof Date) {\n    obj = serializeDate?.(obj);\n  } else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n    obj = maybe_map(obj, function (value) {\n      if (value instanceof Date) {\n        return serializeDate?.(value);\n      }\n      return value;\n    });\n  }\n\n  if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly ?\n          // @ts-expect-error\n          encoder(prefix, defaults.encoder, charset, 'key', format)\n        : prefix;\n    }\n\n    obj = '';\n  }\n\n  if (is_non_nullish_primitive(obj) || is_buffer(obj)) {\n    if (encoder) {\n      const key_value =\n        encodeValuesOnly ? prefix\n          // @ts-expect-error\n        : encoder(prefix, defaults.encoder, charset, 'key', format);\n      return [\n        formatter?.(key_value) +\n          '=' +\n          // @ts-expect-error\n          formatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),\n      ];\n    }\n    return [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n  }\n\n  const values: string[] = [];\n\n  if (typeof obj === 'undefined') {\n    return values;\n  }\n\n  let obj_keys;\n  if (generateArrayPrefix === 'comma' && is_array(obj)) {\n    // we need to join elements in\n    if (encodeValuesOnly && encoder) {\n      // @ts-expect-error values only\n      obj = maybe_map(obj, encoder);\n    }\n    obj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n  } else if (is_array(filter)) {\n    obj_keys = filter;\n  } else {\n    const keys = Object.keys(obj);\n    obj_keys = sort ? keys.sort(sort) : keys;\n  }\n\n  const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n\n  const adjusted_prefix =\n    commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n\n  if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n    return adjusted_prefix + '[]';\n  }\n\n  for (let j = 0; j < obj_keys.length; ++j) {\n    const key = obj_keys[j];\n    const value =\n      // @ts-ignore\n      typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key as any];\n\n    if (skipNulls && value === null) {\n      continue;\n    }\n\n    // @ts-ignore\n    const encoded_key = allowDots && encodeDotInKeys ? (key as any).replace(/\\./g, '%2E') : key;\n    const key_prefix =\n      is_array(obj) ?\n        typeof generateArrayPrefix === 'function' ?\n          generateArrayPrefix(adjusted_prefix, encoded_key)\n        : adjusted_prefix\n      : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n\n    sideChannel.set(object, step);\n    const valueSideChannel = new WeakMap();\n    valueSideChannel.set(sentinel, sideChannel);\n    push_to_array(\n      values,\n      inner_stringify(\n        value,\n        key_prefix,\n        generateArrayPrefix,\n        commaRoundTrip,\n        allowEmptyArrays,\n        strictNullHandling,\n        skipNulls,\n        encodeDotInKeys,\n        // @ts-ignore\n        generateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder,\n        filter,\n        sort,\n        allowDots,\n        serializeDate,\n        format,\n        formatter,\n        encodeValuesOnly,\n        charset,\n        valueSideChannel,\n      ),\n    );\n  }\n\n  return values;\n}\n\nfunction normalize_stringify_options(\n  opts: StringifyOptions = defaults,\n): NonNullableProperties<Omit<StringifyOptions, 'indices'>> & { indices?: boolean } {\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n  }\n\n  if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n    throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n  }\n\n  if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n    throw new TypeError('Encoder has to be a function.');\n  }\n\n  const charset = opts.charset || defaults.charset;\n  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n  }\n\n  let format = default_format;\n  if (typeof opts.format !== 'undefined') {\n    if (!has.call(formatters, opts.format)) {\n      throw new TypeError('Unknown format option provided.');\n    }\n    format = opts.format;\n  }\n  const formatter = formatters[format];\n\n  let filter = defaults.filter;\n  if (typeof opts.filter === 'function' || is_array(opts.filter)) {\n    filter = opts.filter;\n  }\n\n  let arrayFormat: StringifyOptions['arrayFormat'];\n  if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n    arrayFormat = opts.arrayFormat;\n  } else if ('indices' in opts) {\n    arrayFormat = opts.indices ? 'indices' : 'repeat';\n  } else {\n    arrayFormat = defaults.arrayFormat;\n  }\n\n  if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n    throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n  }\n\n  const allowDots =\n    typeof opts.allowDots === 'undefined' ?\n      !!opts.encodeDotInKeys === true ?\n        true\n      : defaults.allowDots\n    : !!opts.allowDots;\n\n  return {\n    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n    // @ts-ignore\n    allowDots: allowDots,\n    allowEmptyArrays:\n      typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n    arrayFormat: arrayFormat,\n    charset: charset,\n    charsetSentinel:\n      typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    commaRoundTrip: !!opts.commaRoundTrip,\n    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n    encodeDotInKeys:\n      typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n    encodeValuesOnly:\n      typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n    filter: filter,\n    format: format,\n    formatter: formatter,\n    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n    // @ts-ignore\n    sort: typeof opts.sort === 'function' ? opts.sort : null,\n    strictNullHandling:\n      typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n  };\n}\n\nexport function stringify(object: any, opts: StringifyOptions = {}) {\n  let obj = object;\n  const options = normalize_stringify_options(opts);\n\n  let obj_keys: PropertyKey[] | undefined;\n  let filter;\n\n  if (typeof options.filter === 'function') {\n    filter = options.filter;\n    obj = filter('', obj);\n  } else if (is_array(options.filter)) {\n    filter = options.filter;\n    obj_keys = filter;\n  }\n\n  const keys: string[] = [];\n\n  if (typeof obj !== 'object' || obj === null) {\n    return '';\n  }\n\n  const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n  const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n  if (!obj_keys) {\n    obj_keys = Object.keys(obj);\n  }\n\n  if (options.sort) {\n    obj_keys.sort(options.sort);\n  }\n\n  const sideChannel = new WeakMap();\n  for (let i = 0; i < obj_keys.length; ++i) {\n    const key = obj_keys[i]!;\n\n    if (options.skipNulls && obj[key] === null) {\n      continue;\n    }\n    push_to_array(\n      keys,\n      inner_stringify(\n        obj[key],\n        key,\n        // @ts-expect-error\n        generateArrayPrefix,\n        commaRoundTrip,\n        options.allowEmptyArrays,\n        options.strictNullHandling,\n        options.skipNulls,\n        options.encodeDotInKeys,\n        options.encode ? options.encoder : null,\n        options.filter,\n        options.sort,\n        options.allowDots,\n        options.serializeDate,\n        options.format,\n        options.formatter,\n        options.encodeValuesOnly,\n        options.charset,\n        sideChannel,\n      ),\n    );\n  }\n\n  const joined = keys.join(options.delimiter);\n  let prefix = options.addQueryPrefix === true ? '?' : '';\n\n  if (options.charsetSentinel) {\n    if (options.charset === 'iso-8859-1') {\n      // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n      prefix += 'utf8=%26%2310003%3B&';\n    } else {\n      // encodeURIComponent('✓')\n      prefix += 'utf8=%E2%9C%93&';\n    }\n  }\n\n  return joined.length > 0 ? prefix + joined : '';\n}\n","export const VERSION = '4.104.0'; // x-release-please-version\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'openai/_shims/auto/runtime';\nexport const init = () => {\n  if (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\n};\nexport * from './registry.mjs';\n\ninit();\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  ReadableStream: any;\n  getMultipartRequestOptions: <T = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let ReadableStream: Shims['ReadableStream'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`,\n    );\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  ReadableStream = shims.ReadableStream;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n","import Stream from 'stream';\nimport http from 'http';\nimport Url from 'url';\nimport whatwgUrl from 'whatwg-url';\nimport https from 'https';\nimport zlib from 'zlib';\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = Stream.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = Stream.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof Stream) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\t\tif (!res) {\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\n\t\t\tif (res) {\n\t\t\t\tres.pop(); // drop last quote\n\t\t\t}\n\t\t}\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\nconst URL = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = Url.parse;\nconst format_url = Url.format;\n\n/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */\nfunction parseURL(urlStr) {\n\t/*\n \tCheck whether the URL is absolute or not\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n */\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\n\t\turlStr = new URL(urlStr).toString();\n\t}\n\n\t// Fallback to old implementation for arbitrary URLs\n\treturn parse_url(urlStr);\n}\n\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parseURL(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parseURL(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parseURL(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\nconst URL$1 = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = Stream.PassThrough;\n\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\n\tconst orig = new URL$1(original).hostname;\n\tconst dest = new URL$1(destination).hostname;\n\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = function isSameProtocol(destination, original) {\n\tconst orig = new URL$1(original).protocol;\n\tconst dest = new URL$1(destination).protocol;\n\n\treturn orig === dest;\n};\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\tdestroyStream(request.body, error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\treq.on('socket', function (s) {\n\t\t\t\ts.addListener('close', function (hadError) {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.on('end', function () {\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tlet socket;\n\n\trequest.on('socket', function (s) {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', function (response) {\n\t\tconst headers = response.headers;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tresponse.once('close', function (hadError) {\n\t\t\t\t// tests for socket presence, as in some situations the\n\t\t\t\t// the 'socket' event is not triggered for the request\n\t\t\t\t// (happens in deno), avoids `TypeError`\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\n\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction destroyStream(stream, err) {\n\tif (stream.destroy) {\n\t\tstream.destroy(err);\n\t} else {\n\t\t// node < 8\n\t\tstream.emit('error', err);\n\t\tstream.end();\n\t}\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nexport default fetch;\nexport { Headers, Request, Response, FetchError, AbortError };\n","export * from \"./FormData.js\";\nexport * from \"./Blob.js\";\nexport * from \"./File.js\";\n","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FormData_instances, _FormData_entries, _FormData_setEntry;\nimport { inspect } from \"util\";\nimport { File } from \"./File.js\";\nimport { isFile } from \"./isFile.js\";\nimport { isBlob } from \"./isBlob.js\";\nimport { isFunction } from \"./isFunction.js\";\nimport { deprecateConstructorEntries } from \"./deprecateConstructorEntries.js\";\nexport class FormData {\n    constructor(entries) {\n        _FormData_instances.add(this);\n        _FormData_entries.set(this, new Map());\n        if (entries) {\n            deprecateConstructorEntries();\n            entries.forEach(({ name, value, fileName }) => this.append(name, value, fileName));\n        }\n    }\n    static [(_FormData_entries = new WeakMap(), _FormData_instances = new WeakSet(), Symbol.hasInstance)](value) {\n        return Boolean(value\n            && isFunction(value.constructor)\n            && value[Symbol.toStringTag] === \"FormData\"\n            && isFunction(value.append)\n            && isFunction(value.set)\n            && isFunction(value.get)\n            && isFunction(value.getAll)\n            && isFunction(value.has)\n            && isFunction(value.delete)\n            && isFunction(value.entries)\n            && isFunction(value.values)\n            && isFunction(value.keys)\n            && isFunction(value[Symbol.iterator])\n            && isFunction(value.forEach));\n    }\n    append(name, value, fileName) {\n        __classPrivateFieldGet(this, _FormData_instances, \"m\", _FormData_setEntry).call(this, {\n            name,\n            fileName,\n            append: true,\n            rawValue: value,\n            argsLength: arguments.length\n        });\n    }\n    set(name, value, fileName) {\n        __classPrivateFieldGet(this, _FormData_instances, \"m\", _FormData_setEntry).call(this, {\n            name,\n            fileName,\n            append: false,\n            rawValue: value,\n            argsLength: arguments.length\n        });\n    }\n    get(name) {\n        const field = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(String(name));\n        if (!field) {\n            return null;\n        }\n        return field[0];\n    }\n    getAll(name) {\n        const field = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(String(name));\n        if (!field) {\n            return [];\n        }\n        return field.slice();\n    }\n    has(name) {\n        return __classPrivateFieldGet(this, _FormData_entries, \"f\").has(String(name));\n    }\n    delete(name) {\n        __classPrivateFieldGet(this, _FormData_entries, \"f\").delete(String(name));\n    }\n    *keys() {\n        for (const key of __classPrivateFieldGet(this, _FormData_entries, \"f\").keys()) {\n            yield key;\n        }\n    }\n    *entries() {\n        for (const name of this.keys()) {\n            const values = this.getAll(name);\n            for (const value of values) {\n                yield [name, value];\n            }\n        }\n    }\n    *values() {\n        for (const [, value] of this) {\n            yield value;\n        }\n    }\n    [(_FormData_setEntry = function _FormData_setEntry({ name, rawValue, append, fileName, argsLength }) {\n        const methodName = append ? \"append\" : \"set\";\n        if (argsLength < 2) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `\n                + `2 arguments required, but only ${argsLength} present.`);\n        }\n        name = String(name);\n        let value;\n        if (isFile(rawValue)) {\n            value = fileName === undefined\n                ? rawValue\n                : new File([rawValue], fileName, {\n                    type: rawValue.type,\n                    lastModified: rawValue.lastModified\n                });\n        }\n        else if (isBlob(rawValue)) {\n            value = new File([rawValue], fileName === undefined ? \"blob\" : fileName, {\n                type: rawValue.type\n            });\n        }\n        else if (fileName) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `\n                + \"parameter 2 is not of type 'Blob'.\");\n        }\n        else {\n            value = String(rawValue);\n        }\n        const values = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(name);\n        if (!values) {\n            return void __classPrivateFieldGet(this, _FormData_entries, \"f\").set(name, [value]);\n        }\n        if (!append) {\n            return void __classPrivateFieldGet(this, _FormData_entries, \"f\").set(name, [value]);\n        }\n        values.push(value);\n    }, Symbol.iterator)]() {\n        return this.entries();\n    }\n    forEach(callback, thisArg) {\n        for (const [name, value] of this) {\n            callback.call(thisArg, value, name, this);\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"FormData\";\n    }\n    [inspect.custom]() {\n        return this[Symbol.toStringTag];\n    }\n}\n","import { Blob } from \"./Blob.js\";\nexport const isBlob = (value) => value instanceof Blob;\n","import { deprecate } from \"util\";\nexport const deprecateConstructorEntries = deprecate(() => { }, \"Constructor \\\"entries\\\" argument is not spec-compliant \"\n    + \"and will be removed in next major release.\");\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as nf from 'node-fetch';\nimport * as fd from 'formdata-node';\nimport { type File, type FilePropertyBag } from 'formdata-node';\nimport KeepAliveAgent from 'agentkeepalive';\nimport { AbortController as AbortControllerPolyfill } from 'abort-controller';\nimport { ReadStream as FsReadStream } from 'node:fs';\nimport { type Agent } from 'node:http';\nimport { FormDataEncoder } from 'form-data-encoder';\nimport { Readable } from 'node:stream';\nimport { type RequestOptions } from '../core';\nimport { MultipartBody } from './MultipartBody';\nimport { type Shims } from './registry';\nimport { ReadableStream } from 'node:stream/web';\n\ntype FileFromPathOptions = Omit<FilePropertyBag, 'lastModified'>;\n\nlet fileFromPathWarned = false;\n\n/**\n * @deprecated use fs.createReadStream('./my/file.txt') instead\n */\nasync function fileFromPath(path: string): Promise<File>;\nasync function fileFromPath(path: string, filename?: string): Promise<File>;\nasync function fileFromPath(path: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, filename?: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, ...args: any[]): Promise<File> {\n  // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n  const { fileFromPath: _fileFromPath } = await import('formdata-node/file-from-path');\n\n  if (!fileFromPathWarned) {\n    console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n    fileFromPathWarned = true;\n  }\n  // @ts-ignore\n  return await _fileFromPath(path, ...args);\n}\n\nconst defaultHttpAgent: Agent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\nconst defaultHttpsAgent: Agent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\n\nasync function getMultipartRequestOptions<T = Record<string, unknown>>(\n  form: fd.FormData,\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T>> {\n  const encoder = new FormDataEncoder(form);\n  const readable = Readable.from(encoder);\n  const body = new MultipartBody(readable);\n  const headers = {\n    ...opts.headers,\n    ...encoder.headers,\n    'Content-Length': encoder.contentLength,\n  };\n\n  return { ...opts, body: body as any, headers };\n}\n\nexport function getRuntime(): Shims {\n  // Polyfill global object if needed.\n  if (typeof AbortController === 'undefined') {\n    // @ts-expect-error (the types are subtly different, but compatible in practice)\n    globalThis.AbortController = AbortControllerPolyfill;\n  }\n  return {\n    kind: 'node',\n    fetch: nf.default,\n    Request: nf.Request,\n    Response: nf.Response,\n    Headers: nf.Headers,\n    FormData: fd.FormData,\n    Blob: fd.Blob,\n    File: fd.File,\n    ReadableStream,\n    getMultipartRequestOptions,\n    getDefaultAgent: (url: string): Agent => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),\n    fileFromPath,\n    isFsReadStream: (value: any): value is FsReadStream => value instanceof FsReadStream,\n  };\n}\n","export * from \"./FormDataEncoder.js\";\nexport * from \"./FileLike.js\";\nexport * from \"./FormDataLike.js\";\nexport * from \"./util/isFileLike.js\";\nexport * from \"./util/isFormData.js\";\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FormDataEncoder_instances, _FormDataEncoder_CRLF, _FormDataEncoder_CRLF_BYTES, _FormDataEncoder_CRLF_BYTES_LENGTH, _FormDataEncoder_DASHES, _FormDataEncoder_encoder, _FormDataEncoder_footer, _FormDataEncoder_form, _FormDataEncoder_options, _FormDataEncoder_getFieldHeader;\nimport createBoundary from \"./util/createBoundary.js\";\nimport isPlainObject from \"./util/isPlainObject.js\";\nimport normalize from \"./util/normalizeValue.js\";\nimport escape from \"./util/escapeName.js\";\nimport { isFileLike } from \"./util/isFileLike.js\";\nimport { isFormData } from \"./util/isFormData.js\";\nconst defaultOptions = {\n    enableAdditionalHeaders: false\n};\nexport class FormDataEncoder {\n    constructor(form, boundaryOrOptions, options) {\n        _FormDataEncoder_instances.add(this);\n        _FormDataEncoder_CRLF.set(this, \"\\r\\n\");\n        _FormDataEncoder_CRLF_BYTES.set(this, void 0);\n        _FormDataEncoder_CRLF_BYTES_LENGTH.set(this, void 0);\n        _FormDataEncoder_DASHES.set(this, \"-\".repeat(2));\n        _FormDataEncoder_encoder.set(this, new TextEncoder());\n        _FormDataEncoder_footer.set(this, void 0);\n        _FormDataEncoder_form.set(this, void 0);\n        _FormDataEncoder_options.set(this, void 0);\n        if (!isFormData(form)) {\n            throw new TypeError(\"Expected first argument to be a FormData instance.\");\n        }\n        let boundary;\n        if (isPlainObject(boundaryOrOptions)) {\n            options = boundaryOrOptions;\n        }\n        else {\n            boundary = boundaryOrOptions;\n        }\n        if (!boundary) {\n            boundary = createBoundary();\n        }\n        if (typeof boundary !== \"string\") {\n            throw new TypeError(\"Expected boundary argument to be a string.\");\n        }\n        if (options && !isPlainObject(options)) {\n            throw new TypeError(\"Expected options argument to be an object.\");\n        }\n        __classPrivateFieldSet(this, _FormDataEncoder_form, form, \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_options, { ...defaultOptions, ...options }, \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES, __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, \"f\").byteLength, \"f\");\n        this.boundary = `form-data-boundary-${boundary}`;\n        this.contentType = `multipart/form-data; boundary=${this.boundary}`;\n        __classPrivateFieldSet(this, _FormDataEncoder_footer, __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(`${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${this.boundary}${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\").repeat(2)}`), \"f\");\n        this.contentLength = String(this.getContentLength());\n        this.headers = Object.freeze({\n            \"Content-Type\": this.contentType,\n            \"Content-Length\": this.contentLength\n        });\n        Object.defineProperties(this, {\n            boundary: { writable: false, configurable: false },\n            contentType: { writable: false, configurable: false },\n            contentLength: { writable: false, configurable: false },\n            headers: { writable: false, configurable: false }\n        });\n    }\n    getContentLength() {\n        let length = 0;\n        for (const [name, raw] of __classPrivateFieldGet(this, _FormDataEncoder_form, \"f\")) {\n            const value = isFileLike(raw) ? raw : __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(normalize(raw));\n            length += __classPrivateFieldGet(this, _FormDataEncoder_instances, \"m\", _FormDataEncoder_getFieldHeader).call(this, name, value).byteLength;\n            length += isFileLike(value) ? value.size : value.byteLength;\n            length += __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, \"f\");\n        }\n        return length + __classPrivateFieldGet(this, _FormDataEncoder_footer, \"f\").byteLength;\n    }\n    *values() {\n        for (const [name, raw] of __classPrivateFieldGet(this, _FormDataEncoder_form, \"f\").entries()) {\n            const value = isFileLike(raw) ? raw : __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(normalize(raw));\n            yield __classPrivateFieldGet(this, _FormDataEncoder_instances, \"m\", _FormDataEncoder_getFieldHeader).call(this, name, value);\n            yield value;\n            yield __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, \"f\");\n        }\n        yield __classPrivateFieldGet(this, _FormDataEncoder_footer, \"f\");\n    }\n    async *encode() {\n        for (const part of this.values()) {\n            if (isFileLike(part)) {\n                yield* part.stream();\n            }\n            else {\n                yield part;\n            }\n        }\n    }\n    [(_FormDataEncoder_CRLF = new WeakMap(), _FormDataEncoder_CRLF_BYTES = new WeakMap(), _FormDataEncoder_CRLF_BYTES_LENGTH = new WeakMap(), _FormDataEncoder_DASHES = new WeakMap(), _FormDataEncoder_encoder = new WeakMap(), _FormDataEncoder_footer = new WeakMap(), _FormDataEncoder_form = new WeakMap(), _FormDataEncoder_options = new WeakMap(), _FormDataEncoder_instances = new WeakSet(), _FormDataEncoder_getFieldHeader = function _FormDataEncoder_getFieldHeader(name, value) {\n        let header = \"\";\n        header += `${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${this.boundary}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}`;\n        header += `Content-Disposition: form-data; name=\"${escape(name)}\"`;\n        if (isFileLike(value)) {\n            header += `; filename=\"${escape(value.name)}\"${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}`;\n            header += `Content-Type: ${value.type || \"application/octet-stream\"}`;\n        }\n        if (__classPrivateFieldGet(this, _FormDataEncoder_options, \"f\").enableAdditionalHeaders === true) {\n            header += `${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}Content-Length: ${isFileLike(value) ? value.size : value.byteLength}`;\n        }\n        return __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(`${header}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\").repeat(2)}`);\n    }, Symbol.iterator)]() {\n        return this.values();\n    }\n    [Symbol.asyncIterator]() {\n        return this.encode();\n    }\n}\nexport const Encoder = FormDataEncoder;\n","const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nfunction createBoundary() {\n    let size = 16;\n    let res = \"\";\n    while (size--) {\n        res += alphabet[(Math.random() * alphabet.length) << 0];\n    }\n    return res;\n}\nexport default createBoundary;\n","const getType = (value) => (Object.prototype.toString.call(value).slice(8, -1).toLowerCase());\nfunction isPlainObject(value) {\n    if (getType(value) !== \"object\") {\n        return false;\n    }\n    const pp = Object.getPrototypeOf(value);\n    if (pp === null || pp === undefined) {\n        return true;\n    }\n    const Ctor = pp.constructor && pp.constructor.toString();\n    return Ctor === Object.toString();\n}\nexport default isPlainObject;\n","const normalizeValue = (value) => String(value)\n    .replace(/\\r|\\n/g, (match, i, str) => {\n    if ((match === \"\\r\" && str[i + 1] !== \"\\n\")\n        || (match === \"\\n\" && str[i - 1] !== \"\\r\")) {\n        return \"\\r\\n\";\n    }\n    return match;\n});\nexport default normalizeValue;\n","const escapeName = (name) => String(name)\n    .replace(/\\r/g, \"%0D\")\n    .replace(/\\n/g, \"%0A\")\n    .replace(/\"/g, \"%22\");\nexport default escapeName;\n","import isFunction from \"./isFunction.js\";\nexport const isFileLike = (value) => Boolean(value\n    && typeof value === \"object\"\n    && isFunction(value.constructor)\n    && value[Symbol.toStringTag] === \"File\"\n    && isFunction(value.stream)\n    && value.name != null\n    && value.size != null\n    && value.lastModified != null);\n","const isFunction = (value) => (typeof value === \"function\");\nexport default isFunction;\n","import isFunction from \"./isFunction.js\";\nexport const isFormData = (value) => Boolean(value\n    && isFunction(value.constructor)\n    && value[Symbol.toStringTag] === \"FormData\"\n    && isFunction(value.append)\n    && isFunction(value.getAll)\n    && isFunction(value.entries)\n    && isFunction(value[Symbol.iterator]));\nexport const isFormDataLike = isFormData;\n","export {};\n","export {};\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n  constructor(public body: any) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { castToError, Headers } from './core';\n\nexport class OpenAIError extends Error {}\n\nexport class APIError<\n  TStatus extends number | undefined = number | undefined,\n  THeaders extends Headers | undefined = Headers | undefined,\n  TError extends Object | undefined = Object | undefined,\n> extends OpenAIError {\n  /** HTTP status for the response that caused the error */\n  readonly status: TStatus;\n  /** HTTP headers for the response that caused the error */\n  readonly headers: THeaders;\n  /** JSON body of the response that caused the error */\n  readonly error: TError;\n\n  readonly code: string | null | undefined;\n  readonly param: string | null | undefined;\n  readonly type: string | undefined;\n\n  readonly request_id: string | null | undefined;\n\n  constructor(status: TStatus, error: TError, message: string | undefined, headers: THeaders) {\n    super(`${APIError.makeMessage(status, error, message)}`);\n    this.status = status;\n    this.headers = headers;\n    this.request_id = headers?.['x-request-id'];\n    this.error = error;\n\n    const data = error as Record<string, any>;\n    this.code = data?.['code'];\n    this.param = data?.['param'];\n    this.type = data?.['type'];\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg =\n      error?.message ?\n        typeof error.message === 'string' ?\n          error.message\n        : JSON.stringify(error.message)\n      : error ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return '(no status code or body)';\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ): APIError {\n    if (!status || !headers) {\n      return new APIConnectionError({ message, cause: castToError(errorResponse) });\n    }\n\n    const error = (errorResponse as Record<string, any>)?.['error'];\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new APIError(status, error, message, headers);\n  }\n}\n\nexport class APIUserAbortError extends APIError<undefined, undefined, undefined> {\n  constructor({ message }: { message?: string } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\n\nexport class APIConnectionError extends APIError<undefined, undefined, undefined> {\n  constructor({ message, cause }: { message?: string | undefined; cause?: Error | undefined }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class APIConnectionTimeoutError extends APIConnectionError {\n  constructor({ message }: { message?: string } = {}) {\n    super({ message: message ?? 'Request timed out.' });\n  }\n}\n\nexport class BadRequestError extends APIError<400, Headers> {}\n\nexport class AuthenticationError extends APIError<401, Headers> {}\n\nexport class PermissionDeniedError extends APIError<403, Headers> {}\n\nexport class NotFoundError extends APIError<404, Headers> {}\n\nexport class ConflictError extends APIError<409, Headers> {}\n\nexport class UnprocessableEntityError extends APIError<422, Headers> {}\n\nexport class RateLimitError extends APIError<429, Headers> {}\n\nexport class InternalServerError extends APIError<number, Headers> {}\n\nexport class LengthFinishReasonError extends OpenAIError {\n  constructor() {\n    super(`Could not parse response content as the length limit was reached`);\n  }\n}\n\nexport class ContentFilterFinishReasonError extends OpenAIError {\n  constructor() {\n    super(`Could not parse response content as the request was rejected by the content filter`);\n  }\n}\n","import { OpenAIError } from '../../error';\n\nexport type Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n\n  buffer: Uint8Array;\n  #carriageReturnIndex: number | null;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = new Uint8Array();\n    this.#carriageReturnIndex = null;\n  }\n\n  decode(chunk: Bytes): string[] {\n    if (chunk == null) {\n      return [];\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(this.buffer.length + binaryChunk.length);\n    newData.set(this.buffer);\n    newData.set(binaryChunk, this.buffer.length);\n    this.buffer = newData;\n\n    const lines: string[] = [];\n    let patternIndex;\n    while ((patternIndex = findNewlineIndex(this.buffer, this.#carriageReturnIndex)) != null) {\n      if (patternIndex.carriage && this.#carriageReturnIndex == null) {\n        // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n        this.#carriageReturnIndex = patternIndex.index;\n        continue;\n      }\n\n      // we got double \\r or \\rtext\\n\n      if (\n        this.#carriageReturnIndex != null &&\n        (patternIndex.index !== this.#carriageReturnIndex + 1 || patternIndex.carriage)\n      ) {\n        lines.push(this.decodeText(this.buffer.slice(0, this.#carriageReturnIndex - 1)));\n        this.buffer = this.buffer.slice(this.#carriageReturnIndex);\n        this.#carriageReturnIndex = null;\n        continue;\n      }\n\n      const endIndex =\n        this.#carriageReturnIndex !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n\n      const line = this.decodeText(this.buffer.slice(0, endIndex));\n      lines.push(line);\n\n      this.buffer = this.buffer.slice(patternIndex.index);\n      this.#carriageReturnIndex = null;\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length) {\n      return [];\n    }\n    return this.decode('\\n');\n  }\n}\n\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(\n  buffer: Uint8Array,\n  startIndex: number | null,\n): { preceding: number; index: number; carriage: boolean } | null {\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = startIndex ?? 0; i < buffer.length; i++) {\n    if (buffer[i] === newline) {\n      return { preceding: i, index: i + 1, carriage: false };\n    }\n\n    if (buffer[i] === carriage) {\n      return { preceding: i, index: i + 1, carriage: true };\n    }\n  }\n\n  return null;\n}\n\nexport function findDoubleNewlineIndex(buffer: Uint8Array): number {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (\n      buffer[i] === carriage &&\n      buffer[i + 1] === newline &&\n      i + 3 < buffer.length &&\n      buffer[i + 2] === carriage &&\n      buffer[i + 3] === newline\n    ) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n\n  return -1;\n}\n","/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function ReadableStreamToAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n","import { ReadableStream, type Response } from './_shims/index';\nimport { OpenAIError } from './error';\nimport { findDoubleNewlineIndex, LineDecoder } from './internal/decoders/line';\nimport { ReadableStreamToAsyncIterable } from './internal/stream-utils';\n\nimport { createResponseHeaders } from './core';\nimport { APIError } from './error';\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (\n            sse.event === null ||\n            sse.event.startsWith('response.') ||\n            sse.event.startsWith('transcript.')\n          ) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, createResponseHeaders(response.headers));\n            }\n\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new APIError(undefined, data.error, data.message, undefined);\n            }\n            yield { event: sse.event, data: data } as any;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = ReadableStreamToAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl: any) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nexport async function* _iterSSEMessages(\n  response: Response,\n  controller: AbortController,\n): AsyncGenerator<ServerSentEvent, void, unknown> {\n  if (!response.body) {\n    controller.abort();\n    throw new OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new LineDecoder();\n\n  const iter = ReadableStreamToAsyncIterable<Bytes>(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator: AsyncIterableIterator<Bytes>): AsyncGenerator<Uint8Array> {\n  let data = new Uint8Array();\n\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n\n    let patternIndex;\n    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n\n  if (data.length > 0) {\n    yield data;\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n","import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options?: FilePropertyBag | undefined,\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  // If we've been given a `File` we don't need to do anything\n  if (isFileLike(value)) {\n    return value;\n  }\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    // we need to convert the `Blob` into an array buffer because the `Blob` class\n    // that `node-fetch` defines is incompatible with the web standard which results\n    // in `new File` interpreting it as a string instead of binary data.\n    const data = isBlobLike(blob) ? [(await blob.arrayBuffer()) as any] : [blob];\n\n    return new File(data, name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options?.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n        ?.name}; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n","import { VERSION } from './version';\nimport { Stream } from './streaming';\nimport {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n} from './error';\nimport {\n  kind as shimsKind,\n  type Readable,\n  getDefaultAgent,\n  type Agent,\n  fetch,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n  init,\n} from './_shims/index';\n\n// try running side effects outside of _shims/index to workaround https://github.com/vercel/next.js/issues/76881\ninit();\n\nexport { type Response };\nimport { BlobLike, isBlobLike, isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\n/**\n * An alias to the builtin `Array` type so we can\n * easily alias it in import statements if there are name clashes.\n */\ntype _Array<T> = Array<T>;\n\n/**\n * An alias to the builtin `Record` type so we can\n * easily alias it in import statements if there are name clashes.\n */\ntype _Record<K extends keyof any, T> = Record<K, T>;\n\nexport type { _Array as Array, _Record as Record };\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<WithRequestID<T>> {\n  const { response } = props;\n  if (props.options.stream) {\n    debug('response', response.status, response.url, response.headers, response.body);\n\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n\n    if (props.options.__streamClass) {\n      return props.options.__streamClass.fromSSEResponse(response, props.controller) as any;\n    }\n\n    return Stream.fromSSEResponse(response, props.controller) as any;\n  }\n\n  // fetch refuses to read the body when the status code is 204.\n  if (response.status === 204) {\n    return null as WithRequestID<T>;\n  }\n\n  if (props.options.__binaryResponse) {\n    return response as unknown as WithRequestID<T>;\n  }\n\n  const contentType = response.headers.get('content-type');\n  const mediaType = contentType?.split(';')[0]?.trim();\n  const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n  if (isJSON) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return _addRequestID(json, response);\n  }\n\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  return text as unknown as WithRequestID<T>;\n}\n\ntype WithRequestID<T> =\n  T extends Array<any> | Response | AbstractPage<any> ? T\n  : T extends Record<string, any> ? T & { _request_id?: string | null }\n  : T;\n\nfunction _addRequestID<T>(value: T, response: Response): WithRequestID<T> {\n  if (!value || typeof value !== 'object' || Array.isArray(value)) {\n    return value as WithRequestID<T>;\n  }\n\n  return Object.defineProperty(value, '_request_id', {\n    value: response.headers.get('x-request-id'),\n    enumerable: false,\n  }) as WithRequestID<T>;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<WithRequestID<T>> {\n  private parsedPromise: Promise<WithRequestID<T>> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (\n      props: APIResponseProps,\n    ) => PromiseOrValue<WithRequestID<T>> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T, props: APIResponseProps) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) =>\n      _addRequestID(transform(await this.parseResponse(props), props), props.response),\n    );\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n\n  /**\n   * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n   * returned via the X-Request-ID header which is useful for debugging requests and reporting\n   * issues to OpenAI.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  async withResponse(): Promise<{ data: T; response: Response; request_id: string | null | undefined }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response, request_id: response.headers.get('x-request-id') };\n  }\n\n  private parse(): Promise<WithRequestID<T>> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse) as any as Promise<WithRequestID<T>>;\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = WithRequestID<T>, TResult2 = never>(\n    onfulfilled?: ((value: WithRequestID<T>) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<WithRequestID<T> | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<WithRequestID<T>> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries = 2,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overriddenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overriddenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(\n      Promise.resolve(opts).then(async (opts) => {\n        const body =\n          opts && isBlobLike(opts?.body) ? new DataView(await opts.body.arrayBuffer())\n          : opts?.body instanceof DataView ? opts.body\n          : opts?.body instanceof ArrayBuffer ? new DataView(opts.body)\n          : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer)\n          : opts?.body;\n        return { method, path, ...opts, body };\n      }),\n    );\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    } else if (ArrayBuffer.isView(body)) {\n      return body.byteLength.toString();\n    }\n\n    return null;\n  }\n\n  buildRequest<Req>(\n    inputOptions: FinalRequestOptions<Req>,\n    { retryCount = 0 }: { retryCount?: number } = {},\n  ): { req: RequestInit; url: string; timeout: number } {\n    const options = { ...inputOptions };\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      ArrayBuffer.isView(options.body) || (options.__binaryRequest && typeof options.body === 'string') ?\n        options.body\n      : isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    options.timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = options.timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!inputOptions.idempotencyKey) inputOptions.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = inputOptions.idempotencyKey;\n    }\n\n    const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    return { req, url, timeout: options.timeout };\n  }\n\n  private buildHeaders({\n    options,\n    headers,\n    contentLength,\n    retryCount,\n  }: {\n    options: FinalRequestOptions;\n    headers: Record<string, string | null | undefined>;\n    contentLength: string | null | undefined;\n    retryCount: number;\n  }): Record<string, string> {\n    const reqHeaders: Record<string, string> = {};\n    if (contentLength) {\n      reqHeaders['content-length'] = contentLength;\n    }\n\n    const defaultHeaders = this.defaultHeaders(options);\n    applyHeadersMut(reqHeaders, defaultHeaders);\n    applyHeadersMut(reqHeaders, headers);\n\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\n      delete reqHeaders['content-type'];\n    }\n\n    // Don't set theses headers if they were already set or removed through default headers or by the caller.\n    // We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to account\n    // for the removal case.\n    if (\n      getHeader(defaultHeaders, 'x-stainless-retry-count') === undefined &&\n      getHeader(headers, 'x-stainless-retry-count') === undefined\n    ) {\n      reqHeaders['x-stainless-retry-count'] = String(retryCount);\n    }\n    if (\n      getHeader(defaultHeaders, 'x-stainless-timeout') === undefined &&\n      getHeader(headers, 'x-stainless-timeout') === undefined &&\n      options.timeout\n    ) {\n      reqHeaders['x-stainless-timeout'] = String(Math.trunc(options.timeout / 1000));\n    }\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return reqHeaders;\n  }\n\n  /**\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\n   */\n  protected async prepareOptions(options: FinalRequestOptions): Promise<void> {}\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...(headers as any as Record<string, string>) }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ): APIError {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest<Req>(\n    optionsInput: PromiseOrValue<FinalRequestOptions<Req>>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    const maxRetries = options.maxRetries ?? this.maxRetries;\n    if (retriesRemaining == null) {\n      retriesRemaining = maxRetries;\n    }\n\n    await this.prepareOptions(options);\n\n    const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch((e) => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\n      url.search = this.stringifyQuery(query as Record<string, unknown>);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new OpenAIError(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    const fetchOptions = {\n      signal: controller.signal as any,\n      ...options,\n    };\n    if (fetchOptions.method) {\n      // Custom methods like 'patch' need to be uppercased\n      // See https://github.com/nodejs/undici/issues/2294\n      fetchOptions.method = fetchOptions.method.toUpperCase();\n    }\n\n    return (\n      // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n      this.fetch.call(undefined, url, fetchOptions).finally(() => {\n        clearTimeout(timeout);\n      })\n    );\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    let timeoutMillis: number | undefined;\n\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n    if (retryAfterMillisHeader) {\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\n      if (!Number.isNaN(timeoutMs)) {\n        timeoutMillis = timeoutMs;\n      }\n    }\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader && !timeoutMillis) {\n      const timeoutSeconds = parseFloat(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n\n    return this.makeRequest(options, retriesRemaining - 1);\n  }\n\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 8.0;\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n\n    // Apply some jitter, take up to at most 25 percent of the retry time.\n    const jitter = 1 - Math.random() * 0.25;\n\n    return sleepSeconds * jitter * 1000;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new OpenAIError(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value as any);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages(): AsyncGenerator<this> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: this = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<Item> {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) =>\n        new Page(\n          client,\n          props.response,\n          await defaultParseResponse(props),\n          props.options,\n        ) as WithRequestID<PageClass>,\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator](): AsyncGenerator<Item> {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<\n  Req = unknown | Record<string, unknown> | Readable | BlobLike | ArrayBufferView | ArrayBuffer,\n> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | null | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n\n  __metadata?: Record<string, unknown>;\n  __binaryRequest?: boolean | undefined;\n  __binaryResponse?: boolean | undefined;\n  __streamClass?: typeof Stream;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n\n  __metadata: true,\n  __binaryRequest: true,\n  __binaryResponse: true,\n  __streamClass: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req = unknown | Record<string, unknown> | Readable | DataView> =\n  RequestOptions<Req> & {\n    method: HTTPMethod;\n    path: string;\n  };\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version':\n        typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new OpenAIError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new OpenAIError(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  if (typeof err === 'object' && err !== null) {\n    try {\n      return new Error(JSON.stringify(err));\n    } catch {}\n  }\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env]?.trim() ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env)?.trim();\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders: Headers, newHeaders: Headers): void {\n  for (const k in newHeaders) {\n    if (!hasOwn(newHeaders, k)) continue;\n    const lowerKey = k.toLowerCase();\n    if (!lowerKey) continue;\n\n    const val = newHeaders[k];\n\n    if (val === null) {\n      delete targetHeaders[lowerKey];\n    } else if (val !== undefined) {\n      targetHeaders[lowerKey] = val;\n    }\n  }\n}\n\nconst SENSITIVE_HEADERS = new Set(['authorization', 'api-key']);\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\n    const modifiedArgs = args.map((arg) => {\n      if (!arg) {\n        return arg;\n      }\n\n      // Check for sensitive headers in request body 'headers' object\n      if (arg['headers']) {\n        // clone so we don't mutate\n        const modifiedArg = { ...arg, headers: { ...arg['headers'] } };\n\n        for (const header in arg['headers']) {\n          if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n            modifiedArg['headers'][header] = 'REDACTED';\n          }\n        }\n\n        return modifiedArg;\n      }\n\n      let modifiedArg = null;\n\n      // Check for sensitive headers in headers object\n      for (const header in arg) {\n        if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n          // avoid making a copy until we need to\n          modifiedArg ??= { ...arg };\n          modifiedArg[header] = 'REDACTED';\n        }\n      }\n\n      return modifiedArg ?? arg;\n    });\n    console.log(`OpenAI:DEBUG:${action}`, ...modifiedArgs);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getRequiredHeader = (headers: HeadersLike | Headers, header: string): string => {\n  const foundHeader = getHeader(headers, header);\n  if (foundHeader === undefined) {\n    throw new Error(`Could not find ${header} header`);\n  }\n  return foundHeader;\n};\n\nexport const getHeader = (headers: HeadersLike | Headers, header: string): string | undefined => {\n  const lowerCasedHeader = header.toLowerCase();\n  if (isHeadersProtocol(headers)) {\n    // to deal with the case where the header looks like Stainless-Event-Id\n    const intercapsHeader =\n      header[0]?.toUpperCase() +\n      header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n      const value = headers.get(key);\n      if (value) {\n        return value;\n      }\n    }\n  }\n\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === lowerCasedHeader) {\n      if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n        return value[0];\n      }\n      return value;\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nexport const toFloat32Array = (base64Str: string): Array<number> => {\n  if (typeof Buffer !== 'undefined') {\n    // for Node.js environment\n    const buf = Buffer.from(base64Str, 'base64');\n    return Array.from(\n      new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT),\n    );\n  } else {\n    // for legacy web platform APIs\n    const binaryStr = atob(base64Str);\n    const len = binaryStr.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryStr.charCodeAt(i);\n    }\n    return Array.from(new Float32Array(bytes.buffer));\n  }\n};\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { AbstractPage, Response, APIClient, FinalRequestOptions, PageInfo } from './core';\n\nexport interface PageResponse<Item> {\n  data: Array<Item>;\n\n  object: string;\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page<Item> extends AbstractPage<Item> implements PageResponse<Item> {\n  data: Array<Item>;\n\n  object: string;\n\n  constructor(client: APIClient, response: Response, body: PageResponse<Item>, options: FinalRequestOptions) {\n    super(client, response, body, options);\n\n    this.data = body.data || [];\n    this.object = body.object;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams(): null {\n    return null;\n  }\n\n  nextPageInfo(): null {\n    return null;\n  }\n}\n\nexport interface CursorPageResponse<Item> {\n  data: Array<Item>;\n\n  has_more: boolean;\n}\n\nexport interface CursorPageParams {\n  after?: string;\n\n  limit?: number;\n}\n\nexport class CursorPage<Item extends { id: string }>\n  extends AbstractPage<Item>\n  implements CursorPageResponse<Item>\n{\n  data: Array<Item>;\n\n  has_more: boolean;\n\n  constructor(\n    client: APIClient,\n    response: Response,\n    body: CursorPageResponse<Item>,\n    options: FinalRequestOptions,\n  ) {\n    super(client, response, body, options);\n\n    this.data = body.data || [];\n    this.has_more = body.has_more || false;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  override hasNextPage(): boolean {\n    if (this.has_more === false) {\n      return false;\n    }\n\n    return super.hasNextPage();\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams(): Partial<CursorPageParams> | null {\n    const info = this.nextPageInfo();\n    if (!info) return null;\n    if ('params' in info) return info.params;\n    const params = Object.fromEntries(info.url.searchParams);\n    if (!Object.keys(params).length) return null;\n    return params;\n  }\n\n  nextPageInfo(): PageInfo | null {\n    const data = this.getPaginatedItems();\n    if (!data.length) {\n      return null;\n    }\n\n    const id = data[data.length - 1]?.id;\n    if (!id) {\n      return null;\n    }\n\n    return { params: { after: id } };\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nexport * from './chat/index';\nexport * from './shared';\nexport { Audio, type AudioModel, type AudioResponseFormat } from './audio/audio';\nexport {\n  BatchesPage,\n  Batches,\n  type Batch,\n  type BatchError,\n  type BatchRequestCounts,\n  type BatchCreateParams,\n  type BatchListParams,\n} from './batches';\nexport { Beta } from './beta/beta';\nexport {\n  Completions,\n  type Completion,\n  type CompletionChoice,\n  type CompletionUsage,\n  type CompletionCreateParams,\n  type CompletionCreateParamsNonStreaming,\n  type CompletionCreateParamsStreaming,\n} from './completions';\nexport {\n  ContainerListResponsesPage,\n  Containers,\n  type ContainerCreateResponse,\n  type ContainerRetrieveResponse,\n  type ContainerListResponse,\n  type ContainerCreateParams,\n  type ContainerListParams,\n} from './containers/containers';\nexport {\n  Embeddings,\n  type CreateEmbeddingResponse,\n  type Embedding,\n  type EmbeddingModel,\n  type EmbeddingCreateParams,\n} from './embeddings';\nexport {\n  EvalListResponsesPage,\n  Evals,\n  type EvalCustomDataSourceConfig,\n  type EvalStoredCompletionsDataSourceConfig,\n  type EvalCreateResponse,\n  type EvalRetrieveResponse,\n  type EvalUpdateResponse,\n  type EvalListResponse,\n  type EvalDeleteResponse,\n  type EvalCreateParams,\n  type EvalUpdateParams,\n  type EvalListParams,\n} from './evals/evals';\nexport {\n  FileObjectsPage,\n  Files,\n  type FileContent,\n  type FileDeleted,\n  type FileObject,\n  type FilePurpose,\n  type FileCreateParams,\n  type FileListParams,\n} from './files';\nexport { FineTuning } from './fine-tuning/fine-tuning';\nexport { Graders } from './graders/graders';\nexport {\n  Images,\n  type Image,\n  type ImageModel,\n  type ImagesResponse,\n  type ImageCreateVariationParams,\n  type ImageEditParams,\n  type ImageGenerateParams,\n} from './images';\nexport { ModelsPage, Models, type Model, type ModelDeleted } from './models';\nexport {\n  Moderations,\n  type Moderation,\n  type ModerationImageURLInput,\n  type ModerationModel,\n  type ModerationMultiModalInput,\n  type ModerationTextInput,\n  type ModerationCreateResponse,\n  type ModerationCreateParams,\n} from './moderations';\nexport { Responses } from './responses/responses';\nexport { Uploads, type Upload, type UploadCreateParams, type UploadCompleteParams } from './uploads/uploads';\nexport {\n  VectorStoresPage,\n  VectorStoreSearchResponsesPage,\n  VectorStores,\n  type AutoFileChunkingStrategyParam,\n  type FileChunkingStrategy,\n  type FileChunkingStrategyParam,\n  type OtherFileChunkingStrategyObject,\n  type StaticFileChunkingStrategy,\n  type StaticFileChunkingStrategyObject,\n  type StaticFileChunkingStrategyObjectParam,\n  type VectorStore,\n  type VectorStoreDeleted,\n  type VectorStoreSearchResponse,\n  type VectorStoreCreateParams,\n  type VectorStoreUpdateParams,\n  type VectorStoreListParams,\n  type VectorStoreSearchParams,\n} from './vector-stores/vector-stores';\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nexport { Chat } from './chat';\nexport {\n  ChatCompletionStoreMessagesPage,\n  ChatCompletionsPage,\n  Completions,\n  type ChatCompletion,\n  type ChatCompletionAssistantMessageParam,\n  type ChatCompletionAudio,\n  type ChatCompletionAudioParam,\n  type ChatCompletionChunk,\n  type ChatCompletionContentPart,\n  type ChatCompletionContentPartImage,\n  type ChatCompletionContentPartInputAudio,\n  type ChatCompletionContentPartRefusal,\n  type ChatCompletionContentPartText,\n  type ChatCompletionDeleted,\n  type ChatCompletionDeveloperMessageParam,\n  type ChatCompletionFunctionCallOption,\n  type ChatCompletionFunctionMessageParam,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionMessageToolCall,\n  type ChatCompletionModality,\n  type ChatCompletionNamedToolChoice,\n  type ChatCompletionPredictionContent,\n  type ChatCompletionRole,\n  type ChatCompletionStoreMessage,\n  type ChatCompletionStreamOptions,\n  type ChatCompletionSystemMessageParam,\n  type ChatCompletionTokenLogprob,\n  type ChatCompletionTool,\n  type ChatCompletionToolChoiceOption,\n  type ChatCompletionToolMessageParam,\n  type ChatCompletionUserMessageParam,\n  type CreateChatCompletionRequestMessage,\n  type ChatCompletionCreateParams,\n  type CompletionCreateParams,\n  type ChatCompletionCreateParamsNonStreaming,\n  type CompletionCreateParamsNonStreaming,\n  type ChatCompletionCreateParamsStreaming,\n  type CompletionCreateParamsStreaming,\n  type ChatCompletionUpdateParams,\n  type CompletionUpdateParams,\n  type ChatCompletionListParams,\n  type CompletionListParams,\n} from './completions/index';\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Shared from '../shared';\nimport * as CompletionsAPI from './completions/completions';\nimport {\n  ChatCompletion,\n  ChatCompletionAssistantMessageParam,\n  ChatCompletionAudio,\n  ChatCompletionAudioParam,\n  ChatCompletionChunk,\n  ChatCompletionContentPart,\n  ChatCompletionContentPartImage,\n  ChatCompletionContentPartInputAudio,\n  ChatCompletionContentPartRefusal,\n  ChatCompletionContentPartText,\n  ChatCompletionCreateParams,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionCreateParamsStreaming,\n  ChatCompletionDeleted,\n  ChatCompletionDeveloperMessageParam,\n  ChatCompletionFunctionCallOption,\n  ChatCompletionFunctionMessageParam,\n  ChatCompletionListParams,\n  ChatCompletionMessage,\n  ChatCompletionMessageParam,\n  ChatCompletionMessageToolCall,\n  ChatCompletionModality,\n  ChatCompletionNamedToolChoice,\n  ChatCompletionPredictionContent,\n  ChatCompletionReasoningEffort,\n  ChatCompletionRole,\n  ChatCompletionStoreMessage,\n  ChatCompletionStreamOptions,\n  ChatCompletionSystemMessageParam,\n  ChatCompletionTokenLogprob,\n  ChatCompletionTool,\n  ChatCompletionToolChoiceOption,\n  ChatCompletionToolMessageParam,\n  ChatCompletionUpdateParams,\n  ChatCompletionUserMessageParam,\n  ChatCompletionsPage,\n  CompletionCreateParams,\n  CompletionCreateParamsNonStreaming,\n  CompletionCreateParamsStreaming,\n  CompletionListParams,\n  CompletionUpdateParams,\n  Completions,\n  CreateChatCompletionRequestMessage,\n} from './completions/completions';\n\nexport class Chat extends APIResource {\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\n}\n\nexport type ChatModel = Shared.ChatModel;\n\nChat.Completions = Completions;\nChat.ChatCompletionsPage = ChatCompletionsPage;\n\nexport declare namespace Chat {\n  export { type ChatModel as ChatModel };\n\n  export {\n    Completions as Completions,\n    type ChatCompletion as ChatCompletion,\n    type ChatCompletionAssistantMessageParam as ChatCompletionAssistantMessageParam,\n    type ChatCompletionAudio as ChatCompletionAudio,\n    type ChatCompletionAudioParam as ChatCompletionAudioParam,\n    type ChatCompletionChunk as ChatCompletionChunk,\n    type ChatCompletionContentPart as ChatCompletionContentPart,\n    type ChatCompletionContentPartImage as ChatCompletionContentPartImage,\n    type ChatCompletionContentPartInputAudio as ChatCompletionContentPartInputAudio,\n    type ChatCompletionContentPartRefusal as ChatCompletionContentPartRefusal,\n    type ChatCompletionContentPartText as ChatCompletionContentPartText,\n    type ChatCompletionDeleted as ChatCompletionDeleted,\n    type ChatCompletionDeveloperMessageParam as ChatCompletionDeveloperMessageParam,\n    type ChatCompletionFunctionCallOption as ChatCompletionFunctionCallOption,\n    type ChatCompletionFunctionMessageParam as ChatCompletionFunctionMessageParam,\n    type ChatCompletionMessage as ChatCompletionMessage,\n    type ChatCompletionMessageParam as ChatCompletionMessageParam,\n    type ChatCompletionMessageToolCall as ChatCompletionMessageToolCall,\n    type ChatCompletionModality as ChatCompletionModality,\n    type ChatCompletionNamedToolChoice as ChatCompletionNamedToolChoice,\n    type ChatCompletionPredictionContent as ChatCompletionPredictionContent,\n    type ChatCompletionRole as ChatCompletionRole,\n    type ChatCompletionStoreMessage as ChatCompletionStoreMessage,\n    type ChatCompletionStreamOptions as ChatCompletionStreamOptions,\n    type ChatCompletionSystemMessageParam as ChatCompletionSystemMessageParam,\n    type ChatCompletionTokenLogprob as ChatCompletionTokenLogprob,\n    type ChatCompletionTool as ChatCompletionTool,\n    type ChatCompletionToolChoiceOption as ChatCompletionToolChoiceOption,\n    type ChatCompletionToolMessageParam as ChatCompletionToolMessageParam,\n    type ChatCompletionUserMessageParam as ChatCompletionUserMessageParam,\n    type CreateChatCompletionRequestMessage as CreateChatCompletionRequestMessage,\n    type ChatCompletionReasoningEffort as ChatCompletionReasoningEffort,\n    ChatCompletionsPage as ChatCompletionsPage,\n    type ChatCompletionCreateParams as ChatCompletionCreateParams,\n    type CompletionCreateParams as CompletionCreateParams,\n    type ChatCompletionCreateParamsNonStreaming as ChatCompletionCreateParamsNonStreaming,\n    type CompletionCreateParamsNonStreaming as CompletionCreateParamsNonStreaming,\n    type ChatCompletionCreateParamsStreaming as ChatCompletionCreateParamsStreaming,\n    type CompletionCreateParamsStreaming as CompletionCreateParamsStreaming,\n    type ChatCompletionUpdateParams as ChatCompletionUpdateParams,\n    type CompletionUpdateParams as CompletionUpdateParams,\n    type ChatCompletionListParams as ChatCompletionListParams,\n    type CompletionListParams as CompletionListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport type { OpenAI } from './index';\n\nexport class APIResource {\n  protected _client: OpenAI;\n\n  constructor(client: OpenAI) {\n    this._client = client;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport { APIPromise } from '../../../core';\nimport * as Core from '../../../core';\nimport * as CompletionsCompletionsAPI from './completions';\nimport * as CompletionsAPI from '../../completions';\nimport * as Shared from '../../shared';\nimport * as MessagesAPI from './messages';\nimport { MessageListParams, Messages } from './messages';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\nimport { Stream } from '../../../streaming';\n\nexport class Completions extends APIResource {\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this._client);\n\n  /**\n   * **Starting a new project?** We recommend trying\n   * [Responses](https://platform.openai.com/docs/api-reference/responses) to take\n   * advantage of the latest OpenAI platform features. Compare\n   * [Chat Completions with Responses](https://platform.openai.com/docs/guides/responses-vs-chat-completions?api-mode=responses).\n   *\n   * ---\n   *\n   * Creates a model response for the given chat conversation. Learn more in the\n   * [text generation](https://platform.openai.com/docs/guides/text-generation),\n   * [vision](https://platform.openai.com/docs/guides/vision), and\n   * [audio](https://platform.openai.com/docs/guides/audio) guides.\n   *\n   * Parameter support can differ depending on the model used to generate the\n   * response, particularly for newer reasoning models. Parameters that are only\n   * supported for reasoning models are noted below. For the current state of\n   * unsupported parameters in reasoning models,\n   * [refer to the reasoning guide](https://platform.openai.com/docs/guides/reasoning).\n   *\n   * @example\n   * ```ts\n   * const chatCompletion = await client.chat.completions.create(\n   *   {\n   *     messages: [{ content: 'string', role: 'developer' }],\n   *     model: 'gpt-4o',\n   *   },\n   * );\n   * ```\n   */\n  create(\n    body: ChatCompletionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk>>;\n  create(\n    body: ChatCompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion> | APIPromise<Stream<ChatCompletionChunk>> {\n    return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<ChatCompletion>\n      | APIPromise<Stream<ChatCompletionChunk>>;\n  }\n\n  /**\n   * Get a stored chat completion. Only Chat Completions that have been created with\n   * the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * const chatCompletion =\n   *   await client.chat.completions.retrieve('completion_id');\n   * ```\n   */\n  retrieve(completionId: string, options?: Core.RequestOptions): Core.APIPromise<ChatCompletion> {\n    return this._client.get(`/chat/completions/${completionId}`, options);\n  }\n\n  /**\n   * Modify a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be modified. Currently, the only\n   * supported modification is to update the `metadata` field.\n   *\n   * @example\n   * ```ts\n   * const chatCompletion = await client.chat.completions.update(\n   *   'completion_id',\n   *   { metadata: { foo: 'string' } },\n   * );\n   * ```\n   */\n  update(\n    completionId: string,\n    body: ChatCompletionUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ChatCompletion> {\n    return this._client.post(`/chat/completions/${completionId}`, { body, ...options });\n  }\n\n  /**\n   * List stored Chat Completions. Only Chat Completions that have been stored with\n   * the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const chatCompletion of client.chat.completions.list()) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    query?: ChatCompletionListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionsPage, ChatCompletion>;\n  list(options?: Core.RequestOptions): Core.PagePromise<ChatCompletionsPage, ChatCompletion>;\n  list(\n    query: ChatCompletionListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionsPage, ChatCompletion> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/chat/completions', ChatCompletionsPage, { query, ...options });\n  }\n\n  /**\n   * Delete a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be deleted.\n   *\n   * @example\n   * ```ts\n   * const chatCompletionDeleted =\n   *   await client.chat.completions.del('completion_id');\n   * ```\n   */\n  del(completionId: string, options?: Core.RequestOptions): Core.APIPromise<ChatCompletionDeleted> {\n    return this._client.delete(`/chat/completions/${completionId}`, options);\n  }\n}\n\nexport class ChatCompletionsPage extends CursorPage<ChatCompletion> {}\n\nexport class ChatCompletionStoreMessagesPage extends CursorPage<ChatCompletionStoreMessage> {}\n\n/**\n * Represents a chat completion response returned by model, based on the provided\n * input.\n */\nexport interface ChatCompletion {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletion.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for the chat completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion`.\n   */\n  object: 'chat.completion';\n\n  /**\n   * Specifies the latency tier to use for processing the request. This parameter is\n   * relevant for customers subscribed to the scale tier service:\n   *\n   * - If set to 'auto', and the Project is Scale tier enabled, the system will\n   *   utilize scale tier credits until they are exhausted.\n   * - If set to 'auto', and the Project is not Scale tier enabled, the request will\n   *   be processed using the default service tier with a lower uptime SLA and no\n   *   latency guarentee.\n   * - If set to 'default', the request will be processed using the default service\n   *   tier with a lower uptime SLA and no latency guarentee.\n   * - If set to 'flex', the request will be processed with the Flex Processing\n   *   service tier.\n   *   [Learn more](https://platform.openai.com/docs/guides/flex-processing).\n   * - When not set, the default behavior is 'auto'.\n   *\n   * When this parameter is set, the response body will include the `service_tier`\n   * utilized.\n   */\n  service_tier?: 'auto' | 'default' | 'flex' | null;\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: CompletionsAPI.CompletionUsage;\n}\n\nexport namespace ChatCompletion {\n  export interface Choice {\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, `tool_calls` if the\n     * model called a tool, or `function_call` (deprecated) if the model called a\n     * function.\n     */\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call';\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs: Choice.Logprobs | null;\n\n    /**\n     * A chat completion message generated by the model.\n     */\n    message: CompletionsCompletionsAPI.ChatCompletionMessage;\n  }\n\n  export namespace Choice {\n    /**\n     * Log probability information for the choice.\n     */\n    export interface Logprobs {\n      /**\n       * A list of message content tokens with log probability information.\n       */\n      content: Array<CompletionsCompletionsAPI.ChatCompletionTokenLogprob> | null;\n\n      /**\n       * A list of message refusal tokens with log probability information.\n       */\n      refusal: Array<CompletionsCompletionsAPI.ChatCompletionTokenLogprob> | null;\n    }\n  }\n}\n\n/**\n * Messages sent by the model in response to user messages.\n */\nexport interface ChatCompletionAssistantMessageParam {\n  /**\n   * The role of the messages author, in this case `assistant`.\n   */\n  role: 'assistant';\n\n  /**\n   * Data about a previous audio response from the model.\n   * [Learn more](https://platform.openai.com/docs/guides/audio).\n   */\n  audio?: ChatCompletionAssistantMessageParam.Audio | null;\n\n  /**\n   * The contents of the assistant message. Required unless `tool_calls` or\n   * `function_call` is specified.\n   */\n  content?: string | Array<ChatCompletionContentPartText | ChatCompletionContentPartRefusal> | null;\n\n  /**\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n   * function that should be called, as generated by the model.\n   */\n  function_call?: ChatCompletionAssistantMessageParam.FunctionCall | null;\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n\n  /**\n   * The refusal message by the assistant.\n   */\n  refusal?: string | null;\n\n  /**\n   * The tool calls generated by the model, such as function calls.\n   */\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\n}\n\nexport namespace ChatCompletionAssistantMessageParam {\n  /**\n   * Data about a previous audio response from the model.\n   * [Learn more](https://platform.openai.com/docs/guides/audio).\n   */\n  export interface Audio {\n    /**\n     * Unique identifier for a previous audio response from the model.\n     */\n    id: string;\n  }\n\n  /**\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n   * function that should be called, as generated by the model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * If the audio output modality is requested, this object contains data about the\n * audio response from the model.\n * [Learn more](https://platform.openai.com/docs/guides/audio).\n */\nexport interface ChatCompletionAudio {\n  /**\n   * Unique identifier for this audio response.\n   */\n  id: string;\n\n  /**\n   * Base64 encoded audio bytes generated by the model, in the format specified in\n   * the request.\n   */\n  data: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when this audio response will no longer be\n   * accessible on the server for use in multi-turn conversations.\n   */\n  expires_at: number;\n\n  /**\n   * Transcript of the audio generated by the model.\n   */\n  transcript: string;\n}\n\n/**\n * Parameters for audio output. Required when audio output is requested with\n * `modalities: [\"audio\"]`.\n * [Learn more](https://platform.openai.com/docs/guides/audio).\n */\nexport interface ChatCompletionAudioParam {\n  /**\n   * Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`,\n   * or `pcm16`.\n   */\n  format: 'wav' | 'aac' | 'mp3' | 'flac' | 'opus' | 'pcm16';\n\n  /**\n   * The voice the model uses to respond. Supported voices are `alloy`, `ash`,\n   * `ballad`, `coral`, `echo`, `fable`, `nova`, `onyx`, `sage`, and `shimmer`.\n   */\n  voice:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by the model,\n * based on the provided input.\n * [Learn more](https://platform.openai.com/docs/guides/streaming-responses).\n */\nexport interface ChatCompletionChunk {\n  /**\n   * A unique identifier for the chat completion. Each chunk has the same ID.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can contain more than one elements if `n` is\n   * greater than 1. Can also be empty for the last chunk if you set\n   * `stream_options: {\"include_usage\": true}`.\n   */\n  choices: Array<ChatCompletionChunk.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created. Each\n   * chunk has the same timestamp.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion.chunk`.\n   */\n  object: 'chat.completion.chunk';\n\n  /**\n   * Specifies the latency tier to use for processing the request. This parameter is\n   * relevant for customers subscribed to the scale tier service:\n   *\n   * - If set to 'auto', and the Project is Scale tier enabled, the system will\n   *   utilize scale tier credits until they are exhausted.\n   * - If set to 'auto', and the Project is not Scale tier enabled, the request will\n   *   be processed using the default service tier with a lower uptime SLA and no\n   *   latency guarentee.\n   * - If set to 'default', the request will be processed using the default service\n   *   tier with a lower uptime SLA and no latency guarentee.\n   * - If set to 'flex', the request will be processed with the Flex Processing\n   *   service tier.\n   *   [Learn more](https://platform.openai.com/docs/guides/flex-processing).\n   * - When not set, the default behavior is 'auto'.\n   *\n   * When this parameter is set, the response body will include the `service_tier`\n   * utilized.\n   */\n  service_tier?: 'auto' | 'default' | 'flex' | null;\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n\n  /**\n   * An optional field that will only be present when you set\n   * `stream_options: {\"include_usage\": true}` in your request. When present, it\n   * contains a null value **except for the last chunk** which contains the token\n   * usage statistics for the entire request.\n   *\n   * **NOTE:** If the stream is interrupted or cancelled, you may not receive the\n   * final usage chunk which contains the total token usage for the request.\n   */\n  usage?: CompletionsAPI.CompletionUsage | null;\n}\n\nexport namespace ChatCompletionChunk {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    delta: Choice.Delta;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, `tool_calls` if the\n     * model called a tool, or `function_call` (deprecated) if the model called a\n     * function.\n     */\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call' | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs?: Choice.Logprobs | null;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Delta {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      /**\n       * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n       * function that should be called, as generated by the model.\n       */\n      function_call?: Delta.FunctionCall;\n\n      /**\n       * The refusal message generated by the model.\n       */\n      refusal?: string | null;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: 'developer' | 'system' | 'user' | 'assistant' | 'tool';\n\n      tool_calls?: Array<Delta.ToolCall>;\n    }\n\n    export namespace Delta {\n      /**\n       * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n       * function that should be called, as generated by the model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n\n      export interface ToolCall {\n        index: number;\n\n        /**\n         * The ID of the tool call.\n         */\n        id?: string;\n\n        function?: ToolCall.Function;\n\n        /**\n         * The type of the tool. Currently, only `function` is supported.\n         */\n        type?: 'function';\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          /**\n           * The arguments to call the function with, as generated by the model in JSON\n           * format. Note that the model does not always generate valid JSON, and may\n           * hallucinate parameters not defined by your function schema. Validate the\n           * arguments in your code before calling your function.\n           */\n          arguments?: string;\n\n          /**\n           * The name of the function to call.\n           */\n          name?: string;\n        }\n      }\n    }\n\n    /**\n     * Log probability information for the choice.\n     */\n    export interface Logprobs {\n      /**\n       * A list of message content tokens with log probability information.\n       */\n      content: Array<CompletionsCompletionsAPI.ChatCompletionTokenLogprob> | null;\n\n      /**\n       * A list of message refusal tokens with log probability information.\n       */\n      refusal: Array<CompletionsCompletionsAPI.ChatCompletionTokenLogprob> | null;\n    }\n  }\n}\n\n/**\n * Learn about\n * [text inputs](https://platform.openai.com/docs/guides/text-generation).\n */\nexport type ChatCompletionContentPart =\n  | ChatCompletionContentPartText\n  | ChatCompletionContentPartImage\n  | ChatCompletionContentPartInputAudio\n  | ChatCompletionContentPart.File;\n\nexport namespace ChatCompletionContentPart {\n  /**\n   * Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text\n   * generation.\n   */\n  export interface File {\n    file: File.File;\n\n    /**\n     * The type of the content part. Always `file`.\n     */\n    type: 'file';\n  }\n\n  export namespace File {\n    export interface File {\n      /**\n       * The base64 encoded file data, used when passing the file to the model as a\n       * string.\n       */\n      file_data?: string;\n\n      /**\n       * The ID of an uploaded file to use as input.\n       */\n      file_id?: string;\n\n      /**\n       * The name of the file, used when passing the file to the model as a string.\n       */\n      filename?: string;\n    }\n  }\n}\n\n/**\n * Learn about [image inputs](https://platform.openai.com/docs/guides/vision).\n */\nexport interface ChatCompletionContentPartImage {\n  image_url: ChatCompletionContentPartImage.ImageURL;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'image_url';\n}\n\nexport namespace ChatCompletionContentPartImage {\n  export interface ImageURL {\n    /**\n     * Either a URL of the image or the base64 encoded image data.\n     */\n    url: string;\n\n    /**\n     * Specifies the detail level of the image. Learn more in the\n     * [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).\n     */\n    detail?: 'auto' | 'low' | 'high';\n  }\n}\n\n/**\n * Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).\n */\nexport interface ChatCompletionContentPartInputAudio {\n  input_audio: ChatCompletionContentPartInputAudio.InputAudio;\n\n  /**\n   * The type of the content part. Always `input_audio`.\n   */\n  type: 'input_audio';\n}\n\nexport namespace ChatCompletionContentPartInputAudio {\n  export interface InputAudio {\n    /**\n     * Base64 encoded audio data.\n     */\n    data: string;\n\n    /**\n     * The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n     */\n    format: 'wav' | 'mp3';\n  }\n}\n\nexport interface ChatCompletionContentPartRefusal {\n  /**\n   * The refusal message generated by the model.\n   */\n  refusal: string;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'refusal';\n}\n\n/**\n * Learn about\n * [text inputs](https://platform.openai.com/docs/guides/text-generation).\n */\nexport interface ChatCompletionContentPartText {\n  /**\n   * The text content.\n   */\n  text: string;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'text';\n}\n\nexport interface ChatCompletionDeleted {\n  /**\n   * The ID of the chat completion that was deleted.\n   */\n  id: string;\n\n  /**\n   * Whether the chat completion was deleted.\n   */\n  deleted: boolean;\n\n  /**\n   * The type of object being deleted.\n   */\n  object: 'chat.completion.deleted';\n}\n\n/**\n * Developer-provided instructions that the model should follow, regardless of\n * messages sent by the user. With o1 models and newer, `developer` messages\n * replace the previous `system` messages.\n */\nexport interface ChatCompletionDeveloperMessageParam {\n  /**\n   * The contents of the developer message.\n   */\n  content: string | Array<ChatCompletionContentPartText>;\n\n  /**\n   * The role of the messages author, in this case `developer`.\n   */\n  role: 'developer';\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n}\n\n/**\n * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model\n * to call that function.\n */\nexport interface ChatCompletionFunctionCallOption {\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n}\n\n/**\n * @deprecated\n */\nexport interface ChatCompletionFunctionMessageParam {\n  /**\n   * The contents of the function message.\n   */\n  content: string | null;\n\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n\n  /**\n   * The role of the messages author, in this case `function`.\n   */\n  role: 'function';\n}\n\n/**\n * A chat completion message generated by the model.\n */\nexport interface ChatCompletionMessage {\n  /**\n   * The contents of the message.\n   */\n  content: string | null;\n\n  /**\n   * The refusal message generated by the model.\n   */\n  refusal: string | null;\n\n  /**\n   * The role of the author of this message.\n   */\n  role: 'assistant';\n\n  /**\n   * Annotations for the message, when applicable, as when using the\n   * [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).\n   */\n  annotations?: Array<ChatCompletionMessage.Annotation>;\n\n  /**\n   * If the audio output modality is requested, this object contains data about the\n   * audio response from the model.\n   * [Learn more](https://platform.openai.com/docs/guides/audio).\n   */\n  audio?: ChatCompletionAudio | null;\n\n  /**\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n   * function that should be called, as generated by the model.\n   */\n  function_call?: ChatCompletionMessage.FunctionCall | null;\n\n  /**\n   * The tool calls generated by the model, such as function calls.\n   */\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\n}\n\nexport namespace ChatCompletionMessage {\n  /**\n   * A URL citation when using web search.\n   */\n  export interface Annotation {\n    /**\n     * The type of the URL citation. Always `url_citation`.\n     */\n    type: 'url_citation';\n\n    /**\n     * A URL citation when using web search.\n     */\n    url_citation: Annotation.URLCitation;\n  }\n\n  export namespace Annotation {\n    /**\n     * A URL citation when using web search.\n     */\n    export interface URLCitation {\n      /**\n       * The index of the last character of the URL citation in the message.\n       */\n      end_index: number;\n\n      /**\n       * The index of the first character of the URL citation in the message.\n       */\n      start_index: number;\n\n      /**\n       * The title of the web resource.\n       */\n      title: string;\n\n      /**\n       * The URL of the web resource.\n       */\n      url: string;\n    }\n  }\n\n  /**\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\n   * function that should be called, as generated by the model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * Developer-provided instructions that the model should follow, regardless of\n * messages sent by the user. With o1 models and newer, `developer` messages\n * replace the previous `system` messages.\n */\nexport type ChatCompletionMessageParam =\n  | ChatCompletionDeveloperMessageParam\n  | ChatCompletionSystemMessageParam\n  | ChatCompletionUserMessageParam\n  | ChatCompletionAssistantMessageParam\n  | ChatCompletionToolMessageParam\n  | ChatCompletionFunctionMessageParam;\n\nexport interface ChatCompletionMessageToolCall {\n  /**\n   * The ID of the tool call.\n   */\n  id: string;\n\n  /**\n   * The function that the model called.\n   */\n  function: ChatCompletionMessageToolCall.Function;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\nexport namespace ChatCompletionMessageToolCall {\n  /**\n   * The function that the model called.\n   */\n  export interface Function {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\nexport type ChatCompletionModality = 'text' | 'audio';\n\n/**\n * Specifies a tool the model should use. Use to force the model to call a specific\n * function.\n */\nexport interface ChatCompletionNamedToolChoice {\n  function: ChatCompletionNamedToolChoice.Function;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\nexport namespace ChatCompletionNamedToolChoice {\n  export interface Function {\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * Static predicted output content, such as the content of a text file that is\n * being regenerated.\n */\nexport interface ChatCompletionPredictionContent {\n  /**\n   * The content that should be matched when generating a model response. If\n   * generated tokens would match this content, the entire model response can be\n   * returned much more quickly.\n   */\n  content: string | Array<ChatCompletionContentPartText>;\n\n  /**\n   * The type of the predicted content you want to provide. This type is currently\n   * always `content`.\n   */\n  type: 'content';\n}\n\n/**\n * The role of the author of a message\n */\nexport type ChatCompletionRole = 'developer' | 'system' | 'user' | 'assistant' | 'tool' | 'function';\n\n/**\n * A chat completion message generated by the model.\n */\nexport interface ChatCompletionStoreMessage extends ChatCompletionMessage {\n  /**\n   * The identifier of the chat message.\n   */\n  id: string;\n}\n\n/**\n * Options for streaming response. Only set this when you set `stream: true`.\n */\nexport interface ChatCompletionStreamOptions {\n  /**\n   * If set, an additional chunk will be streamed before the `data: [DONE]` message.\n   * The `usage` field on this chunk shows the token usage statistics for the entire\n   * request, and the `choices` field will always be an empty array.\n   *\n   * All other chunks will also include a `usage` field, but with a null value.\n   * **NOTE:** If the stream is interrupted, you may not receive the final usage\n   * chunk which contains the total token usage for the request.\n   */\n  include_usage?: boolean;\n}\n\n/**\n * Developer-provided instructions that the model should follow, regardless of\n * messages sent by the user. With o1 models and newer, use `developer` messages\n * for this purpose instead.\n */\nexport interface ChatCompletionSystemMessageParam {\n  /**\n   * The contents of the system message.\n   */\n  content: string | Array<ChatCompletionContentPartText>;\n\n  /**\n   * The role of the messages author, in this case `system`.\n   */\n  role: 'system';\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n}\n\nexport interface ChatCompletionTokenLogprob {\n  /**\n   * The token.\n   */\n  token: string;\n\n  /**\n   * A list of integers representing the UTF-8 bytes representation of the token.\n   * Useful in instances where characters are represented by multiple tokens and\n   * their byte representations must be combined to generate the correct text\n   * representation. Can be `null` if there is no bytes representation for the token.\n   */\n  bytes: Array<number> | null;\n\n  /**\n   * The log probability of this token, if it is within the top 20 most likely\n   * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\n   * unlikely.\n   */\n  logprob: number;\n\n  /**\n   * List of the most likely tokens and their log probability, at this token\n   * position. In rare cases, there may be fewer than the number of requested\n   * `top_logprobs` returned.\n   */\n  top_logprobs: Array<ChatCompletionTokenLogprob.TopLogprob>;\n}\n\nexport namespace ChatCompletionTokenLogprob {\n  export interface TopLogprob {\n    /**\n     * The token.\n     */\n    token: string;\n\n    /**\n     * A list of integers representing the UTF-8 bytes representation of the token.\n     * Useful in instances where characters are represented by multiple tokens and\n     * their byte representations must be combined to generate the correct text\n     * representation. Can be `null` if there is no bytes representation for the token.\n     */\n    bytes: Array<number> | null;\n\n    /**\n     * The log probability of this token, if it is within the top 20 most likely\n     * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\n     * unlikely.\n     */\n    logprob: number;\n  }\n}\n\nexport interface ChatCompletionTool {\n  function: Shared.FunctionDefinition;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\n/**\n * Controls which (if any) tool is called by the model. `none` means the model will\n * not call any tool and instead generates a message. `auto` means the model can\n * pick between generating a message or calling one or more tools. `required` means\n * the model must call one or more tools. Specifying a particular tool via\n * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n * call that tool.\n *\n * `none` is the default when no tools are present. `auto` is the default if tools\n * are present.\n */\nexport type ChatCompletionToolChoiceOption = 'none' | 'auto' | 'required' | ChatCompletionNamedToolChoice;\n\nexport interface ChatCompletionToolMessageParam {\n  /**\n   * The contents of the tool message.\n   */\n  content: string | Array<ChatCompletionContentPartText>;\n\n  /**\n   * The role of the messages author, in this case `tool`.\n   */\n  role: 'tool';\n\n  /**\n   * Tool call that this message is responding to.\n   */\n  tool_call_id: string;\n}\n\n/**\n * Messages sent by an end user, containing prompts or additional context\n * information.\n */\nexport interface ChatCompletionUserMessageParam {\n  /**\n   * The contents of the user message.\n   */\n  content: string | Array<ChatCompletionContentPart>;\n\n  /**\n   * The role of the messages author, in this case `user`.\n   */\n  role: 'user';\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n}\n\n/**\n * @deprecated ChatCompletionMessageParam should be used instead\n */\nexport type CreateChatCompletionRequestMessage = ChatCompletionMessageParam;\n\nexport type ChatCompletionReasoningEffort = Shared.ReasoningEffort | null;\n\nexport type ChatCompletionCreateParams =\n  | ChatCompletionCreateParamsNonStreaming\n  | ChatCompletionCreateParamsStreaming;\n\nexport interface ChatCompletionCreateParamsBase {\n  /**\n   * A list of messages comprising the conversation so far. Depending on the\n   * [model](https://platform.openai.com/docs/models) you use, different message\n   * types (modalities) are supported, like\n   * [text](https://platform.openai.com/docs/guides/text-generation),\n   * [images](https://platform.openai.com/docs/guides/vision), and\n   * [audio](https://platform.openai.com/docs/guides/audio).\n   */\n  messages: Array<ChatCompletionMessageParam>;\n\n  /**\n   * Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI offers a\n   * wide range of models with different capabilities, performance characteristics,\n   * and price points. Refer to the\n   * [model guide](https://platform.openai.com/docs/models) to browse and compare\n   * available models.\n   */\n  model: (string & {}) | Shared.ChatModel;\n\n  /**\n   * Parameters for audio output. Required when audio output is requested with\n   * `modalities: [\"audio\"]`.\n   * [Learn more](https://platform.openai.com/docs/guides/audio).\n   */\n  audio?: ChatCompletionAudioParam | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * @deprecated Deprecated in favor of `tool_choice`.\n   *\n   * Controls which (if any) function is called by the model.\n   *\n   * `none` means the model will not call a function and instead generates a message.\n   *\n   * `auto` means the model can pick between generating a message or calling a\n   * function.\n   *\n   * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model\n   * to call that function.\n   *\n   * `none` is the default when no functions are present. `auto` is the default if\n   * functions are present.\n   */\n  function_call?: 'none' | 'auto' | ChatCompletionFunctionCallOption;\n\n  /**\n   * @deprecated Deprecated in favor of `tools`.\n   *\n   * A list of functions the model may generate JSON inputs for.\n   */\n  functions?: Array<ChatCompletionCreateParams.Function>;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in the\n   * tokenizer) to an associated bias value from -100 to 100. Mathematically, the\n   * bias is added to the logits generated by the model prior to sampling. The exact\n   * effect will vary per model, but values between -1 and 1 should decrease or\n   * increase likelihood of selection; values like -100 or 100 should result in a ban\n   * or exclusive selection of the relevant token.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * Whether to return log probabilities of the output tokens or not. If true,\n   * returns the log probabilities of each output token returned in the `content` of\n   * `message`.\n   */\n  logprobs?: boolean | null;\n\n  /**\n   * An upper bound for the number of tokens that can be generated for a completion,\n   * including visible output tokens and\n   * [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * @deprecated The maximum number of [tokens](/tokenizer) that can be generated in\n   * the chat completion. This value can be used to control\n   * [costs](https://openai.com/api/pricing/) for text generated via API.\n   *\n   * This value is now deprecated in favor of `max_completion_tokens`, and is not\n   * compatible with\n   * [o-series models](https://platform.openai.com/docs/guides/reasoning).\n   */\n  max_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * Output types that you would like the model to generate. Most models are capable\n   * of generating text, which is the default:\n   *\n   * `[\"text\"]`\n   *\n   * The `gpt-4o-audio-preview` model can also be used to\n   * [generate audio](https://platform.openai.com/docs/guides/audio). To request that\n   * this model generate both text and audio responses, you can use:\n   *\n   * `[\"text\", \"audio\"]`\n   */\n  modalities?: Array<'text' | 'audio'> | null;\n\n  /**\n   * How many chat completion choices to generate for each input message. Note that\n   * you will be charged based on the number of generated tokens across all of the\n   * choices. Keep `n` as `1` to minimize costs.\n   */\n  n?: number | null;\n\n  /**\n   * Whether to enable\n   * [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling)\n   * during tool use.\n   */\n  parallel_tool_calls?: boolean;\n\n  /**\n   * Static predicted output content, such as the content of a text file that is\n   * being regenerated.\n   */\n  prediction?: ChatCompletionPredictionContent | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * **o-series models only**\n   *\n   * Constrains effort on reasoning for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n   * result in faster responses and fewer tokens used on reasoning in a response.\n   */\n  reasoning_effort?: Shared.ReasoningEffort | null;\n\n  /**\n   * An object specifying the format that the model must output.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n   * ensures the message the model generates is valid JSON. Using `json_schema` is\n   * preferred for models that support it.\n   */\n  response_format?:\n    | Shared.ResponseFormatText\n    | Shared.ResponseFormatJSONSchema\n    | Shared.ResponseFormatJSONObject;\n\n  /**\n   * This feature is in Beta. If specified, our system will make a best effort to\n   * sample deterministically, such that repeated requests with the same `seed` and\n   * parameters should return the same result. Determinism is not guaranteed, and you\n   * should refer to the `system_fingerprint` response parameter to monitor changes\n   * in the backend.\n   */\n  seed?: number | null;\n\n  /**\n   * Specifies the latency tier to use for processing the request. This parameter is\n   * relevant for customers subscribed to the scale tier service:\n   *\n   * - If set to 'auto', and the Project is Scale tier enabled, the system will\n   *   utilize scale tier credits until they are exhausted.\n   * - If set to 'auto', and the Project is not Scale tier enabled, the request will\n   *   be processed using the default service tier with a lower uptime SLA and no\n   *   latency guarentee.\n   * - If set to 'default', the request will be processed using the default service\n   *   tier with a lower uptime SLA and no latency guarentee.\n   * - If set to 'flex', the request will be processed with the Flex Processing\n   *   service tier.\n   *   [Learn more](https://platform.openai.com/docs/guides/flex-processing).\n   * - When not set, the default behavior is 'auto'.\n   *\n   * When this parameter is set, the response body will include the `service_tier`\n   * utilized.\n   */\n  service_tier?: 'auto' | 'default' | 'flex' | null;\n\n  /**\n   * Not supported with latest reasoning models `o3` and `o4-mini`.\n   *\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * Whether or not to store the output of this chat completion request for use in\n   * our [model distillation](https://platform.openai.com/docs/guides/distillation)\n   * or [evals](https://platform.openai.com/docs/guides/evals) products.\n   */\n  store?: boolean | null;\n\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)\n   * for more information, along with the\n   * [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)\n   * guide for more information on how to handle the streaming events.\n   */\n  stream?: boolean | null;\n\n  /**\n   * Options for streaming response. Only set this when you set `stream: true`.\n   */\n  stream_options?: ChatCompletionStreamOptions | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic. We generally recommend altering this or `top_p` but\n   * not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tool and instead generates a message. `auto` means the model can\n   * pick between generating a message or calling one or more tools. `required` means\n   * the model must call one or more tools. Specifying a particular tool via\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   *\n   * `none` is the default when no tools are present. `auto` is the default if tools\n   * are present.\n   */\n  tool_choice?: ChatCompletionToolChoiceOption;\n\n  /**\n   * A list of tools the model may call. Currently, only functions are supported as a\n   * tool. Use this to provide a list of functions the model may generate JSON inputs\n   * for. A max of 128 functions are supported.\n   */\n  tools?: Array<ChatCompletionTool>;\n\n  /**\n   * An integer between 0 and 20 specifying the number of most likely tokens to\n   * return at each token position, each with an associated log probability.\n   * `logprobs` must be set to `true` if this parameter is used.\n   */\n  top_logprobs?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A stable identifier for your end-users. Used to boost cache hit rates by better\n   * bucketing similar requests and to help OpenAI detect and prevent abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n\n  /**\n   * This tool searches the web for relevant results to use in a response. Learn more\n   * about the\n   * [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).\n   */\n  web_search_options?: ChatCompletionCreateParams.WebSearchOptions;\n}\n\nexport namespace ChatCompletionCreateParams {\n  /**\n   * @deprecated\n   */\n  export interface Function {\n    /**\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n     * underscores and dashes, with a maximum length of 64.\n     */\n    name: string;\n\n    /**\n     * A description of what the function does, used by the model to choose when and\n     * how to call the function.\n     */\n    description?: string;\n\n    /**\n     * The parameters the functions accepts, described as a JSON Schema object. See the\n     * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,\n     * and the\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n     * documentation about the format.\n     *\n     * Omitting `parameters` defines a function with an empty parameter list.\n     */\n    parameters?: Shared.FunctionParameters;\n  }\n\n  /**\n   * This tool searches the web for relevant results to use in a response. Learn more\n   * about the\n   * [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).\n   */\n  export interface WebSearchOptions {\n    /**\n     * High level guidance for the amount of context window space to use for the\n     * search. One of `low`, `medium`, or `high`. `medium` is the default.\n     */\n    search_context_size?: 'low' | 'medium' | 'high';\n\n    /**\n     * Approximate location parameters for the search.\n     */\n    user_location?: WebSearchOptions.UserLocation | null;\n  }\n\n  export namespace WebSearchOptions {\n    /**\n     * Approximate location parameters for the search.\n     */\n    export interface UserLocation {\n      /**\n       * Approximate location parameters for the search.\n       */\n      approximate: UserLocation.Approximate;\n\n      /**\n       * The type of location approximation. Always `approximate`.\n       */\n      type: 'approximate';\n    }\n\n    export namespace UserLocation {\n      /**\n       * Approximate location parameters for the search.\n       */\n      export interface Approximate {\n        /**\n         * Free text input for the city of the user, e.g. `San Francisco`.\n         */\n        city?: string;\n\n        /**\n         * The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of\n         * the user, e.g. `US`.\n         */\n        country?: string;\n\n        /**\n         * Free text input for the region of the user, e.g. `California`.\n         */\n        region?: string;\n\n        /**\n         * The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the\n         * user, e.g. `America/Los_Angeles`.\n         */\n        timezone?: string;\n      }\n    }\n  }\n\n  export type ChatCompletionCreateParamsNonStreaming =\n    CompletionsCompletionsAPI.ChatCompletionCreateParamsNonStreaming;\n  export type ChatCompletionCreateParamsStreaming =\n    CompletionsCompletionsAPI.ChatCompletionCreateParamsStreaming;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParams instead\n */\nexport type CompletionCreateParams = ChatCompletionCreateParams;\n\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)\n   * for more information, along with the\n   * [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)\n   * guide for more information on how to handle the streaming events.\n   */\n  stream?: false | null;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsNonStreaming instead\n */\nexport type CompletionCreateParamsNonStreaming = ChatCompletionCreateParamsNonStreaming;\n\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)\n   * for more information, along with the\n   * [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)\n   * guide for more information on how to handle the streaming events.\n   */\n  stream: true;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsStreaming instead\n */\nexport type CompletionCreateParamsStreaming = ChatCompletionCreateParamsStreaming;\n\nexport interface ChatCompletionUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n}\n\n/**\n * @deprecated Use ChatCompletionUpdateParams instead\n */\nexport type CompletionUpdateParams = ChatCompletionUpdateParams;\n\nexport interface ChatCompletionListParams extends CursorPageParams {\n  /**\n   * A list of metadata keys to filter the Chat Completions by. Example:\n   *\n   * `metadata[key1]=value1&metadata[key2]=value2`\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The model used to generate the Chat Completions.\n   */\n  model?: string;\n\n  /**\n   * Sort order for Chat Completions by timestamp. Use `asc` for ascending order or\n   * `desc` for descending order. Defaults to `asc`.\n   */\n  order?: 'asc' | 'desc';\n}\n\n/**\n * @deprecated Use ChatCompletionListParams instead\n */\nexport type CompletionListParams = ChatCompletionListParams;\n\nCompletions.ChatCompletionsPage = ChatCompletionsPage;\nCompletions.Messages = Messages;\n\nexport declare namespace Completions {\n  export {\n    type ChatCompletion as ChatCompletion,\n    type ChatCompletionAssistantMessageParam as ChatCompletionAssistantMessageParam,\n    type ChatCompletionAudio as ChatCompletionAudio,\n    type ChatCompletionAudioParam as ChatCompletionAudioParam,\n    type ChatCompletionChunk as ChatCompletionChunk,\n    type ChatCompletionContentPart as ChatCompletionContentPart,\n    type ChatCompletionContentPartImage as ChatCompletionContentPartImage,\n    type ChatCompletionContentPartInputAudio as ChatCompletionContentPartInputAudio,\n    type ChatCompletionContentPartRefusal as ChatCompletionContentPartRefusal,\n    type ChatCompletionContentPartText as ChatCompletionContentPartText,\n    type ChatCompletionDeleted as ChatCompletionDeleted,\n    type ChatCompletionDeveloperMessageParam as ChatCompletionDeveloperMessageParam,\n    type ChatCompletionFunctionCallOption as ChatCompletionFunctionCallOption,\n    type ChatCompletionFunctionMessageParam as ChatCompletionFunctionMessageParam,\n    type ChatCompletionMessage as ChatCompletionMessage,\n    type ChatCompletionMessageParam as ChatCompletionMessageParam,\n    type ChatCompletionMessageToolCall as ChatCompletionMessageToolCall,\n    type ChatCompletionModality as ChatCompletionModality,\n    type ChatCompletionNamedToolChoice as ChatCompletionNamedToolChoice,\n    type ChatCompletionPredictionContent as ChatCompletionPredictionContent,\n    type ChatCompletionRole as ChatCompletionRole,\n    type ChatCompletionStoreMessage as ChatCompletionStoreMessage,\n    type ChatCompletionStreamOptions as ChatCompletionStreamOptions,\n    type ChatCompletionSystemMessageParam as ChatCompletionSystemMessageParam,\n    type ChatCompletionTokenLogprob as ChatCompletionTokenLogprob,\n    type ChatCompletionTool as ChatCompletionTool,\n    type ChatCompletionToolChoiceOption as ChatCompletionToolChoiceOption,\n    type ChatCompletionToolMessageParam as ChatCompletionToolMessageParam,\n    type ChatCompletionUserMessageParam as ChatCompletionUserMessageParam,\n    type CreateChatCompletionRequestMessage as CreateChatCompletionRequestMessage,\n    type ChatCompletionReasoningEffort as ChatCompletionReasoningEffort,\n    ChatCompletionsPage as ChatCompletionsPage,\n    type ChatCompletionCreateParams as ChatCompletionCreateParams,\n    type CompletionCreateParams as CompletionCreateParams,\n    type ChatCompletionCreateParamsNonStreaming as ChatCompletionCreateParamsNonStreaming,\n    type CompletionCreateParamsNonStreaming as CompletionCreateParamsNonStreaming,\n    type ChatCompletionCreateParamsStreaming as ChatCompletionCreateParamsStreaming,\n    type CompletionCreateParamsStreaming as CompletionCreateParamsStreaming,\n    type ChatCompletionUpdateParams as ChatCompletionUpdateParams,\n    type CompletionUpdateParams as CompletionUpdateParams,\n    type ChatCompletionListParams as ChatCompletionListParams,\n    type CompletionListParams as CompletionListParams,\n  };\n\n  export { Messages as Messages, type MessageListParams as MessageListParams };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as CompletionsAPI from './completions';\nimport { ChatCompletionStoreMessagesPage } from './completions';\nimport { type CursorPageParams } from '../../../pagination';\n\nexport class Messages extends APIResource {\n  /**\n   * Get the messages in a stored chat completion. Only Chat Completions that have\n   * been created with the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\n   *   'completion_id',\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    completionId: string,\n    query?: MessageListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage>;\n  list(\n    completionId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage>;\n  list(\n    completionId: string,\n    query: MessageListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage> {\n    if (isRequestOptions(query)) {\n      return this.list(completionId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/chat/completions/${completionId}/messages`,\n      ChatCompletionStoreMessagesPage,\n      { query, ...options },\n    );\n  }\n}\n\nexport interface MessageListParams extends CursorPageParams {\n  /**\n   * Sort order for messages by timestamp. Use `asc` for ascending order or `desc`\n   * for descending order. Defaults to `asc`.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport declare namespace Messages {\n  export { type MessageListParams as MessageListParams };\n}\n\nexport { ChatCompletionStoreMessagesPage };\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as SpeechAPI from './speech';\nimport { Speech, SpeechCreateParams, SpeechModel } from './speech';\nimport * as TranscriptionsAPI from './transcriptions';\nimport {\n  Transcription,\n  TranscriptionCreateParams,\n  TranscriptionCreateParamsNonStreaming,\n  TranscriptionCreateParamsStreaming,\n  TranscriptionCreateResponse,\n  TranscriptionInclude,\n  TranscriptionSegment,\n  TranscriptionStreamEvent,\n  TranscriptionTextDeltaEvent,\n  TranscriptionTextDoneEvent,\n  TranscriptionVerbose,\n  TranscriptionWord,\n  Transcriptions,\n} from './transcriptions';\nimport * as TranslationsAPI from './translations';\nimport {\n  Translation,\n  TranslationCreateParams,\n  TranslationCreateResponse,\n  TranslationVerbose,\n  Translations,\n} from './translations';\n\nexport class Audio extends APIResource {\n  transcriptions: TranscriptionsAPI.Transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n  translations: TranslationsAPI.Translations = new TranslationsAPI.Translations(this._client);\n  speech: SpeechAPI.Speech = new SpeechAPI.Speech(this._client);\n}\n\nexport type AudioModel = 'whisper-1' | 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe';\n\n/**\n * The format of the output, in one of these options: `json`, `text`, `srt`,\n * `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`,\n * the only supported format is `json`.\n */\nexport type AudioResponseFormat = 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\nAudio.Transcriptions = Transcriptions;\nAudio.Translations = Translations;\nAudio.Speech = Speech;\n\nexport declare namespace Audio {\n  export { type AudioModel as AudioModel, type AudioResponseFormat as AudioResponseFormat };\n\n  export {\n    Transcriptions as Transcriptions,\n    type Transcription as Transcription,\n    type TranscriptionInclude as TranscriptionInclude,\n    type TranscriptionSegment as TranscriptionSegment,\n    type TranscriptionStreamEvent as TranscriptionStreamEvent,\n    type TranscriptionTextDeltaEvent as TranscriptionTextDeltaEvent,\n    type TranscriptionTextDoneEvent as TranscriptionTextDoneEvent,\n    type TranscriptionVerbose as TranscriptionVerbose,\n    type TranscriptionWord as TranscriptionWord,\n    type TranscriptionCreateResponse as TranscriptionCreateResponse,\n    type TranscriptionCreateParams as TranscriptionCreateParams,\n    type TranscriptionCreateParamsNonStreaming as TranscriptionCreateParamsNonStreaming,\n    type TranscriptionCreateParamsStreaming as TranscriptionCreateParamsStreaming,\n  };\n\n  export {\n    Translations as Translations,\n    type Translation as Translation,\n    type TranslationVerbose as TranslationVerbose,\n    type TranslationCreateResponse as TranslationCreateResponse,\n    type TranslationCreateParams as TranslationCreateParams,\n  };\n\n  export { Speech as Speech, type SpeechModel as SpeechModel, type SpeechCreateParams as SpeechCreateParams };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\nimport { type Response } from '../../_shims/index';\n\nexport class Speech extends APIResource {\n  /**\n   * Generates audio from the input text.\n   *\n   * @example\n   * ```ts\n   * const speech = await client.audio.speech.create({\n   *   input: 'input',\n   *   model: 'string',\n   *   voice: 'ash',\n   * });\n   *\n   * const content = await speech.blob();\n   * console.log(content);\n   * ```\n   */\n  create(body: SpeechCreateParams, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.post('/audio/speech', {\n      body,\n      ...options,\n      headers: { Accept: 'application/octet-stream', ...options?.headers },\n      __binaryResponse: true,\n    });\n  }\n}\n\nexport type SpeechModel = 'tts-1' | 'tts-1-hd' | 'gpt-4o-mini-tts';\n\nexport interface SpeechCreateParams {\n  /**\n   * The text to generate audio for. The maximum length is 4096 characters.\n   */\n  input: string;\n\n  /**\n   * One of the available [TTS models](https://platform.openai.com/docs/models#tts):\n   * `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n   */\n  model: (string & {}) | SpeechModel;\n\n  /**\n   * The voice to use when generating the audio. Supported voices are `alloy`, `ash`,\n   * `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and\n   * `verse`. Previews of the voices are available in the\n   * [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).\n   */\n  voice:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n\n  /**\n   * Control the voice of your generated audio with additional instructions. Does not\n   * work with `tts-1` or `tts-1-hd`.\n   */\n  instructions?: string;\n\n  /**\n   * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`,\n   * `wav`, and `pcm`.\n   */\n  response_format?: 'mp3' | 'opus' | 'aac' | 'flac' | 'wav' | 'pcm';\n\n  /**\n   * The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is\n   * the default. Does not work with `gpt-4o-mini-tts`.\n   */\n  speed?: number;\n}\n\nexport declare namespace Speech {\n  export { type SpeechModel as SpeechModel, type SpeechCreateParams as SpeechCreateParams };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\nimport * as TranscriptionsAPI from './transcriptions';\nimport * as AudioAPI from './audio';\nimport { Stream } from '../../streaming';\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   *\n   * @example\n   * ```ts\n   * const transcription =\n   *   await client.audio.transcriptions.create({\n   *     file: fs.createReadStream('speech.mp3'),\n   *     model: 'gpt-4o-transcribe',\n   *   });\n   * ```\n   */\n  create(\n    body: TranscriptionCreateParamsNonStreaming<'json' | undefined>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Transcription>;\n  create(\n    body: TranscriptionCreateParamsNonStreaming<'verbose_json'>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranscriptionVerbose>;\n  create(\n    body: TranscriptionCreateParamsNonStreaming<'srt' | 'vtt' | 'text'>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<string>;\n  create(\n    body: TranscriptionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Transcription>;\n  create(\n    body: TranscriptionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Stream<TranscriptionStreamEvent>>;\n  create(\n    body: TranscriptionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranscriptionCreateResponse | string | Stream<TranscriptionStreamEvent>>;\n  create(\n    body: TranscriptionCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranscriptionCreateResponse | string | Stream<TranscriptionStreamEvent>> {\n    return this._client.post(\n      '/audio/transcriptions',\n      Core.multipartFormRequestOptions({\n        body,\n        ...options,\n        stream: body.stream ?? false,\n        __metadata: { model: body.model },\n      }),\n    );\n  }\n}\n\n/**\n * Represents a transcription response returned by model, based on the provided\n * input.\n */\nexport interface Transcription {\n  /**\n   * The transcribed text.\n   */\n  text: string;\n\n  /**\n   * The log probabilities of the tokens in the transcription. Only returned with the\n   * models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added\n   * to the `include` array.\n   */\n  logprobs?: Array<Transcription.Logprob>;\n}\n\nexport namespace Transcription {\n  export interface Logprob {\n    /**\n     * The token in the transcription.\n     */\n    token?: string;\n\n    /**\n     * The bytes of the token.\n     */\n    bytes?: Array<number>;\n\n    /**\n     * The log probability of the token.\n     */\n    logprob?: number;\n  }\n}\n\nexport type TranscriptionInclude = 'logprobs';\n\nexport interface TranscriptionSegment {\n  /**\n   * Unique identifier of the segment.\n   */\n  id: number;\n\n  /**\n   * Average logprob of the segment. If the value is lower than -1, consider the\n   * logprobs failed.\n   */\n  avg_logprob: number;\n\n  /**\n   * Compression ratio of the segment. If the value is greater than 2.4, consider the\n   * compression failed.\n   */\n  compression_ratio: number;\n\n  /**\n   * End time of the segment in seconds.\n   */\n  end: number;\n\n  /**\n   * Probability of no speech in the segment. If the value is higher than 1.0 and the\n   * `avg_logprob` is below -1, consider this segment silent.\n   */\n  no_speech_prob: number;\n\n  /**\n   * Seek offset of the segment.\n   */\n  seek: number;\n\n  /**\n   * Start time of the segment in seconds.\n   */\n  start: number;\n\n  /**\n   * Temperature parameter used for generating the segment.\n   */\n  temperature: number;\n\n  /**\n   * Text content of the segment.\n   */\n  text: string;\n\n  /**\n   * Array of token IDs for the text content.\n   */\n  tokens: Array<number>;\n}\n\n/**\n * Emitted when there is an additional text delta. This is also the first event\n * emitted when the transcription starts. Only emitted when you\n * [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription)\n * with the `Stream` parameter set to `true`.\n */\nexport type TranscriptionStreamEvent = TranscriptionTextDeltaEvent | TranscriptionTextDoneEvent;\n\n/**\n * Emitted when there is an additional text delta. This is also the first event\n * emitted when the transcription starts. Only emitted when you\n * [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription)\n * with the `Stream` parameter set to `true`.\n */\nexport interface TranscriptionTextDeltaEvent {\n  /**\n   * The text delta that was additionally transcribed.\n   */\n  delta: string;\n\n  /**\n   * The type of the event. Always `transcript.text.delta`.\n   */\n  type: 'transcript.text.delta';\n\n  /**\n   * The log probabilities of the delta. Only included if you\n   * [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription)\n   * with the `include[]` parameter set to `logprobs`.\n   */\n  logprobs?: Array<TranscriptionTextDeltaEvent.Logprob>;\n}\n\nexport namespace TranscriptionTextDeltaEvent {\n  export interface Logprob {\n    /**\n     * The token that was used to generate the log probability.\n     */\n    token?: string;\n\n    /**\n     * The bytes that were used to generate the log probability.\n     */\n    bytes?: Array<unknown>;\n\n    /**\n     * The log probability of the token.\n     */\n    logprob?: number;\n  }\n}\n\n/**\n * Emitted when the transcription is complete. Contains the complete transcription\n * text. Only emitted when you\n * [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription)\n * with the `Stream` parameter set to `true`.\n */\nexport interface TranscriptionTextDoneEvent {\n  /**\n   * The text that was transcribed.\n   */\n  text: string;\n\n  /**\n   * The type of the event. Always `transcript.text.done`.\n   */\n  type: 'transcript.text.done';\n\n  /**\n   * The log probabilities of the individual tokens in the transcription. Only\n   * included if you\n   * [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription)\n   * with the `include[]` parameter set to `logprobs`.\n   */\n  logprobs?: Array<TranscriptionTextDoneEvent.Logprob>;\n}\n\nexport namespace TranscriptionTextDoneEvent {\n  export interface Logprob {\n    /**\n     * The token that was used to generate the log probability.\n     */\n    token?: string;\n\n    /**\n     * The bytes that were used to generate the log probability.\n     */\n    bytes?: Array<unknown>;\n\n    /**\n     * The log probability of the token.\n     */\n    logprob?: number;\n  }\n}\n\n/**\n * Represents a verbose json transcription response returned by model, based on the\n * provided input.\n */\nexport interface TranscriptionVerbose {\n  /**\n   * The duration of the input audio.\n   */\n  duration: number;\n\n  /**\n   * The language of the input audio.\n   */\n  language: string;\n\n  /**\n   * The transcribed text.\n   */\n  text: string;\n\n  /**\n   * Segments of the transcribed text and their corresponding details.\n   */\n  segments?: Array<TranscriptionSegment>;\n\n  /**\n   * Extracted words and their corresponding timestamps.\n   */\n  words?: Array<TranscriptionWord>;\n}\n\nexport interface TranscriptionWord {\n  /**\n   * End time of the word in seconds.\n   */\n  end: number;\n\n  /**\n   * Start time of the word in seconds.\n   */\n  start: number;\n\n  /**\n   * The text content of the word.\n   */\n  word: string;\n}\n\n/**\n * Represents a transcription response returned by model, based on the provided\n * input.\n */\nexport type TranscriptionCreateResponse = Transcription | TranscriptionVerbose;\n\nexport type TranscriptionCreateParams<\n  ResponseFormat extends AudioAPI.AudioResponseFormat | undefined = AudioAPI.AudioResponseFormat | undefined,\n> = TranscriptionCreateParamsNonStreaming<ResponseFormat> | TranscriptionCreateParamsStreaming;\n\nexport interface TranscriptionCreateParamsBase<\n  ResponseFormat extends AudioAPI.AudioResponseFormat | undefined = AudioAPI.AudioResponseFormat | undefined,\n> {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Core.Uploadable;\n\n  /**\n   * ID of the model to use. The options are `gpt-4o-transcribe`,\n   * `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source\n   * Whisper V2 model).\n   */\n  model: (string & {}) | AudioAPI.AudioModel;\n\n  /**\n   * Controls how the audio is cut into chunks. When set to `\"auto\"`, the server\n   * first normalizes loudness and then uses voice activity detection (VAD) to choose\n   * boundaries. `server_vad` object can be provided to tweak VAD detection\n   * parameters manually. If unset, the audio is transcribed as a single block.\n   */\n  chunking_strategy?: 'auto' | TranscriptionCreateParams.VadConfig | null;\n\n  /**\n   * Additional information to include in the transcription response. `logprobs` will\n   * return the log probabilities of the tokens in the response to understand the\n   * model's confidence in the transcription. `logprobs` only works with\n   * response_format set to `json` and only with the models `gpt-4o-transcribe` and\n   * `gpt-4o-mini-transcribe`.\n   */\n  include?: Array<TranscriptionInclude>;\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n   * format will improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n   * should match the audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the output, in one of these options: `json`, `text`, `srt`,\n   * `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`,\n   * the only supported format is `json`.\n   */\n  response_format?: ResponseFormat;\n\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n   * for more information.\n   *\n   * Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n   */\n  stream?: boolean | null;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * `response_format` must be set `verbose_json` to use timestamp granularities.\n   * Either or both of these options are supported: `word`, or `segment`. Note: There\n   * is no additional latency for segment timestamps, but generating word timestamps\n   * incurs additional latency.\n   */\n  timestamp_granularities?: Array<'word' | 'segment'>;\n}\n\nexport namespace TranscriptionCreateParams {\n  export interface VadConfig {\n    /**\n     * Must be set to `server_vad` to enable manual chunking using server side VAD.\n     */\n    type: 'server_vad';\n\n    /**\n     * Amount of audio to include before the VAD detected speech (in milliseconds).\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Duration of silence to detect speech stop (in milliseconds). With shorter values\n     * the model will respond more quickly, but may jump in on short pauses from the\n     * user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Sensitivity threshold (0.0 to 1.0) for voice activity detection. A higher\n     * threshold will require louder audio to activate the model, and thus might\n     * perform better in noisy environments.\n     */\n    threshold?: number;\n  }\n\n  export type TranscriptionCreateParamsNonStreaming = TranscriptionsAPI.TranscriptionCreateParamsNonStreaming;\n  export type TranscriptionCreateParamsStreaming = TranscriptionsAPI.TranscriptionCreateParamsStreaming;\n}\n\nexport interface TranscriptionCreateParamsNonStreaming<\n  ResponseFormat extends AudioAPI.AudioResponseFormat | undefined = AudioAPI.AudioResponseFormat | undefined,\n> extends TranscriptionCreateParamsBase<ResponseFormat> {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n   * for more information.\n   *\n   * Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n   */\n  stream?: false | null;\n}\n\nexport interface TranscriptionCreateParamsStreaming extends TranscriptionCreateParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n   * for more information.\n   *\n   * Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n   */\n  stream: true;\n}\n\nexport declare namespace Transcriptions {\n  export {\n    type Transcription as Transcription,\n    type TranscriptionInclude as TranscriptionInclude,\n    type TranscriptionSegment as TranscriptionSegment,\n    type TranscriptionStreamEvent as TranscriptionStreamEvent,\n    type TranscriptionTextDeltaEvent as TranscriptionTextDeltaEvent,\n    type TranscriptionTextDoneEvent as TranscriptionTextDoneEvent,\n    type TranscriptionVerbose as TranscriptionVerbose,\n    type TranscriptionWord as TranscriptionWord,\n    type TranscriptionCreateResponse as TranscriptionCreateResponse,\n    type TranscriptionCreateParams as TranscriptionCreateParams,\n    type TranscriptionCreateParamsNonStreaming as TranscriptionCreateParamsNonStreaming,\n    type TranscriptionCreateParamsStreaming as TranscriptionCreateParamsStreaming,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\nimport * as AudioAPI from './audio';\nimport * as TranscriptionsAPI from './transcriptions';\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   *\n   * @example\n   * ```ts\n   * const translation = await client.audio.translations.create({\n   *   file: fs.createReadStream('speech.mp3'),\n   *   model: 'whisper-1',\n   * });\n   * ```\n   */\n  create(\n    body: TranslationCreateParams<'json' | undefined>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Translation>;\n  create(\n    body: TranslationCreateParams<'verbose_json'>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranslationVerbose>;\n  create(\n    body: TranslationCreateParams<'text' | 'srt' | 'vtt'>,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<string>;\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation>;\n  create(\n    body: TranslationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranslationCreateResponse | string> {\n    return this._client.post(\n      '/audio/translations',\n      Core.multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }),\n    );\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationVerbose {\n  /**\n   * The duration of the input audio.\n   */\n  duration: number;\n\n  /**\n   * The language of the output translation (always `english`).\n   */\n  language: string;\n\n  /**\n   * The translated text.\n   */\n  text: string;\n\n  /**\n   * Segments of the translated text and their corresponding details.\n   */\n  segments?: Array<TranscriptionsAPI.TranscriptionSegment>;\n}\n\nexport type TranslationCreateResponse = Translation | TranslationVerbose;\n\nexport interface TranslationCreateParams<\n  ResponseFormat extends AudioAPI.AudioResponseFormat | undefined = AudioAPI.AudioResponseFormat | undefined,\n> {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Core.Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` (which is powered by our open source\n   * Whisper V2 model) is currently available.\n   */\n  model: (string & {}) | AudioAPI.AudioModel;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n   * should be in English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the output, in one of these options: `json`, `text`, `srt`,\n   * `verbose_json`, or `vtt`.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport declare namespace Translations {\n  export {\n    type Translation as Translation,\n    type TranslationVerbose as TranslationVerbose,\n    type TranslationCreateResponse as TranslationCreateResponse,\n    type TranslationCreateParams as TranslationCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport { isRequestOptions } from '../core';\nimport * as Core from '../core';\nimport * as BatchesAPI from './batches';\nimport * as Shared from './shared';\nimport { CursorPage, type CursorPageParams } from '../pagination';\n\nexport class Batches extends APIResource {\n  /**\n   * Creates and executes a batch from an uploaded file of requests\n   */\n  create(body: BatchCreateParams, options?: Core.RequestOptions): Core.APIPromise<Batch> {\n    return this._client.post('/batches', { body, ...options });\n  }\n\n  /**\n   * Retrieves a batch.\n   */\n  retrieve(batchId: string, options?: Core.RequestOptions): Core.APIPromise<Batch> {\n    return this._client.get(`/batches/${batchId}`, options);\n  }\n\n  /**\n   * List your organization's batches.\n   */\n  list(query?: BatchListParams, options?: Core.RequestOptions): Core.PagePromise<BatchesPage, Batch>;\n  list(options?: Core.RequestOptions): Core.PagePromise<BatchesPage, Batch>;\n  list(\n    query: BatchListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<BatchesPage, Batch> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/batches', BatchesPage, { query, ...options });\n  }\n\n  /**\n   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n   * 10 minutes, before changing to `cancelled`, where it will have partial results\n   * (if any) available in the output file.\n   */\n  cancel(batchId: string, options?: Core.RequestOptions): Core.APIPromise<Batch> {\n    return this._client.post(`/batches/${batchId}/cancel`, options);\n  }\n}\n\nexport class BatchesPage extends CursorPage<Batch> {}\n\nexport interface Batch {\n  id: string;\n\n  /**\n   * The time frame within which the batch should be processed.\n   */\n  completion_window: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was created.\n   */\n  created_at: number;\n\n  /**\n   * The OpenAI API endpoint used by the batch.\n   */\n  endpoint: string;\n\n  /**\n   * The ID of the input file for the batch.\n   */\n  input_file_id: string;\n\n  /**\n   * The object type, which is always `batch`.\n   */\n  object: 'batch';\n\n  /**\n   * The current status of the batch.\n   */\n  status:\n    | 'validating'\n    | 'failed'\n    | 'in_progress'\n    | 'finalizing'\n    | 'completed'\n    | 'expired'\n    | 'cancelling'\n    | 'cancelled';\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\n   */\n  cancelled_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\n   */\n  cancelling_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was completed.\n   */\n  completed_at?: number;\n\n  /**\n   * The ID of the file containing the outputs of requests with errors.\n   */\n  error_file_id?: string;\n\n  errors?: Batch.Errors;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch expired.\n   */\n  expired_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch failed.\n   */\n  failed_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\n   */\n  finalizing_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started processing.\n   */\n  in_progress_at?: number;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The ID of the file containing the outputs of successfully executed requests.\n   */\n  output_file_id?: string;\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  request_counts?: BatchRequestCounts;\n}\n\nexport namespace Batch {\n  export interface Errors {\n    data?: Array<BatchesAPI.BatchError>;\n\n    /**\n     * The object type, which is always `list`.\n     */\n    object?: string;\n  }\n}\n\nexport interface BatchError {\n  /**\n   * An error code identifying the error type.\n   */\n  code?: string;\n\n  /**\n   * The line number of the input file where the error occurred, if applicable.\n   */\n  line?: number | null;\n\n  /**\n   * A human-readable message providing more details about the error.\n   */\n  message?: string;\n\n  /**\n   * The name of the parameter that caused the error, if applicable.\n   */\n  param?: string | null;\n}\n\n/**\n * The request counts for different statuses within the batch.\n */\nexport interface BatchRequestCounts {\n  /**\n   * Number of requests that have been completed successfully.\n   */\n  completed: number;\n\n  /**\n   * Number of requests that have failed.\n   */\n  failed: number;\n\n  /**\n   * Total number of requests in the batch.\n   */\n  total: number;\n}\n\nexport interface BatchCreateParams {\n  /**\n   * The time frame within which the batch should be processed. Currently only `24h`\n   * is supported.\n   */\n  completion_window: '24h';\n\n  /**\n   * The endpoint to be used for all requests in the batch. Currently\n   * `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions`\n   * are supported. Note that `/v1/embeddings` batches are also restricted to a\n   * maximum of 50,000 embedding inputs across all requests in the batch.\n   */\n  endpoint: '/v1/responses' | '/v1/chat/completions' | '/v1/embeddings' | '/v1/completions';\n\n  /**\n   * The ID of an uploaded file that contains requests for the new batch.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n   * for how to upload a file.\n   *\n   * Your input file must be formatted as a\n   * [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\n   * and must be uploaded with the purpose `batch`. The file can contain up to 50,000\n   * requests, and can be up to 200 MB in size.\n   */\n  input_file_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n}\n\nexport interface BatchListParams extends CursorPageParams {}\n\nBatches.BatchesPage = BatchesPage;\n\nexport declare namespace Batches {\n  export {\n    type Batch as Batch,\n    type BatchError as BatchError,\n    type BatchRequestCounts as BatchRequestCounts,\n    BatchesPage as BatchesPage,\n    type BatchCreateParams as BatchCreateParams,\n    type BatchListParams as BatchListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as AssistantsAPI from './assistants';\nimport * as ChatAPI from './chat/chat';\nimport {\n  Assistant,\n  AssistantCreateParams,\n  AssistantDeleted,\n  AssistantListParams,\n  AssistantStreamEvent,\n  AssistantTool,\n  AssistantUpdateParams,\n  Assistants,\n  AssistantsPage,\n  CodeInterpreterTool,\n  FileSearchTool,\n  FunctionTool,\n  MessageStreamEvent,\n  RunStepStreamEvent,\n  RunStreamEvent,\n  ThreadStreamEvent,\n} from './assistants';\nimport * as RealtimeAPI from './realtime/realtime';\nimport {\n  ConversationCreatedEvent,\n  ConversationItem,\n  ConversationItemContent,\n  ConversationItemCreateEvent,\n  ConversationItemCreatedEvent,\n  ConversationItemDeleteEvent,\n  ConversationItemDeletedEvent,\n  ConversationItemInputAudioTranscriptionCompletedEvent,\n  ConversationItemInputAudioTranscriptionDeltaEvent,\n  ConversationItemInputAudioTranscriptionFailedEvent,\n  ConversationItemRetrieveEvent,\n  ConversationItemTruncateEvent,\n  ConversationItemTruncatedEvent,\n  ConversationItemWithReference,\n  ErrorEvent,\n  InputAudioBufferAppendEvent,\n  InputAudioBufferClearEvent,\n  InputAudioBufferClearedEvent,\n  InputAudioBufferCommitEvent,\n  InputAudioBufferCommittedEvent,\n  InputAudioBufferSpeechStartedEvent,\n  InputAudioBufferSpeechStoppedEvent,\n  RateLimitsUpdatedEvent,\n  Realtime,\n  RealtimeClientEvent,\n  RealtimeResponse,\n  RealtimeResponseStatus,\n  RealtimeResponseUsage,\n  RealtimeServerEvent,\n  ResponseAudioDeltaEvent,\n  ResponseAudioDoneEvent,\n  ResponseAudioTranscriptDeltaEvent,\n  ResponseAudioTranscriptDoneEvent,\n  ResponseCancelEvent,\n  ResponseContentPartAddedEvent,\n  ResponseContentPartDoneEvent,\n  ResponseCreateEvent,\n  ResponseCreatedEvent,\n  ResponseDoneEvent,\n  ResponseFunctionCallArgumentsDeltaEvent,\n  ResponseFunctionCallArgumentsDoneEvent,\n  ResponseOutputItemAddedEvent,\n  ResponseOutputItemDoneEvent,\n  ResponseTextDeltaEvent,\n  ResponseTextDoneEvent,\n  SessionCreatedEvent,\n  SessionUpdateEvent,\n  SessionUpdatedEvent,\n  TranscriptionSessionUpdate,\n  TranscriptionSessionUpdatedEvent,\n} from './realtime/realtime';\nimport * as ThreadsAPI from './threads/threads';\nimport {\n  AssistantResponseFormatOption,\n  AssistantToolChoice,\n  AssistantToolChoiceFunction,\n  AssistantToolChoiceOption,\n  Thread,\n  ThreadCreateAndRunParams,\n  ThreadCreateAndRunParamsNonStreaming,\n  ThreadCreateAndRunParamsStreaming,\n  ThreadCreateAndRunPollParams,\n  ThreadCreateAndRunStreamParams,\n  ThreadCreateParams,\n  ThreadDeleted,\n  ThreadUpdateParams,\n  Threads,\n} from './threads/threads';\nimport { Chat } from './chat/chat';\n\nexport class Beta extends APIResource {\n  realtime: RealtimeAPI.Realtime = new RealtimeAPI.Realtime(this._client);\n  chat: ChatAPI.Chat = new ChatAPI.Chat(this._client);\n  assistants: AssistantsAPI.Assistants = new AssistantsAPI.Assistants(this._client);\n  threads: ThreadsAPI.Threads = new ThreadsAPI.Threads(this._client);\n}\n\nBeta.Realtime = Realtime;\nBeta.Assistants = Assistants;\nBeta.AssistantsPage = AssistantsPage;\nBeta.Threads = Threads;\n\nexport declare namespace Beta {\n  export {\n    Realtime as Realtime,\n    type ConversationCreatedEvent as ConversationCreatedEvent,\n    type ConversationItem as ConversationItem,\n    type ConversationItemContent as ConversationItemContent,\n    type ConversationItemCreateEvent as ConversationItemCreateEvent,\n    type ConversationItemCreatedEvent as ConversationItemCreatedEvent,\n    type ConversationItemDeleteEvent as ConversationItemDeleteEvent,\n    type ConversationItemDeletedEvent as ConversationItemDeletedEvent,\n    type ConversationItemInputAudioTranscriptionCompletedEvent as ConversationItemInputAudioTranscriptionCompletedEvent,\n    type ConversationItemInputAudioTranscriptionDeltaEvent as ConversationItemInputAudioTranscriptionDeltaEvent,\n    type ConversationItemInputAudioTranscriptionFailedEvent as ConversationItemInputAudioTranscriptionFailedEvent,\n    type ConversationItemRetrieveEvent as ConversationItemRetrieveEvent,\n    type ConversationItemTruncateEvent as ConversationItemTruncateEvent,\n    type ConversationItemTruncatedEvent as ConversationItemTruncatedEvent,\n    type ConversationItemWithReference as ConversationItemWithReference,\n    type ErrorEvent as ErrorEvent,\n    type InputAudioBufferAppendEvent as InputAudioBufferAppendEvent,\n    type InputAudioBufferClearEvent as InputAudioBufferClearEvent,\n    type InputAudioBufferClearedEvent as InputAudioBufferClearedEvent,\n    type InputAudioBufferCommitEvent as InputAudioBufferCommitEvent,\n    type InputAudioBufferCommittedEvent as InputAudioBufferCommittedEvent,\n    type InputAudioBufferSpeechStartedEvent as InputAudioBufferSpeechStartedEvent,\n    type InputAudioBufferSpeechStoppedEvent as InputAudioBufferSpeechStoppedEvent,\n    type RateLimitsUpdatedEvent as RateLimitsUpdatedEvent,\n    type RealtimeClientEvent as RealtimeClientEvent,\n    type RealtimeResponse as RealtimeResponse,\n    type RealtimeResponseStatus as RealtimeResponseStatus,\n    type RealtimeResponseUsage as RealtimeResponseUsage,\n    type RealtimeServerEvent as RealtimeServerEvent,\n    type ResponseAudioDeltaEvent as ResponseAudioDeltaEvent,\n    type ResponseAudioDoneEvent as ResponseAudioDoneEvent,\n    type ResponseAudioTranscriptDeltaEvent as ResponseAudioTranscriptDeltaEvent,\n    type ResponseAudioTranscriptDoneEvent as ResponseAudioTranscriptDoneEvent,\n    type ResponseCancelEvent as ResponseCancelEvent,\n    type ResponseContentPartAddedEvent as ResponseContentPartAddedEvent,\n    type ResponseContentPartDoneEvent as ResponseContentPartDoneEvent,\n    type ResponseCreateEvent as ResponseCreateEvent,\n    type ResponseCreatedEvent as ResponseCreatedEvent,\n    type ResponseDoneEvent as ResponseDoneEvent,\n    type ResponseFunctionCallArgumentsDeltaEvent as ResponseFunctionCallArgumentsDeltaEvent,\n    type ResponseFunctionCallArgumentsDoneEvent as ResponseFunctionCallArgumentsDoneEvent,\n    type ResponseOutputItemAddedEvent as ResponseOutputItemAddedEvent,\n    type ResponseOutputItemDoneEvent as ResponseOutputItemDoneEvent,\n    type ResponseTextDeltaEvent as ResponseTextDeltaEvent,\n    type ResponseTextDoneEvent as ResponseTextDoneEvent,\n    type SessionCreatedEvent as SessionCreatedEvent,\n    type SessionUpdateEvent as SessionUpdateEvent,\n    type SessionUpdatedEvent as SessionUpdatedEvent,\n    type TranscriptionSessionUpdate as TranscriptionSessionUpdate,\n    type TranscriptionSessionUpdatedEvent as TranscriptionSessionUpdatedEvent,\n  };\n\n  export { Chat };\n\n  export {\n    Assistants as Assistants,\n    type Assistant as Assistant,\n    type AssistantDeleted as AssistantDeleted,\n    type AssistantStreamEvent as AssistantStreamEvent,\n    type AssistantTool as AssistantTool,\n    type CodeInterpreterTool as CodeInterpreterTool,\n    type FileSearchTool as FileSearchTool,\n    type FunctionTool as FunctionTool,\n    type MessageStreamEvent as MessageStreamEvent,\n    type RunStepStreamEvent as RunStepStreamEvent,\n    type RunStreamEvent as RunStreamEvent,\n    type ThreadStreamEvent as ThreadStreamEvent,\n    AssistantsPage as AssistantsPage,\n    type AssistantCreateParams as AssistantCreateParams,\n    type AssistantUpdateParams as AssistantUpdateParams,\n    type AssistantListParams as AssistantListParams,\n  };\n\n  export {\n    Threads as Threads,\n    type AssistantResponseFormatOption as AssistantResponseFormatOption,\n    type AssistantToolChoice as AssistantToolChoice,\n    type AssistantToolChoiceFunction as AssistantToolChoiceFunction,\n    type AssistantToolChoiceOption as AssistantToolChoiceOption,\n    type Thread as Thread,\n    type ThreadDeleted as ThreadDeleted,\n    type ThreadCreateParams as ThreadCreateParams,\n    type ThreadUpdateParams as ThreadUpdateParams,\n    type ThreadCreateAndRunParams as ThreadCreateAndRunParams,\n    type ThreadCreateAndRunParamsNonStreaming as ThreadCreateAndRunParamsNonStreaming,\n    type ThreadCreateAndRunParamsStreaming as ThreadCreateAndRunParamsStreaming,\n    type ThreadCreateAndRunPollParams,\n    type ThreadCreateAndRunStreamParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as Shared from '../shared';\nimport * as MessagesAPI from './threads/messages';\nimport * as ThreadsAPI from './threads/threads';\nimport * as RunsAPI from './threads/runs/runs';\nimport * as StepsAPI from './threads/runs/steps';\nimport { CursorPage, type CursorPageParams } from '../../pagination';\nimport { AssistantStream } from '../../lib/AssistantStream';\n\nexport class Assistants extends APIResource {\n  /**\n   * Create an assistant with a model and instructions.\n   *\n   * @example\n   * ```ts\n   * const assistant = await client.beta.assistants.create({\n   *   model: 'gpt-4o',\n   * });\n   * ```\n   */\n  create(body: AssistantCreateParams, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.post('/assistants', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves an assistant.\n   *\n   * @example\n   * ```ts\n   * const assistant = await client.beta.assistants.retrieve(\n   *   'assistant_id',\n   * );\n   * ```\n   */\n  retrieve(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies an assistant.\n   *\n   * @example\n   * ```ts\n   * const assistant = await client.beta.assistants.update(\n   *   'assistant_id',\n   * );\n   * ```\n   */\n  update(\n    assistantId: string,\n    body: AssistantUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Assistant> {\n    return this._client.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of assistants.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const assistant of client.beta.assistants.list()) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    query?: AssistantListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant>;\n  list(options?: Core.RequestOptions): Core.PagePromise<AssistantsPage, Assistant>;\n  list(\n    query: AssistantListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete an assistant.\n   *\n   * @example\n   * ```ts\n   * const assistantDeleted = await client.beta.assistants.del(\n   *   'assistant_id',\n   * );\n   * ```\n   */\n  del(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<AssistantDeleted> {\n    return this._client.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\nexport class AssistantsPage extends CursorPage<Assistant> {}\n\n/**\n * Represents an `assistant` that can call the model and use tools.\n */\nexport interface Assistant {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the assistant was created.\n   */\n  created_at: number;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description: string | null;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 256,000\n   * characters.\n   */\n  instructions: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models) for descriptions of\n   * them.\n   */\n  model: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name: string | null;\n\n  /**\n   * The object type, which is always `assistant`.\n   */\n  object: 'assistant';\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `file_search`, or\n   * `function`.\n   */\n  tools: Array<AssistantTool>;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: Assistant.ToolResources | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n}\n\nexport namespace Assistant {\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter`` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The ID of the\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n}\n\nexport interface AssistantDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'assistant.deleted';\n}\n\n/**\n * Represents an event emitted when streaming a Run.\n *\n * Each event in a server-sent events stream has an `event` and `data` property:\n *\n * ```\n * event: thread.created\n * data: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n * ```\n *\n * We emit events whenever a new object is created, transitions to a new state, or\n * is being streamed in parts (deltas). For example, we emit `thread.run.created`\n * when a new run is created, `thread.run.completed` when a run completes, and so\n * on. When an Assistant chooses to create a message during a run, we emit a\n * `thread.message.created event`, a `thread.message.in_progress` event, many\n * `thread.message.delta` events, and finally a `thread.message.completed` event.\n *\n * We may add additional events over time, so we recommend handling unknown events\n * gracefully in your code. See the\n * [Assistants API quickstart](https://platform.openai.com/docs/assistants/overview)\n * to learn how to integrate the Assistants API with streaming.\n */\nexport type AssistantStreamEvent =\n  | AssistantStreamEvent.ThreadCreated\n  | AssistantStreamEvent.ThreadRunCreated\n  | AssistantStreamEvent.ThreadRunQueued\n  | AssistantStreamEvent.ThreadRunInProgress\n  | AssistantStreamEvent.ThreadRunRequiresAction\n  | AssistantStreamEvent.ThreadRunCompleted\n  | AssistantStreamEvent.ThreadRunIncomplete\n  | AssistantStreamEvent.ThreadRunFailed\n  | AssistantStreamEvent.ThreadRunCancelling\n  | AssistantStreamEvent.ThreadRunCancelled\n  | AssistantStreamEvent.ThreadRunExpired\n  | AssistantStreamEvent.ThreadRunStepCreated\n  | AssistantStreamEvent.ThreadRunStepInProgress\n  | AssistantStreamEvent.ThreadRunStepDelta\n  | AssistantStreamEvent.ThreadRunStepCompleted\n  | AssistantStreamEvent.ThreadRunStepFailed\n  | AssistantStreamEvent.ThreadRunStepCancelled\n  | AssistantStreamEvent.ThreadRunStepExpired\n  | AssistantStreamEvent.ThreadMessageCreated\n  | AssistantStreamEvent.ThreadMessageInProgress\n  | AssistantStreamEvent.ThreadMessageDelta\n  | AssistantStreamEvent.ThreadMessageCompleted\n  | AssistantStreamEvent.ThreadMessageIncomplete\n  | AssistantStreamEvent.ErrorEvent;\n\nexport namespace AssistantStreamEvent {\n  /**\n   * Occurs when a new\n   * [thread](https://platform.openai.com/docs/api-reference/threads/object) is\n   * created.\n   */\n  export interface ThreadCreated {\n    /**\n     * Represents a thread that contains\n     * [messages](https://platform.openai.com/docs/api-reference/messages).\n     */\n    data: ThreadsAPI.Thread;\n\n    event: 'thread.created';\n\n    /**\n     * Whether to enable input audio transcription.\n     */\n    enabled?: boolean;\n  }\n\n  /**\n   * Occurs when a new\n   * [run](https://platform.openai.com/docs/api-reference/runs/object) is created.\n   */\n  export interface ThreadRunCreated {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.created';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `queued` status.\n   */\n  export interface ThreadRunQueued {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.queued';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to an `in_progress` status.\n   */\n  export interface ThreadRunInProgress {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.in_progress';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `requires_action` status.\n   */\n  export interface ThreadRunRequiresAction {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.requires_action';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * is completed.\n   */\n  export interface ThreadRunCompleted {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.completed';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * ends with status `incomplete`.\n   */\n  export interface ThreadRunIncomplete {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.incomplete';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * fails.\n   */\n  export interface ThreadRunFailed {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.failed';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `cancelling` status.\n   */\n  export interface ThreadRunCancelling {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.cancelling';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * is cancelled.\n   */\n  export interface ThreadRunCancelled {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.cancelled';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * expires.\n   */\n  export interface ThreadRunExpired {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.expired';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is created.\n   */\n  export interface ThreadRunStepCreated {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.created';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * moves to an `in_progress` state.\n   */\n  export interface ThreadRunStepInProgress {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.in_progress';\n  }\n\n  /**\n   * Occurs when parts of a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * are being streamed.\n   */\n  export interface ThreadRunStepDelta {\n    /**\n     * Represents a run step delta i.e. any changed fields on a run step during\n     * streaming.\n     */\n    data: StepsAPI.RunStepDeltaEvent;\n\n    event: 'thread.run.step.delta';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is completed.\n   */\n  export interface ThreadRunStepCompleted {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.completed';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * fails.\n   */\n  export interface ThreadRunStepFailed {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.failed';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is cancelled.\n   */\n  export interface ThreadRunStepCancelled {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.cancelled';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * expires.\n   */\n  export interface ThreadRunStepExpired {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.expired';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) is\n   * created.\n   */\n  export interface ThreadMessageCreated {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.created';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) moves\n   * to an `in_progress` state.\n   */\n  export interface ThreadMessageInProgress {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.in_progress';\n  }\n\n  /**\n   * Occurs when parts of a\n   * [Message](https://platform.openai.com/docs/api-reference/messages/object) are\n   * being streamed.\n   */\n  export interface ThreadMessageDelta {\n    /**\n     * Represents a message delta i.e. any changed fields on a message during\n     * streaming.\n     */\n    data: MessagesAPI.MessageDeltaEvent;\n\n    event: 'thread.message.delta';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) is\n   * completed.\n   */\n  export interface ThreadMessageCompleted {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.completed';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) ends\n   * before it is completed.\n   */\n  export interface ThreadMessageIncomplete {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.incomplete';\n  }\n\n  /**\n   * Occurs when an\n   * [error](https://platform.openai.com/docs/guides/error-codes#api-errors) occurs.\n   * This can happen due to an internal server error or a timeout.\n   */\n  export interface ErrorEvent {\n    data: Shared.ErrorObject;\n\n    event: 'error';\n  }\n}\n\nexport type AssistantTool = CodeInterpreterTool | FileSearchTool | FunctionTool;\n\nexport interface CodeInterpreterTool {\n  /**\n   * The type of tool being defined: `code_interpreter`\n   */\n  type: 'code_interpreter';\n}\n\nexport interface FileSearchTool {\n  /**\n   * The type of tool being defined: `file_search`\n   */\n  type: 'file_search';\n\n  /**\n   * Overrides for the file search tool.\n   */\n  file_search?: FileSearchTool.FileSearch;\n}\n\nexport namespace FileSearchTool {\n  /**\n   * Overrides for the file search tool.\n   */\n  export interface FileSearch {\n    /**\n     * The maximum number of results the file search tool should output. The default is\n     * 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between\n     * 1 and 50 inclusive.\n     *\n     * Note that the file search tool may output fewer than `max_num_results` results.\n     * See the\n     * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n     * for more information.\n     */\n    max_num_results?: number;\n\n    /**\n     * The ranking options for the file search. If not specified, the file search tool\n     * will use the `auto` ranker and a score_threshold of 0.\n     *\n     * See the\n     * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n     * for more information.\n     */\n    ranking_options?: FileSearch.RankingOptions;\n  }\n\n  export namespace FileSearch {\n    /**\n     * The ranking options for the file search. If not specified, the file search tool\n     * will use the `auto` ranker and a score_threshold of 0.\n     *\n     * See the\n     * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n     * for more information.\n     */\n    export interface RankingOptions {\n      /**\n       * The score threshold for the file search. All values must be a floating point\n       * number between 0 and 1.\n       */\n      score_threshold: number;\n\n      /**\n       * The ranker to use for the file search. If not specified will use the `auto`\n       * ranker.\n       */\n      ranker?: 'auto' | 'default_2024_08_21';\n    }\n  }\n}\n\nexport interface FunctionTool {\n  function: Shared.FunctionDefinition;\n\n  /**\n   * The type of tool being defined: `function`\n   */\n  type: 'function';\n}\n\n/**\n * Occurs when a\n * [message](https://platform.openai.com/docs/api-reference/messages/object) is\n * created.\n */\nexport type MessageStreamEvent =\n  | MessageStreamEvent.ThreadMessageCreated\n  | MessageStreamEvent.ThreadMessageInProgress\n  | MessageStreamEvent.ThreadMessageDelta\n  | MessageStreamEvent.ThreadMessageCompleted\n  | MessageStreamEvent.ThreadMessageIncomplete;\n\nexport namespace MessageStreamEvent {\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) is\n   * created.\n   */\n  export interface ThreadMessageCreated {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.created';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) moves\n   * to an `in_progress` state.\n   */\n  export interface ThreadMessageInProgress {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.in_progress';\n  }\n\n  /**\n   * Occurs when parts of a\n   * [Message](https://platform.openai.com/docs/api-reference/messages/object) are\n   * being streamed.\n   */\n  export interface ThreadMessageDelta {\n    /**\n     * Represents a message delta i.e. any changed fields on a message during\n     * streaming.\n     */\n    data: MessagesAPI.MessageDeltaEvent;\n\n    event: 'thread.message.delta';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) is\n   * completed.\n   */\n  export interface ThreadMessageCompleted {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.completed';\n  }\n\n  /**\n   * Occurs when a\n   * [message](https://platform.openai.com/docs/api-reference/messages/object) ends\n   * before it is completed.\n   */\n  export interface ThreadMessageIncomplete {\n    /**\n     * Represents a message within a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: MessagesAPI.Message;\n\n    event: 'thread.message.incomplete';\n  }\n}\n\n/**\n * Occurs when a\n * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n * is created.\n */\nexport type RunStepStreamEvent =\n  | RunStepStreamEvent.ThreadRunStepCreated\n  | RunStepStreamEvent.ThreadRunStepInProgress\n  | RunStepStreamEvent.ThreadRunStepDelta\n  | RunStepStreamEvent.ThreadRunStepCompleted\n  | RunStepStreamEvent.ThreadRunStepFailed\n  | RunStepStreamEvent.ThreadRunStepCancelled\n  | RunStepStreamEvent.ThreadRunStepExpired;\n\nexport namespace RunStepStreamEvent {\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is created.\n   */\n  export interface ThreadRunStepCreated {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.created';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * moves to an `in_progress` state.\n   */\n  export interface ThreadRunStepInProgress {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.in_progress';\n  }\n\n  /**\n   * Occurs when parts of a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * are being streamed.\n   */\n  export interface ThreadRunStepDelta {\n    /**\n     * Represents a run step delta i.e. any changed fields on a run step during\n     * streaming.\n     */\n    data: StepsAPI.RunStepDeltaEvent;\n\n    event: 'thread.run.step.delta';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is completed.\n   */\n  export interface ThreadRunStepCompleted {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.completed';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * fails.\n   */\n  export interface ThreadRunStepFailed {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.failed';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * is cancelled.\n   */\n  export interface ThreadRunStepCancelled {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.cancelled';\n  }\n\n  /**\n   * Occurs when a\n   * [run step](https://platform.openai.com/docs/api-reference/run-steps/step-object)\n   * expires.\n   */\n  export interface ThreadRunStepExpired {\n    /**\n     * Represents a step in execution of a run.\n     */\n    data: StepsAPI.RunStep;\n\n    event: 'thread.run.step.expired';\n  }\n}\n\n/**\n * Occurs when a new\n * [run](https://platform.openai.com/docs/api-reference/runs/object) is created.\n */\nexport type RunStreamEvent =\n  | RunStreamEvent.ThreadRunCreated\n  | RunStreamEvent.ThreadRunQueued\n  | RunStreamEvent.ThreadRunInProgress\n  | RunStreamEvent.ThreadRunRequiresAction\n  | RunStreamEvent.ThreadRunCompleted\n  | RunStreamEvent.ThreadRunIncomplete\n  | RunStreamEvent.ThreadRunFailed\n  | RunStreamEvent.ThreadRunCancelling\n  | RunStreamEvent.ThreadRunCancelled\n  | RunStreamEvent.ThreadRunExpired;\n\nexport namespace RunStreamEvent {\n  /**\n   * Occurs when a new\n   * [run](https://platform.openai.com/docs/api-reference/runs/object) is created.\n   */\n  export interface ThreadRunCreated {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.created';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `queued` status.\n   */\n  export interface ThreadRunQueued {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.queued';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to an `in_progress` status.\n   */\n  export interface ThreadRunInProgress {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.in_progress';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `requires_action` status.\n   */\n  export interface ThreadRunRequiresAction {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.requires_action';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * is completed.\n   */\n  export interface ThreadRunCompleted {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.completed';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * ends with status `incomplete`.\n   */\n  export interface ThreadRunIncomplete {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.incomplete';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * fails.\n   */\n  export interface ThreadRunFailed {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.failed';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * moves to a `cancelling` status.\n   */\n  export interface ThreadRunCancelling {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.cancelling';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * is cancelled.\n   */\n  export interface ThreadRunCancelled {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.cancelled';\n  }\n\n  /**\n   * Occurs when a [run](https://platform.openai.com/docs/api-reference/runs/object)\n   * expires.\n   */\n  export interface ThreadRunExpired {\n    /**\n     * Represents an execution run on a\n     * [thread](https://platform.openai.com/docs/api-reference/threads).\n     */\n    data: RunsAPI.Run;\n\n    event: 'thread.run.expired';\n  }\n}\n\n/**\n * Occurs when a new\n * [thread](https://platform.openai.com/docs/api-reference/threads/object) is\n * created.\n */\nexport interface ThreadStreamEvent {\n  /**\n   * Represents a thread that contains\n   * [messages](https://platform.openai.com/docs/api-reference/messages).\n   */\n  data: ThreadsAPI.Thread;\n\n  event: 'thread.created';\n\n  /**\n   * Whether to enable input audio transcription.\n   */\n  enabled?: boolean;\n}\n\nexport interface AssistantCreateParams {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models) for descriptions of\n   * them.\n   */\n  model: (string & {}) | Shared.ChatModel;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 256,000\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * **o-series models only**\n   *\n   * Constrains effort on reasoning for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n   * result in faster responses and fewer tokens used on reasoning in a response.\n   */\n  reasoning_effort?: Shared.ReasoningEffort | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: AssistantCreateParams.ToolResources | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `file_search`, or\n   * `function`.\n   */\n  tools?: Array<AssistantTool>;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n}\n\nexport namespace AssistantCreateParams {\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n\n      /**\n       * A helper to create a\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * with file_ids and attach it to this assistant. There can be a maximum of 1\n       * vector store attached to the assistant.\n       */\n      vector_stores?: Array<FileSearch.VectorStore>;\n    }\n\n    export namespace FileSearch {\n      export interface VectorStore {\n        /**\n         * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n         * strategy.\n         */\n        chunking_strategy?: VectorStore.Auto | VectorStore.Static;\n\n        /**\n         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n         * add to the vector store. There can be a maximum of 10000 files in a vector\n         * store.\n         */\n        file_ids?: Array<string>;\n\n        /**\n         * Set of 16 key-value pairs that can be attached to an object. This can be useful\n         * for storing additional information about the object in a structured format, and\n         * querying for objects via API or the dashboard.\n         *\n         * Keys are strings with a maximum length of 64 characters. Values are strings with\n         * a maximum length of 512 characters.\n         */\n        metadata?: Shared.Metadata | null;\n      }\n\n      export namespace VectorStore {\n        /**\n         * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of\n         * `800` and `chunk_overlap_tokens` of `400`.\n         */\n        export interface Auto {\n          /**\n           * Always `auto`.\n           */\n          type: 'auto';\n        }\n\n        export interface Static {\n          static: Static.Static;\n\n          /**\n           * Always `static`.\n           */\n          type: 'static';\n        }\n\n        export namespace Static {\n          export interface Static {\n            /**\n             * The number of tokens that overlap between chunks. The default value is `400`.\n             *\n             * Note that the overlap must not exceed half of `max_chunk_size_tokens`.\n             */\n            chunk_overlap_tokens: number;\n\n            /**\n             * The maximum number of tokens in each chunk. The default value is `800`. The\n             * minimum value is `100` and the maximum value is `4096`.\n             */\n            max_chunk_size_tokens: number;\n          }\n        }\n      }\n    }\n  }\n}\n\nexport interface AssistantUpdateParams {\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 256,000\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models) for descriptions of\n   * them.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4.1'\n    | 'gpt-4.1-mini'\n    | 'gpt-4.1-nano'\n    | 'gpt-4.1-2025-04-14'\n    | 'gpt-4.1-mini-2025-04-14'\n    | 'gpt-4.1-nano-2025-04-14'\n    | 'o3-mini'\n    | 'o3-mini-2025-01-31'\n    | 'o1'\n    | 'o1-2024-12-17'\n    | 'gpt-4o'\n    | 'gpt-4o-2024-11-20'\n    | 'gpt-4o-2024-08-06'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4o-mini'\n    | 'gpt-4o-mini-2024-07-18'\n    | 'gpt-4.5-preview'\n    | 'gpt-4.5-preview-2025-02-27'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613';\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * **o-series models only**\n   *\n   * Constrains effort on reasoning for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n   * result in faster responses and fewer tokens used on reasoning in a response.\n   */\n  reasoning_effort?: Shared.ReasoningEffort | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: AssistantUpdateParams.ToolResources | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `file_search`, or\n   * `function`.\n   */\n  tools?: Array<AssistantTool>;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n}\n\nexport namespace AssistantUpdateParams {\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * Overrides the list of\n       * [file](https://platform.openai.com/docs/api-reference/files) IDs made available\n       * to the `code_interpreter` tool. There can be a maximum of 20 files associated\n       * with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * Overrides the\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n}\n\nexport interface AssistantListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nAssistants.AssistantsPage = AssistantsPage;\n\nexport declare namespace Assistants {\n  export {\n    type Assistant as Assistant,\n    type AssistantDeleted as AssistantDeleted,\n    type AssistantStreamEvent as AssistantStreamEvent,\n    type AssistantTool as AssistantTool,\n    type CodeInterpreterTool as CodeInterpreterTool,\n    type FileSearchTool as FileSearchTool,\n    type FunctionTool as FunctionTool,\n    type MessageStreamEvent as MessageStreamEvent,\n    type RunStepStreamEvent as RunStepStreamEvent,\n    type RunStreamEvent as RunStreamEvent,\n    type ThreadStreamEvent as ThreadStreamEvent,\n    AssistantsPage as AssistantsPage,\n    type AssistantCreateParams as AssistantCreateParams,\n    type AssistantUpdateParams as AssistantUpdateParams,\n    type AssistantListParams as AssistantListParams,\n  };\n\n  export { AssistantStream };\n}\n","import { APIUserAbortError, OpenAIError } from '../error';\n\nexport class EventStream<EventTypes extends BaseEvents> {\n  controller: AbortController = new AbortController();\n\n  #connectedPromise: Promise<void>;\n  #resolveConnectedPromise: () => void = () => {};\n  #rejectConnectedPromise: (error: OpenAIError) => void = () => {};\n\n  #endPromise: Promise<void>;\n  #resolveEndPromise: () => void = () => {};\n  #rejectEndPromise: (error: OpenAIError) => void = () => {};\n\n  #listeners: {\n    [Event in keyof EventTypes]?: EventListeners<EventTypes, Event>;\n  } = {};\n\n  #ended = false;\n  #errored = false;\n  #aborted = false;\n  #catchingPromiseCreated = false;\n\n  constructor() {\n    this.#connectedPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveConnectedPromise = resolve;\n      this.#rejectConnectedPromise = reject;\n    });\n\n    this.#endPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveEndPromise = resolve;\n      this.#rejectEndPromise = reject;\n    });\n\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    this.#connectedPromise.catch(() => {});\n    this.#endPromise.catch(() => {});\n  }\n\n  protected _run(this: EventStream<EventTypes>, executor: () => Promise<any>) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, this.#handleError.bind(this));\n    }, 0);\n  }\n\n  protected _connected(this: EventStream<EventTypes>) {\n    if (this.ended) return;\n    this.#resolveConnectedPromise();\n    this._emit('connect');\n  }\n\n  get ended(): boolean {\n    return this.#ended;\n  }\n\n  get errored(): boolean {\n    return this.#errored;\n  }\n\n  get aborted(): boolean {\n    return this.#aborted;\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on<Event extends keyof EventTypes>(event: Event, listener: EventListener<EventTypes, Event>): this {\n    const listeners: EventListeners<EventTypes, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener });\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off<Event extends keyof EventTypes>(event: Event, listener: EventListener<EventTypes, Event>): this {\n    const listeners = this.#listeners[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex((l) => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once<Event extends keyof EventTypes>(event: Event, listener: EventListener<EventTypes, Event>): this {\n    const listeners: EventListeners<EventTypes, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener, once: true });\n    return this;\n  }\n\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted<Event extends keyof EventTypes>(\n    event: Event,\n  ): Promise<\n    EventParameters<EventTypes, Event> extends [infer Param] ? Param\n    : EventParameters<EventTypes, Event> extends [] ? void\n    : EventParameters<EventTypes, Event>\n  > {\n    return new Promise((resolve, reject) => {\n      this.#catchingPromiseCreated = true;\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve as any);\n    });\n  }\n\n  async done(): Promise<void> {\n    this.#catchingPromiseCreated = true;\n    await this.#endPromise;\n  }\n\n  #handleError(this: EventStream<EventTypes>, error: unknown) {\n    this.#errored = true;\n    if (error instanceof Error && error.name === 'AbortError') {\n      error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n      this.#aborted = true;\n      return this._emit('abort', error);\n    }\n    if (error instanceof OpenAIError) {\n      return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n      const openAIError: OpenAIError = new OpenAIError(error.message);\n      // @ts-ignore\n      openAIError.cause = error;\n      return this._emit('error', openAIError);\n    }\n    return this._emit('error', new OpenAIError(String(error)));\n  }\n\n  _emit<Event extends keyof BaseEvents>(event: Event, ...args: EventParameters<BaseEvents, Event>): void;\n  _emit<Event extends keyof EventTypes>(event: Event, ...args: EventParameters<EventTypes, Event>): void;\n  _emit<Event extends keyof EventTypes>(\n    this: EventStream<EventTypes>,\n    event: Event,\n    ...args: EventParameters<EventTypes, Event>\n  ) {\n    // make sure we don't emit any events after end\n    if (this.#ended) {\n      return;\n    }\n\n    if (event === 'end') {\n      this.#ended = true;\n      this.#resolveEndPromise();\n    }\n\n    const listeners: EventListeners<EventTypes, Event> | undefined = this.#listeners[event];\n    if (listeners) {\n      this.#listeners[event] = listeners.filter((l) => !l.once) as any;\n      listeners.forEach(({ listener }: any) => listener(...(args as any)));\n    }\n\n    if (event === 'abort') {\n      const error = args[0] as APIUserAbortError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n      return;\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n\n      const error = args[0] as OpenAIError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n    }\n  }\n\n  protected _emitFinal(): void {}\n}\n\ntype EventListener<Events, EventType extends keyof Events> = Events[EventType];\n\ntype EventListeners<Events, EventType extends keyof Events> = Array<{\n  listener: EventListener<Events, EventType>;\n  once?: boolean;\n}>;\n\nexport type EventParameters<Events, EventType extends keyof Events> = {\n  [Event in EventType]: EventListener<Events, EventType> extends (...args: infer P) => any ? P : never;\n}[EventType];\n\nexport interface BaseEvents {\n  connect: () => void;\n  error: (error: OpenAIError) => void;\n  abort: (error: APIUserAbortError) => void;\n  end: () => void;\n}\n","import {\n  TextContentBlock,\n  ImageFileContentBlock,\n  Message,\n  MessageContentDelta,\n  Text,\n  ImageFile,\n  TextDelta,\n  MessageDelta,\n  MessageContent,\n} from '../resources/beta/threads/messages';\nimport * as Core from '../core';\nimport { RequestOptions } from '../core';\nimport {\n  Run,\n  RunCreateParamsBase,\n  RunCreateParamsStreaming,\n  Runs,\n  RunSubmitToolOutputsParamsBase,\n  RunSubmitToolOutputsParamsStreaming,\n} from '../resources/beta/threads/runs/runs';\nimport { type ReadableStream } from '../_shims/index';\nimport { Stream } from '../streaming';\nimport { APIUserAbortError, OpenAIError } from '../error';\nimport {\n  AssistantStreamEvent,\n  MessageStreamEvent,\n  RunStepStreamEvent,\n  RunStreamEvent,\n} from '../resources/beta/assistants';\nimport { RunStep, RunStepDelta, ToolCall, ToolCallDelta } from '../resources/beta/threads/runs/steps';\nimport { ThreadCreateAndRunParamsBase, Threads } from '../resources/beta/threads/threads';\nimport { BaseEvents, EventStream } from './EventStream';\n\nexport interface AssistantStreamEvents extends BaseEvents {\n  run: (run: Run) => void;\n\n  //New event structure\n  messageCreated: (message: Message) => void;\n  messageDelta: (message: MessageDelta, snapshot: Message) => void;\n  messageDone: (message: Message) => void;\n\n  runStepCreated: (runStep: RunStep) => void;\n  runStepDelta: (delta: RunStepDelta, snapshot: Runs.RunStep) => void;\n  runStepDone: (runStep: Runs.RunStep, snapshot: Runs.RunStep) => void;\n\n  toolCallCreated: (toolCall: ToolCall) => void;\n  toolCallDelta: (delta: ToolCallDelta, snapshot: ToolCall) => void;\n  toolCallDone: (toolCall: ToolCall) => void;\n\n  textCreated: (content: Text) => void;\n  textDelta: (delta: TextDelta, snapshot: Text) => void;\n  textDone: (content: Text, snapshot: Message) => void;\n\n  //No created or delta as this is not streamed\n  imageFileDone: (content: ImageFile, snapshot: Message) => void;\n\n  event: (event: AssistantStreamEvent) => void;\n}\n\nexport type ThreadCreateAndRunParamsBaseStream = Omit<ThreadCreateAndRunParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport type RunCreateParamsBaseStream = Omit<RunCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport type RunSubmitToolOutputsParamsStream = Omit<RunSubmitToolOutputsParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class AssistantStream\n  extends EventStream<AssistantStreamEvents>\n  implements AsyncIterable<AssistantStreamEvent>\n{\n  //Track all events in a single list for reference\n  #events: AssistantStreamEvent[] = [];\n\n  //Used to accumulate deltas\n  //We are accumulating many types so the value here is not strict\n  #runStepSnapshots: { [id: string]: Runs.RunStep } = {};\n  #messageSnapshots: { [id: string]: Message } = {};\n  #messageSnapshot: Message | undefined;\n  #finalRun: Run | undefined;\n  #currentContentIndex: number | undefined;\n  #currentContent: MessageContent | undefined;\n  #currentToolCallIndex: number | undefined;\n  #currentToolCall: ToolCall | undefined;\n\n  //For current snapshot methods\n  #currentEvent: AssistantStreamEvent | undefined;\n  #currentRunSnapshot: Run | undefined;\n  #currentRunStepSnapshot: Runs.RunStep | undefined;\n\n  [Symbol.asyncIterator](): AsyncIterator<AssistantStreamEvent> {\n    const pushQueue: AssistantStreamEvent[] = [];\n    const readQueue: {\n      resolve: (chunk: AssistantStreamEvent | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    //Catch all for passing along all events\n    this.on('event', (event) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<AssistantStreamEvent>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<AssistantStreamEvent | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  static fromReadableStream(stream: ReadableStream): AssistantStream {\n    const runner = new AssistantStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this._connected();\n    const stream = Stream.fromReadableStream<AssistantStreamEvent>(readableStream, this.controller);\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(this.#endRequest());\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n\n  static createToolAssistantStream(\n    threadId: string,\n    runId: string,\n    runs: Runs,\n    params: RunSubmitToolOutputsParamsStream,\n    options: RequestOptions | undefined,\n  ): AssistantStream {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._runToolAssistantStream(threadId, runId, runs, params, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  protected async _createToolAssistantStream(\n    run: Runs,\n    threadId: string,\n    runId: string,\n    params: RunSubmitToolOutputsParamsStream,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunSubmitToolOutputsParamsStreaming = { ...params, stream: true };\n    const stream = await run.submitToolOutputs(threadId, runId, body, {\n      ...options,\n      signal: this.controller.signal,\n    });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  static createThreadAssistantStream(\n    params: ThreadCreateAndRunParamsBaseStream,\n    thread: Threads,\n    options?: RequestOptions,\n  ): AssistantStream {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._threadAssistantStream(params, thread, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  static createAssistantStream(\n    threadId: string,\n    runs: Runs,\n    params: RunCreateParamsBaseStream,\n    options?: RequestOptions,\n  ): AssistantStream {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._runAssistantStream(threadId, runs, params, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  currentEvent(): AssistantStreamEvent | undefined {\n    return this.#currentEvent;\n  }\n\n  currentRun(): Run | undefined {\n    return this.#currentRunSnapshot;\n  }\n\n  currentMessageSnapshot(): Message | undefined {\n    return this.#messageSnapshot;\n  }\n\n  currentRunStepSnapshot(): Runs.RunStep | undefined {\n    return this.#currentRunStepSnapshot;\n  }\n\n  async finalRunSteps(): Promise<Runs.RunStep[]> {\n    await this.done();\n\n    return Object.values(this.#runStepSnapshots);\n  }\n\n  async finalMessages(): Promise<Message[]> {\n    await this.done();\n\n    return Object.values(this.#messageSnapshots);\n  }\n\n  async finalRun(): Promise<Run> {\n    await this.done();\n    if (!this.#finalRun) throw Error('Final run was not received.');\n\n    return this.#finalRun;\n  }\n\n  protected async _createThreadAssistantStream(\n    thread: Threads,\n    params: ThreadCreateAndRunParamsBase,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunCreateParamsStreaming = { ...params, stream: true };\n    const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  protected async _createAssistantStream(\n    run: Runs,\n    threadId: string,\n    params: RunCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunCreateParamsStreaming = { ...params, stream: true };\n    const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  #addEvent(event: AssistantStreamEvent) {\n    if (this.ended) return;\n\n    this.#currentEvent = event;\n\n    this.#handleEvent(event);\n\n    switch (event.event) {\n      case 'thread.created':\n        //No action on this event.\n        break;\n\n      case 'thread.run.created':\n      case 'thread.run.queued':\n      case 'thread.run.in_progress':\n      case 'thread.run.requires_action':\n      case 'thread.run.completed':\n      case 'thread.run.incomplete':\n      case 'thread.run.failed':\n      case 'thread.run.cancelling':\n      case 'thread.run.cancelled':\n      case 'thread.run.expired':\n        this.#handleRun(event);\n        break;\n\n      case 'thread.run.step.created':\n      case 'thread.run.step.in_progress':\n      case 'thread.run.step.delta':\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n        this.#handleRunStep(event);\n        break;\n\n      case 'thread.message.created':\n      case 'thread.message.in_progress':\n      case 'thread.message.delta':\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        this.#handleMessage(event);\n        break;\n\n      case 'error':\n        //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n        throw new Error(\n          'Encountered an error event in event processing - errors should be processed earlier',\n        );\n      default:\n        assertNever(event);\n    }\n  }\n\n  #endRequest(): Run {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n\n    if (!this.#finalRun) throw Error('Final run has not been received');\n\n    return this.#finalRun;\n  }\n\n  #handleMessage(this: AssistantStream, event: MessageStreamEvent) {\n    const [accumulatedMessage, newContent] = this.#accumulateMessage(event, this.#messageSnapshot);\n    this.#messageSnapshot = accumulatedMessage;\n    this.#messageSnapshots[accumulatedMessage.id] = accumulatedMessage;\n\n    for (const content of newContent) {\n      const snapshotContent = accumulatedMessage.content[content.index];\n      if (snapshotContent?.type == 'text') {\n        this._emit('textCreated', snapshotContent.text);\n      }\n    }\n\n    switch (event.event) {\n      case 'thread.message.created':\n        this._emit('messageCreated', event.data);\n        break;\n\n      case 'thread.message.in_progress':\n        break;\n\n      case 'thread.message.delta':\n        this._emit('messageDelta', event.data.delta, accumulatedMessage);\n\n        if (event.data.delta.content) {\n          for (const content of event.data.delta.content) {\n            //If it is text delta, emit a text delta event\n            if (content.type == 'text' && content.text) {\n              let textDelta = content.text;\n              let snapshot = accumulatedMessage.content[content.index];\n              if (snapshot && snapshot.type == 'text') {\n                this._emit('textDelta', textDelta, snapshot.text);\n              } else {\n                throw Error('The snapshot associated with this text delta is not text or missing');\n              }\n            }\n\n            if (content.index != this.#currentContentIndex) {\n              //See if we have in progress content\n              if (this.#currentContent) {\n                switch (this.#currentContent.type) {\n                  case 'text':\n                    this._emit('textDone', this.#currentContent.text, this.#messageSnapshot);\n                    break;\n                  case 'image_file':\n                    this._emit('imageFileDone', this.#currentContent.image_file, this.#messageSnapshot);\n                    break;\n                }\n              }\n\n              this.#currentContentIndex = content.index;\n            }\n\n            this.#currentContent = accumulatedMessage.content[content.index];\n          }\n        }\n\n        break;\n\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        //We emit the latest content we were working on on completion (including incomplete)\n        if (this.#currentContentIndex !== undefined) {\n          const currentContent = event.data.content[this.#currentContentIndex];\n          if (currentContent) {\n            switch (currentContent.type) {\n              case 'image_file':\n                this._emit('imageFileDone', currentContent.image_file, this.#messageSnapshot);\n                break;\n              case 'text':\n                this._emit('textDone', currentContent.text, this.#messageSnapshot);\n                break;\n            }\n          }\n        }\n\n        if (this.#messageSnapshot) {\n          this._emit('messageDone', event.data);\n        }\n\n        this.#messageSnapshot = undefined;\n    }\n  }\n\n  #handleRunStep(this: AssistantStream, event: RunStepStreamEvent) {\n    const accumulatedRunStep = this.#accumulateRunStep(event);\n    this.#currentRunStepSnapshot = accumulatedRunStep;\n\n    switch (event.event) {\n      case 'thread.run.step.created':\n        this._emit('runStepCreated', event.data);\n        break;\n      case 'thread.run.step.delta':\n        const delta = event.data.delta;\n        if (\n          delta.step_details &&\n          delta.step_details.type == 'tool_calls' &&\n          delta.step_details.tool_calls &&\n          accumulatedRunStep.step_details.type == 'tool_calls'\n        ) {\n          for (const toolCall of delta.step_details.tool_calls) {\n            if (toolCall.index == this.#currentToolCallIndex) {\n              this._emit(\n                'toolCallDelta',\n                toolCall,\n                accumulatedRunStep.step_details.tool_calls[toolCall.index] as ToolCall,\n              );\n            } else {\n              if (this.#currentToolCall) {\n                this._emit('toolCallDone', this.#currentToolCall);\n              }\n\n              this.#currentToolCallIndex = toolCall.index;\n              this.#currentToolCall = accumulatedRunStep.step_details.tool_calls[toolCall.index];\n              if (this.#currentToolCall) this._emit('toolCallCreated', this.#currentToolCall);\n            }\n          }\n        }\n\n        this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n        break;\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n        this.#currentRunStepSnapshot = undefined;\n        const details = event.data.step_details;\n        if (details.type == 'tool_calls') {\n          if (this.#currentToolCall) {\n            this._emit('toolCallDone', this.#currentToolCall as ToolCall);\n            this.#currentToolCall = undefined;\n          }\n        }\n        this._emit('runStepDone', event.data, accumulatedRunStep);\n        break;\n      case 'thread.run.step.in_progress':\n        break;\n    }\n  }\n\n  #handleEvent(this: AssistantStream, event: AssistantStreamEvent) {\n    this.#events.push(event);\n    this._emit('event', event);\n  }\n\n  #accumulateRunStep(event: RunStepStreamEvent): Runs.RunStep {\n    switch (event.event) {\n      case 'thread.run.step.created':\n        this.#runStepSnapshots[event.data.id] = event.data;\n        return event.data;\n\n      case 'thread.run.step.delta':\n        let snapshot = this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n        if (!snapshot) {\n          throw Error('Received a RunStepDelta before creation of a snapshot');\n        }\n\n        let data = event.data;\n\n        if (data.delta) {\n          const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta) as Runs.RunStep;\n          this.#runStepSnapshots[event.data.id] = accumulated;\n        }\n\n        return this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n      case 'thread.run.step.in_progress':\n        this.#runStepSnapshots[event.data.id] = event.data;\n        break;\n    }\n\n    if (this.#runStepSnapshots[event.data.id]) return this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n    throw new Error('No snapshot available');\n  }\n\n  #accumulateMessage(\n    event: AssistantStreamEvent,\n    snapshot: Message | undefined,\n  ): [Message, MessageContentDelta[]] {\n    let newContent: MessageContentDelta[] = [];\n\n    switch (event.event) {\n      case 'thread.message.created':\n        //On creation the snapshot is just the initial message\n        return [event.data, newContent];\n\n      case 'thread.message.delta':\n        if (!snapshot) {\n          throw Error(\n            'Received a delta with no existing snapshot (there should be one from message creation)',\n          );\n        }\n\n        let data = event.data;\n\n        //If this delta does not have content, nothing to process\n        if (data.delta.content) {\n          for (const contentElement of data.delta.content) {\n            if (contentElement.index in snapshot.content) {\n              let currentContent = snapshot.content[contentElement.index];\n              snapshot.content[contentElement.index] = this.#accumulateContent(\n                contentElement,\n                currentContent,\n              );\n            } else {\n              snapshot.content[contentElement.index] = contentElement as MessageContent;\n              // This is a new element\n              newContent.push(contentElement);\n            }\n          }\n        }\n\n        return [snapshot, newContent];\n\n      case 'thread.message.in_progress':\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        //No changes on other thread events\n        if (snapshot) {\n          return [snapshot, newContent];\n        } else {\n          throw Error('Received thread message event with no existing snapshot');\n        }\n    }\n    throw Error('Tried to accumulate a non-message event');\n  }\n\n  #accumulateContent(\n    contentElement: MessageContentDelta,\n    currentContent: MessageContent | undefined,\n  ): TextContentBlock | ImageFileContentBlock {\n    return AssistantStream.accumulateDelta(currentContent as unknown as Record<any, any>, contentElement) as\n      | TextContentBlock\n      | ImageFileContentBlock;\n  }\n\n  static accumulateDelta(acc: Record<string, any>, delta: Record<string, any>): Record<string, any> {\n    for (const [key, deltaValue] of Object.entries(delta)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      let accValue = acc[key];\n      if (accValue === null || accValue === undefined) {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      // We don't accumulate these special properties\n      if (key === 'index' || key === 'type') {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      // Type-specific accumulation logic\n      if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n        accValue += deltaValue;\n      } else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n        accValue += deltaValue;\n      } else if (Core.isObj(accValue) && Core.isObj(deltaValue)) {\n        accValue = this.accumulateDelta(accValue as Record<string, any>, deltaValue as Record<string, any>);\n      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n        if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\n          accValue.push(...deltaValue); // Use spread syntax for efficient addition\n          continue;\n        }\n\n        for (const deltaEntry of deltaValue) {\n          if (!Core.isObj(deltaEntry)) {\n            throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);\n          }\n\n          const index = deltaEntry['index'];\n          if (index == null) {\n            console.error(deltaEntry);\n            throw new Error('Expected array delta entry to have an `index` property');\n          }\n\n          if (typeof index !== 'number') {\n            throw new Error(`Expected array delta entry \\`index\\` property to be a number but got ${index}`);\n          }\n\n          const accEntry = accValue[index];\n          if (accEntry == null) {\n            accValue.push(deltaEntry);\n          } else {\n            accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n          }\n        }\n        continue;\n      } else {\n        throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n      }\n      acc[key] = accValue;\n    }\n\n    return acc;\n  }\n\n  #handleRun(this: AssistantStream, event: RunStreamEvent) {\n    this.#currentRunSnapshot = event.data;\n    switch (event.event) {\n      case 'thread.run.created':\n        break;\n      case 'thread.run.queued':\n        break;\n      case 'thread.run.in_progress':\n        break;\n      case 'thread.run.requires_action':\n      case 'thread.run.cancelled':\n      case 'thread.run.failed':\n      case 'thread.run.completed':\n      case 'thread.run.expired':\n        this.#finalRun = event.data;\n        if (this.#currentToolCall) {\n          this._emit('toolCallDone', this.#currentToolCall);\n          this.#currentToolCall = undefined;\n        }\n        break;\n      case 'thread.run.cancelling':\n        break;\n    }\n  }\n\n  protected _addRun(run: Run): Run {\n    return run;\n  }\n\n  protected async _threadAssistantStream(\n    params: ThreadCreateAndRunParamsBase,\n    thread: Threads,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    return await this._createThreadAssistantStream(thread, params, options);\n  }\n\n  protected async _runAssistantStream(\n    threadId: string,\n    runs: Runs,\n    params: RunCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    return await this._createAssistantStream(runs, threadId, params, options);\n  }\n\n  protected async _runToolAssistantStream(\n    threadId: string,\n    runId: string,\n    runs: Runs,\n    params: RunSubmitToolOutputsParamsStream,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    return await this._createToolAssistantStream(runs, threadId, runId, params, options);\n  }\n}\n\nfunction assertNever(_x: never) {}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as CompletionsAPI from './completions';\n\nexport class Chat extends APIResource {\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\n}\n\nexport namespace Chat {\n  export import Completions = CompletionsAPI.Completions;\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from '../../../core';\nimport { APIResource } from '../../../resource';\nimport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nimport { BaseFunctionsArgs } from '../../../lib/RunnableFunction';\nimport { RunnerOptions } from '../../../lib/AbstractChatCompletionRunner';\nimport { ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport { ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nimport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\nimport {\n  ChatCompletion,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionMessage,\n  ChatCompletionMessageToolCall,\n} from '../../chat/completions';\nimport { ExtractParsedContentFromParams, parseChatCompletion, validateInputTools } from '../../../lib/parser';\n\nexport {\n  ChatCompletionStreamingRunner,\n  type ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nexport {\n  type RunnableFunction,\n  type RunnableFunctions,\n  type RunnableFunctionWithParse,\n  type RunnableFunctionWithoutParse,\n  ParsingFunction,\n  ParsingToolFunction,\n} from '../../../lib/RunnableFunction';\nexport { type ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nexport { type ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nexport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\nexport {\n  ChatCompletionRunner,\n  type ChatCompletionFunctionRunnerParams,\n} from '../../../lib/ChatCompletionRunner';\n\nexport interface ParsedFunction extends ChatCompletionMessageToolCall.Function {\n  parsed_arguments?: unknown;\n}\n\nexport interface ParsedFunctionToolCall extends ChatCompletionMessageToolCall {\n  function: ParsedFunction;\n}\n\nexport interface ParsedChatCompletionMessage<ParsedT> extends ChatCompletionMessage {\n  parsed: ParsedT | null;\n  tool_calls?: Array<ParsedFunctionToolCall>;\n}\n\nexport interface ParsedChoice<ParsedT> extends ChatCompletion.Choice {\n  message: ParsedChatCompletionMessage<ParsedT>;\n}\n\nexport interface ParsedChatCompletion<ParsedT> extends ChatCompletion {\n  choices: Array<ParsedChoice<ParsedT>>;\n}\n\nexport type ChatCompletionParseParams = ChatCompletionCreateParamsNonStreaming;\n\nexport class Completions extends APIResource {\n  parse<Params extends ChatCompletionParseParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ParsedChatCompletion<ParsedT>> {\n    validateInputTools(body.tools);\n\n    return this._client.chat.completions\n      .create(body, {\n        ...options,\n        headers: {\n          ...options?.headers,\n          'X-Stainless-Helper-Method': 'beta.chat.completions.parse',\n        },\n      })\n      ._thenUnwrap((completion) => parseChatCompletion(completion, body));\n  }\n\n  /**\n   * @deprecated - use `runTools` instead.\n   */\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStreamingRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null> | ChatCompletionStreamingRunner<null> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runFunctions(\n        this._client,\n        body as ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n        options,\n      );\n    }\n    return ChatCompletionRunner.runFunctions(\n      this._client,\n      body as ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n      options,\n    );\n  }\n\n  /**\n   * A convenience helper for using tool calls with the /chat/completions endpoint\n   * which automatically calls the JavaScript functions you provide and sends their\n   * results back to the /chat/completions endpoint, looping as long as the model\n   * requests function calls.\n   *\n   * For more details and examples, see\n   * [the docs](https://github.com/openai/openai-node#automated-function-calls)\n   */\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionStreamingRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any> | ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(\n    body: Params,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<ParsedT> | ChatCompletionStreamingRunner<ParsedT> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runTools(\n        this._client,\n        body as ChatCompletionStreamingToolRunnerParams<any>,\n        options,\n      );\n    }\n\n    return ChatCompletionRunner.runTools(this._client, body as ChatCompletionToolRunnerParams<any>, options);\n  }\n\n  /**\n   * Creates a chat completion stream\n   */\n  stream<Params extends ChatCompletionStreamParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream<ParsedT> {\n    return ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}\n","import { type ChatCompletionRunner } from './ChatCompletionRunner';\nimport { type ChatCompletionStreamingRunner } from './ChatCompletionStreamingRunner';\nimport { JSONSchema } from './jsonschema';\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\nexport type RunnableFunctionWithParse<Args extends object> = {\n  /**\n   * @param args the return value from `parse`.\n   * @param runner the runner evaluating this callback.\n   * @returns a string to send back to OpenAI.\n   */\n  function: (\n    args: Args,\n    runner: ChatCompletionRunner<unknown> | ChatCompletionStreamingRunner<unknown>,\n  ) => PromiseOrValue<unknown>;\n  /**\n   * @param input the raw args from the OpenAI function call.\n   * @returns the parsed arguments to pass to `function`\n   */\n  parse: (input: string) => PromiseOrValue<Args>;\n  /**\n   * The parameters the function accepts, describes as a JSON Schema object.\n   */\n  parameters: JSONSchema;\n  /**\n   * A description of what the function does, used by the model to choose when and how to call the function.\n   */\n  description: string;\n  /**\n   * The name of the function to be called. Will default to function.name if omitted.\n   */\n  name?: string | undefined;\n  strict?: boolean | undefined;\n};\n\nexport type RunnableFunctionWithoutParse = {\n  /**\n   * @param args the raw args from the OpenAI function call.\n   * @returns a string to send back to OpenAI\n   */\n  function: (\n    args: string,\n    runner: ChatCompletionRunner<unknown> | ChatCompletionStreamingRunner<unknown>,\n  ) => PromiseOrValue<unknown>;\n  /**\n   * The parameters the function accepts, describes as a JSON Schema object.\n   */\n  parameters: JSONSchema;\n  /**\n   * A description of what the function does, used by the model to choose when and how to call the function.\n   */\n  description: string;\n  /**\n   * The name of the function to be called. Will default to function.name if omitted.\n   */\n  name?: string | undefined;\n  strict?: boolean | undefined;\n};\n\nexport type RunnableFunction<Args extends object | string> =\n  Args extends string ? RunnableFunctionWithoutParse\n  : Args extends object ? RunnableFunctionWithParse<Args>\n  : never;\n\nexport type RunnableToolFunction<Args extends object | string> =\n  Args extends string ? RunnableToolFunctionWithoutParse\n  : Args extends object ? RunnableToolFunctionWithParse<Args>\n  : never;\n\nexport type RunnableToolFunctionWithoutParse = {\n  type: 'function';\n  function: RunnableFunctionWithoutParse;\n};\nexport type RunnableToolFunctionWithParse<Args extends object> = {\n  type: 'function';\n  function: RunnableFunctionWithParse<Args>;\n};\n\nexport function isRunnableFunctionWithParse<Args extends object>(\n  fn: any,\n): fn is RunnableFunctionWithParse<Args> {\n  return typeof (fn as any).parse === 'function';\n}\n\nexport type BaseFunctionsArgs = readonly (object | string)[];\n\nexport type RunnableFunctions<FunctionsArgs extends BaseFunctionsArgs> =\n  [any[]] extends [FunctionsArgs] ? readonly RunnableFunction<any>[]\n  : {\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableFunction<FunctionsArgs[Index]>\n      : FunctionsArgs[Index];\n    };\n\nexport type RunnableTools<FunctionsArgs extends BaseFunctionsArgs> =\n  [any[]] extends [FunctionsArgs] ? readonly RunnableToolFunction<any>[]\n  : {\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableToolFunction<FunctionsArgs[Index]>\n      : FunctionsArgs[Index];\n    };\n\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */\nexport class ParsingFunction<Args extends object> {\n  function: RunnableFunctionWithParse<Args>['function'];\n  parse: RunnableFunctionWithParse<Args>['parse'];\n  parameters: RunnableFunctionWithParse<Args>['parameters'];\n  description: RunnableFunctionWithParse<Args>['description'];\n  name?: RunnableFunctionWithParse<Args>['name'];\n\n  constructor(input: RunnableFunctionWithParse<Args>) {\n    this.function = input.function;\n    this.parse = input.parse;\n    this.parameters = input.parameters;\n    this.description = input.description;\n    this.name = input.name;\n  }\n}\n\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction<Args extends object> {\n  type: 'function';\n  function: RunnableFunctionWithParse<Args>;\n\n  constructor(input: RunnableFunctionWithParse<Args>) {\n    this.type = 'function';\n    this.function = input;\n  }\n}\n","import {\n  type ChatCompletionAssistantMessageParam,\n  type ChatCompletionFunctionMessageParam,\n  type ChatCompletionMessageParam,\n  type ChatCompletionToolMessageParam,\n} from '../resources';\n\nexport const isAssistantMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionAssistantMessageParam => {\n  return message?.role === 'assistant';\n};\n\nexport const isFunctionMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionFunctionMessageParam => {\n  return message?.role === 'function';\n};\n\nexport const isToolMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionToolMessageParam => {\n  return message?.role === 'tool';\n};\n\nexport function isPresent<T>(obj: T | null | undefined): obj is T {\n  return obj != null;\n}\n","import {\n  ChatCompletion,\n  ChatCompletionCreateParams,\n  ChatCompletionMessageToolCall,\n  ChatCompletionTool,\n} from '../resources/chat/completions';\nimport {\n  ChatCompletionStreamingToolRunnerParams,\n  ChatCompletionStreamParams,\n  ChatCompletionToolRunnerParams,\n  ParsedChatCompletion,\n  ParsedChoice,\n  ParsedFunctionToolCall,\n} from '../resources/beta/chat/completions';\nimport { ResponseFormatJSONSchema } from '../resources/shared';\nimport { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from '../error';\nimport { type ResponseFormatTextJSONSchemaConfig } from '../resources/responses/responses';\n\ntype AnyChatCompletionCreateParams =\n  | ChatCompletionCreateParams\n  | ChatCompletionToolRunnerParams<any>\n  | ChatCompletionStreamingToolRunnerParams<any>\n  | ChatCompletionStreamParams;\n\nexport type ExtractParsedContentFromParams<Params extends AnyChatCompletionCreateParams> =\n  Params['response_format'] extends AutoParseableResponseFormat<infer P> ? P : null;\n\nexport type AutoParseableResponseFormat<ParsedT> = ResponseFormatJSONSchema & {\n  __output: ParsedT; // type-level only\n\n  $brand: 'auto-parseable-response-format';\n  $parseRaw(content: string): ParsedT;\n};\n\nexport function makeParseableResponseFormat<ParsedT>(\n  response_format: ResponseFormatJSONSchema,\n  parser: (content: string) => ParsedT,\n): AutoParseableResponseFormat<ParsedT> {\n  const obj = { ...response_format };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableResponseFormat<ParsedT>;\n}\n\nexport type AutoParseableTextFormat<ParsedT> = ResponseFormatTextJSONSchemaConfig & {\n  __output: ParsedT; // type-level only\n\n  $brand: 'auto-parseable-response-format';\n  $parseRaw(content: string): ParsedT;\n};\n\nexport function makeParseableTextFormat<ParsedT>(\n  response_format: ResponseFormatTextJSONSchemaConfig,\n  parser: (content: string) => ParsedT,\n): AutoParseableTextFormat<ParsedT> {\n  const obj = { ...response_format };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableTextFormat<ParsedT>;\n}\n\nexport function isAutoParsableResponseFormat<ParsedT>(\n  response_format: any,\n): response_format is AutoParseableResponseFormat<ParsedT> {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\n\ntype ToolOptions = {\n  name: string;\n  arguments: any;\n  function?: ((args: any) => any) | undefined;\n};\n\nexport type AutoParseableTool<\n  OptionsT extends ToolOptions,\n  HasFunction = OptionsT['function'] extends Function ? true : false,\n> = ChatCompletionTool & {\n  __arguments: OptionsT['arguments']; // type-level only\n  __name: OptionsT['name']; // type-level only\n  __hasFunction: HasFunction; // type-level only\n\n  $brand: 'auto-parseable-tool';\n  $callback: ((args: OptionsT['arguments']) => any) | undefined;\n  $parseRaw(args: string): OptionsT['arguments'];\n};\n\nexport function makeParseableTool<OptionsT extends ToolOptions>(\n  tool: ChatCompletionTool,\n  {\n    parser,\n    callback,\n  }: {\n    parser: (content: string) => OptionsT['arguments'];\n    callback: ((args: any) => any) | undefined;\n  },\n): AutoParseableTool<OptionsT['arguments']> {\n  const obj = { ...tool };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n    $callback: {\n      value: callback,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableTool<OptionsT['arguments']>;\n}\n\nexport function isAutoParsableTool(tool: any): tool is AutoParseableTool<any> {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\n\nexport function maybeParseChatCompletion<\n  Params extends ChatCompletionCreateParams | null,\n  ParsedT = Params extends null ? null : ExtractParsedContentFromParams<NonNullable<Params>>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map((choice) => ({\n        ...choice,\n        message: {\n          ...choice.message,\n          parsed: null,\n          ...(choice.message.tool_calls ?\n            {\n              tool_calls: choice.message.tool_calls,\n            }\n          : undefined),\n        },\n      })),\n    };\n  }\n\n  return parseChatCompletion(completion, params);\n}\n\nexport function parseChatCompletion<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  const choices: Array<ParsedChoice<ParsedT>> = completion.choices.map((choice): ParsedChoice<ParsedT> => {\n    if (choice.finish_reason === 'length') {\n      throw new LengthFinishReasonError();\n    }\n\n    if (choice.finish_reason === 'content_filter') {\n      throw new ContentFilterFinishReasonError();\n    }\n\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        ...(choice.message.tool_calls ?\n          {\n            tool_calls:\n              choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? undefined,\n          }\n        : undefined),\n        parsed:\n          choice.message.content && !choice.message.refusal ?\n            parseResponseFormat(params, choice.message.content)\n          : null,\n      },\n    };\n  });\n\n  return { ...completion, choices };\n}\n\nfunction parseResponseFormat<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(params: Params, content: string): ParsedT | null {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format as AutoParseableResponseFormat<ParsedT>;\n\n      return response_format.$parseRaw(content);\n    }\n\n    return JSON.parse(content);\n  }\n\n  return null;\n}\n\nfunction parseToolCall<Params extends ChatCompletionCreateParams>(\n  params: Params,\n  toolCall: ChatCompletionMessageToolCall,\n): ParsedFunctionToolCall {\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments:\n        isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\n        : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\n        : null,\n    },\n  };\n}\n\nexport function shouldParseToolCall(\n  params: ChatCompletionCreateParams | null | undefined,\n  toolCall: ChatCompletionMessageToolCall,\n): boolean {\n  if (!params) {\n    return false;\n  }\n\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\n\nexport function hasAutoParseableInput(params: AnyChatCompletionCreateParams): boolean {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n\n  return (\n    params.tools?.some(\n      (t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true),\n    ) ?? false\n  );\n}\n\nexport function validateInputTools(tools: ChatCompletionTool[] | undefined) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(\n        `Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``,\n      );\n    }\n\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(\n        `The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`,\n      );\n    }\n  }\n}\n","import * as Core from '../core';\nimport { type CompletionUsage } from '../resources/completions';\nimport {\n  type ChatCompletion,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParams,\n  type ChatCompletionTool,\n} from '../resources/chat/completions';\nimport { OpenAIError } from '../error';\nimport {\n  type RunnableFunction,\n  isRunnableFunctionWithParse,\n  type BaseFunctionsArgs,\n  RunnableToolFunction,\n} from './RunnableFunction';\nimport { ChatCompletionFunctionRunnerParams, ChatCompletionToolRunnerParams } from './ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingFunctionRunnerParams,\n  ChatCompletionStreamingToolRunnerParams,\n} from './ChatCompletionStreamingRunner';\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from './chatCompletionUtils';\nimport { BaseEvents, EventStream } from './EventStream';\nimport { ParsedChatCompletion } from '../resources/beta/chat/completions';\nimport OpenAI from '../index';\nimport { isAutoParsableTool, parseChatCompletion } from '../lib/parser';\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport interface RunnerOptions extends Core.RequestOptions {\n  /** How many requests to make before canceling. Default 10. */\n  maxChatCompletions?: number;\n}\n\nexport class AbstractChatCompletionRunner<\n  EventTypes extends AbstractChatCompletionRunnerEvents,\n  ParsedT,\n> extends EventStream<EventTypes> {\n  protected _chatCompletions: ParsedChatCompletion<ParsedT>[] = [];\n  messages: ChatCompletionMessageParam[] = [];\n\n  protected _addChatCompletion(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n    chatCompletion: ParsedChatCompletion<ParsedT>,\n  ): ParsedChatCompletion<ParsedT> {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message as ChatCompletionMessageParam);\n    return chatCompletion;\n  }\n\n  protected _addMessage(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n    message: ChatCompletionMessageParam,\n    emit = true,\n  ) {\n    if (!('content' in message)) message.content = null;\n\n    this.messages.push(message);\n\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content as string);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion(): Promise<ParsedChatCompletion<ParsedT>> {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n\n  #getFinalContent(): string | null {\n    return this.#getFinalMessage().content ?? null;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent(): Promise<string | null> {\n    await this.done();\n    return this.#getFinalContent();\n  }\n\n  #getFinalMessage(): ChatCompletionMessage {\n    let i = this.messages.length;\n    while (i-- > 0) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message)) {\n        const { function_call, ...rest } = message;\n\n        // TODO: support audio here\n        const ret: Omit<ChatCompletionMessage, 'audio'> = {\n          ...rest,\n          content: (message as ChatCompletionMessage).content ?? null,\n          refusal: (message as ChatCompletionMessage).refusal ?? null,\n        };\n        if (function_call) {\n          ret.function_call = function_call;\n        }\n        return ret;\n      }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage(): Promise<ChatCompletionMessage> {\n    await this.done();\n    return this.#getFinalMessage();\n  }\n\n  #getFinalFunctionCall(): ChatCompletionMessage.FunctionCall | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message) && message?.function_call) {\n        return message.function_call;\n      }\n      if (isAssistantMessage(message) && message?.tool_calls?.length) {\n        return message.tool_calls.at(-1)?.function;\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall(): Promise<ChatCompletionMessage.FunctionCall | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCall();\n  }\n\n  #getFinalFunctionCallResult(): string | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isFunctionMessage(message) && message.content != null) {\n        return message.content;\n      }\n      if (\n        isToolMessage(message) &&\n        message.content != null &&\n        typeof message.content === 'string' &&\n        this.messages.some(\n          (x) =>\n            x.role === 'assistant' &&\n            x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id),\n        )\n      ) {\n        return message.content;\n      }\n    }\n\n    return;\n  }\n\n  async finalFunctionCallResult(): Promise<string | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCallResult();\n  }\n\n  #calculateTotalUsage(): CompletionUsage {\n    const total: CompletionUsage = {\n      completion_tokens: 0,\n      prompt_tokens: 0,\n      total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n      if (usage) {\n        total.completion_tokens += usage.completion_tokens;\n        total.prompt_tokens += usage.prompt_tokens;\n        total.total_tokens += usage.total_tokens;\n      }\n    }\n    return total;\n  }\n\n  async totalUsage(): Promise<CompletionUsage> {\n    await this.done();\n    return this.#calculateTotalUsage();\n  }\n\n  allChatCompletions(): ChatCompletion[] {\n    return [...this._chatCompletions];\n  }\n\n  protected override _emitFinal(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n  ) {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.#getFinalMessage();\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = this.#getFinalContent();\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = this.#getFinalFunctionCall();\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = this.#getFinalFunctionCallResult();\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some((c) => c.usage)) {\n      this._emit('totalUsage', this.#calculateTotalUsage());\n    }\n  }\n\n  #validateParams(params: ChatCompletionCreateParams): void {\n    if (params.n != null && params.n > 1) {\n      throw new OpenAIError(\n        'ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.',\n      );\n    }\n  }\n\n  protected async _createChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedChatCompletion<ParsedT>> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#validateParams(params);\n\n    const chatCompletion = await client.chat.completions.create(\n      { ...params, stream: false },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    return this._addChatCompletion(parseChatCompletion(chatCompletion, params));\n  }\n\n  protected async _runChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(client, params, options);\n  }\n\n  protected async _runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    client: OpenAI,\n    params:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'function' as const;\n    const { function_call = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions: ChatCompletionCreateParams.Function[] = params.functions.map(\n      (f): ChatCompletionCreateParams.Function => ({\n        name: f.name || f.function.name,\n        parameters: f.parameters as Record<string, unknown>,\n        description: f.description,\n      }),\n    );\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        client,\n        {\n          ...restParams,\n          function_call,\n          functions,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const { name, arguments: args } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n          .map((f) => JSON.stringify(f.name))\n          .join(', ')}. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(\n          singleFunctionToCall,\n        )} requested. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      }\n\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error),\n        });\n        continue;\n      }\n\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = this.#stringifyFunctionCallResult(rawContent);\n\n      this._addMessage({ role, name, content });\n\n      if (singleFunctionToCall) return;\n    }\n  }\n\n  protected async _runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    client: OpenAI,\n    params:\n      | ChatCompletionToolRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'tool' as const;\n    const { tool_choice = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    // TODO(someday): clean this logic up\n    const inputTools = params.tools.map((tool): RunnableToolFunction<any> => {\n      if (isAutoParsableTool(tool)) {\n        if (!tool.$callback) {\n          throw new OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n        }\n\n        return {\n          type: 'function',\n          function: {\n            function: tool.$callback,\n            name: tool.function.name,\n            description: tool.function.description || '',\n            parameters: tool.function.parameters as any,\n            parse: tool.$parseRaw,\n            strict: true,\n          },\n        };\n      }\n\n      return tool as any as RunnableToolFunction<any>;\n    });\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of inputTools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n\n    const tools: ChatCompletionTool[] =\n      'tools' in params ?\n        inputTools.map((t) =>\n          t.type === 'function' ?\n            {\n              type: 'function',\n              function: {\n                name: t.function.name || t.function.function.name,\n                parameters: t.function.parameters as Record<string, unknown>,\n                description: t.function.description,\n                strict: t.function.strict,\n              },\n            }\n          : (t as unknown as ChatCompletionTool),\n        )\n      : (undefined as any);\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        client,\n        {\n          ...restParams,\n          tool_choice,\n          tools,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls?.length) {\n        return;\n      }\n\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const { name, arguments: args } = tool_call.function;\n        const fn = functionsByName[name];\n\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(\n            functionsByName,\n          )\n            .map((name) => JSON.stringify(name))\n            .join(', ')}. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(\n            singleFunctionToCall,\n          )} requested. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = this.#stringifyFunctionCallResult(rawContent);\n        this._addMessage({ role, tool_call_id, content });\n\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n\n    return;\n  }\n\n  #stringifyFunctionCallResult(rawContent: unknown): string {\n    return (\n      typeof rawContent === 'string' ? rawContent\n      : rawContent === undefined ? 'undefined'\n      : JSON.stringify(rawContent)\n    );\n  }\n}\n\nexport interface AbstractChatCompletionRunnerEvents extends BaseEvents {\n  functionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  message: (message: ChatCompletionMessageParam) => void;\n  chatCompletion: (completion: ChatCompletion) => void;\n  finalContent: (contentSnapshot: string) => void;\n  finalMessage: (message: ChatCompletionMessageParam) => void;\n  finalChatCompletion: (completion: ChatCompletion) => void;\n  finalFunctionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  functionCallResult: (content: string) => void;\n  finalFunctionCallResult: (content: string) => void;\n  totalUsage: (usage: CompletionUsage) => void;\n}\n","import {\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParamsNonStreaming,\n} from '../resources/chat/completions';\nimport { type RunnableFunctions, type BaseFunctionsArgs, RunnableTools } from './RunnableFunction';\nimport {\n  AbstractChatCompletionRunner,\n  AbstractChatCompletionRunnerEvents,\n  RunnerOptions,\n} from './AbstractChatCompletionRunner';\nimport { isAssistantMessage } from './chatCompletionUtils';\nimport OpenAI from '../index';\nimport { AutoParseableTool } from '../lib/parser';\n\nexport interface ChatCompletionRunnerEvents extends AbstractChatCompletionRunnerEvents {\n  content: (content: string) => void;\n}\n\nexport type ChatCompletionFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\n};\n\nexport class ChatCompletionRunner<ParsedT = null> extends AbstractChatCompletionRunner<\n  ChatCompletionRunnerEvents,\n  ParsedT\n> {\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(\n    client: OpenAI,\n    params: ChatCompletionFunctionRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<null> {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n\n  static runTools<ParsedT>(\n    client: OpenAI,\n    params: ChatCompletionToolRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<ParsedT> {\n    const runner = new ChatCompletionRunner<ParsedT>();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n\n  override _addMessage(\n    this: ChatCompletionRunner<ParsedT>,\n    message: ChatCompletionMessageParam,\n    emit: boolean = true,\n  ) {\n    super._addMessage(message, emit);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content as string);\n    }\n  }\n}\n","const STR = 0b000000001;\nconst NUM = 0b000000010;\nconst ARR = 0b000000100;\nconst OBJ = 0b000001000;\nconst NULL = 0b000010000;\nconst BOOL = 0b000100000;\nconst NAN = 0b001000000;\nconst INFINITY = 0b010000000;\nconst MINUS_INFINITY = 0b100000000;\n\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\n\nconst Allow = {\n  STR,\n  NUM,\n  ARR,\n  OBJ,\n  NULL,\n  BOOL,\n  NAN,\n  INFINITY,\n  MINUS_INFINITY,\n  INF,\n  SPECIAL,\n  ATOM,\n  COLLECTION,\n  ALL,\n};\n\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {}\n\nclass MalformedJSON extends Error {}\n\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString: string, allowPartial: number = Allow.ALL): any {\n  if (typeof jsonString !== 'string') {\n    throw new TypeError(`expecting str, got ${typeof jsonString}`);\n  }\n  if (!jsonString.trim()) {\n    throw new Error(`${jsonString} is empty`);\n  }\n  return _parseJSON(jsonString.trim(), allowPartial);\n}\n\nconst _parseJSON = (jsonString: string, allow: number) => {\n  const length = jsonString.length;\n  let index = 0;\n\n  const markPartialJSON = (msg: string) => {\n    throw new PartialJSON(`${msg} at position ${index}`);\n  };\n\n  const throwMalformedError = (msg: string) => {\n    throw new MalformedJSON(`${msg} at position ${index}`);\n  };\n\n  const parseAny: () => any = () => {\n    skipBlank();\n    if (index >= length) markPartialJSON('Unexpected end of input');\n    if (jsonString[index] === '\"') return parseStr();\n    if (jsonString[index] === '{') return parseObj();\n    if (jsonString[index] === '[') return parseArr();\n    if (\n      jsonString.substring(index, index + 4) === 'null' ||\n      (Allow.NULL & allow && length - index < 4 && 'null'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 4;\n      return null;\n    }\n    if (\n      jsonString.substring(index, index + 4) === 'true' ||\n      (Allow.BOOL & allow && length - index < 4 && 'true'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 4;\n      return true;\n    }\n    if (\n      jsonString.substring(index, index + 5) === 'false' ||\n      (Allow.BOOL & allow && length - index < 5 && 'false'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 5;\n      return false;\n    }\n    if (\n      jsonString.substring(index, index + 8) === 'Infinity' ||\n      (Allow.INFINITY & allow && length - index < 8 && 'Infinity'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 8;\n      return Infinity;\n    }\n    if (\n      jsonString.substring(index, index + 9) === '-Infinity' ||\n      (Allow.MINUS_INFINITY & allow &&\n        1 < length - index &&\n        length - index < 9 &&\n        '-Infinity'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 9;\n      return -Infinity;\n    }\n    if (\n      jsonString.substring(index, index + 3) === 'NaN' ||\n      (Allow.NAN & allow && length - index < 3 && 'NaN'.startsWith(jsonString.substring(index)))\n    ) {\n      index += 3;\n      return NaN;\n    }\n    return parseNum();\n  };\n\n  const parseStr: () => string = () => {\n    const start = index;\n    let escape = false;\n    index++; // skip initial quote\n    while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === '\\\\'))) {\n      escape = jsonString[index] === '\\\\' ? !escape : false;\n      index++;\n    }\n    if (jsonString.charAt(index) == '\"') {\n      try {\n        return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    } else if (Allow.STR & allow) {\n      try {\n        return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n      } catch (e) {\n        // SyntaxError: Invalid escape sequence\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\\\')) + '\"');\n      }\n    }\n    markPartialJSON('Unterminated string literal');\n  };\n\n  const parseObj = () => {\n    index++; // skip initial brace\n    skipBlank();\n    const obj: Record<string, any> = {};\n    try {\n      while (jsonString[index] !== '}') {\n        skipBlank();\n        if (index >= length && Allow.OBJ & allow) return obj;\n        const key = parseStr();\n        skipBlank();\n        index++; // skip colon\n        try {\n          const value = parseAny();\n          Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });\n        } catch (e) {\n          if (Allow.OBJ & allow) return obj;\n          else throw e;\n        }\n        skipBlank();\n        if (jsonString[index] === ',') index++; // skip comma\n      }\n    } catch (e) {\n      if (Allow.OBJ & allow) return obj;\n      else markPartialJSON(\"Expected '}' at end of object\");\n    }\n    index++; // skip final brace\n    return obj;\n  };\n\n  const parseArr = () => {\n    index++; // skip initial bracket\n    const arr = [];\n    try {\n      while (jsonString[index] !== ']') {\n        arr.push(parseAny());\n        skipBlank();\n        if (jsonString[index] === ',') {\n          index++; // skip comma\n        }\n      }\n    } catch (e) {\n      if (Allow.ARR & allow) {\n        return arr;\n      }\n      markPartialJSON(\"Expected ']' at end of array\");\n    }\n    index++; // skip final bracket\n    return arr;\n  };\n\n  const parseNum = () => {\n    if (index === 0) {\n      if (jsonString === '-' && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n      try {\n        return JSON.parse(jsonString);\n      } catch (e) {\n        if (Allow.NUM & allow) {\n          try {\n            if ('.' === jsonString[jsonString.length - 1])\n              return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('.')));\n            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('e')));\n          } catch (e) {}\n        }\n        throwMalformedError(String(e));\n      }\n    }\n\n    const start = index;\n\n    if (jsonString[index] === '-') index++;\n    while (jsonString[index] && !',]}'.includes(jsonString[index]!)) index++;\n\n    if (index == length && !(Allow.NUM & allow)) markPartialJSON('Unterminated number literal');\n\n    try {\n      return JSON.parse(jsonString.substring(start, index));\n    } catch (e) {\n      if (jsonString.substring(start, index) === '-' && Allow.NUM & allow)\n        markPartialJSON(\"Not sure what '-' is\");\n      try {\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    }\n  };\n\n  const skipBlank = () => {\n    while (index < length && ' \\n\\r\\t'.includes(jsonString[index]!)) {\n      index++;\n    }\n  };\n\n  return parseAny();\n};\n\n// using this function with malformed JSON is undefined behavior\nconst partialParse = (input: string) => parseJSON(input, Allow.ALL ^ Allow.NUM);\n\nexport { partialParse, PartialJSON, MalformedJSON };\n","import * as Core from '../core';\nimport {\n  OpenAIError,\n  APIUserAbortError,\n  LengthFinishReasonError,\n  ContentFilterFinishReasonError,\n} from '../error';\nimport {\n  ChatCompletionTokenLogprob,\n  type ChatCompletion,\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParams,\n  type ChatCompletionCreateParamsStreaming,\n  type ChatCompletionCreateParamsBase,\n  type ChatCompletionRole,\n} from '../resources/chat/completions/completions';\nimport {\n  AbstractChatCompletionRunner,\n  type AbstractChatCompletionRunnerEvents,\n} from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from '../_shims/index';\nimport { Stream } from '../streaming';\nimport OpenAI from '../index';\nimport { ParsedChatCompletion } from '../resources/beta/chat/completions';\nimport {\n  AutoParseableResponseFormat,\n  hasAutoParseableInput,\n  isAutoParsableResponseFormat,\n  isAutoParsableTool,\n  maybeParseChatCompletion,\n  shouldParseToolCall,\n} from '../lib/parser';\nimport { partialParse } from '../_vendor/partial-json-parser/parser';\n\nexport interface ContentDeltaEvent {\n  delta: string;\n  snapshot: string;\n  parsed: unknown | null;\n}\n\nexport interface ContentDoneEvent<ParsedT = null> {\n  content: string;\n  parsed: ParsedT | null;\n}\n\nexport interface RefusalDeltaEvent {\n  delta: string;\n  snapshot: string;\n}\n\nexport interface RefusalDoneEvent {\n  refusal: string;\n}\n\nexport interface FunctionToolCallArgumentsDeltaEvent {\n  name: string;\n\n  index: number;\n\n  arguments: string;\n\n  parsed_arguments: unknown;\n\n  arguments_delta: string;\n}\n\nexport interface FunctionToolCallArgumentsDoneEvent {\n  name: string;\n\n  index: number;\n\n  arguments: string;\n\n  parsed_arguments: unknown;\n}\n\nexport interface LogProbsContentDeltaEvent {\n  content: Array<ChatCompletionTokenLogprob>;\n  snapshot: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsContentDoneEvent {\n  content: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsRefusalDeltaEvent {\n  refusal: Array<ChatCompletionTokenLogprob>;\n  snapshot: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsRefusalDoneEvent {\n  refusal: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface ChatCompletionStreamEvents<ParsedT = null> extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n\n  'content.delta': (props: ContentDeltaEvent) => void;\n  'content.done': (props: ContentDoneEvent<ParsedT>) => void;\n\n  'refusal.delta': (props: RefusalDeltaEvent) => void;\n  'refusal.done': (props: RefusalDoneEvent) => void;\n\n  'tool_calls.function.arguments.delta': (props: FunctionToolCallArgumentsDeltaEvent) => void;\n  'tool_calls.function.arguments.done': (props: FunctionToolCallArgumentsDoneEvent) => void;\n\n  'logprobs.content.delta': (props: LogProbsContentDeltaEvent) => void;\n  'logprobs.content.done': (props: LogProbsContentDoneEvent) => void;\n\n  'logprobs.refusal.delta': (props: LogProbsRefusalDeltaEvent) => void;\n  'logprobs.refusal.done': (props: LogProbsRefusalDoneEvent) => void;\n}\n\nexport type ChatCompletionStreamParams = Omit<ChatCompletionCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\ninterface ChoiceEventState {\n  content_done: boolean;\n  refusal_done: boolean;\n  logprobs_content_done: boolean;\n  logprobs_refusal_done: boolean;\n  current_tool_call_index: number | null;\n  done_tool_calls: Set<number>;\n}\n\nexport class ChatCompletionStream<ParsedT = null>\n  extends AbstractChatCompletionRunner<ChatCompletionStreamEvents<ParsedT>, ParsedT>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  #params: ChatCompletionCreateParams | null;\n  #choiceEventStates: ChoiceEventState[];\n  #currentChatCompletionSnapshot: ChatCompletionSnapshot | undefined;\n\n  constructor(params: ChatCompletionCreateParams | null) {\n    super();\n    this.#params = params;\n    this.#choiceEventStates = [];\n  }\n\n  get currentChatCompletionSnapshot(): ChatCompletionSnapshot | undefined {\n    return this.#currentChatCompletionSnapshot;\n  }\n\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream: ReadableStream): ChatCompletionStream<null> {\n    const runner = new ChatCompletionStream(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  static createChatCompletion<ParsedT>(\n    client: OpenAI,\n    params: ChatCompletionStreamParams,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream<ParsedT> {\n    const runner = new ChatCompletionStream<ParsedT>(params as ChatCompletionCreateParamsStreaming);\n    runner._run(() =>\n      runner._runChatCompletion(\n        client,\n        { ...params, stream: true },\n        { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } },\n      ),\n    );\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentChatCompletionSnapshot = undefined;\n  }\n\n  #getChoiceEventState(choice: ChatCompletionSnapshot.Choice): ChoiceEventState {\n    let state = this.#choiceEventStates[choice.index];\n    if (state) {\n      return state;\n    }\n\n    state = {\n      content_done: false,\n      refusal_done: false,\n      logprobs_content_done: false,\n      logprobs_refusal_done: false,\n      done_tool_calls: new Set(),\n      current_tool_call_index: null,\n    };\n    this.#choiceEventStates[choice.index] = state;\n    return state;\n  }\n\n  #addChunk(this: ChatCompletionStream<ParsedT>, chunk: ChatCompletionChunk) {\n    if (this.ended) return;\n\n    const completion = this.#accumulateChatCompletion(chunk);\n    this._emit('chunk', chunk, completion);\n\n    for (const choice of chunk.choices) {\n      const choiceSnapshot = completion.choices[choice.index]!;\n\n      if (\n        choice.delta.content != null &&\n        choiceSnapshot.message?.role === 'assistant' &&\n        choiceSnapshot.message?.content\n      ) {\n        this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n        this._emit('content.delta', {\n          delta: choice.delta.content,\n          snapshot: choiceSnapshot.message.content,\n          parsed: choiceSnapshot.message.parsed,\n        });\n      }\n\n      if (\n        choice.delta.refusal != null &&\n        choiceSnapshot.message?.role === 'assistant' &&\n        choiceSnapshot.message?.refusal\n      ) {\n        this._emit('refusal.delta', {\n          delta: choice.delta.refusal,\n          snapshot: choiceSnapshot.message.refusal,\n        });\n      }\n\n      if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.content.delta', {\n          content: choice.logprobs?.content,\n          snapshot: choiceSnapshot.logprobs?.content ?? [],\n        });\n      }\n\n      if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.refusal.delta', {\n          refusal: choice.logprobs?.refusal,\n          snapshot: choiceSnapshot.logprobs?.refusal ?? [],\n        });\n      }\n\n      const state = this.#getChoiceEventState(choiceSnapshot);\n\n      if (choiceSnapshot.finish_reason) {\n        this.#emitContentDoneEvents(choiceSnapshot);\n\n        if (state.current_tool_call_index != null) {\n          this.#emitToolCallDoneEvent(choiceSnapshot, state.current_tool_call_index);\n        }\n      }\n\n      for (const toolCall of choice.delta.tool_calls ?? []) {\n        if (state.current_tool_call_index !== toolCall.index) {\n          this.#emitContentDoneEvents(choiceSnapshot);\n\n          // new tool call started, the previous one is done\n          if (state.current_tool_call_index != null) {\n            this.#emitToolCallDoneEvent(choiceSnapshot, state.current_tool_call_index);\n          }\n        }\n\n        state.current_tool_call_index = toolCall.index;\n      }\n\n      for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n        if (!toolCallSnapshot?.type) {\n          continue;\n        }\n\n        if (toolCallSnapshot?.type === 'function') {\n          this._emit('tool_calls.function.arguments.delta', {\n            name: toolCallSnapshot.function?.name,\n            index: toolCallDelta.index,\n            arguments: toolCallSnapshot.function.arguments,\n            parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n            arguments_delta: toolCallDelta.function?.arguments ?? '',\n          });\n        } else {\n          assertNever(toolCallSnapshot?.type);\n        }\n      }\n    }\n  }\n\n  #emitToolCallDoneEvent(choiceSnapshot: ChatCompletionSnapshot.Choice, toolCallIndex: number) {\n    const state = this.#getChoiceEventState(choiceSnapshot);\n    if (state.done_tool_calls.has(toolCallIndex)) {\n      // we've already fired the done event\n      return;\n    }\n\n    const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n    if (!toolCallSnapshot) {\n      throw new Error('no tool call snapshot');\n    }\n    if (!toolCallSnapshot.type) {\n      throw new Error('tool call snapshot missing `type`');\n    }\n\n    if (toolCallSnapshot.type === 'function') {\n      const inputTool = this.#params?.tools?.find(\n        (tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name,\n      );\n\n      this._emit('tool_calls.function.arguments.done', {\n        name: toolCallSnapshot.function.name,\n        index: toolCallIndex,\n        arguments: toolCallSnapshot.function.arguments,\n        parsed_arguments:\n          isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)\n          : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)\n          : null,\n      });\n    } else {\n      assertNever(toolCallSnapshot.type);\n    }\n  }\n\n  #emitContentDoneEvents(choiceSnapshot: ChatCompletionSnapshot.Choice) {\n    const state = this.#getChoiceEventState(choiceSnapshot);\n\n    if (choiceSnapshot.message.content && !state.content_done) {\n      state.content_done = true;\n\n      const responseFormat = this.#getAutoParseableResponseFormat();\n\n      this._emit('content.done', {\n        content: choiceSnapshot.message.content,\n        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : (null as any),\n      });\n    }\n\n    if (choiceSnapshot.message.refusal && !state.refusal_done) {\n      state.refusal_done = true;\n\n      this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });\n    }\n\n    if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n      state.logprobs_content_done = true;\n\n      this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });\n    }\n\n    if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n      state.logprobs_refusal_done = true;\n\n      this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });\n    }\n  }\n\n  #endRequest(): ParsedChatCompletion<ParsedT> {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentChatCompletionSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n    this.#currentChatCompletionSnapshot = undefined;\n    this.#choiceEventStates = [];\n    return finalizeChatCompletion(snapshot, this.#params);\n  }\n\n  protected override async _createChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedChatCompletion<ParsedT>> {\n    super._createChatCompletion;\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n\n    const stream = await client.chat.completions.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const chunk of stream) {\n      this.#addChunk(chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    this._connected();\n    const stream = Stream.fromReadableStream<ChatCompletionChunk>(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(this.#endRequest());\n      }\n\n      this.#addChunk(chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  #getAutoParseableResponseFormat(): AutoParseableResponseFormat<ParsedT> | null {\n    const responseFormat = this.#params?.response_format;\n    if (isAutoParsableResponseFormat<ParsedT>(responseFormat)) {\n      return responseFormat;\n    }\n\n    return null;\n  }\n\n  #accumulateChatCompletion(chunk: ChatCompletionChunk): ChatCompletionSnapshot {\n    let snapshot = this.#currentChatCompletionSnapshot;\n    const { choices, ...rest } = chunk;\n    if (!snapshot) {\n      snapshot = this.#currentChatCompletionSnapshot = {\n        ...rest,\n        choices: [],\n      };\n    } else {\n      Object.assign(snapshot, rest);\n    }\n\n    for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n      }\n\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const { content, refusal, ...rest } = logprobs;\n          assertIsEmpty(rest);\n          Object.assign(choice.logprobs, rest);\n\n          if (content) {\n            choice.logprobs.content ??= [];\n            choice.logprobs.content.push(...content);\n          }\n\n          if (refusal) {\n            choice.logprobs.refusal ??= [];\n            choice.logprobs.refusal.push(...refusal);\n          }\n        }\n      }\n\n      if (finish_reason) {\n        choice.finish_reason = finish_reason;\n\n        if (this.#params && hasAutoParseableInput(this.#params)) {\n          if (finish_reason === 'length') {\n            throw new LengthFinishReasonError();\n          }\n\n          if (finish_reason === 'content_filter') {\n            throw new ContentFilterFinishReasonError();\n          }\n        }\n      }\n\n      Object.assign(choice, other);\n\n      if (!delta) continue; // Shouldn't happen; just in case.\n\n      const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n      assertIsEmpty(rest);\n      Object.assign(choice.message, rest);\n\n      if (refusal) {\n        choice.message.refusal = (choice.message.refusal || '') + refusal;\n      }\n\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            choice.message.function_call.arguments ??= '';\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (content) {\n        choice.message.content = (choice.message.content || '') + content;\n\n        if (!choice.message.refusal && this.#getAutoParseableResponseFormat()) {\n          choice.message.parsed = partialParse(choice.message.content);\n        }\n      }\n\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n\n        for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n          const tool_call = (choice.message.tool_calls[index] ??=\n            {} as ChatCompletionSnapshot.Choice.Message.ToolCall);\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) tool_call.function ??= { name: fn.name ?? '', arguments: '' };\n          if (fn?.name) tool_call.function!.name = fn.name;\n          if (fn?.arguments) {\n            tool_call.function!.arguments += fn.arguments;\n\n            if (shouldParseToolCall(this.#params, tool_call)) {\n              tool_call.function!.parsed_arguments = partialParse(tool_call.function!.arguments);\n            }\n          }\n        }\n      }\n    }\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](this: ChatCompletionStream<ParsedT>): AsyncIterator<ChatCompletionChunk> {\n    const pushQueue: ChatCompletionChunk[] = [];\n    const readQueue: {\n      resolve: (chunk: ChatCompletionChunk | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    this.on('chunk', (chunk) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ChatCompletionChunk>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ChatCompletionChunk | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\n\nfunction finalizeChatCompletion<ParsedT>(\n  snapshot: ChatCompletionSnapshot,\n  params: ChatCompletionCreateParams | null,\n): ParsedChatCompletion<ParsedT> {\n  const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n  const completion: ChatCompletion = {\n    ...rest,\n    id,\n    choices: choices.map(\n      ({ message, finish_reason, index, logprobs, ...choiceRest }): ChatCompletion.Choice => {\n        if (!finish_reason) {\n          throw new OpenAIError(`missing finish_reason for choice ${index}`);\n        }\n\n        const { content = null, function_call, tool_calls, ...messageRest } = message;\n        const role = message.role as 'assistant'; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n        if (!role) {\n          throw new OpenAIError(`missing role for choice ${index}`);\n        }\n\n        if (function_call) {\n          const { arguments: args, name } = function_call;\n          if (args == null) {\n            throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n          }\n\n          if (!name) {\n            throw new OpenAIError(`missing function_call.name for choice ${index}`);\n          }\n\n          return {\n            ...choiceRest,\n            message: {\n              content,\n              function_call: { arguments: args, name },\n              role,\n              refusal: message.refusal ?? null,\n            },\n            finish_reason,\n            index,\n            logprobs,\n          };\n        }\n\n        if (tool_calls) {\n          return {\n            ...choiceRest,\n            index,\n            finish_reason,\n            logprobs,\n            message: {\n              ...messageRest,\n              role,\n              content,\n              refusal: message.refusal ?? null,\n              tool_calls: tool_calls.map((tool_call, i) => {\n                const { function: fn, type, id, ...toolRest } = tool_call;\n                const { arguments: args, name, ...fnRest } = fn || {};\n                if (id == null) {\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                }\n                if (type == null) {\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                }\n                if (name == null) {\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`,\n                  );\n                }\n                if (args == null) {\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`,\n                  );\n                }\n\n                return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n              }),\n            },\n          };\n        }\n        return {\n          ...choiceRest,\n          message: { ...messageRest, content, role, refusal: message.refusal ?? null },\n          finish_reason,\n          index,\n          logprobs,\n        };\n      },\n    ),\n    created,\n    model,\n    object: 'chat.completion',\n    ...(system_fingerprint ? { system_fingerprint } : {}),\n  };\n\n  return maybeParseChatCompletion(completion, params);\n}\n\nfunction str(x: unknown) {\n  return JSON.stringify(x);\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionSnapshot {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionSnapshot.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  // Note we do not include an \"object\" type on the snapshot,\n  // because the object is not a valid \"chat.completion\" until finalized.\n  // object: 'chat.completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n}\n\nexport namespace ChatCompletionSnapshot {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    message: Choice.Message;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: ChatCompletion.Choice['finish_reason'] | null;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs: ChatCompletion.Choice.Logprobs | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Message {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      refusal?: string | null;\n\n      parsed?: unknown | null;\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      function_call?: Message.FunctionCall;\n\n      tool_calls?: Array<Message.ToolCall>;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: ChatCompletionRole;\n    }\n\n    export namespace Message {\n      export interface ToolCall {\n        /**\n         * The ID of the tool call.\n         */\n        id: string;\n\n        function: ToolCall.Function;\n\n        /**\n         * The type of the tool.\n         */\n        type: 'function';\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          /**\n           * The arguments to call the function with, as generated by the model in JSON\n           * format. Note that the model does not always generate valid JSON, and may\n           * hallucinate parameters not defined by your function schema. Validate the\n           * arguments in your code before calling your function.\n           */\n          arguments: string;\n\n          parsed_arguments?: unknown;\n\n          /**\n           * The name of the function to call.\n           */\n          name: string;\n        }\n      }\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n    }\n  }\n}\n\ntype AssertIsEmpty<T extends {}> = keyof T extends never ? T : never;\n\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty<T extends {}>(obj: AssertIsEmpty<T>): asserts obj is AssertIsEmpty<T> {\n  return;\n}\n\nfunction assertNever(_x: never) {}\n","import {\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParamsStreaming,\n} from '../resources/chat/completions';\nimport { RunnerOptions, type AbstractChatCompletionRunnerEvents } from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from '../_shims/index';\nimport { RunnableTools, type BaseFunctionsArgs, type RunnableFunctions } from './RunnableFunction';\nimport { ChatCompletionSnapshot, ChatCompletionStream } from './ChatCompletionStream';\nimport OpenAI from '../index';\nimport { AutoParseableTool } from '../lib/parser';\n\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n}\n\nexport type ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionStreamingToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\n};\n\nexport class ChatCompletionStreamingRunner<ParsedT = null>\n  extends ChatCompletionStream<ParsedT>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  static override fromReadableStream(stream: ReadableStream): ChatCompletionStreamingRunner<null> {\n    const runner = new ChatCompletionStreamingRunner(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions<T extends (string | object)[]>(\n    client: OpenAI,\n    params: ChatCompletionStreamingFunctionRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner<null> {\n    const runner = new ChatCompletionStreamingRunner(null);\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n\n  static runTools<T extends (string | object)[], ParsedT = null>(\n    client: OpenAI,\n    params: ChatCompletionStreamingToolRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner<ParsedT> {\n    const runner = new ChatCompletionStreamingRunner<ParsedT>(\n      // @ts-expect-error TODO these types are incompatible\n      params,\n    );\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as RealtimeAPI from './realtime';\nimport * as Shared from '../../shared';\nimport * as SessionsAPI from './sessions';\nimport {\n  Session as SessionsAPISession,\n  SessionCreateParams,\n  SessionCreateResponse,\n  Sessions,\n} from './sessions';\nimport * as TranscriptionSessionsAPI from './transcription-sessions';\nimport {\n  TranscriptionSession,\n  TranscriptionSessionCreateParams,\n  TranscriptionSessions,\n} from './transcription-sessions';\n\nexport class Realtime extends APIResource {\n  sessions: SessionsAPI.Sessions = new SessionsAPI.Sessions(this._client);\n  transcriptionSessions: TranscriptionSessionsAPI.TranscriptionSessions =\n    new TranscriptionSessionsAPI.TranscriptionSessions(this._client);\n}\n\n/**\n * Returned when a conversation is created. Emitted right after session creation.\n */\nexport interface ConversationCreatedEvent {\n  /**\n   * The conversation resource.\n   */\n  conversation: ConversationCreatedEvent.Conversation;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The event type, must be `conversation.created`.\n   */\n  type: 'conversation.created';\n}\n\nexport namespace ConversationCreatedEvent {\n  /**\n   * The conversation resource.\n   */\n  export interface Conversation {\n    /**\n     * The unique ID of the conversation.\n     */\n    id?: string;\n\n    /**\n     * The object type, must be `realtime.conversation`.\n     */\n    object?: 'realtime.conversation';\n  }\n}\n\n/**\n * The item to add to the conversation.\n */\nexport interface ConversationItem {\n  /**\n   * The unique ID of the item, this can be generated by the client to help manage\n   * server-side context, but is not required because the server will generate one if\n   * not provided.\n   */\n  id?: string;\n\n  /**\n   * The arguments of the function call (for `function_call` items).\n   */\n  arguments?: string;\n\n  /**\n   * The ID of the function call (for `function_call` and `function_call_output`\n   * items). If passed on a `function_call_output` item, the server will check that a\n   * `function_call` item with the same ID exists in the conversation history.\n   */\n  call_id?: string;\n\n  /**\n   * The content of the message, applicable for `message` items.\n   *\n   * - Message items of role `system` support only `input_text` content\n   * - Message items of role `user` support `input_text` and `input_audio` content\n   * - Message items of role `assistant` support `text` content.\n   */\n  content?: Array<ConversationItemContent>;\n\n  /**\n   * The name of the function being called (for `function_call` items).\n   */\n  name?: string;\n\n  /**\n   * Identifier for the API object being returned - always `realtime.item`.\n   */\n  object?: 'realtime.item';\n\n  /**\n   * The output of the function call (for `function_call_output` items).\n   */\n  output?: string;\n\n  /**\n   * The role of the message sender (`user`, `assistant`, `system`), only applicable\n   * for `message` items.\n   */\n  role?: 'user' | 'assistant' | 'system';\n\n  /**\n   * The status of the item (`completed`, `incomplete`). These have no effect on the\n   * conversation, but are accepted for consistency with the\n   * `conversation.item.created` event.\n   */\n  status?: 'completed' | 'incomplete';\n\n  /**\n   * The type of the item (`message`, `function_call`, `function_call_output`).\n   */\n  type?: 'message' | 'function_call' | 'function_call_output';\n}\n\nexport interface ConversationItemContent {\n  /**\n   * ID of a previous conversation item to reference (for `item_reference` content\n   * types in `response.create` events). These can reference both client and server\n   * created items.\n   */\n  id?: string;\n\n  /**\n   * Base64-encoded audio bytes, used for `input_audio` content type.\n   */\n  audio?: string;\n\n  /**\n   * The text content, used for `input_text` and `text` content types.\n   */\n  text?: string;\n\n  /**\n   * The transcript of the audio, used for `input_audio` content type.\n   */\n  transcript?: string;\n\n  /**\n   * The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n   */\n  type?: 'input_text' | 'input_audio' | 'item_reference' | 'text';\n}\n\n/**\n * Add a new Item to the Conversation's context, including messages, function\n * calls, and function call responses. This event can be used both to populate a\n * \"history\" of the conversation and to add new items mid-stream, but has the\n * current limitation that it cannot populate assistant audio messages.\n *\n * If successful, the server will respond with a `conversation.item.created` event,\n * otherwise an `error` event will be sent.\n */\nexport interface ConversationItemCreateEvent {\n  /**\n   * The item to add to the conversation.\n   */\n  item: ConversationItem;\n\n  /**\n   * The event type, must be `conversation.item.create`.\n   */\n  type: 'conversation.item.create';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n\n  /**\n   * The ID of the preceding item after which the new item will be inserted. If not\n   * set, the new item will be appended to the end of the conversation. If set to\n   * `root`, the new item will be added to the beginning of the conversation. If set\n   * to an existing ID, it allows an item to be inserted mid-conversation. If the ID\n   * cannot be found, an error will be returned and the item will not be added.\n   */\n  previous_item_id?: string;\n}\n\n/**\n * Returned when a conversation item is created. There are several scenarios that\n * produce this event:\n *\n * - The server is generating a Response, which if successful will produce either\n *   one or two Items, which will be of type `message` (role `assistant`) or type\n *   `function_call`.\n * - The input audio buffer has been committed, either by the client or the server\n *   (in `server_vad` mode). The server will take the content of the input audio\n *   buffer and add it to a new user message Item.\n * - The client has sent a `conversation.item.create` event to add a new Item to\n *   the Conversation.\n */\nexport interface ConversationItemCreatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The item to add to the conversation.\n   */\n  item: ConversationItem;\n\n  /**\n   * The ID of the preceding item in the Conversation context, allows the client to\n   * understand the order of the conversation.\n   */\n  previous_item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.created`.\n   */\n  type: 'conversation.item.created';\n}\n\n/**\n * Send this event when you want to remove any item from the conversation history.\n * The server will respond with a `conversation.item.deleted` event, unless the\n * item does not exist in the conversation history, in which case the server will\n * respond with an error.\n */\nexport interface ConversationItemDeleteEvent {\n  /**\n   * The ID of the item to delete.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.delete`.\n   */\n  type: 'conversation.item.delete';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Returned when an item in the conversation is deleted by the client with a\n * `conversation.item.delete` event. This event is used to synchronize the server's\n * understanding of the conversation history with the client's view.\n */\nexport interface ConversationItemDeletedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item that was deleted.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.deleted`.\n   */\n  type: 'conversation.item.deleted';\n}\n\n/**\n * This event is the output of audio transcription for user audio written to the\n * user audio buffer. Transcription begins when the input audio buffer is committed\n * by the client or server (in `server_vad` mode). Transcription runs\n * asynchronously with Response creation, so this event may come before or after\n * the Response events.\n *\n * Realtime API models accept audio natively, and thus input transcription is a\n * separate process run on a separate ASR (Automatic Speech Recognition) model,\n * currently always `whisper-1`. Thus the transcript may diverge somewhat from the\n * model's interpretation, and should be treated as a rough guide.\n */\nexport interface ConversationItemInputAudioTranscriptionCompletedEvent {\n  /**\n   * The index of the content part containing the audio.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the user message item containing the audio.\n   */\n  item_id: string;\n\n  /**\n   * The transcribed text.\n   */\n  transcript: string;\n\n  /**\n   * The event type, must be `conversation.item.input_audio_transcription.completed`.\n   */\n  type: 'conversation.item.input_audio_transcription.completed';\n\n  /**\n   * The log probabilities of the transcription.\n   */\n  logprobs?: Array<ConversationItemInputAudioTranscriptionCompletedEvent.Logprob> | null;\n}\n\nexport namespace ConversationItemInputAudioTranscriptionCompletedEvent {\n  /**\n   * A log probability object.\n   */\n  export interface Logprob {\n    /**\n     * The token that was used to generate the log probability.\n     */\n    token: string;\n\n    /**\n     * The bytes that were used to generate the log probability.\n     */\n    bytes: Array<number>;\n\n    /**\n     * The log probability of the token.\n     */\n    logprob: number;\n  }\n}\n\n/**\n * Returned when the text value of an input audio transcription content part is\n * updated.\n */\nexport interface ConversationItemInputAudioTranscriptionDeltaEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.input_audio_transcription.delta`.\n   */\n  type: 'conversation.item.input_audio_transcription.delta';\n\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index?: number;\n\n  /**\n   * The text delta.\n   */\n  delta?: string;\n\n  /**\n   * The log probabilities of the transcription.\n   */\n  logprobs?: Array<ConversationItemInputAudioTranscriptionDeltaEvent.Logprob> | null;\n}\n\nexport namespace ConversationItemInputAudioTranscriptionDeltaEvent {\n  /**\n   * A log probability object.\n   */\n  export interface Logprob {\n    /**\n     * The token that was used to generate the log probability.\n     */\n    token: string;\n\n    /**\n     * The bytes that were used to generate the log probability.\n     */\n    bytes: Array<number>;\n\n    /**\n     * The log probability of the token.\n     */\n    logprob: number;\n  }\n}\n\n/**\n * Returned when input audio transcription is configured, and a transcription\n * request for a user message failed. These events are separate from other `error`\n * events so that the client can identify the related Item.\n */\nexport interface ConversationItemInputAudioTranscriptionFailedEvent {\n  /**\n   * The index of the content part containing the audio.\n   */\n  content_index: number;\n\n  /**\n   * Details of the transcription error.\n   */\n  error: ConversationItemInputAudioTranscriptionFailedEvent.Error;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the user message item.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.input_audio_transcription.failed`.\n   */\n  type: 'conversation.item.input_audio_transcription.failed';\n}\n\nexport namespace ConversationItemInputAudioTranscriptionFailedEvent {\n  /**\n   * Details of the transcription error.\n   */\n  export interface Error {\n    /**\n     * Error code, if any.\n     */\n    code?: string;\n\n    /**\n     * A human-readable error message.\n     */\n    message?: string;\n\n    /**\n     * Parameter related to the error, if any.\n     */\n    param?: string;\n\n    /**\n     * The type of error.\n     */\n    type?: string;\n  }\n}\n\n/**\n * Send this event when you want to retrieve the server's representation of a\n * specific item in the conversation history. This is useful, for example, to\n * inspect user audio after noise cancellation and VAD. The server will respond\n * with a `conversation.item.retrieved` event, unless the item does not exist in\n * the conversation history, in which case the server will respond with an error.\n */\nexport interface ConversationItemRetrieveEvent {\n  /**\n   * The ID of the item to retrieve.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.retrieve`.\n   */\n  type: 'conversation.item.retrieve';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Send this event to truncate a previous assistant message’s audio. The server\n * will produce audio faster than realtime, so this event is useful when the user\n * interrupts to truncate audio that has already been sent to the client but not\n * yet played. This will synchronize the server's understanding of the audio with\n * the client's playback.\n *\n * Truncating audio will delete the server-side text transcript to ensure there is\n * not text in the context that hasn't been heard by the user.\n *\n * If successful, the server will respond with a `conversation.item.truncated`\n * event.\n */\nexport interface ConversationItemTruncateEvent {\n  /**\n   * Inclusive duration up to which audio is truncated, in milliseconds. If the\n   * audio_end_ms is greater than the actual audio duration, the server will respond\n   * with an error.\n   */\n  audio_end_ms: number;\n\n  /**\n   * The index of the content part to truncate. Set this to 0.\n   */\n  content_index: number;\n\n  /**\n   * The ID of the assistant message item to truncate. Only assistant message items\n   * can be truncated.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.truncate`.\n   */\n  type: 'conversation.item.truncate';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Returned when an earlier assistant audio message item is truncated by the client\n * with a `conversation.item.truncate` event. This event is used to synchronize the\n * server's understanding of the audio with the client's playback.\n *\n * This action will truncate the audio and remove the server-side text transcript\n * to ensure there is no text in the context that hasn't been heard by the user.\n */\nexport interface ConversationItemTruncatedEvent {\n  /**\n   * The duration up to which the audio was truncated, in milliseconds.\n   */\n  audio_end_ms: number;\n\n  /**\n   * The index of the content part that was truncated.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the assistant message item that was truncated.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `conversation.item.truncated`.\n   */\n  type: 'conversation.item.truncated';\n}\n\n/**\n * The item to add to the conversation.\n */\nexport interface ConversationItemWithReference {\n  /**\n   * For an item of type (`message` | `function_call` | `function_call_output`) this\n   * field allows the client to assign the unique ID of the item. It is not required\n   * because the server will generate one if not provided.\n   *\n   * For an item of type `item_reference`, this field is required and is a reference\n   * to any item that has previously existed in the conversation.\n   */\n  id?: string;\n\n  /**\n   * The arguments of the function call (for `function_call` items).\n   */\n  arguments?: string;\n\n  /**\n   * The ID of the function call (for `function_call` and `function_call_output`\n   * items). If passed on a `function_call_output` item, the server will check that a\n   * `function_call` item with the same ID exists in the conversation history.\n   */\n  call_id?: string;\n\n  /**\n   * The content of the message, applicable for `message` items.\n   *\n   * - Message items of role `system` support only `input_text` content\n   * - Message items of role `user` support `input_text` and `input_audio` content\n   * - Message items of role `assistant` support `text` content.\n   */\n  content?: Array<ConversationItemContent>;\n\n  /**\n   * The name of the function being called (for `function_call` items).\n   */\n  name?: string;\n\n  /**\n   * Identifier for the API object being returned - always `realtime.item`.\n   */\n  object?: 'realtime.item';\n\n  /**\n   * The output of the function call (for `function_call_output` items).\n   */\n  output?: string;\n\n  /**\n   * The role of the message sender (`user`, `assistant`, `system`), only applicable\n   * for `message` items.\n   */\n  role?: 'user' | 'assistant' | 'system';\n\n  /**\n   * The status of the item (`completed`, `incomplete`). These have no effect on the\n   * conversation, but are accepted for consistency with the\n   * `conversation.item.created` event.\n   */\n  status?: 'completed' | 'incomplete';\n\n  /**\n   * The type of the item (`message`, `function_call`, `function_call_output`,\n   * `item_reference`).\n   */\n  type?: 'message' | 'function_call' | 'function_call_output' | 'item_reference';\n}\n\n/**\n * Returned when an error occurs, which could be a client problem or a server\n * problem. Most errors are recoverable and the session will stay open, we\n * recommend to implementors to monitor and log error messages by default.\n */\nexport interface ErrorEvent {\n  /**\n   * Details of the error.\n   */\n  error: ErrorEvent.Error;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The event type, must be `error`.\n   */\n  type: 'error';\n}\n\nexport namespace ErrorEvent {\n  /**\n   * Details of the error.\n   */\n  export interface Error {\n    /**\n     * A human-readable error message.\n     */\n    message: string;\n\n    /**\n     * The type of error (e.g., \"invalid_request_error\", \"server_error\").\n     */\n    type: string;\n\n    /**\n     * Error code, if any.\n     */\n    code?: string | null;\n\n    /**\n     * The event_id of the client event that caused the error, if applicable.\n     */\n    event_id?: string | null;\n\n    /**\n     * Parameter related to the error, if any.\n     */\n    param?: string | null;\n  }\n}\n\n/**\n * Send this event to append audio bytes to the input audio buffer. The audio\n * buffer is temporary storage you can write to and later commit. In Server VAD\n * mode, the audio buffer is used to detect speech and the server will decide when\n * to commit. When Server VAD is disabled, you must commit the audio buffer\n * manually.\n *\n * The client may choose how much audio to place in each event up to a maximum of\n * 15 MiB, for example streaming smaller chunks from the client may allow the VAD\n * to be more responsive. Unlike made other client events, the server will not send\n * a confirmation response to this event.\n */\nexport interface InputAudioBufferAppendEvent {\n  /**\n   * Base64-encoded audio bytes. This must be in the format specified by the\n   * `input_audio_format` field in the session configuration.\n   */\n  audio: string;\n\n  /**\n   * The event type, must be `input_audio_buffer.append`.\n   */\n  type: 'input_audio_buffer.append';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Send this event to clear the audio bytes in the buffer. The server will respond\n * with an `input_audio_buffer.cleared` event.\n */\nexport interface InputAudioBufferClearEvent {\n  /**\n   * The event type, must be `input_audio_buffer.clear`.\n   */\n  type: 'input_audio_buffer.clear';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Returned when the input audio buffer is cleared by the client with a\n * `input_audio_buffer.clear` event.\n */\nexport interface InputAudioBufferClearedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The event type, must be `input_audio_buffer.cleared`.\n   */\n  type: 'input_audio_buffer.cleared';\n}\n\n/**\n * Send this event to commit the user input audio buffer, which will create a new\n * user message item in the conversation. This event will produce an error if the\n * input audio buffer is empty. When in Server VAD mode, the client does not need\n * to send this event, the server will commit the audio buffer automatically.\n *\n * Committing the input audio buffer will trigger input audio transcription (if\n * enabled in session configuration), but it will not create a response from the\n * model. The server will respond with an `input_audio_buffer.committed` event.\n */\nexport interface InputAudioBufferCommitEvent {\n  /**\n   * The event type, must be `input_audio_buffer.commit`.\n   */\n  type: 'input_audio_buffer.commit';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\n/**\n * Returned when an input audio buffer is committed, either by the client or\n * automatically in server VAD mode. The `item_id` property is the ID of the user\n * message item that will be created, thus a `conversation.item.created` event will\n * also be sent to the client.\n */\nexport interface InputAudioBufferCommittedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the user message item that will be created.\n   */\n  item_id: string;\n\n  /**\n   * The ID of the preceding item after which the new item will be inserted.\n   */\n  previous_item_id: string;\n\n  /**\n   * The event type, must be `input_audio_buffer.committed`.\n   */\n  type: 'input_audio_buffer.committed';\n}\n\n/**\n * Sent by the server when in `server_vad` mode to indicate that speech has been\n * detected in the audio buffer. This can happen any time audio is added to the\n * buffer (unless speech is already detected). The client may want to use this\n * event to interrupt audio playback or provide visual feedback to the user.\n *\n * The client should expect to receive a `input_audio_buffer.speech_stopped` event\n * when speech stops. The `item_id` property is the ID of the user message item\n * that will be created when speech stops and will also be included in the\n * `input_audio_buffer.speech_stopped` event (unless the client manually commits\n * the audio buffer during VAD activation).\n */\nexport interface InputAudioBufferSpeechStartedEvent {\n  /**\n   * Milliseconds from the start of all audio written to the buffer during the\n   * session when speech was first detected. This will correspond to the beginning of\n   * audio sent to the model, and thus includes the `prefix_padding_ms` configured in\n   * the Session.\n   */\n  audio_start_ms: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the user message item that will be created when speech stops.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `input_audio_buffer.speech_started`.\n   */\n  type: 'input_audio_buffer.speech_started';\n}\n\n/**\n * Returned in `server_vad` mode when the server detects the end of speech in the\n * audio buffer. The server will also send an `conversation.item.created` event\n * with the user message item that is created from the audio buffer.\n */\nexport interface InputAudioBufferSpeechStoppedEvent {\n  /**\n   * Milliseconds since the session started when speech stopped. This will correspond\n   * to the end of audio sent to the model, and thus includes the\n   * `min_silence_duration_ms` configured in the Session.\n   */\n  audio_end_ms: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the user message item that will be created.\n   */\n  item_id: string;\n\n  /**\n   * The event type, must be `input_audio_buffer.speech_stopped`.\n   */\n  type: 'input_audio_buffer.speech_stopped';\n}\n\n/**\n * Emitted at the beginning of a Response to indicate the updated rate limits. When\n * a Response is created some tokens will be \"reserved\" for the output tokens, the\n * rate limits shown here reflect that reservation, which is then adjusted\n * accordingly once the Response is completed.\n */\nexport interface RateLimitsUpdatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * List of rate limit information.\n   */\n  rate_limits: Array<RateLimitsUpdatedEvent.RateLimit>;\n\n  /**\n   * The event type, must be `rate_limits.updated`.\n   */\n  type: 'rate_limits.updated';\n}\n\nexport namespace RateLimitsUpdatedEvent {\n  export interface RateLimit {\n    /**\n     * The maximum allowed value for the rate limit.\n     */\n    limit?: number;\n\n    /**\n     * The name of the rate limit (`requests`, `tokens`).\n     */\n    name?: 'requests' | 'tokens';\n\n    /**\n     * The remaining value before the limit is reached.\n     */\n    remaining?: number;\n\n    /**\n     * Seconds until the rate limit resets.\n     */\n    reset_seconds?: number;\n  }\n}\n\n/**\n * A realtime client event.\n */\nexport type RealtimeClientEvent =\n  | ConversationItemCreateEvent\n  | ConversationItemDeleteEvent\n  | ConversationItemRetrieveEvent\n  | ConversationItemTruncateEvent\n  | InputAudioBufferAppendEvent\n  | InputAudioBufferClearEvent\n  | RealtimeClientEvent.OutputAudioBufferClear\n  | InputAudioBufferCommitEvent\n  | ResponseCancelEvent\n  | ResponseCreateEvent\n  | SessionUpdateEvent\n  | TranscriptionSessionUpdate;\n\nexport namespace RealtimeClientEvent {\n  /**\n   * **WebRTC Only:** Emit to cut off the current audio response. This will trigger\n   * the server to stop generating audio and emit a `output_audio_buffer.cleared`\n   * event. This event should be preceded by a `response.cancel` client event to stop\n   * the generation of the current response.\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n   */\n  export interface OutputAudioBufferClear {\n    /**\n     * The event type, must be `output_audio_buffer.clear`.\n     */\n    type: 'output_audio_buffer.clear';\n\n    /**\n     * The unique ID of the client event used for error handling.\n     */\n    event_id?: string;\n  }\n}\n\n/**\n * The response resource.\n */\nexport interface RealtimeResponse {\n  /**\n   * The unique ID of the response.\n   */\n  id?: string;\n\n  /**\n   * Which conversation the response is added to, determined by the `conversation`\n   * field in the `response.create` event. If `auto`, the response will be added to\n   * the default conversation and the value of `conversation_id` will be an id like\n   * `conv_1234`. If `none`, the response will not be added to any conversation and\n   * the value of `conversation_id` will be `null`. If responses are being triggered\n   * by server VAD, the response will be added to the default conversation, thus the\n   * `conversation_id` will be an id like `conv_1234`.\n   */\n  conversation_id?: string;\n\n  /**\n   * Maximum number of output tokens for a single assistant response, inclusive of\n   * tool calls, that was used in this response.\n   */\n  max_output_tokens?: number | 'inf';\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The set of modalities the model used to respond. If there are multiple\n   * modalities, the model will pick one, for example if `modalities` is\n   * `[\"text\", \"audio\"]`, the model could be responding in either text or audio.\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * The object type, must be `realtime.response`.\n   */\n  object?: 'realtime.response';\n\n  /**\n   * The list of output items generated by the response.\n   */\n  output?: Array<ConversationItem>;\n\n  /**\n   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   */\n  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * The final status of the response (`completed`, `cancelled`, `failed`, or\n   * `incomplete`).\n   */\n  status?: 'completed' | 'cancelled' | 'failed' | 'incomplete';\n\n  /**\n   * Additional details about the status.\n   */\n  status_details?: RealtimeResponseStatus;\n\n  /**\n   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n   */\n  temperature?: number;\n\n  /**\n   * Usage statistics for the Response, this will correspond to billing. A Realtime\n   * API session will maintain a conversation context and append new Items to the\n   * Conversation, thus output from previous turns (text and audio tokens) will\n   * become the input for later turns.\n   */\n  usage?: RealtimeResponseUsage;\n\n  /**\n   * The voice the model used to respond. Current voice options are `alloy`, `ash`,\n   * `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and\n   * `verse`.\n   */\n  voice?:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n}\n\n/**\n * Additional details about the status.\n */\nexport interface RealtimeResponseStatus {\n  /**\n   * A description of the error that caused the response to fail, populated when the\n   * `status` is `failed`.\n   */\n  error?: RealtimeResponseStatus.Error;\n\n  /**\n   * The reason the Response did not complete. For a `cancelled` Response, one of\n   * `turn_detected` (the server VAD detected a new start of speech) or\n   * `client_cancelled` (the client sent a cancel event). For an `incomplete`\n   * Response, one of `max_output_tokens` or `content_filter` (the server-side safety\n   * filter activated and cut off the response).\n   */\n  reason?: 'turn_detected' | 'client_cancelled' | 'max_output_tokens' | 'content_filter';\n\n  /**\n   * The type of error that caused the response to fail, corresponding with the\n   * `status` field (`completed`, `cancelled`, `incomplete`, `failed`).\n   */\n  type?: 'completed' | 'cancelled' | 'incomplete' | 'failed';\n}\n\nexport namespace RealtimeResponseStatus {\n  /**\n   * A description of the error that caused the response to fail, populated when the\n   * `status` is `failed`.\n   */\n  export interface Error {\n    /**\n     * Error code, if any.\n     */\n    code?: string;\n\n    /**\n     * The type of error.\n     */\n    type?: string;\n  }\n}\n\n/**\n * Usage statistics for the Response, this will correspond to billing. A Realtime\n * API session will maintain a conversation context and append new Items to the\n * Conversation, thus output from previous turns (text and audio tokens) will\n * become the input for later turns.\n */\nexport interface RealtimeResponseUsage {\n  /**\n   * Details about the input tokens used in the Response.\n   */\n  input_token_details?: RealtimeResponseUsage.InputTokenDetails;\n\n  /**\n   * The number of input tokens used in the Response, including text and audio\n   * tokens.\n   */\n  input_tokens?: number;\n\n  /**\n   * Details about the output tokens used in the Response.\n   */\n  output_token_details?: RealtimeResponseUsage.OutputTokenDetails;\n\n  /**\n   * The number of output tokens sent in the Response, including text and audio\n   * tokens.\n   */\n  output_tokens?: number;\n\n  /**\n   * The total number of tokens in the Response including input and output text and\n   * audio tokens.\n   */\n  total_tokens?: number;\n}\n\nexport namespace RealtimeResponseUsage {\n  /**\n   * Details about the input tokens used in the Response.\n   */\n  export interface InputTokenDetails {\n    /**\n     * The number of audio tokens used in the Response.\n     */\n    audio_tokens?: number;\n\n    /**\n     * The number of cached tokens used in the Response.\n     */\n    cached_tokens?: number;\n\n    /**\n     * The number of text tokens used in the Response.\n     */\n    text_tokens?: number;\n  }\n\n  /**\n   * Details about the output tokens used in the Response.\n   */\n  export interface OutputTokenDetails {\n    /**\n     * The number of audio tokens used in the Response.\n     */\n    audio_tokens?: number;\n\n    /**\n     * The number of text tokens used in the Response.\n     */\n    text_tokens?: number;\n  }\n}\n\n/**\n * A realtime server event.\n */\nexport type RealtimeServerEvent =\n  | ConversationCreatedEvent\n  | ConversationItemCreatedEvent\n  | ConversationItemDeletedEvent\n  | ConversationItemInputAudioTranscriptionCompletedEvent\n  | ConversationItemInputAudioTranscriptionDeltaEvent\n  | ConversationItemInputAudioTranscriptionFailedEvent\n  | RealtimeServerEvent.ConversationItemRetrieved\n  | ConversationItemTruncatedEvent\n  | ErrorEvent\n  | InputAudioBufferClearedEvent\n  | InputAudioBufferCommittedEvent\n  | InputAudioBufferSpeechStartedEvent\n  | InputAudioBufferSpeechStoppedEvent\n  | RateLimitsUpdatedEvent\n  | ResponseAudioDeltaEvent\n  | ResponseAudioDoneEvent\n  | ResponseAudioTranscriptDeltaEvent\n  | ResponseAudioTranscriptDoneEvent\n  | ResponseContentPartAddedEvent\n  | ResponseContentPartDoneEvent\n  | ResponseCreatedEvent\n  | ResponseDoneEvent\n  | ResponseFunctionCallArgumentsDeltaEvent\n  | ResponseFunctionCallArgumentsDoneEvent\n  | ResponseOutputItemAddedEvent\n  | ResponseOutputItemDoneEvent\n  | ResponseTextDeltaEvent\n  | ResponseTextDoneEvent\n  | SessionCreatedEvent\n  | SessionUpdatedEvent\n  | TranscriptionSessionUpdatedEvent\n  | RealtimeServerEvent.OutputAudioBufferStarted\n  | RealtimeServerEvent.OutputAudioBufferStopped\n  | RealtimeServerEvent.OutputAudioBufferCleared;\n\nexport namespace RealtimeServerEvent {\n  /**\n   * Returned when a conversation item is retrieved with\n   * `conversation.item.retrieve`.\n   */\n  export interface ConversationItemRetrieved {\n    /**\n     * The unique ID of the server event.\n     */\n    event_id: string;\n\n    /**\n     * The item to add to the conversation.\n     */\n    item: RealtimeAPI.ConversationItem;\n\n    /**\n     * The event type, must be `conversation.item.retrieved`.\n     */\n    type: 'conversation.item.retrieved';\n  }\n\n  /**\n   * **WebRTC Only:** Emitted when the server begins streaming audio to the client.\n   * This event is emitted after an audio content part has been added\n   * (`response.content_part.added`) to the response.\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n   */\n  export interface OutputAudioBufferStarted {\n    /**\n     * The unique ID of the server event.\n     */\n    event_id: string;\n\n    /**\n     * The unique ID of the response that produced the audio.\n     */\n    response_id: string;\n\n    /**\n     * The event type, must be `output_audio_buffer.started`.\n     */\n    type: 'output_audio_buffer.started';\n  }\n\n  /**\n   * **WebRTC Only:** Emitted when the output audio buffer has been completely\n   * drained on the server, and no more audio is forthcoming. This event is emitted\n   * after the full response data has been sent to the client (`response.done`).\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n   */\n  export interface OutputAudioBufferStopped {\n    /**\n     * The unique ID of the server event.\n     */\n    event_id: string;\n\n    /**\n     * The unique ID of the response that produced the audio.\n     */\n    response_id: string;\n\n    /**\n     * The event type, must be `output_audio_buffer.stopped`.\n     */\n    type: 'output_audio_buffer.stopped';\n  }\n\n  /**\n   * **WebRTC Only:** Emitted when the output audio buffer is cleared. This happens\n   * either in VAD mode when the user has interrupted\n   * (`input_audio_buffer.speech_started`), or when the client has emitted the\n   * `output_audio_buffer.clear` event to manually cut off the current audio\n   * response.\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n   */\n  export interface OutputAudioBufferCleared {\n    /**\n     * The unique ID of the server event.\n     */\n    event_id: string;\n\n    /**\n     * The unique ID of the response that produced the audio.\n     */\n    response_id: string;\n\n    /**\n     * The event type, must be `output_audio_buffer.cleared`.\n     */\n    type: 'output_audio_buffer.cleared';\n  }\n}\n\n/**\n * Returned when the model-generated audio is updated.\n */\nexport interface ResponseAudioDeltaEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * Base64-encoded audio data delta.\n   */\n  delta: string;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.audio.delta`.\n   */\n  type: 'response.audio.delta';\n}\n\n/**\n * Returned when the model-generated audio is done. Also emitted when a Response is\n * interrupted, incomplete, or cancelled.\n */\nexport interface ResponseAudioDoneEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.audio.done`.\n   */\n  type: 'response.audio.done';\n}\n\n/**\n * Returned when the model-generated transcription of audio output is updated.\n */\nexport interface ResponseAudioTranscriptDeltaEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The transcript delta.\n   */\n  delta: string;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.audio_transcript.delta`.\n   */\n  type: 'response.audio_transcript.delta';\n}\n\n/**\n * Returned when the model-generated transcription of audio output is done\n * streaming. Also emitted when a Response is interrupted, incomplete, or\n * cancelled.\n */\nexport interface ResponseAudioTranscriptDoneEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The final transcript of the audio.\n   */\n  transcript: string;\n\n  /**\n   * The event type, must be `response.audio_transcript.done`.\n   */\n  type: 'response.audio_transcript.done';\n}\n\n/**\n * Send this event to cancel an in-progress response. The server will respond with\n * a `response.cancelled` event or an error if there is no response to cancel.\n */\nexport interface ResponseCancelEvent {\n  /**\n   * The event type, must be `response.cancel`.\n   */\n  type: 'response.cancel';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n\n  /**\n   * A specific response ID to cancel - if not provided, will cancel an in-progress\n   * response in the default conversation.\n   */\n  response_id?: string;\n}\n\n/**\n * Returned when a new content part is added to an assistant message item during\n * response generation.\n */\nexport interface ResponseContentPartAddedEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item to which the content part was added.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The content part that was added.\n   */\n  part: ResponseContentPartAddedEvent.Part;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.content_part.added`.\n   */\n  type: 'response.content_part.added';\n}\n\nexport namespace ResponseContentPartAddedEvent {\n  /**\n   * The content part that was added.\n   */\n  export interface Part {\n    /**\n     * Base64-encoded audio data (if type is \"audio\").\n     */\n    audio?: string;\n\n    /**\n     * The text content (if type is \"text\").\n     */\n    text?: string;\n\n    /**\n     * The transcript of the audio (if type is \"audio\").\n     */\n    transcript?: string;\n\n    /**\n     * The content type (\"text\", \"audio\").\n     */\n    type?: 'text' | 'audio';\n  }\n}\n\n/**\n * Returned when a content part is done streaming in an assistant message item.\n * Also emitted when a Response is interrupted, incomplete, or cancelled.\n */\nexport interface ResponseContentPartDoneEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The content part that is done.\n   */\n  part: ResponseContentPartDoneEvent.Part;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.content_part.done`.\n   */\n  type: 'response.content_part.done';\n}\n\nexport namespace ResponseContentPartDoneEvent {\n  /**\n   * The content part that is done.\n   */\n  export interface Part {\n    /**\n     * Base64-encoded audio data (if type is \"audio\").\n     */\n    audio?: string;\n\n    /**\n     * The text content (if type is \"text\").\n     */\n    text?: string;\n\n    /**\n     * The transcript of the audio (if type is \"audio\").\n     */\n    transcript?: string;\n\n    /**\n     * The content type (\"text\", \"audio\").\n     */\n    type?: 'text' | 'audio';\n  }\n}\n\n/**\n * This event instructs the server to create a Response, which means triggering\n * model inference. When in Server VAD mode, the server will create Responses\n * automatically.\n *\n * A Response will include at least one Item, and may have two, in which case the\n * second will be a function call. These Items will be appended to the conversation\n * history.\n *\n * The server will respond with a `response.created` event, events for Items and\n * content created, and finally a `response.done` event to indicate the Response is\n * complete.\n *\n * The `response.create` event includes inference configuration like\n * `instructions`, and `temperature`. These fields will override the Session's\n * configuration for this Response only.\n */\nexport interface ResponseCreateEvent {\n  /**\n   * The event type, must be `response.create`.\n   */\n  type: 'response.create';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n\n  /**\n   * Create a new Realtime response with these parameters\n   */\n  response?: ResponseCreateEvent.Response;\n}\n\nexport namespace ResponseCreateEvent {\n  /**\n   * Create a new Realtime response with these parameters\n   */\n  export interface Response {\n    /**\n     * Controls which conversation the response is added to. Currently supports `auto`\n     * and `none`, with `auto` as the default value. The `auto` value means that the\n     * contents of the response will be added to the default conversation. Set this to\n     * `none` to create an out-of-band response which will not add items to default\n     * conversation.\n     */\n    conversation?: (string & {}) | 'auto' | 'none';\n\n    /**\n     * Input items to include in the prompt for the model. Using this field creates a\n     * new context for this Response instead of using the default conversation. An\n     * empty array `[]` will clear the context for this Response. Note that this can\n     * include references to items from the default conversation.\n     */\n    input?: Array<RealtimeAPI.ConversationItemWithReference>;\n\n    /**\n     * The default system instructions (i.e. system message) prepended to model calls.\n     * This field allows the client to guide the model on desired responses. The model\n     * can be instructed on response content and format, (e.g. \"be extremely succinct\",\n     * \"act friendly\", \"here are examples of good responses\") and on audio behavior\n     * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n     * instructions are not guaranteed to be followed by the model, but they provide\n     * guidance to the model on the desired behavior.\n     *\n     * Note that the server sets default instructions which will be used if this field\n     * is not set and are visible in the `session.created` event at the start of the\n     * session.\n     */\n    instructions?: string;\n\n    /**\n     * Maximum number of output tokens for a single assistant response, inclusive of\n     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n     * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n     */\n    max_response_output_tokens?: number | 'inf';\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n\n    /**\n     * The set of modalities the model can respond with. To disable audio, set this to\n     * [\"text\"].\n     */\n    modalities?: Array<'text' | 'audio'>;\n\n    /**\n     * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n     */\n    output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n    /**\n     * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n     */\n    temperature?: number;\n\n    /**\n     * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n     * a function, like `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}`.\n     */\n    tool_choice?: string;\n\n    /**\n     * Tools (functions) available to the model.\n     */\n    tools?: Array<Response.Tool>;\n\n    /**\n     * The voice the model uses to respond. Voice cannot be changed during the session\n     * once the model has responded with audio at least once. Current voice options are\n     * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`,\n     * `shimmer`, and `verse`.\n     */\n    voice?:\n      | (string & {})\n      | 'alloy'\n      | 'ash'\n      | 'ballad'\n      | 'coral'\n      | 'echo'\n      | 'fable'\n      | 'onyx'\n      | 'nova'\n      | 'sage'\n      | 'shimmer'\n      | 'verse';\n  }\n\n  export namespace Response {\n    export interface Tool {\n      /**\n       * The description of the function, including guidance on when and how to call it,\n       * and guidance about what to tell the user when calling (if anything).\n       */\n      description?: string;\n\n      /**\n       * The name of the function.\n       */\n      name?: string;\n\n      /**\n       * Parameters of the function in JSON Schema.\n       */\n      parameters?: unknown;\n\n      /**\n       * The type of the tool, i.e. `function`.\n       */\n      type?: 'function';\n    }\n  }\n}\n\n/**\n * Returned when a new Response is created. The first event of response creation,\n * where the response is in an initial state of `in_progress`.\n */\nexport interface ResponseCreatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The response resource.\n   */\n  response: RealtimeResponse;\n\n  /**\n   * The event type, must be `response.created`.\n   */\n  type: 'response.created';\n}\n\n/**\n * Returned when a Response is done streaming. Always emitted, no matter the final\n * state. The Response object included in the `response.done` event will include\n * all output Items in the Response but will omit the raw audio data.\n */\nexport interface ResponseDoneEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The response resource.\n   */\n  response: RealtimeResponse;\n\n  /**\n   * The event type, must be `response.done`.\n   */\n  type: 'response.done';\n}\n\n/**\n * Returned when the model-generated function call arguments are updated.\n */\nexport interface ResponseFunctionCallArgumentsDeltaEvent {\n  /**\n   * The ID of the function call.\n   */\n  call_id: string;\n\n  /**\n   * The arguments delta as a JSON string.\n   */\n  delta: string;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the function call item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.function_call_arguments.delta`.\n   */\n  type: 'response.function_call_arguments.delta';\n}\n\n/**\n * Returned when the model-generated function call arguments are done streaming.\n * Also emitted when a Response is interrupted, incomplete, or cancelled.\n */\nexport interface ResponseFunctionCallArgumentsDoneEvent {\n  /**\n   * The final arguments as a JSON string.\n   */\n  arguments: string;\n\n  /**\n   * The ID of the function call.\n   */\n  call_id: string;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the function call item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.function_call_arguments.done`.\n   */\n  type: 'response.function_call_arguments.done';\n}\n\n/**\n * Returned when a new Item is created during Response generation.\n */\nexport interface ResponseOutputItemAddedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The item to add to the conversation.\n   */\n  item: ConversationItem;\n\n  /**\n   * The index of the output item in the Response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the Response to which the item belongs.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.output_item.added`.\n   */\n  type: 'response.output_item.added';\n}\n\n/**\n * Returned when an Item is done streaming. Also emitted when a Response is\n * interrupted, incomplete, or cancelled.\n */\nexport interface ResponseOutputItemDoneEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The item to add to the conversation.\n   */\n  item: ConversationItem;\n\n  /**\n   * The index of the output item in the Response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the Response to which the item belongs.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.output_item.done`.\n   */\n  type: 'response.output_item.done';\n}\n\n/**\n * Returned when the text value of a \"text\" content part is updated.\n */\nexport interface ResponseTextDeltaEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The text delta.\n   */\n  delta: string;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The event type, must be `response.text.delta`.\n   */\n  type: 'response.text.delta';\n}\n\n/**\n * Returned when the text value of a \"text\" content part is done streaming. Also\n * emitted when a Response is interrupted, incomplete, or cancelled.\n */\nexport interface ResponseTextDoneEvent {\n  /**\n   * The index of the content part in the item's content array.\n   */\n  content_index: number;\n\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response.\n   */\n  output_index: number;\n\n  /**\n   * The ID of the response.\n   */\n  response_id: string;\n\n  /**\n   * The final text content.\n   */\n  text: string;\n\n  /**\n   * The event type, must be `response.text.done`.\n   */\n  type: 'response.text.done';\n}\n\n/**\n * Returned when a Session is created. Emitted automatically when a new connection\n * is established as the first server event. This event will contain the default\n * Session configuration.\n */\nexport interface SessionCreatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * Realtime session object configuration.\n   */\n  session: SessionsAPI.Session;\n\n  /**\n   * The event type, must be `session.created`.\n   */\n  type: 'session.created';\n}\n\n/**\n * Send this event to update the session’s default configuration. The client may\n * send this event at any time to update any field, except for `voice`. However,\n * note that once a session has been initialized with a particular `model`, it\n * can’t be changed to another model using `session.update`.\n *\n * When the server receives a `session.update`, it will respond with a\n * `session.updated` event showing the full, effective configuration. Only the\n * fields that are present are updated. To clear a field like `instructions`, pass\n * an empty string.\n */\nexport interface SessionUpdateEvent {\n  /**\n   * Realtime session object configuration.\n   */\n  session: SessionUpdateEvent.Session;\n\n  /**\n   * The event type, must be `session.update`.\n   */\n  type: 'session.update';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\nexport namespace SessionUpdateEvent {\n  /**\n   * Realtime session object configuration.\n   */\n  export interface Session {\n    /**\n     * Configuration options for the generated client secret.\n     */\n    client_secret?: Session.ClientSecret;\n\n    /**\n     * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n     * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n     * (mono), and little-endian byte order.\n     */\n    input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n    /**\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\n     * off. Noise reduction filters audio added to the input audio buffer before it is\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\n     * detection accuracy (reducing false positives) and model performance by improving\n     * perception of the input audio.\n     */\n    input_audio_noise_reduction?: Session.InputAudioNoiseReduction;\n\n    /**\n     * Configuration for input audio transcription, defaults to off and can be set to\n     * `null` to turn off once on. Input audio transcription is not native to the\n     * model, since the model consumes audio directly. Transcription runs\n     * asynchronously through\n     * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n     * and should be treated as guidance of input audio content rather than precisely\n     * what the model heard. The client can optionally set the language and prompt for\n     * transcription, these offer additional guidance to the transcription service.\n     */\n    input_audio_transcription?: Session.InputAudioTranscription;\n\n    /**\n     * The default system instructions (i.e. system message) prepended to model calls.\n     * This field allows the client to guide the model on desired responses. The model\n     * can be instructed on response content and format, (e.g. \"be extremely succinct\",\n     * \"act friendly\", \"here are examples of good responses\") and on audio behavior\n     * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n     * instructions are not guaranteed to be followed by the model, but they provide\n     * guidance to the model on the desired behavior.\n     *\n     * Note that the server sets default instructions which will be used if this field\n     * is not set and are visible in the `session.created` event at the start of the\n     * session.\n     */\n    instructions?: string;\n\n    /**\n     * Maximum number of output tokens for a single assistant response, inclusive of\n     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n     * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n     */\n    max_response_output_tokens?: number | 'inf';\n\n    /**\n     * The set of modalities the model can respond with. To disable audio, set this to\n     * [\"text\"].\n     */\n    modalities?: Array<'text' | 'audio'>;\n\n    /**\n     * The Realtime model used for this session.\n     */\n    model?:\n      | 'gpt-4o-realtime-preview'\n      | 'gpt-4o-realtime-preview-2024-10-01'\n      | 'gpt-4o-realtime-preview-2024-12-17'\n      | 'gpt-4o-mini-realtime-preview'\n      | 'gpt-4o-mini-realtime-preview-2024-12-17';\n\n    /**\n     * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n     * For `pcm16`, output audio is sampled at a rate of 24kHz.\n     */\n    output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n    /**\n     * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a\n     * temperature of 0.8 is highly recommended for best performance.\n     */\n    temperature?: number;\n\n    /**\n     * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n     * a function.\n     */\n    tool_choice?: string;\n\n    /**\n     * Tools (functions) available to the model.\n     */\n    tools?: Array<Session.Tool>;\n\n    /**\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n     * set to `null` to turn off, in which case the client must manually trigger model\n     * response. Server VAD means that the model will detect the start and end of\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\n     * semantically estimate whether the user has finished speaking, then dynamically\n     * sets a timeout based on this probability. For example, if user audio trails off\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\n     * for the user to continue speaking. This can be useful for more natural\n     * conversations, but may have a higher latency.\n     */\n    turn_detection?: Session.TurnDetection;\n\n    /**\n     * The voice the model uses to respond. Voice cannot be changed during the session\n     * once the model has responded with audio at least once. Current voice options are\n     * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`,\n     * `shimmer`, and `verse`.\n     */\n    voice?:\n      | (string & {})\n      | 'alloy'\n      | 'ash'\n      | 'ballad'\n      | 'coral'\n      | 'echo'\n      | 'fable'\n      | 'onyx'\n      | 'nova'\n      | 'sage'\n      | 'shimmer'\n      | 'verse';\n  }\n\n  export namespace Session {\n    /**\n     * Configuration options for the generated client secret.\n     */\n    export interface ClientSecret {\n      /**\n       * Configuration for the ephemeral token expiration.\n       */\n      expires_at?: ClientSecret.ExpiresAt;\n    }\n\n    export namespace ClientSecret {\n      /**\n       * Configuration for the ephemeral token expiration.\n       */\n      export interface ExpiresAt {\n        /**\n         * The anchor point for the ephemeral token expiration. Only `created_at` is\n         * currently supported.\n         */\n        anchor?: 'created_at';\n\n        /**\n         * The number of seconds from the anchor point to the expiration. Select a value\n         * between `10` and `7200`.\n         */\n        seconds?: number;\n      }\n    }\n\n    /**\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\n     * off. Noise reduction filters audio added to the input audio buffer before it is\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\n     * detection accuracy (reducing false positives) and model performance by improving\n     * perception of the input audio.\n     */\n    export interface InputAudioNoiseReduction {\n      /**\n       * Type of noise reduction. `near_field` is for close-talking microphones such as\n       * headphones, `far_field` is for far-field microphones such as laptop or\n       * conference room microphones.\n       */\n      type?: 'near_field' | 'far_field';\n    }\n\n    /**\n     * Configuration for input audio transcription, defaults to off and can be set to\n     * `null` to turn off once on. Input audio transcription is not native to the\n     * model, since the model consumes audio directly. Transcription runs\n     * asynchronously through\n     * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n     * and should be treated as guidance of input audio content rather than precisely\n     * what the model heard. The client can optionally set the language and prompt for\n     * transcription, these offer additional guidance to the transcription service.\n     */\n    export interface InputAudioTranscription {\n      /**\n       * The language of the input audio. Supplying the input language in\n       * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n       * format will improve accuracy and latency.\n       */\n      language?: string;\n\n      /**\n       * The model to use for transcription, current options are `gpt-4o-transcribe`,\n       * `gpt-4o-mini-transcribe`, and `whisper-1`.\n       */\n      model?: string;\n\n      /**\n       * An optional text to guide the model's style or continue a previous audio\n       * segment. For `whisper-1`, the\n       * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\n       * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\n       * \"expect words related to technology\".\n       */\n      prompt?: string;\n    }\n\n    export interface Tool {\n      /**\n       * The description of the function, including guidance on when and how to call it,\n       * and guidance about what to tell the user when calling (if anything).\n       */\n      description?: string;\n\n      /**\n       * The name of the function.\n       */\n      name?: string;\n\n      /**\n       * Parameters of the function in JSON Schema.\n       */\n      parameters?: unknown;\n\n      /**\n       * The type of the tool, i.e. `function`.\n       */\n      type?: 'function';\n    }\n\n    /**\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n     * set to `null` to turn off, in which case the client must manually trigger model\n     * response. Server VAD means that the model will detect the start and end of\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\n     * semantically estimate whether the user has finished speaking, then dynamically\n     * sets a timeout based on this probability. For example, if user audio trails off\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\n     * for the user to continue speaking. This can be useful for more natural\n     * conversations, but may have a higher latency.\n     */\n    export interface TurnDetection {\n      /**\n       * Whether or not to automatically generate a response when a VAD stop event\n       * occurs.\n       */\n      create_response?: boolean;\n\n      /**\n       * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\n       * will wait longer for the user to continue speaking, `high` will respond more\n       * quickly. `auto` is the default and is equivalent to `medium`.\n       */\n      eagerness?: 'low' | 'medium' | 'high' | 'auto';\n\n      /**\n       * Whether or not to automatically interrupt any ongoing response with output to\n       * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n       * occurs.\n       */\n      interrupt_response?: boolean;\n\n      /**\n       * Used only for `server_vad` mode. Amount of audio to include before the VAD\n       * detected speech (in milliseconds). Defaults to 300ms.\n       */\n      prefix_padding_ms?: number;\n\n      /**\n       * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\n       * milliseconds). Defaults to 500ms. With shorter values the model will respond\n       * more quickly, but may jump in on short pauses from the user.\n       */\n      silence_duration_ms?: number;\n\n      /**\n       * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\n       * defaults to 0.5. A higher threshold will require louder audio to activate the\n       * model, and thus might perform better in noisy environments.\n       */\n      threshold?: number;\n\n      /**\n       * Type of turn detection.\n       */\n      type?: 'server_vad' | 'semantic_vad';\n    }\n  }\n}\n\n/**\n * Returned when a session is updated with a `session.update` event, unless there\n * is an error.\n */\nexport interface SessionUpdatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * Realtime session object configuration.\n   */\n  session: SessionsAPI.Session;\n\n  /**\n   * The event type, must be `session.updated`.\n   */\n  type: 'session.updated';\n}\n\n/**\n * Send this event to update a transcription session.\n */\nexport interface TranscriptionSessionUpdate {\n  /**\n   * Realtime transcription session object configuration.\n   */\n  session: TranscriptionSessionUpdate.Session;\n\n  /**\n   * The event type, must be `transcription_session.update`.\n   */\n  type: 'transcription_session.update';\n\n  /**\n   * Optional client-generated ID used to identify this event.\n   */\n  event_id?: string;\n}\n\nexport namespace TranscriptionSessionUpdate {\n  /**\n   * Realtime transcription session object configuration.\n   */\n  export interface Session {\n    /**\n     * Configuration options for the generated client secret.\n     */\n    client_secret?: Session.ClientSecret;\n\n    /**\n     * The set of items to include in the transcription. Current available items are:\n     *\n     * - `item.input_audio_transcription.logprobs`\n     */\n    include?: Array<string>;\n\n    /**\n     * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n     * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n     * (mono), and little-endian byte order.\n     */\n    input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n    /**\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\n     * off. Noise reduction filters audio added to the input audio buffer before it is\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\n     * detection accuracy (reducing false positives) and model performance by improving\n     * perception of the input audio.\n     */\n    input_audio_noise_reduction?: Session.InputAudioNoiseReduction;\n\n    /**\n     * Configuration for input audio transcription. The client can optionally set the\n     * language and prompt for transcription, these offer additional guidance to the\n     * transcription service.\n     */\n    input_audio_transcription?: Session.InputAudioTranscription;\n\n    /**\n     * The set of modalities the model can respond with. To disable audio, set this to\n     * [\"text\"].\n     */\n    modalities?: Array<'text' | 'audio'>;\n\n    /**\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n     * set to `null` to turn off, in which case the client must manually trigger model\n     * response. Server VAD means that the model will detect the start and end of\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\n     * semantically estimate whether the user has finished speaking, then dynamically\n     * sets a timeout based on this probability. For example, if user audio trails off\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\n     * for the user to continue speaking. This can be useful for more natural\n     * conversations, but may have a higher latency.\n     */\n    turn_detection?: Session.TurnDetection;\n  }\n\n  export namespace Session {\n    /**\n     * Configuration options for the generated client secret.\n     */\n    export interface ClientSecret {\n      /**\n       * Configuration for the ephemeral token expiration.\n       */\n      expires_at?: ClientSecret.ExpiresAt;\n    }\n\n    export namespace ClientSecret {\n      /**\n       * Configuration for the ephemeral token expiration.\n       */\n      export interface ExpiresAt {\n        /**\n         * The anchor point for the ephemeral token expiration. Only `created_at` is\n         * currently supported.\n         */\n        anchor?: 'created_at';\n\n        /**\n         * The number of seconds from the anchor point to the expiration. Select a value\n         * between `10` and `7200`.\n         */\n        seconds?: number;\n      }\n    }\n\n    /**\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\n     * off. Noise reduction filters audio added to the input audio buffer before it is\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\n     * detection accuracy (reducing false positives) and model performance by improving\n     * perception of the input audio.\n     */\n    export interface InputAudioNoiseReduction {\n      /**\n       * Type of noise reduction. `near_field` is for close-talking microphones such as\n       * headphones, `far_field` is for far-field microphones such as laptop or\n       * conference room microphones.\n       */\n      type?: 'near_field' | 'far_field';\n    }\n\n    /**\n     * Configuration for input audio transcription. The client can optionally set the\n     * language and prompt for transcription, these offer additional guidance to the\n     * transcription service.\n     */\n    export interface InputAudioTranscription {\n      /**\n       * The language of the input audio. Supplying the input language in\n       * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n       * format will improve accuracy and latency.\n       */\n      language?: string;\n\n      /**\n       * The model to use for transcription, current options are `gpt-4o-transcribe`,\n       * `gpt-4o-mini-transcribe`, and `whisper-1`.\n       */\n      model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\n\n      /**\n       * An optional text to guide the model's style or continue a previous audio\n       * segment. For `whisper-1`, the\n       * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\n       * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\n       * \"expect words related to technology\".\n       */\n      prompt?: string;\n    }\n\n    /**\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n     * set to `null` to turn off, in which case the client must manually trigger model\n     * response. Server VAD means that the model will detect the start and end of\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\n     * semantically estimate whether the user has finished speaking, then dynamically\n     * sets a timeout based on this probability. For example, if user audio trails off\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\n     * for the user to continue speaking. This can be useful for more natural\n     * conversations, but may have a higher latency.\n     */\n    export interface TurnDetection {\n      /**\n       * Whether or not to automatically generate a response when a VAD stop event\n       * occurs. Not available for transcription sessions.\n       */\n      create_response?: boolean;\n\n      /**\n       * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\n       * will wait longer for the user to continue speaking, `high` will respond more\n       * quickly. `auto` is the default and is equivalent to `medium`.\n       */\n      eagerness?: 'low' | 'medium' | 'high' | 'auto';\n\n      /**\n       * Whether or not to automatically interrupt any ongoing response with output to\n       * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n       * occurs. Not available for transcription sessions.\n       */\n      interrupt_response?: boolean;\n\n      /**\n       * Used only for `server_vad` mode. Amount of audio to include before the VAD\n       * detected speech (in milliseconds). Defaults to 300ms.\n       */\n      prefix_padding_ms?: number;\n\n      /**\n       * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\n       * milliseconds). Defaults to 500ms. With shorter values the model will respond\n       * more quickly, but may jump in on short pauses from the user.\n       */\n      silence_duration_ms?: number;\n\n      /**\n       * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\n       * defaults to 0.5. A higher threshold will require louder audio to activate the\n       * model, and thus might perform better in noisy environments.\n       */\n      threshold?: number;\n\n      /**\n       * Type of turn detection.\n       */\n      type?: 'server_vad' | 'semantic_vad';\n    }\n  }\n}\n\n/**\n * Returned when a transcription session is updated with a\n * `transcription_session.update` event, unless there is an error.\n */\nexport interface TranscriptionSessionUpdatedEvent {\n  /**\n   * The unique ID of the server event.\n   */\n  event_id: string;\n\n  /**\n   * A new Realtime transcription session configuration.\n   *\n   * When a session is created on the server via REST API, the session object also\n   * contains an ephemeral key. Default TTL for keys is 10 minutes. This property is\n   * not present when a session is updated via the WebSocket API.\n   */\n  session: TranscriptionSessionsAPI.TranscriptionSession;\n\n  /**\n   * The event type, must be `transcription_session.updated`.\n   */\n  type: 'transcription_session.updated';\n}\n\nRealtime.Sessions = Sessions;\nRealtime.TranscriptionSessions = TranscriptionSessions;\n\nexport declare namespace Realtime {\n  export {\n    type ConversationCreatedEvent as ConversationCreatedEvent,\n    type ConversationItem as ConversationItem,\n    type ConversationItemContent as ConversationItemContent,\n    type ConversationItemCreateEvent as ConversationItemCreateEvent,\n    type ConversationItemCreatedEvent as ConversationItemCreatedEvent,\n    type ConversationItemDeleteEvent as ConversationItemDeleteEvent,\n    type ConversationItemDeletedEvent as ConversationItemDeletedEvent,\n    type ConversationItemInputAudioTranscriptionCompletedEvent as ConversationItemInputAudioTranscriptionCompletedEvent,\n    type ConversationItemInputAudioTranscriptionDeltaEvent as ConversationItemInputAudioTranscriptionDeltaEvent,\n    type ConversationItemInputAudioTranscriptionFailedEvent as ConversationItemInputAudioTranscriptionFailedEvent,\n    type ConversationItemRetrieveEvent as ConversationItemRetrieveEvent,\n    type ConversationItemTruncateEvent as ConversationItemTruncateEvent,\n    type ConversationItemTruncatedEvent as ConversationItemTruncatedEvent,\n    type ConversationItemWithReference as ConversationItemWithReference,\n    type ErrorEvent as ErrorEvent,\n    type InputAudioBufferAppendEvent as InputAudioBufferAppendEvent,\n    type InputAudioBufferClearEvent as InputAudioBufferClearEvent,\n    type InputAudioBufferClearedEvent as InputAudioBufferClearedEvent,\n    type InputAudioBufferCommitEvent as InputAudioBufferCommitEvent,\n    type InputAudioBufferCommittedEvent as InputAudioBufferCommittedEvent,\n    type InputAudioBufferSpeechStartedEvent as InputAudioBufferSpeechStartedEvent,\n    type InputAudioBufferSpeechStoppedEvent as InputAudioBufferSpeechStoppedEvent,\n    type RateLimitsUpdatedEvent as RateLimitsUpdatedEvent,\n    type RealtimeClientEvent as RealtimeClientEvent,\n    type RealtimeResponse as RealtimeResponse,\n    type RealtimeResponseStatus as RealtimeResponseStatus,\n    type RealtimeResponseUsage as RealtimeResponseUsage,\n    type RealtimeServerEvent as RealtimeServerEvent,\n    type ResponseAudioDeltaEvent as ResponseAudioDeltaEvent,\n    type ResponseAudioDoneEvent as ResponseAudioDoneEvent,\n    type ResponseAudioTranscriptDeltaEvent as ResponseAudioTranscriptDeltaEvent,\n    type ResponseAudioTranscriptDoneEvent as ResponseAudioTranscriptDoneEvent,\n    type ResponseCancelEvent as ResponseCancelEvent,\n    type ResponseContentPartAddedEvent as ResponseContentPartAddedEvent,\n    type ResponseContentPartDoneEvent as ResponseContentPartDoneEvent,\n    type ResponseCreateEvent as ResponseCreateEvent,\n    type ResponseCreatedEvent as ResponseCreatedEvent,\n    type ResponseDoneEvent as ResponseDoneEvent,\n    type ResponseFunctionCallArgumentsDeltaEvent as ResponseFunctionCallArgumentsDeltaEvent,\n    type ResponseFunctionCallArgumentsDoneEvent as ResponseFunctionCallArgumentsDoneEvent,\n    type ResponseOutputItemAddedEvent as ResponseOutputItemAddedEvent,\n    type ResponseOutputItemDoneEvent as ResponseOutputItemDoneEvent,\n    type ResponseTextDeltaEvent as ResponseTextDeltaEvent,\n    type ResponseTextDoneEvent as ResponseTextDoneEvent,\n    type SessionCreatedEvent as SessionCreatedEvent,\n    type SessionUpdateEvent as SessionUpdateEvent,\n    type SessionUpdatedEvent as SessionUpdatedEvent,\n    type TranscriptionSessionUpdate as TranscriptionSessionUpdate,\n    type TranscriptionSessionUpdatedEvent as TranscriptionSessionUpdatedEvent,\n  };\n\n  export {\n    Sessions as Sessions,\n    type SessionsAPISession as Session,\n    type SessionCreateResponse as SessionCreateResponse,\n    type SessionCreateParams as SessionCreateParams,\n  };\n\n  export {\n    TranscriptionSessions as TranscriptionSessions,\n    type TranscriptionSession as TranscriptionSession,\n    type TranscriptionSessionCreateParams as TranscriptionSessionCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as Core from '../../../core';\n\nexport class Sessions extends APIResource {\n  /**\n   * Create an ephemeral API token for use in client-side applications with the\n   * Realtime API. Can be configured with the same session parameters as the\n   * `session.update` client event.\n   *\n   * It responds with a session object, plus a `client_secret` key which contains a\n   * usable ephemeral API token that can be used to authenticate browser clients for\n   * the Realtime API.\n   *\n   * @example\n   * ```ts\n   * const session =\n   *   await client.beta.realtime.sessions.create();\n   * ```\n   */\n  create(body: SessionCreateParams, options?: Core.RequestOptions): Core.APIPromise<SessionCreateResponse> {\n    return this._client.post('/realtime/sessions', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\n/**\n * Realtime session object configuration.\n */\nexport interface Session {\n  /**\n   * Unique identifier for the session that looks like `sess_1234567890abcdef`.\n   */\n  id?: string;\n\n  /**\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n   * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n   * (mono), and little-endian byte order.\n   */\n  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  input_audio_noise_reduction?: Session.InputAudioNoiseReduction;\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through\n   * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n   * and should be treated as guidance of input audio content rather than precisely\n   * what the model heard. The client can optionally set the language and prompt for\n   * transcription, these offer additional guidance to the transcription service.\n   */\n  input_audio_transcription?: Session.InputAudioTranscription;\n\n  /**\n   * The default system instructions (i.e. system message) prepended to model calls.\n   * This field allows the client to guide the model on desired responses. The model\n   * can be instructed on response content and format, (e.g. \"be extremely succinct\",\n   * \"act friendly\", \"here are examples of good responses\") and on audio behavior\n   * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n   * instructions are not guaranteed to be followed by the model, but they provide\n   * guidance to the model on the desired behavior.\n   *\n   * Note that the server sets default instructions which will be used if this field\n   * is not set and are visible in the `session.created` event at the start of the\n   * session.\n   */\n  instructions?: string;\n\n  /**\n   * Maximum number of output tokens for a single assistant response, inclusive of\n   * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n   * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n   */\n  max_response_output_tokens?: number | 'inf';\n\n  /**\n   * The set of modalities the model can respond with. To disable audio, set this to\n   * [\"text\"].\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * The Realtime model used for this session.\n   */\n  model?:\n    | 'gpt-4o-realtime-preview'\n    | 'gpt-4o-realtime-preview-2024-10-01'\n    | 'gpt-4o-realtime-preview-2024-12-17'\n    | 'gpt-4o-mini-realtime-preview'\n    | 'gpt-4o-mini-realtime-preview-2024-12-17';\n\n  /**\n   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   * For `pcm16`, output audio is sampled at a rate of 24kHz.\n   */\n  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a\n   * temperature of 0.8 is highly recommended for best performance.\n   */\n  temperature?: number;\n\n  /**\n   * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n   * a function.\n   */\n  tool_choice?: string;\n\n  /**\n   * Tools (functions) available to the model.\n   */\n  tools?: Array<Session.Tool>;\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  turn_detection?: Session.TurnDetection;\n\n  /**\n   * The voice the model uses to respond. Voice cannot be changed during the session\n   * once the model has responded with audio at least once. Current voice options are\n   * `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, `shimmer` and `verse`.\n   */\n  voice?:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n}\n\nexport namespace Session {\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  export interface InputAudioNoiseReduction {\n    /**\n     * Type of noise reduction. `near_field` is for close-talking microphones such as\n     * headphones, `far_field` is for far-field microphones such as laptop or\n     * conference room microphones.\n     */\n    type?: 'near_field' | 'far_field';\n  }\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through\n   * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n   * and should be treated as guidance of input audio content rather than precisely\n   * what the model heard. The client can optionally set the language and prompt for\n   * transcription, these offer additional guidance to the transcription service.\n   */\n  export interface InputAudioTranscription {\n    /**\n     * The language of the input audio. Supplying the input language in\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n     * format will improve accuracy and latency.\n     */\n    language?: string;\n\n    /**\n     * The model to use for transcription, current options are `gpt-4o-transcribe`,\n     * `gpt-4o-mini-transcribe`, and `whisper-1`.\n     */\n    model?: string;\n\n    /**\n     * An optional text to guide the model's style or continue a previous audio\n     * segment. For `whisper-1`, the\n     * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\n     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\n     * \"expect words related to technology\".\n     */\n    prompt?: string;\n  }\n\n  export interface Tool {\n    /**\n     * The description of the function, including guidance on when and how to call it,\n     * and guidance about what to tell the user when calling (if anything).\n     */\n    description?: string;\n\n    /**\n     * The name of the function.\n     */\n    name?: string;\n\n    /**\n     * Parameters of the function in JSON Schema.\n     */\n    parameters?: unknown;\n\n    /**\n     * The type of the tool, i.e. `function`.\n     */\n    type?: 'function';\n  }\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  export interface TurnDetection {\n    /**\n     * Whether or not to automatically generate a response when a VAD stop event\n     * occurs.\n     */\n    create_response?: boolean;\n\n    /**\n     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\n     * will wait longer for the user to continue speaking, `high` will respond more\n     * quickly. `auto` is the default and is equivalent to `medium`.\n     */\n    eagerness?: 'low' | 'medium' | 'high' | 'auto';\n\n    /**\n     * Whether or not to automatically interrupt any ongoing response with output to\n     * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n     * occurs.\n     */\n    interrupt_response?: boolean;\n\n    /**\n     * Used only for `server_vad` mode. Amount of audio to include before the VAD\n     * detected speech (in milliseconds). Defaults to 300ms.\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\n     * milliseconds). Defaults to 500ms. With shorter values the model will respond\n     * more quickly, but may jump in on short pauses from the user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\n     * defaults to 0.5. A higher threshold will require louder audio to activate the\n     * model, and thus might perform better in noisy environments.\n     */\n    threshold?: number;\n\n    /**\n     * Type of turn detection.\n     */\n    type?: 'server_vad' | 'semantic_vad';\n  }\n}\n\n/**\n * A new Realtime session configuration, with an ephermeral key. Default TTL for\n * keys is one minute.\n */\nexport interface SessionCreateResponse {\n  /**\n   * Ephemeral key returned by the API.\n   */\n  client_secret: SessionCreateResponse.ClientSecret;\n\n  /**\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   */\n  input_audio_format?: string;\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through Whisper and should be treated as rough guidance rather\n   * than the representation understood by the model.\n   */\n  input_audio_transcription?: SessionCreateResponse.InputAudioTranscription;\n\n  /**\n   * The default system instructions (i.e. system message) prepended to model calls.\n   * This field allows the client to guide the model on desired responses. The model\n   * can be instructed on response content and format, (e.g. \"be extremely succinct\",\n   * \"act friendly\", \"here are examples of good responses\") and on audio behavior\n   * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n   * instructions are not guaranteed to be followed by the model, but they provide\n   * guidance to the model on the desired behavior.\n   *\n   * Note that the server sets default instructions which will be used if this field\n   * is not set and are visible in the `session.created` event at the start of the\n   * session.\n   */\n  instructions?: string;\n\n  /**\n   * Maximum number of output tokens for a single assistant response, inclusive of\n   * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n   * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n   */\n  max_response_output_tokens?: number | 'inf';\n\n  /**\n   * The set of modalities the model can respond with. To disable audio, set this to\n   * [\"text\"].\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   */\n  output_audio_format?: string;\n\n  /**\n   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n   */\n  temperature?: number;\n\n  /**\n   * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n   * a function.\n   */\n  tool_choice?: string;\n\n  /**\n   * Tools (functions) available to the model.\n   */\n  tools?: Array<SessionCreateResponse.Tool>;\n\n  /**\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\n   * means that the model will detect the start and end of speech based on audio\n   * volume and respond at the end of user speech.\n   */\n  turn_detection?: SessionCreateResponse.TurnDetection;\n\n  /**\n   * The voice the model uses to respond. Voice cannot be changed during the session\n   * once the model has responded with audio at least once. Current voice options are\n   * `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, `shimmer` and `verse`.\n   */\n  voice?:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n}\n\nexport namespace SessionCreateResponse {\n  /**\n   * Ephemeral key returned by the API.\n   */\n  export interface ClientSecret {\n    /**\n     * Timestamp for when the token expires. Currently, all tokens expire after one\n     * minute.\n     */\n    expires_at: number;\n\n    /**\n     * Ephemeral key usable in client environments to authenticate connections to the\n     * Realtime API. Use this in client-side environments rather than a standard API\n     * token, which should only be used server-side.\n     */\n    value: string;\n  }\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through Whisper and should be treated as rough guidance rather\n   * than the representation understood by the model.\n   */\n  export interface InputAudioTranscription {\n    /**\n     * The model to use for transcription, `whisper-1` is the only currently supported\n     * model.\n     */\n    model?: string;\n  }\n\n  export interface Tool {\n    /**\n     * The description of the function, including guidance on when and how to call it,\n     * and guidance about what to tell the user when calling (if anything).\n     */\n    description?: string;\n\n    /**\n     * The name of the function.\n     */\n    name?: string;\n\n    /**\n     * Parameters of the function in JSON Schema.\n     */\n    parameters?: unknown;\n\n    /**\n     * The type of the tool, i.e. `function`.\n     */\n    type?: 'function';\n  }\n\n  /**\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\n   * means that the model will detect the start and end of speech based on audio\n   * volume and respond at the end of user speech.\n   */\n  export interface TurnDetection {\n    /**\n     * Amount of audio to include before the VAD detected speech (in milliseconds).\n     * Defaults to 300ms.\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n     * With shorter values the model will respond more quickly, but may jump in on\n     * short pauses from the user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n     * threshold will require louder audio to activate the model, and thus might\n     * perform better in noisy environments.\n     */\n    threshold?: number;\n\n    /**\n     * Type of turn detection, only `server_vad` is currently supported.\n     */\n    type?: string;\n  }\n}\n\nexport interface SessionCreateParams {\n  /**\n   * Configuration options for the generated client secret.\n   */\n  client_secret?: SessionCreateParams.ClientSecret;\n\n  /**\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n   * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n   * (mono), and little-endian byte order.\n   */\n  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  input_audio_noise_reduction?: SessionCreateParams.InputAudioNoiseReduction;\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through\n   * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n   * and should be treated as guidance of input audio content rather than precisely\n   * what the model heard. The client can optionally set the language and prompt for\n   * transcription, these offer additional guidance to the transcription service.\n   */\n  input_audio_transcription?: SessionCreateParams.InputAudioTranscription;\n\n  /**\n   * The default system instructions (i.e. system message) prepended to model calls.\n   * This field allows the client to guide the model on desired responses. The model\n   * can be instructed on response content and format, (e.g. \"be extremely succinct\",\n   * \"act friendly\", \"here are examples of good responses\") and on audio behavior\n   * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n   * instructions are not guaranteed to be followed by the model, but they provide\n   * guidance to the model on the desired behavior.\n   *\n   * Note that the server sets default instructions which will be used if this field\n   * is not set and are visible in the `session.created` event at the start of the\n   * session.\n   */\n  instructions?: string;\n\n  /**\n   * Maximum number of output tokens for a single assistant response, inclusive of\n   * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n   * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n   */\n  max_response_output_tokens?: number | 'inf';\n\n  /**\n   * The set of modalities the model can respond with. To disable audio, set this to\n   * [\"text\"].\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * The Realtime model used for this session.\n   */\n  model?:\n    | 'gpt-4o-realtime-preview'\n    | 'gpt-4o-realtime-preview-2024-10-01'\n    | 'gpt-4o-realtime-preview-2024-12-17'\n    | 'gpt-4o-mini-realtime-preview'\n    | 'gpt-4o-mini-realtime-preview-2024-12-17';\n\n  /**\n   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   * For `pcm16`, output audio is sampled at a rate of 24kHz.\n   */\n  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a\n   * temperature of 0.8 is highly recommended for best performance.\n   */\n  temperature?: number;\n\n  /**\n   * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n   * a function.\n   */\n  tool_choice?: string;\n\n  /**\n   * Tools (functions) available to the model.\n   */\n  tools?: Array<SessionCreateParams.Tool>;\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  turn_detection?: SessionCreateParams.TurnDetection;\n\n  /**\n   * The voice the model uses to respond. Voice cannot be changed during the session\n   * once the model has responded with audio at least once. Current voice options are\n   * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`,\n   * `shimmer`, and `verse`.\n   */\n  voice?:\n    | (string & {})\n    | 'alloy'\n    | 'ash'\n    | 'ballad'\n    | 'coral'\n    | 'echo'\n    | 'fable'\n    | 'onyx'\n    | 'nova'\n    | 'sage'\n    | 'shimmer'\n    | 'verse';\n}\n\nexport namespace SessionCreateParams {\n  /**\n   * Configuration options for the generated client secret.\n   */\n  export interface ClientSecret {\n    /**\n     * Configuration for the ephemeral token expiration.\n     */\n    expires_at?: ClientSecret.ExpiresAt;\n  }\n\n  export namespace ClientSecret {\n    /**\n     * Configuration for the ephemeral token expiration.\n     */\n    export interface ExpiresAt {\n      /**\n       * The anchor point for the ephemeral token expiration. Only `created_at` is\n       * currently supported.\n       */\n      anchor?: 'created_at';\n\n      /**\n       * The number of seconds from the anchor point to the expiration. Select a value\n       * between `10` and `7200`.\n       */\n      seconds?: number;\n    }\n  }\n\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  export interface InputAudioNoiseReduction {\n    /**\n     * Type of noise reduction. `near_field` is for close-talking microphones such as\n     * headphones, `far_field` is for far-field microphones such as laptop or\n     * conference room microphones.\n     */\n    type?: 'near_field' | 'far_field';\n  }\n\n  /**\n   * Configuration for input audio transcription, defaults to off and can be set to\n   * `null` to turn off once on. Input audio transcription is not native to the\n   * model, since the model consumes audio directly. Transcription runs\n   * asynchronously through\n   * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n   * and should be treated as guidance of input audio content rather than precisely\n   * what the model heard. The client can optionally set the language and prompt for\n   * transcription, these offer additional guidance to the transcription service.\n   */\n  export interface InputAudioTranscription {\n    /**\n     * The language of the input audio. Supplying the input language in\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n     * format will improve accuracy and latency.\n     */\n    language?: string;\n\n    /**\n     * The model to use for transcription, current options are `gpt-4o-transcribe`,\n     * `gpt-4o-mini-transcribe`, and `whisper-1`.\n     */\n    model?: string;\n\n    /**\n     * An optional text to guide the model's style or continue a previous audio\n     * segment. For `whisper-1`, the\n     * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\n     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\n     * \"expect words related to technology\".\n     */\n    prompt?: string;\n  }\n\n  export interface Tool {\n    /**\n     * The description of the function, including guidance on when and how to call it,\n     * and guidance about what to tell the user when calling (if anything).\n     */\n    description?: string;\n\n    /**\n     * The name of the function.\n     */\n    name?: string;\n\n    /**\n     * Parameters of the function in JSON Schema.\n     */\n    parameters?: unknown;\n\n    /**\n     * The type of the tool, i.e. `function`.\n     */\n    type?: 'function';\n  }\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  export interface TurnDetection {\n    /**\n     * Whether or not to automatically generate a response when a VAD stop event\n     * occurs.\n     */\n    create_response?: boolean;\n\n    /**\n     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\n     * will wait longer for the user to continue speaking, `high` will respond more\n     * quickly. `auto` is the default and is equivalent to `medium`.\n     */\n    eagerness?: 'low' | 'medium' | 'high' | 'auto';\n\n    /**\n     * Whether or not to automatically interrupt any ongoing response with output to\n     * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n     * occurs.\n     */\n    interrupt_response?: boolean;\n\n    /**\n     * Used only for `server_vad` mode. Amount of audio to include before the VAD\n     * detected speech (in milliseconds). Defaults to 300ms.\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\n     * milliseconds). Defaults to 500ms. With shorter values the model will respond\n     * more quickly, but may jump in on short pauses from the user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\n     * defaults to 0.5. A higher threshold will require louder audio to activate the\n     * model, and thus might perform better in noisy environments.\n     */\n    threshold?: number;\n\n    /**\n     * Type of turn detection.\n     */\n    type?: 'server_vad' | 'semantic_vad';\n  }\n}\n\nexport declare namespace Sessions {\n  export {\n    type Session as Session,\n    type SessionCreateResponse as SessionCreateResponse,\n    type SessionCreateParams as SessionCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as Core from '../../../core';\n\nexport class TranscriptionSessions extends APIResource {\n  /**\n   * Create an ephemeral API token for use in client-side applications with the\n   * Realtime API specifically for realtime transcriptions. Can be configured with\n   * the same session parameters as the `transcription_session.update` client event.\n   *\n   * It responds with a session object, plus a `client_secret` key which contains a\n   * usable ephemeral API token that can be used to authenticate browser clients for\n   * the Realtime API.\n   *\n   * @example\n   * ```ts\n   * const transcriptionSession =\n   *   await client.beta.realtime.transcriptionSessions.create();\n   * ```\n   */\n  create(\n    body: TranscriptionSessionCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<TranscriptionSession> {\n    return this._client.post('/realtime/transcription_sessions', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\n/**\n * A new Realtime transcription session configuration.\n *\n * When a session is created on the server via REST API, the session object also\n * contains an ephemeral key. Default TTL for keys is 10 minutes. This property is\n * not present when a session is updated via the WebSocket API.\n */\nexport interface TranscriptionSession {\n  /**\n   * Ephemeral key returned by the API. Only present when the session is created on\n   * the server via REST API.\n   */\n  client_secret: TranscriptionSession.ClientSecret;\n\n  /**\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n   */\n  input_audio_format?: string;\n\n  /**\n   * Configuration of the transcription model.\n   */\n  input_audio_transcription?: TranscriptionSession.InputAudioTranscription;\n\n  /**\n   * The set of modalities the model can respond with. To disable audio, set this to\n   * [\"text\"].\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\n   * means that the model will detect the start and end of speech based on audio\n   * volume and respond at the end of user speech.\n   */\n  turn_detection?: TranscriptionSession.TurnDetection;\n}\n\nexport namespace TranscriptionSession {\n  /**\n   * Ephemeral key returned by the API. Only present when the session is created on\n   * the server via REST API.\n   */\n  export interface ClientSecret {\n    /**\n     * Timestamp for when the token expires. Currently, all tokens expire after one\n     * minute.\n     */\n    expires_at: number;\n\n    /**\n     * Ephemeral key usable in client environments to authenticate connections to the\n     * Realtime API. Use this in client-side environments rather than a standard API\n     * token, which should only be used server-side.\n     */\n    value: string;\n  }\n\n  /**\n   * Configuration of the transcription model.\n   */\n  export interface InputAudioTranscription {\n    /**\n     * The language of the input audio. Supplying the input language in\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n     * format will improve accuracy and latency.\n     */\n    language?: string;\n\n    /**\n     * The model to use for transcription. Can be `gpt-4o-transcribe`,\n     * `gpt-4o-mini-transcribe`, or `whisper-1`.\n     */\n    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\n\n    /**\n     * An optional text to guide the model's style or continue a previous audio\n     * segment. The\n     * [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n     * should match the audio language.\n     */\n    prompt?: string;\n  }\n\n  /**\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\n   * means that the model will detect the start and end of speech based on audio\n   * volume and respond at the end of user speech.\n   */\n  export interface TurnDetection {\n    /**\n     * Amount of audio to include before the VAD detected speech (in milliseconds).\n     * Defaults to 300ms.\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n     * With shorter values the model will respond more quickly, but may jump in on\n     * short pauses from the user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n     * threshold will require louder audio to activate the model, and thus might\n     * perform better in noisy environments.\n     */\n    threshold?: number;\n\n    /**\n     * Type of turn detection, only `server_vad` is currently supported.\n     */\n    type?: string;\n  }\n}\n\nexport interface TranscriptionSessionCreateParams {\n  /**\n   * Configuration options for the generated client secret.\n   */\n  client_secret?: TranscriptionSessionCreateParams.ClientSecret;\n\n  /**\n   * The set of items to include in the transcription. Current available items are:\n   *\n   * - `item.input_audio_transcription.logprobs`\n   */\n  include?: Array<string>;\n\n  /**\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n   * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n   * (mono), and little-endian byte order.\n   */\n  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\n\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  input_audio_noise_reduction?: TranscriptionSessionCreateParams.InputAudioNoiseReduction;\n\n  /**\n   * Configuration for input audio transcription. The client can optionally set the\n   * language and prompt for transcription, these offer additional guidance to the\n   * transcription service.\n   */\n  input_audio_transcription?: TranscriptionSessionCreateParams.InputAudioTranscription;\n\n  /**\n   * The set of modalities the model can respond with. To disable audio, set this to\n   * [\"text\"].\n   */\n  modalities?: Array<'text' | 'audio'>;\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  turn_detection?: TranscriptionSessionCreateParams.TurnDetection;\n}\n\nexport namespace TranscriptionSessionCreateParams {\n  /**\n   * Configuration options for the generated client secret.\n   */\n  export interface ClientSecret {\n    /**\n     * Configuration for the ephemeral token expiration.\n     */\n    expires_at?: ClientSecret.ExpiresAt;\n  }\n\n  export namespace ClientSecret {\n    /**\n     * Configuration for the ephemeral token expiration.\n     */\n    export interface ExpiresAt {\n      /**\n       * The anchor point for the ephemeral token expiration. Only `created_at` is\n       * currently supported.\n       */\n      anchor?: 'created_at';\n\n      /**\n       * The number of seconds from the anchor point to the expiration. Select a value\n       * between `10` and `7200`.\n       */\n      seconds?: number;\n    }\n  }\n\n  /**\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\n   * off. Noise reduction filters audio added to the input audio buffer before it is\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\n   * detection accuracy (reducing false positives) and model performance by improving\n   * perception of the input audio.\n   */\n  export interface InputAudioNoiseReduction {\n    /**\n     * Type of noise reduction. `near_field` is for close-talking microphones such as\n     * headphones, `far_field` is for far-field microphones such as laptop or\n     * conference room microphones.\n     */\n    type?: 'near_field' | 'far_field';\n  }\n\n  /**\n   * Configuration for input audio transcription. The client can optionally set the\n   * language and prompt for transcription, these offer additional guidance to the\n   * transcription service.\n   */\n  export interface InputAudioTranscription {\n    /**\n     * The language of the input audio. Supplying the input language in\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n     * format will improve accuracy and latency.\n     */\n    language?: string;\n\n    /**\n     * The model to use for transcription, current options are `gpt-4o-transcribe`,\n     * `gpt-4o-mini-transcribe`, and `whisper-1`.\n     */\n    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\n\n    /**\n     * An optional text to guide the model's style or continue a previous audio\n     * segment. For `whisper-1`, the\n     * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\n     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\n     * \"expect words related to technology\".\n     */\n    prompt?: string;\n  }\n\n  /**\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n   * set to `null` to turn off, in which case the client must manually trigger model\n   * response. Server VAD means that the model will detect the start and end of\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\n   * semantically estimate whether the user has finished speaking, then dynamically\n   * sets a timeout based on this probability. For example, if user audio trails off\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\n   * for the user to continue speaking. This can be useful for more natural\n   * conversations, but may have a higher latency.\n   */\n  export interface TurnDetection {\n    /**\n     * Whether or not to automatically generate a response when a VAD stop event\n     * occurs. Not available for transcription sessions.\n     */\n    create_response?: boolean;\n\n    /**\n     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\n     * will wait longer for the user to continue speaking, `high` will respond more\n     * quickly. `auto` is the default and is equivalent to `medium`.\n     */\n    eagerness?: 'low' | 'medium' | 'high' | 'auto';\n\n    /**\n     * Whether or not to automatically interrupt any ongoing response with output to\n     * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n     * occurs. Not available for transcription sessions.\n     */\n    interrupt_response?: boolean;\n\n    /**\n     * Used only for `server_vad` mode. Amount of audio to include before the VAD\n     * detected speech (in milliseconds). Defaults to 300ms.\n     */\n    prefix_padding_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\n     * milliseconds). Defaults to 500ms. With shorter values the model will respond\n     * more quickly, but may jump in on short pauses from the user.\n     */\n    silence_duration_ms?: number;\n\n    /**\n     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\n     * defaults to 0.5. A higher threshold will require louder audio to activate the\n     * model, and thus might perform better in noisy environments.\n     */\n    threshold?: number;\n\n    /**\n     * Type of turn detection.\n     */\n    type?: 'server_vad' | 'semantic_vad';\n  }\n}\n\nexport declare namespace TranscriptionSessions {\n  export {\n    type TranscriptionSession as TranscriptionSession,\n    type TranscriptionSessionCreateParams as TranscriptionSessionCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport { AssistantStream, ThreadCreateAndRunParamsBaseStream } from '../../../lib/AssistantStream';\nimport { APIPromise } from '../../../core';\nimport * as Core from '../../../core';\nimport * as ThreadsAPI from './threads';\nimport * as Shared from '../../shared';\nimport * as AssistantsAPI from '../assistants';\nimport * as MessagesAPI from './messages';\nimport {\n  Annotation,\n  AnnotationDelta,\n  FileCitationAnnotation,\n  FileCitationDeltaAnnotation,\n  FilePathAnnotation,\n  FilePathDeltaAnnotation,\n  ImageFile,\n  ImageFileContentBlock,\n  ImageFileDelta,\n  ImageFileDeltaBlock,\n  ImageURL,\n  ImageURLContentBlock,\n  ImageURLDelta,\n  ImageURLDeltaBlock,\n  Message as MessagesAPIMessage,\n  MessageContent,\n  MessageContentDelta,\n  MessageContentPartParam,\n  MessageCreateParams,\n  MessageDeleted,\n  MessageDelta,\n  MessageDeltaEvent,\n  MessageListParams,\n  MessageUpdateParams,\n  Messages,\n  MessagesPage,\n  RefusalContentBlock,\n  RefusalDeltaBlock,\n  Text,\n  TextContentBlock,\n  TextContentBlockParam,\n  TextDelta,\n  TextDeltaBlock,\n} from './messages';\nimport * as RunsAPI from './runs/runs';\nimport {\n  RequiredActionFunctionToolCall,\n  Run,\n  RunCreateAndPollParams,\n  RunCreateAndStreamParams,\n  RunCreateParams,\n  RunCreateParamsNonStreaming,\n  RunCreateParamsStreaming,\n  RunListParams,\n  RunStatus,\n  RunStreamParams,\n  RunSubmitToolOutputsAndPollParams,\n  RunSubmitToolOutputsParams,\n  RunSubmitToolOutputsParamsNonStreaming,\n  RunSubmitToolOutputsParamsStreaming,\n  RunSubmitToolOutputsStreamParams,\n  RunUpdateParams,\n  Runs,\n  RunsPage,\n} from './runs/runs';\nimport { Stream } from '../../../streaming';\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Threads extends APIResource {\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this._client);\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this._client);\n\n  /**\n   * Create a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  create(body?: ThreadCreateParams, options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(\n    body: ThreadCreateParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Thread> {\n    if (isRequestOptions(body)) {\n      return this.create({}, body);\n    }\n    return this._client.post('/threads', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  retrieve(threadId: string, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.get(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  update(threadId: string, body: ThreadUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  del(threadId: string, options?: Core.RequestOptions): Core.APIPromise<ThreadDeleted> {\n    return this._client.delete(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a thread and run it in one request.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  createAndRun(\n    body: ThreadCreateAndRunParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<RunsAPI.Run>;\n  createAndRun(\n    body: ThreadCreateAndRunParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  createAndRun(\n    body: ThreadCreateAndRunParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent> | RunsAPI.Run>;\n  createAndRun(\n    body: ThreadCreateAndRunParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<RunsAPI.Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>> {\n    return this._client.post('/threads/runs', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n      stream: body.stream ?? false,\n    }) as APIPromise<RunsAPI.Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  }\n\n  /**\n   * A helper to create a thread, start a run and then poll for a terminal state.\n   * More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async createAndRunPoll(\n    body: ThreadCreateAndRunParamsNonStreaming,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<Threads.Run> {\n    const run = await this.createAndRun(body, options);\n    return await this.runs.poll(run.thread_id, run.id, options);\n  }\n\n  /**\n   * Create a thread and stream the run back\n   */\n  createAndRunStream(\n    body: ThreadCreateAndRunParamsBaseStream,\n    options?: Core.RequestOptions,\n  ): AssistantStream {\n    return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n  }\n}\n\n/**\n * Specifies the format that the model must output. Compatible with\n * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n *\n * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n * Outputs which ensures the model will match your supplied JSON schema. Learn more\n * in the\n * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n *\n * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n * message the model generates is valid JSON.\n *\n * **Important:** when using JSON mode, you **must** also instruct the model to\n * produce JSON yourself via a system or user message. Without this, the model may\n * generate an unending stream of whitespace until the generation reaches the token\n * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n * the message content may be partially cut off if `finish_reason=\"length\"`, which\n * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n * max context length.\n */\nexport type AssistantResponseFormatOption =\n  | 'auto'\n  | Shared.ResponseFormatText\n  | Shared.ResponseFormatJSONObject\n  | Shared.ResponseFormatJSONSchema;\n\n/**\n * Specifies a tool the model should use. Use to force the model to call a specific\n * tool.\n */\nexport interface AssistantToolChoice {\n  /**\n   * The type of the tool. If type is `function`, the function name must be set\n   */\n  type: 'function' | 'code_interpreter' | 'file_search';\n\n  function?: AssistantToolChoiceFunction;\n}\n\nexport interface AssistantToolChoiceFunction {\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n}\n\n/**\n * Controls which (if any) tool is called by the model. `none` means the model will\n * not call any tools and instead generates a message. `auto` is the default value\n * and means the model can pick between generating a message or calling one or more\n * tools. `required` means the model must call one or more tools before responding\n * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n * call that tool.\n */\nexport type AssistantToolChoiceOption = 'none' | 'auto' | 'required' | AssistantToolChoice;\n\n/**\n * Represents a thread that contains\n * [messages](https://platform.openai.com/docs/api-reference/messages).\n */\nexport interface Thread {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the thread was created.\n   */\n  created_at: number;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The object type, which is always `thread`.\n   */\n  object: 'thread';\n\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  tool_resources: Thread.ToolResources | null;\n}\n\nexport namespace Thread {\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this thread. There can be a maximum of 1 vector store attached to\n       * the thread.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n}\n\nexport interface ThreadDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.deleted';\n}\n\nexport interface ThreadCreateParams {\n  /**\n   * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n   * start the thread with.\n   */\n  messages?: Array<ThreadCreateParams.Message>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  tool_resources?: ThreadCreateParams.ToolResources | null;\n}\n\nexport namespace ThreadCreateParams {\n  export interface Message {\n    /**\n     * The text contents of the message.\n     */\n    content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n    /**\n     * The role of the entity that is creating the message. Allowed values include:\n     *\n     * - `user`: Indicates the message is sent by an actual user and should be used in\n     *   most cases to represent user-generated messages.\n     * - `assistant`: Indicates the message is generated by the assistant. Use this\n     *   value to insert messages from the assistant into the conversation.\n     */\n    role: 'user' | 'assistant';\n\n    /**\n     * A list of files attached to the message, and the tools they should be added to.\n     */\n    attachments?: Array<Message.Attachment> | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  export namespace Message {\n    export interface Attachment {\n      /**\n       * The ID of the file to attach to the message.\n       */\n      file_id?: string;\n\n      /**\n       * The tools to add this file to.\n       */\n      tools?: Array<AssistantsAPI.CodeInterpreterTool | Attachment.FileSearch>;\n    }\n\n    export namespace Attachment {\n      export interface FileSearch {\n        /**\n         * The type of tool being defined: `file_search`\n         */\n        type: 'file_search';\n      }\n    }\n  }\n\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this thread. There can be a maximum of 1 vector store attached to\n       * the thread.\n       */\n      vector_store_ids?: Array<string>;\n\n      /**\n       * A helper to create a\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * with file_ids and attach it to this thread. There can be a maximum of 1 vector\n       * store attached to the thread.\n       */\n      vector_stores?: Array<FileSearch.VectorStore>;\n    }\n\n    export namespace FileSearch {\n      export interface VectorStore {\n        /**\n         * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n         * strategy.\n         */\n        chunking_strategy?: VectorStore.Auto | VectorStore.Static;\n\n        /**\n         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n         * add to the vector store. There can be a maximum of 10000 files in a vector\n         * store.\n         */\n        file_ids?: Array<string>;\n\n        /**\n         * Set of 16 key-value pairs that can be attached to an object. This can be useful\n         * for storing additional information about the object in a structured format, and\n         * querying for objects via API or the dashboard.\n         *\n         * Keys are strings with a maximum length of 64 characters. Values are strings with\n         * a maximum length of 512 characters.\n         */\n        metadata?: Shared.Metadata | null;\n      }\n\n      export namespace VectorStore {\n        /**\n         * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of\n         * `800` and `chunk_overlap_tokens` of `400`.\n         */\n        export interface Auto {\n          /**\n           * Always `auto`.\n           */\n          type: 'auto';\n        }\n\n        export interface Static {\n          static: Static.Static;\n\n          /**\n           * Always `static`.\n           */\n          type: 'static';\n        }\n\n        export namespace Static {\n          export interface Static {\n            /**\n             * The number of tokens that overlap between chunks. The default value is `400`.\n             *\n             * Note that the overlap must not exceed half of `max_chunk_size_tokens`.\n             */\n            chunk_overlap_tokens: number;\n\n            /**\n             * The maximum number of tokens in each chunk. The default value is `800`. The\n             * minimum value is `100` and the maximum value is `4096`.\n             */\n            max_chunk_size_tokens: number;\n          }\n        }\n      }\n    }\n  }\n}\n\nexport interface ThreadUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  tool_resources?: ThreadUpdateParams.ToolResources | null;\n}\n\nexport namespace ThreadUpdateParams {\n  /**\n   * A set of resources that are made available to the assistant's tools in this\n   * thread. The resources are specific to the type of tool. For example, the\n   * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n   * tool requires a list of vector store IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this thread. There can be a maximum of 1 vector store attached to\n       * the thread.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n}\n\nexport type ThreadCreateAndRunParams =\n  | ThreadCreateAndRunParamsNonStreaming\n  | ThreadCreateAndRunParamsStreaming;\n\nexport interface ThreadCreateAndRunParamsBase {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: (string & {}) | Shared.ChatModel | null;\n\n  /**\n   * Whether to enable\n   * [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling)\n   * during tool use.\n   */\n  parallel_tool_calls?: boolean;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: AssistantResponseFormatOption | null;\n\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream?: boolean | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * Options to create a new thread. If no thread is provided when running a request,\n   * an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunParams.Thread;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: AssistantToolChoiceOption | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: ThreadCreateAndRunParams.ToolResources | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<AssistantsAPI.AssistantTool> | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: ThreadCreateAndRunParams.TruncationStrategy | null;\n}\n\nexport namespace ThreadCreateAndRunParams {\n  /**\n   * Options to create a new thread. If no thread is provided when running a request,\n   * an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    tool_resources?: Thread.ToolResources | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The text contents of the message.\n       */\n      content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n      /**\n       * The role of the entity that is creating the message. Allowed values include:\n       *\n       * - `user`: Indicates the message is sent by an actual user and should be used in\n       *   most cases to represent user-generated messages.\n       * - `assistant`: Indicates the message is generated by the assistant. Use this\n       *   value to insert messages from the assistant into the conversation.\n       */\n      role: 'user' | 'assistant';\n\n      /**\n       * A list of files attached to the message, and the tools they should be added to.\n       */\n      attachments?: Array<Message.Attachment> | null;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format, and\n       * querying for objects via API or the dashboard.\n       *\n       * Keys are strings with a maximum length of 64 characters. Values are strings with\n       * a maximum length of 512 characters.\n       */\n      metadata?: Shared.Metadata | null;\n    }\n\n    export namespace Message {\n      export interface Attachment {\n        /**\n         * The ID of the file to attach to the message.\n         */\n        file_id?: string;\n\n        /**\n         * The tools to add this file to.\n         */\n        tools?: Array<AssistantsAPI.CodeInterpreterTool | Attachment.FileSearch>;\n      }\n\n      export namespace Attachment {\n        export interface FileSearch {\n          /**\n           * The type of tool being defined: `file_search`\n           */\n          type: 'file_search';\n        }\n      }\n    }\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    export interface ToolResources {\n      code_interpreter?: ToolResources.CodeInterpreter;\n\n      file_search?: ToolResources.FileSearch;\n    }\n\n    export namespace ToolResources {\n      export interface CodeInterpreter {\n        /**\n         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n         * available to the `code_interpreter` tool. There can be a maximum of 20 files\n         * associated with the tool.\n         */\n        file_ids?: Array<string>;\n      }\n\n      export interface FileSearch {\n        /**\n         * The\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * attached to this thread. There can be a maximum of 1 vector store attached to\n         * the thread.\n         */\n        vector_store_ids?: Array<string>;\n\n        /**\n         * A helper to create a\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * with file_ids and attach it to this thread. There can be a maximum of 1 vector\n         * store attached to the thread.\n         */\n        vector_stores?: Array<FileSearch.VectorStore>;\n      }\n\n      export namespace FileSearch {\n        export interface VectorStore {\n          /**\n           * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n           * strategy.\n           */\n          chunking_strategy?: VectorStore.Auto | VectorStore.Static;\n\n          /**\n           * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n           * add to the vector store. There can be a maximum of 10000 files in a vector\n           * store.\n           */\n          file_ids?: Array<string>;\n\n          /**\n           * Set of 16 key-value pairs that can be attached to an object. This can be useful\n           * for storing additional information about the object in a structured format, and\n           * querying for objects via API or the dashboard.\n           *\n           * Keys are strings with a maximum length of 64 characters. Values are strings with\n           * a maximum length of 512 characters.\n           */\n          metadata?: Shared.Metadata | null;\n        }\n\n        export namespace VectorStore {\n          /**\n           * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of\n           * `800` and `chunk_overlap_tokens` of `400`.\n           */\n          export interface Auto {\n            /**\n             * Always `auto`.\n             */\n            type: 'auto';\n          }\n\n          export interface Static {\n            static: Static.Static;\n\n            /**\n             * Always `static`.\n             */\n            type: 'static';\n          }\n\n          export namespace Static {\n            export interface Static {\n              /**\n               * The number of tokens that overlap between chunks. The default value is `400`.\n               *\n               * Note that the overlap must not exceed half of `max_chunk_size_tokens`.\n               */\n              chunk_overlap_tokens: number;\n\n              /**\n               * The maximum number of tokens in each chunk. The default value is `800`. The\n               * minimum value is `100` and the maximum value is `4096`.\n               */\n              max_chunk_size_tokens: number;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The ID of the\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n\n  export type ThreadCreateAndRunParamsNonStreaming = ThreadsAPI.ThreadCreateAndRunParamsNonStreaming;\n  export type ThreadCreateAndRunParamsStreaming = ThreadsAPI.ThreadCreateAndRunParamsStreaming;\n}\n\nexport interface ThreadCreateAndRunParamsNonStreaming extends ThreadCreateAndRunParamsBase {\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream?: false | null;\n}\n\nexport interface ThreadCreateAndRunParamsStreaming extends ThreadCreateAndRunParamsBase {\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream: true;\n}\n\nexport interface ThreadCreateAndRunPollParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4o'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613'\n    | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunPollParams.Thread;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: AssistantToolChoiceOption | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: ThreadCreateAndRunPollParams.ToolResources | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool | AssistantsAPI.FunctionTool\n  > | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: ThreadCreateAndRunPollParams.TruncationStrategy | null;\n}\n\nexport namespace ThreadCreateAndRunPollParams {\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    tool_resources?: Thread.ToolResources | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The text contents of the message.\n       */\n      content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n      /**\n       * The role of the entity that is creating the message. Allowed values include:\n       *\n       * - `user`: Indicates the message is sent by an actual user and should be used in\n       *   most cases to represent user-generated messages.\n       * - `assistant`: Indicates the message is generated by the assistant. Use this\n       *   value to insert messages from the assistant into the conversation.\n       */\n      role: 'user' | 'assistant';\n\n      /**\n       * A list of files attached to the message, and the tools they should be added to.\n       */\n      attachments?: Array<Message.Attachment> | null;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format. Keys\n       * can be a maximum of 64 characters long and values can be a maxium of 512\n       * characters long.\n       */\n      metadata?: unknown | null;\n    }\n\n    export namespace Message {\n      export interface Attachment {\n        /**\n         * The ID of the file to attach to the message.\n         */\n        file_id?: string;\n\n        /**\n         * The tools to add this file to.\n         */\n        tools?: Array<AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool>;\n      }\n    }\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    export interface ToolResources {\n      code_interpreter?: ToolResources.CodeInterpreter;\n\n      file_search?: ToolResources.FileSearch;\n    }\n\n    export namespace ToolResources {\n      export interface CodeInterpreter {\n        /**\n         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n         * available to the `code_interpreter` tool. There can be a maximum of 20 files\n         * associated with the tool.\n         */\n        file_ids?: Array<string>;\n      }\n\n      export interface FileSearch {\n        /**\n         * The\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * attached to this thread. There can be a maximum of 1 vector store attached to\n         * the thread.\n         */\n        vector_store_ids?: Array<string>;\n\n        /**\n         * A helper to create a\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * with file_ids and attach it to this thread. There can be a maximum of 1 vector\n         * store attached to the thread.\n         */\n        vector_stores?: Array<FileSearch.VectorStore>;\n      }\n\n      export namespace FileSearch {\n        export interface VectorStore {\n          /**\n           * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n           * add to the vector store. There can be a maximum of 10000 files in a vector\n           * store.\n           */\n          file_ids?: Array<string>;\n\n          /**\n           * Set of 16 key-value pairs that can be attached to a vector store. This can be\n           * useful for storing additional information about the vector store in a structured\n           * format. Keys can be a maximum of 64 characters long and values can be a maxium\n           * of 512 characters long.\n           */\n          metadata?: unknown;\n        }\n      }\n    }\n  }\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The ID of the\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n}\n\nexport interface ThreadCreateAndRunStreamParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4o'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613'\n    | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunStreamParams.Thread;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: AssistantToolChoiceOption | null;\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  tool_resources?: ThreadCreateAndRunStreamParams.ToolResources | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool | AssistantsAPI.FunctionTool\n  > | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: ThreadCreateAndRunStreamParams.TruncationStrategy | null;\n}\n\nexport namespace ThreadCreateAndRunStreamParams {\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    tool_resources?: Thread.ToolResources | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The text contents of the message.\n       */\n      content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n      /**\n       * The role of the entity that is creating the message. Allowed values include:\n       *\n       * - `user`: Indicates the message is sent by an actual user and should be used in\n       *   most cases to represent user-generated messages.\n       * - `assistant`: Indicates the message is generated by the assistant. Use this\n       *   value to insert messages from the assistant into the conversation.\n       */\n      role: 'user' | 'assistant';\n\n      /**\n       * A list of files attached to the message, and the tools they should be added to.\n       */\n      attachments?: Array<Message.Attachment> | null;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format. Keys\n       * can be a maximum of 64 characters long and values can be a maxium of 512\n       * characters long.\n       */\n      metadata?: unknown | null;\n    }\n\n    export namespace Message {\n      export interface Attachment {\n        /**\n         * The ID of the file to attach to the message.\n         */\n        file_id?: string;\n\n        /**\n         * The tools to add this file to.\n         */\n        tools?: Array<AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool>;\n      }\n    }\n\n    /**\n     * A set of resources that are made available to the assistant's tools in this\n     * thread. The resources are specific to the type of tool. For example, the\n     * `code_interpreter` tool requires a list of file IDs, while the `file_search`\n     * tool requires a list of vector store IDs.\n     */\n    export interface ToolResources {\n      code_interpreter?: ToolResources.CodeInterpreter;\n\n      file_search?: ToolResources.FileSearch;\n    }\n\n    export namespace ToolResources {\n      export interface CodeInterpreter {\n        /**\n         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n         * available to the `code_interpreter` tool. There can be a maximum of 20 files\n         * associated with the tool.\n         */\n        file_ids?: Array<string>;\n      }\n\n      export interface FileSearch {\n        /**\n         * The\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * attached to this thread. There can be a maximum of 1 vector store attached to\n         * the thread.\n         */\n        vector_store_ids?: Array<string>;\n\n        /**\n         * A helper to create a\n         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n         * with file_ids and attach it to this thread. There can be a maximum of 1 vector\n         * store attached to the thread.\n         */\n        vector_stores?: Array<FileSearch.VectorStore>;\n      }\n\n      export namespace FileSearch {\n        export interface VectorStore {\n          /**\n           * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n           * add to the vector store. There can be a maximum of 10000 files in a vector\n           * store.\n           */\n          file_ids?: Array<string>;\n\n          /**\n           * Set of 16 key-value pairs that can be attached to a vector store. This can be\n           * useful for storing additional information about the vector store in a structured\n           * format. Keys can be a maximum of 64 characters long and values can be a maxium\n           * of 512 characters long.\n           */\n          metadata?: unknown;\n        }\n      }\n    }\n  }\n\n  /**\n   * A set of resources that are used by the assistant's tools. The resources are\n   * specific to the type of tool. For example, the `code_interpreter` tool requires\n   * a list of file IDs, while the `file_search` tool requires a list of vector store\n   * IDs.\n   */\n  export interface ToolResources {\n    code_interpreter?: ToolResources.CodeInterpreter;\n\n    file_search?: ToolResources.FileSearch;\n  }\n\n  export namespace ToolResources {\n    export interface CodeInterpreter {\n      /**\n       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n       * available to the `code_interpreter` tool. There can be a maximum of 20 files\n       * associated with the tool.\n       */\n      file_ids?: Array<string>;\n    }\n\n    export interface FileSearch {\n      /**\n       * The ID of the\n       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n       * attached to this assistant. There can be a maximum of 1 vector store attached to\n       * the assistant.\n       */\n      vector_store_ids?: Array<string>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n}\n\nThreads.Runs = Runs;\nThreads.RunsPage = RunsPage;\nThreads.Messages = Messages;\nThreads.MessagesPage = MessagesPage;\n\nexport declare namespace Threads {\n  export {\n    type AssistantResponseFormatOption as AssistantResponseFormatOption,\n    type AssistantToolChoice as AssistantToolChoice,\n    type AssistantToolChoiceFunction as AssistantToolChoiceFunction,\n    type AssistantToolChoiceOption as AssistantToolChoiceOption,\n    type Thread as Thread,\n    type ThreadDeleted as ThreadDeleted,\n    type ThreadCreateParams as ThreadCreateParams,\n    type ThreadUpdateParams as ThreadUpdateParams,\n    type ThreadCreateAndRunParams as ThreadCreateAndRunParams,\n    type ThreadCreateAndRunParamsNonStreaming as ThreadCreateAndRunParamsNonStreaming,\n    type ThreadCreateAndRunParamsStreaming as ThreadCreateAndRunParamsStreaming,\n    type ThreadCreateAndRunPollParams,\n    type ThreadCreateAndRunStreamParams,\n  };\n\n  export {\n    Runs as Runs,\n    type RequiredActionFunctionToolCall as RequiredActionFunctionToolCall,\n    type Run as Run,\n    type RunStatus as RunStatus,\n    RunsPage as RunsPage,\n    type RunCreateParams as RunCreateParams,\n    type RunCreateParamsNonStreaming as RunCreateParamsNonStreaming,\n    type RunCreateParamsStreaming as RunCreateParamsStreaming,\n    type RunUpdateParams as RunUpdateParams,\n    type RunListParams as RunListParams,\n    type RunCreateAndPollParams,\n    type RunCreateAndStreamParams,\n    type RunStreamParams,\n    type RunSubmitToolOutputsParams as RunSubmitToolOutputsParams,\n    type RunSubmitToolOutputsParamsNonStreaming as RunSubmitToolOutputsParamsNonStreaming,\n    type RunSubmitToolOutputsParamsStreaming as RunSubmitToolOutputsParamsStreaming,\n    type RunSubmitToolOutputsAndPollParams,\n    type RunSubmitToolOutputsStreamParams,\n  };\n\n  export {\n    Messages as Messages,\n    type Annotation as Annotation,\n    type AnnotationDelta as AnnotationDelta,\n    type FileCitationAnnotation as FileCitationAnnotation,\n    type FileCitationDeltaAnnotation as FileCitationDeltaAnnotation,\n    type FilePathAnnotation as FilePathAnnotation,\n    type FilePathDeltaAnnotation as FilePathDeltaAnnotation,\n    type ImageFile as ImageFile,\n    type ImageFileContentBlock as ImageFileContentBlock,\n    type ImageFileDelta as ImageFileDelta,\n    type ImageFileDeltaBlock as ImageFileDeltaBlock,\n    type ImageURL as ImageURL,\n    type ImageURLContentBlock as ImageURLContentBlock,\n    type ImageURLDelta as ImageURLDelta,\n    type ImageURLDeltaBlock as ImageURLDeltaBlock,\n    type MessagesAPIMessage as Message,\n    type MessageContent as MessageContent,\n    type MessageContentDelta as MessageContentDelta,\n    type MessageContentPartParam as MessageContentPartParam,\n    type MessageDeleted as MessageDeleted,\n    type MessageDelta as MessageDelta,\n    type MessageDeltaEvent as MessageDeltaEvent,\n    type RefusalContentBlock as RefusalContentBlock,\n    type RefusalDeltaBlock as RefusalDeltaBlock,\n    type Text as Text,\n    type TextContentBlock as TextContentBlock,\n    type TextContentBlockParam as TextContentBlockParam,\n    type TextDelta as TextDelta,\n    type TextDeltaBlock as TextDeltaBlock,\n    MessagesPage as MessagesPage,\n    type MessageCreateParams as MessageCreateParams,\n    type MessageUpdateParams as MessageUpdateParams,\n    type MessageListParams as MessageListParams,\n  };\n\n  export { AssistantStream };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as Shared from '../../shared';\nimport * as AssistantsAPI from '../assistants';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Messages extends APIResource {\n  /**\n   * Create a message.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  create(\n    threadId: string,\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Message> {\n    return this._client.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieve a message.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  retrieve(threadId: string, messageId: string, options?: Core.RequestOptions): Core.APIPromise<Message> {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a message.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  update(\n    threadId: string,\n    messageId: string,\n    body: MessageUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Message> {\n    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of messages for a given thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  list(\n    threadId: string,\n    query?: MessageListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<MessagesPage, Message>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<MessagesPage, Message>;\n  list(\n    threadId: string,\n    query: MessageListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<MessagesPage, Message> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Deletes a message.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  del(threadId: string, messageId: string, options?: Core.RequestOptions): Core.APIPromise<MessageDeleted> {\n    return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\nexport class MessagesPage extends CursorPage<Message> {}\n\n/**\n * A citation within the message that points to a specific quote from a specific\n * File associated with the assistant or the message. Generated when the assistant\n * uses the \"file_search\" tool to search files.\n */\nexport type Annotation = FileCitationAnnotation | FilePathAnnotation;\n\n/**\n * A citation within the message that points to a specific quote from a specific\n * File associated with the assistant or the message. Generated when the assistant\n * uses the \"file_search\" tool to search files.\n */\nexport type AnnotationDelta = FileCitationDeltaAnnotation | FilePathDeltaAnnotation;\n\n/**\n * A citation within the message that points to a specific quote from a specific\n * File associated with the assistant or the message. Generated when the assistant\n * uses the \"file_search\" tool to search files.\n */\nexport interface FileCitationAnnotation {\n  end_index: number;\n\n  file_citation: FileCitationAnnotation.FileCitation;\n\n  start_index: number;\n\n  /**\n   * The text in the message content that needs to be replaced.\n   */\n  text: string;\n\n  /**\n   * Always `file_citation`.\n   */\n  type: 'file_citation';\n}\n\nexport namespace FileCitationAnnotation {\n  export interface FileCitation {\n    /**\n     * The ID of the specific File the citation is from.\n     */\n    file_id: string;\n  }\n}\n\n/**\n * A citation within the message that points to a specific quote from a specific\n * File associated with the assistant or the message. Generated when the assistant\n * uses the \"file_search\" tool to search files.\n */\nexport interface FileCitationDeltaAnnotation {\n  /**\n   * The index of the annotation in the text content part.\n   */\n  index: number;\n\n  /**\n   * Always `file_citation`.\n   */\n  type: 'file_citation';\n\n  end_index?: number;\n\n  file_citation?: FileCitationDeltaAnnotation.FileCitation;\n\n  start_index?: number;\n\n  /**\n   * The text in the message content that needs to be replaced.\n   */\n  text?: string;\n}\n\nexport namespace FileCitationDeltaAnnotation {\n  export interface FileCitation {\n    /**\n     * The ID of the specific File the citation is from.\n     */\n    file_id?: string;\n\n    /**\n     * The specific quote in the file.\n     */\n    quote?: string;\n  }\n}\n\n/**\n * A URL for the file that's generated when the assistant used the\n * `code_interpreter` tool to generate a file.\n */\nexport interface FilePathAnnotation {\n  end_index: number;\n\n  file_path: FilePathAnnotation.FilePath;\n\n  start_index: number;\n\n  /**\n   * The text in the message content that needs to be replaced.\n   */\n  text: string;\n\n  /**\n   * Always `file_path`.\n   */\n  type: 'file_path';\n}\n\nexport namespace FilePathAnnotation {\n  export interface FilePath {\n    /**\n     * The ID of the file that was generated.\n     */\n    file_id: string;\n  }\n}\n\n/**\n * A URL for the file that's generated when the assistant used the\n * `code_interpreter` tool to generate a file.\n */\nexport interface FilePathDeltaAnnotation {\n  /**\n   * The index of the annotation in the text content part.\n   */\n  index: number;\n\n  /**\n   * Always `file_path`.\n   */\n  type: 'file_path';\n\n  end_index?: number;\n\n  file_path?: FilePathDeltaAnnotation.FilePath;\n\n  start_index?: number;\n\n  /**\n   * The text in the message content that needs to be replaced.\n   */\n  text?: string;\n}\n\nexport namespace FilePathDeltaAnnotation {\n  export interface FilePath {\n    /**\n     * The ID of the file that was generated.\n     */\n    file_id?: string;\n  }\n}\n\nexport interface ImageFile {\n  /**\n   * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n   * in the message content. Set `purpose=\"vision\"` when uploading the File if you\n   * need to later display the file content.\n   */\n  file_id: string;\n\n  /**\n   * Specifies the detail level of the image if specified by the user. `low` uses\n   * fewer tokens, you can opt in to high resolution using `high`.\n   */\n  detail?: 'auto' | 'low' | 'high';\n}\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport interface ImageFileContentBlock {\n  image_file: ImageFile;\n\n  /**\n   * Always `image_file`.\n   */\n  type: 'image_file';\n}\n\nexport interface ImageFileDelta {\n  /**\n   * Specifies the detail level of the image if specified by the user. `low` uses\n   * fewer tokens, you can opt in to high resolution using `high`.\n   */\n  detail?: 'auto' | 'low' | 'high';\n\n  /**\n   * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n   * in the message content. Set `purpose=\"vision\"` when uploading the File if you\n   * need to later display the file content.\n   */\n  file_id?: string;\n}\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport interface ImageFileDeltaBlock {\n  /**\n   * The index of the content part in the message.\n   */\n  index: number;\n\n  /**\n   * Always `image_file`.\n   */\n  type: 'image_file';\n\n  image_file?: ImageFileDelta;\n}\n\nexport interface ImageURL {\n  /**\n   * The external URL of the image, must be a supported image types: jpeg, jpg, png,\n   * gif, webp.\n   */\n  url: string;\n\n  /**\n   * Specifies the detail level of the image. `low` uses fewer tokens, you can opt in\n   * to high resolution using `high`. Default value is `auto`\n   */\n  detail?: 'auto' | 'low' | 'high';\n}\n\n/**\n * References an image URL in the content of a message.\n */\nexport interface ImageURLContentBlock {\n  image_url: ImageURL;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'image_url';\n}\n\nexport interface ImageURLDelta {\n  /**\n   * Specifies the detail level of the image. `low` uses fewer tokens, you can opt in\n   * to high resolution using `high`.\n   */\n  detail?: 'auto' | 'low' | 'high';\n\n  /**\n   * The URL of the image, must be a supported image types: jpeg, jpg, png, gif,\n   * webp.\n   */\n  url?: string;\n}\n\n/**\n * References an image URL in the content of a message.\n */\nexport interface ImageURLDeltaBlock {\n  /**\n   * The index of the content part in the message.\n   */\n  index: number;\n\n  /**\n   * Always `image_url`.\n   */\n  type: 'image_url';\n\n  image_url?: ImageURLDelta;\n}\n\n/**\n * Represents a message within a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface Message {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * If applicable, the ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) that\n   * authored this message.\n   */\n  assistant_id: string | null;\n\n  /**\n   * A list of files attached to the message, and the tools they were added to.\n   */\n  attachments: Array<Message.Attachment> | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message was completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The content of the message in array of text and/or images.\n   */\n  content: Array<MessageContent>;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message was marked as incomplete.\n   */\n  incomplete_at: number | null;\n\n  /**\n   * On an incomplete message, details about why the message is incomplete.\n   */\n  incomplete_details: Message.IncompleteDetails | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The object type, which is always `thread.message`.\n   */\n  object: 'thread.message';\n\n  /**\n   * The entity that produced the message. One of `user` or `assistant`.\n   */\n  role: 'user' | 'assistant';\n\n  /**\n   * The ID of the [run](https://platform.openai.com/docs/api-reference/runs)\n   * associated with the creation of this message. Value is `null` when messages are\n   * created manually using the create message or create thread endpoints.\n   */\n  run_id: string | null;\n\n  /**\n   * The status of the message, which can be either `in_progress`, `incomplete`, or\n   * `completed`.\n   */\n  status: 'in_progress' | 'incomplete' | 'completed';\n\n  /**\n   * The [thread](https://platform.openai.com/docs/api-reference/threads) ID that\n   * this message belongs to.\n   */\n  thread_id: string;\n}\n\nexport namespace Message {\n  export interface Attachment {\n    /**\n     * The ID of the file to attach to the message.\n     */\n    file_id?: string;\n\n    /**\n     * The tools to add this file to.\n     */\n    tools?: Array<AssistantsAPI.CodeInterpreterTool | Attachment.AssistantToolsFileSearchTypeOnly>;\n  }\n\n  export namespace Attachment {\n    export interface AssistantToolsFileSearchTypeOnly {\n      /**\n       * The type of tool being defined: `file_search`\n       */\n      type: 'file_search';\n    }\n  }\n\n  /**\n   * On an incomplete message, details about why the message is incomplete.\n   */\n  export interface IncompleteDetails {\n    /**\n     * The reason the message is incomplete.\n     */\n    reason: 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';\n  }\n}\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport type MessageContent =\n  | ImageFileContentBlock\n  | ImageURLContentBlock\n  | TextContentBlock\n  | RefusalContentBlock;\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport type MessageContentDelta =\n  | ImageFileDeltaBlock\n  | TextDeltaBlock\n  | RefusalDeltaBlock\n  | ImageURLDeltaBlock;\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport type MessageContentPartParam = ImageFileContentBlock | ImageURLContentBlock | TextContentBlockParam;\n\nexport interface MessageDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.message.deleted';\n}\n\n/**\n * The delta containing the fields that have changed on the Message.\n */\nexport interface MessageDelta {\n  /**\n   * The content of the message in array of text and/or images.\n   */\n  content?: Array<MessageContentDelta>;\n\n  /**\n   * The entity that produced the message. One of `user` or `assistant`.\n   */\n  role?: 'user' | 'assistant';\n}\n\n/**\n * Represents a message delta i.e. any changed fields on a message during\n * streaming.\n */\nexport interface MessageDeltaEvent {\n  /**\n   * The identifier of the message, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The delta containing the fields that have changed on the Message.\n   */\n  delta: MessageDelta;\n\n  /**\n   * The object type, which is always `thread.message.delta`.\n   */\n  object: 'thread.message.delta';\n}\n\n/**\n * The refusal content generated by the assistant.\n */\nexport interface RefusalContentBlock {\n  refusal: string;\n\n  /**\n   * Always `refusal`.\n   */\n  type: 'refusal';\n}\n\n/**\n * The refusal content that is part of a message.\n */\nexport interface RefusalDeltaBlock {\n  /**\n   * The index of the refusal part in the message.\n   */\n  index: number;\n\n  /**\n   * Always `refusal`.\n   */\n  type: 'refusal';\n\n  refusal?: string;\n}\n\nexport interface Text {\n  annotations: Array<Annotation>;\n\n  /**\n   * The data that makes up the text.\n   */\n  value: string;\n}\n\n/**\n * The text content that is part of a message.\n */\nexport interface TextContentBlock {\n  text: Text;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n}\n\n/**\n * The text content that is part of a message.\n */\nexport interface TextContentBlockParam {\n  /**\n   * Text content to be sent to the model\n   */\n  text: string;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n}\n\nexport interface TextDelta {\n  annotations?: Array<AnnotationDelta>;\n\n  /**\n   * The data that makes up the text.\n   */\n  value?: string;\n}\n\n/**\n * The text content that is part of a message.\n */\nexport interface TextDeltaBlock {\n  /**\n   * The index of the content part in the message.\n   */\n  index: number;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n\n  text?: TextDelta;\n}\n\nexport interface MessageCreateParams {\n  /**\n   * The text contents of the message.\n   */\n  content: string | Array<MessageContentPartParam>;\n\n  /**\n   * The role of the entity that is creating the message. Allowed values include:\n   *\n   * - `user`: Indicates the message is sent by an actual user and should be used in\n   *   most cases to represent user-generated messages.\n   * - `assistant`: Indicates the message is generated by the assistant. Use this\n   *   value to insert messages from the assistant into the conversation.\n   */\n  role: 'user' | 'assistant';\n\n  /**\n   * A list of files attached to the message, and the tools they should be added to.\n   */\n  attachments?: Array<MessageCreateParams.Attachment> | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n}\n\nexport namespace MessageCreateParams {\n  export interface Attachment {\n    /**\n     * The ID of the file to attach to the message.\n     */\n    file_id?: string;\n\n    /**\n     * The tools to add this file to.\n     */\n    tools?: Array<AssistantsAPI.CodeInterpreterTool | Attachment.FileSearch>;\n  }\n\n  export namespace Attachment {\n    export interface FileSearch {\n      /**\n       * The type of tool being defined: `file_search`\n       */\n      type: 'file_search';\n    }\n  }\n}\n\nexport interface MessageUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n}\n\nexport interface MessageListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Filter messages by the run ID that generated them.\n   */\n  run_id?: string;\n}\n\nMessages.MessagesPage = MessagesPage;\n\nexport declare namespace Messages {\n  export {\n    type Annotation as Annotation,\n    type AnnotationDelta as AnnotationDelta,\n    type FileCitationAnnotation as FileCitationAnnotation,\n    type FileCitationDeltaAnnotation as FileCitationDeltaAnnotation,\n    type FilePathAnnotation as FilePathAnnotation,\n    type FilePathDeltaAnnotation as FilePathDeltaAnnotation,\n    type ImageFile as ImageFile,\n    type ImageFileContentBlock as ImageFileContentBlock,\n    type ImageFileDelta as ImageFileDelta,\n    type ImageFileDeltaBlock as ImageFileDeltaBlock,\n    type ImageURL as ImageURL,\n    type ImageURLContentBlock as ImageURLContentBlock,\n    type ImageURLDelta as ImageURLDelta,\n    type ImageURLDeltaBlock as ImageURLDeltaBlock,\n    type Message as Message,\n    type MessageContent as MessageContent,\n    type MessageContentDelta as MessageContentDelta,\n    type MessageContentPartParam as MessageContentPartParam,\n    type MessageDeleted as MessageDeleted,\n    type MessageDelta as MessageDelta,\n    type MessageDeltaEvent as MessageDeltaEvent,\n    type RefusalContentBlock as RefusalContentBlock,\n    type RefusalDeltaBlock as RefusalDeltaBlock,\n    type Text as Text,\n    type TextContentBlock as TextContentBlock,\n    type TextContentBlockParam as TextContentBlockParam,\n    type TextDelta as TextDelta,\n    type TextDeltaBlock as TextDeltaBlock,\n    MessagesPage as MessagesPage,\n    type MessageCreateParams as MessageCreateParams,\n    type MessageUpdateParams as MessageUpdateParams,\n    type MessageListParams as MessageListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../../resource';\nimport { isRequestOptions } from '../../../../core';\nimport { APIPromise } from '../../../../core';\nimport * as Core from '../../../../core';\nimport { AssistantStream, RunCreateParamsBaseStream } from '../../../../lib/AssistantStream';\nimport { sleep } from '../../../../core';\nimport { RunSubmitToolOutputsParamsStream } from '../../../../lib/AssistantStream';\nimport * as RunsAPI from './runs';\nimport * as Shared from '../../../shared';\nimport * as AssistantsAPI from '../../assistants';\nimport * as MessagesAPI from '../messages';\nimport * as ThreadsAPI from '../threads';\nimport * as StepsAPI from './steps';\nimport {\n  CodeInterpreterLogs,\n  CodeInterpreterOutputImage,\n  CodeInterpreterToolCall,\n  CodeInterpreterToolCallDelta,\n  FileSearchToolCall,\n  FileSearchToolCallDelta,\n  FunctionToolCall,\n  FunctionToolCallDelta,\n  MessageCreationStepDetails,\n  RunStep,\n  RunStepDelta,\n  RunStepDeltaEvent,\n  RunStepDeltaMessageDelta,\n  RunStepInclude,\n  RunStepsPage,\n  StepListParams,\n  StepRetrieveParams,\n  Steps,\n  ToolCall,\n  ToolCallDelta,\n  ToolCallDeltaObject,\n  ToolCallsStepDetails,\n} from './steps';\nimport { CursorPage, type CursorPageParams } from '../../../../pagination';\nimport { Stream } from '../../../../streaming';\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Runs extends APIResource {\n  steps: StepsAPI.Steps = new StepsAPI.Steps(this._client);\n\n  /**\n   * Create a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  create(\n    threadId: string,\n    params: RunCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Run>;\n  create(\n    threadId: string,\n    params: RunCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  create(\n    threadId: string,\n    params: RunCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent> | Run>;\n  create(\n    threadId: string,\n    params: RunCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>> {\n    const { include, ...body } = params;\n    return this._client.post(`/threads/${threadId}/runs`, {\n      query: { include },\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n      stream: params.stream ?? false,\n    }) as APIPromise<Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  }\n\n  /**\n   * Retrieves a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  retrieve(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  update(\n    threadId: string,\n    runId: string,\n    body: RunUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of runs belonging to a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  list(\n    threadId: string,\n    query?: RunListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<RunsPage, Run>;\n  list(\n    threadId: string,\n    query: RunListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Cancels a run that is `in_progress`.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  cancel(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * A helper to create a run an poll for a terminal state. More information on Run\n   * lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async createAndPoll(\n    threadId: string,\n    body: RunCreateParamsNonStreaming,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<Run> {\n    const run = await this.create(threadId, body, options);\n    return await this.poll(threadId, run.id, options);\n  }\n\n  /**\n   * Create a Run stream\n   *\n   * @deprecated use `stream` instead\n   */\n  createAndStream(\n    threadId: string,\n    body: RunCreateParamsBaseStream,\n    options?: Core.RequestOptions,\n  ): AssistantStream {\n    return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n\n  /**\n   * A helper to poll a run status until it reaches a terminal state. More\n   * information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async poll(\n    threadId: string,\n    runId: string,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<Run> {\n    const headers: { [key: string]: string } = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\n\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n\n    while (true) {\n      const { data: run, response } = await this.retrieve(threadId, runId, {\n        ...options,\n        headers: { ...options?.headers, ...headers },\n      }).withResponse();\n\n      switch (run.status) {\n        //If we are in any sort of intermediate state we poll\n        case 'queued':\n        case 'in_progress':\n        case 'cancelling':\n          let sleepInterval = 5000;\n\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        //We return the run in any terminal state.\n        case 'requires_action':\n        case 'incomplete':\n        case 'cancelled':\n        case 'completed':\n        case 'failed':\n        case 'expired':\n          return run;\n      }\n    }\n  }\n\n  /**\n   * Create a Run stream\n   */\n  stream(threadId: string, body: RunCreateParamsBaseStream, options?: Core.RequestOptions): AssistantStream {\n    return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n\n  /**\n   * When a run has the `status: \"requires_action\"` and `required_action.type` is\n   * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n   * tool calls once they're all completed. All outputs must be submitted in a single\n   * request.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Run>;\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<AssistantsAPI.AssistantStreamEvent> | Run>;\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n      stream: body.stream ?? false,\n    }) as APIPromise<Run> | APIPromise<Stream<AssistantsAPI.AssistantStreamEvent>>;\n  }\n\n  /**\n   * A helper to submit a tool output to a run and poll for a terminal run state.\n   * More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async submitToolOutputsAndPoll(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParamsNonStreaming,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<Run> {\n    const run = await this.submitToolOutputs(threadId, runId, body, options);\n    return await this.poll(threadId, run.id, options);\n  }\n\n  /**\n   * Submit the tool outputs from a previous run and stream the run to a terminal\n   * state. More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  submitToolOutputsStream(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParamsStream,\n    options?: Core.RequestOptions,\n  ): AssistantStream {\n    return AssistantStream.createToolAssistantStream(\n      threadId,\n      runId,\n      this._client.beta.threads.runs,\n      body,\n      options,\n    );\n  }\n}\n\nexport class RunsPage extends CursorPage<Run> {}\n\n/**\n * Tool call objects\n */\nexport interface RequiredActionFunctionToolCall {\n  /**\n   * The ID of the tool call. This ID must be referenced when you submit the tool\n   * outputs in using the\n   * [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n   * endpoint.\n   */\n  id: string;\n\n  /**\n   * The function definition.\n   */\n  function: RequiredActionFunctionToolCall.Function;\n\n  /**\n   * The type of tool call the output is required for. For now, this is always\n   * `function`.\n   */\n  type: 'function';\n}\n\nexport namespace RequiredActionFunctionToolCall {\n  /**\n   * The function definition.\n   */\n  export interface Function {\n    /**\n     * The arguments that the model expects you to pass to the function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function.\n     */\n    name: string;\n  }\n}\n\n/**\n * Represents an execution run on a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface Run {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * execution of this run.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was cancelled.\n   */\n  cancelled_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run will expire.\n   */\n  expires_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run failed.\n   */\n  failed_at: number | null;\n\n  /**\n   * Details on why the run is incomplete. Will be `null` if the run is not\n   * incomplete.\n   */\n  incomplete_details: Run.IncompleteDetails | null;\n\n  /**\n   * The instructions that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  instructions: string;\n\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  last_error: Run.LastError | null;\n\n  /**\n   * The maximum number of completion tokens specified to have been used over the\n   * course of the run.\n   */\n  max_completion_tokens: number | null;\n\n  /**\n   * The maximum number of prompt tokens specified to have been used over the course\n   * of the run.\n   */\n  max_prompt_tokens: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The model that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `thread.run`.\n   */\n  object: 'thread.run';\n\n  /**\n   * Whether to enable\n   * [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling)\n   * during tool use.\n   */\n  parallel_tool_calls: boolean;\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  required_action: Run.RequiredAction | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was started.\n   */\n  started_at: number | null;\n\n  /**\n   * The status of the run, which can be either `queued`, `in_progress`,\n   * `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`,\n   * `incomplete`, or `expired`.\n   */\n  status: RunStatus;\n\n  /**\n   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)\n   * that was executed on as a part of this run.\n   */\n  thread_id: string;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice: ThreadsAPI.AssistantToolChoiceOption | null;\n\n  /**\n   * The list of tools that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  tools: Array<AssistantsAPI.AssistantTool>;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy: Run.TruncationStrategy | null;\n\n  /**\n   * Usage statistics related to the run. This value will be `null` if the run is not\n   * in a terminal state (i.e. `in_progress`, `queued`, etc.).\n   */\n  usage: Run.Usage | null;\n\n  /**\n   * The sampling temperature used for this run. If not set, defaults to 1.\n   */\n  temperature?: number | null;\n\n  /**\n   * The nucleus sampling value used for this run. If not set, defaults to 1.\n   */\n  top_p?: number | null;\n}\n\nexport namespace Run {\n  /**\n   * Details on why the run is incomplete. Will be `null` if the run is not\n   * incomplete.\n   */\n  export interface IncompleteDetails {\n    /**\n     * The reason why the run is incomplete. This will point to which specific token\n     * limit was reached over the course of the run.\n     */\n    reason?: 'max_completion_tokens' | 'max_prompt_tokens';\n  }\n\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.\n     */\n    code: 'server_error' | 'rate_limit_exceeded' | 'invalid_prompt';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  export interface RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    submit_tool_outputs: RequiredAction.SubmitToolOutputs;\n\n    /**\n     * For now, this is always `submit_tool_outputs`.\n     */\n    type: 'submit_tool_outputs';\n  }\n\n  export namespace RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    export interface SubmitToolOutputs {\n      /**\n       * A list of the relevant tool calls.\n       */\n      tool_calls: Array<RunsAPI.RequiredActionFunctionToolCall>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n\n  /**\n   * Usage statistics related to the run. This value will be `null` if the run is not\n   * in a terminal state (i.e. `in_progress`, `queued`, etc.).\n   */\n  export interface Usage {\n    /**\n     * Number of completion tokens used over the course of the run.\n     */\n    completion_tokens: number;\n\n    /**\n     * Number of prompt tokens used over the course of the run.\n     */\n    prompt_tokens: number;\n\n    /**\n     * Total number of tokens used (prompt + completion).\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * The status of the run, which can be either `queued`, `in_progress`,\n * `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`,\n * `incomplete`, or `expired`.\n */\nexport type RunStatus =\n  | 'queued'\n  | 'in_progress'\n  | 'requires_action'\n  | 'cancelling'\n  | 'cancelled'\n  | 'failed'\n  | 'completed'\n  | 'incomplete'\n  | 'expired';\n\nexport type RunCreateParams = RunCreateParamsNonStreaming | RunCreateParamsStreaming;\n\nexport interface RunCreateParamsBase {\n  /**\n   * Body param: The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Query param: A list of additional fields to include in the response. Currently\n   * the only supported value is\n   * `step_details.tool_calls[*].file_search.results[*].content` to fetch the file\n   * search result content.\n   *\n   * See the\n   * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n   * for more information.\n   */\n  include?: Array<StepsAPI.RunStepInclude>;\n\n  /**\n   * Body param: Appends additional instructions at the end of the instructions for\n   * the run. This is useful for modifying the behavior on a per-run basis without\n   * overriding other instructions.\n   */\n  additional_instructions?: string | null;\n\n  /**\n   * Body param: Adds additional messages to the thread before creating the run.\n   */\n  additional_messages?: Array<RunCreateParams.AdditionalMessage> | null;\n\n  /**\n   * Body param: Overrides the\n   * [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n   * of the assistant. This is useful for modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Body param: The maximum number of completion tokens that may be used over the\n   * course of the run. The run will make a best effort to use only the number of\n   * completion tokens specified, across multiple turns of the run. If the run\n   * exceeds the number of completion tokens specified, the run will end with status\n   * `incomplete`. See `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * Body param: The maximum number of prompt tokens that may be used over the course\n   * of the run. The run will make a best effort to use only the number of prompt\n   * tokens specified, across multiple turns of the run. If the run exceeds the\n   * number of prompt tokens specified, the run will end with status `incomplete`.\n   * See `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Body param: Set of 16 key-value pairs that can be attached to an object. This\n   * can be useful for storing additional information about the object in a\n   * structured format, and querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * Body param: The ID of the\n   * [Model](https://platform.openai.com/docs/api-reference/models) to be used to\n   * execute this run. If a value is provided here, it will override the model\n   * associated with the assistant. If not, the model associated with the assistant\n   * will be used.\n   */\n  model?: (string & {}) | Shared.ChatModel | null;\n\n  /**\n   * Body param: Whether to enable\n   * [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling)\n   * during tool use.\n   */\n  parallel_tool_calls?: boolean;\n\n  /**\n   * Body param: **o-series models only**\n   *\n   * Constrains effort on reasoning for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n   * result in faster responses and fewer tokens used on reasoning in a response.\n   */\n  reasoning_effort?: Shared.ReasoningEffort | null;\n\n  /**\n   * Body param: Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n   * Outputs which ensures the model will match your supplied JSON schema. Learn more\n   * in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * Body param: If `true`, returns a stream of events that happen during the Run as\n   * server-sent events, terminating when the Run enters a terminal state with a\n   * `data: [DONE]` message.\n   */\n  stream?: boolean | null;\n\n  /**\n   * Body param: What sampling temperature to use, between 0 and 2. Higher values\n   * like 0.8 will make the output more random, while lower values like 0.2 will make\n   * it more focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * Body param: Controls which (if any) tool is called by the model. `none` means\n   * the model will not call any tools and instead generates a message. `auto` is the\n   * default value and means the model can pick between generating a message or\n   * calling one or more tools. `required` means the model must call one or more\n   * tools before responding to the user. Specifying a particular tool like\n   * `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: ThreadsAPI.AssistantToolChoiceOption | null;\n\n  /**\n   * Body param: Override the tools the assistant can use for this run. This is\n   * useful for modifying the behavior on a per-run basis.\n   */\n  tools?: Array<AssistantsAPI.AssistantTool> | null;\n\n  /**\n   * Body param: An alternative to sampling with temperature, called nucleus\n   * sampling, where the model considers the results of the tokens with top_p\n   * probability mass. So 0.1 means only the tokens comprising the top 10%\n   * probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Body param: Controls for how a thread will be truncated prior to the run. Use\n   * this to control the intial context window of the run.\n   */\n  truncation_strategy?: RunCreateParams.TruncationStrategy | null;\n}\n\nexport namespace RunCreateParams {\n  export interface AdditionalMessage {\n    /**\n     * The text contents of the message.\n     */\n    content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n    /**\n     * The role of the entity that is creating the message. Allowed values include:\n     *\n     * - `user`: Indicates the message is sent by an actual user and should be used in\n     *   most cases to represent user-generated messages.\n     * - `assistant`: Indicates the message is generated by the assistant. Use this\n     *   value to insert messages from the assistant into the conversation.\n     */\n    role: 'user' | 'assistant';\n\n    /**\n     * A list of files attached to the message, and the tools they should be added to.\n     */\n    attachments?: Array<AdditionalMessage.Attachment> | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  export namespace AdditionalMessage {\n    export interface Attachment {\n      /**\n       * The ID of the file to attach to the message.\n       */\n      file_id?: string;\n\n      /**\n       * The tools to add this file to.\n       */\n      tools?: Array<AssistantsAPI.CodeInterpreterTool | Attachment.FileSearch>;\n    }\n\n    export namespace Attachment {\n      export interface FileSearch {\n        /**\n         * The type of tool being defined: `file_search`\n         */\n        type: 'file_search';\n      }\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n\n  export type RunCreateParamsNonStreaming = RunsAPI.RunCreateParamsNonStreaming;\n  export type RunCreateParamsStreaming = RunsAPI.RunCreateParamsStreaming;\n}\n\nexport interface RunCreateParamsNonStreaming extends RunCreateParamsBase {\n  /**\n   * Body param: If `true`, returns a stream of events that happen during the Run as\n   * server-sent events, terminating when the Run enters a terminal state with a\n   * `data: [DONE]` message.\n   */\n  stream?: false | null;\n}\n\nexport interface RunCreateParamsStreaming extends RunCreateParamsBase {\n  /**\n   * Body param: If `true`, returns a stream of events that happen during the Run as\n   * server-sent events, terminating when the Run enters a terminal state with a\n   * `data: [DONE]` message.\n   */\n  stream: true;\n}\n\nexport interface RunUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n}\n\nexport interface RunListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport interface RunCreateAndPollParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Appends additional instructions at the end of the instructions for the run. This\n   * is useful for modifying the behavior on a per-run basis without overriding other\n   * instructions.\n   */\n  additional_instructions?: string | null;\n\n  /**\n   * Adds additional messages to the thread before creating the run.\n   */\n  additional_messages?: Array<RunCreateAndPollParams.AdditionalMessage> | null;\n\n  /**\n   * Overrides the\n   * [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n   * of the assistant. This is useful for modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4o'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613'\n    | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: ThreadsAPI.AssistantToolChoiceOption | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<AssistantsAPI.AssistantTool> | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: RunCreateAndPollParams.TruncationStrategy | null;\n}\n\nexport namespace RunCreateAndPollParams {\n  export interface AdditionalMessage {\n    /**\n     * The text contents of the message.\n     */\n    content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n    /**\n     * The role of the entity that is creating the message. Allowed values include:\n     *\n     * - `user`: Indicates the message is sent by an actual user and should be used in\n     *   most cases to represent user-generated messages.\n     * - `assistant`: Indicates the message is generated by the assistant. Use this\n     *   value to insert messages from the assistant into the conversation.\n     */\n    role: 'user' | 'assistant';\n\n    /**\n     * A list of files attached to the message, and the tools they should be added to.\n     */\n    attachments?: Array<AdditionalMessage.Attachment> | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace AdditionalMessage {\n    export interface Attachment {\n      /**\n       * The ID of the file to attach to the message.\n       */\n      file_id?: string;\n\n      /**\n       * The tools to add this file to.\n       */\n      tools?: Array<AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n}\n\nexport interface RunCreateAndStreamParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Appends additional instructions at the end of the instructions for the run. This\n   * is useful for modifying the behavior on a per-run basis without overriding other\n   * instructions.\n   */\n  additional_instructions?: string | null;\n\n  /**\n   * Adds additional messages to the thread before creating the run.\n   */\n  additional_messages?: Array<RunCreateAndStreamParams.AdditionalMessage> | null;\n\n  /**\n   * Overrides the\n   * [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n   * of the assistant. This is useful for modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4o'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613'\n    | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: ThreadsAPI.AssistantToolChoiceOption | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<AssistantsAPI.AssistantTool> | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: RunCreateAndStreamParams.TruncationStrategy | null;\n}\n\nexport namespace RunCreateAndStreamParams {\n  export interface AdditionalMessage {\n    /**\n     * The text contents of the message.\n     */\n    content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n    /**\n     * The role of the entity that is creating the message. Allowed values include:\n     *\n     * - `user`: Indicates the message is sent by an actual user and should be used in\n     *   most cases to represent user-generated messages.\n     * - `assistant`: Indicates the message is generated by the assistant. Use this\n     *   value to insert messages from the assistant into the conversation.\n     */\n    role: 'user' | 'assistant';\n\n    /**\n     * A list of files attached to the message, and the tools they should be added to.\n     */\n    attachments?: Array<AdditionalMessage.Attachment> | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace AdditionalMessage {\n    export interface Attachment {\n      /**\n       * The ID of the file to attach to the message.\n       */\n      file_id?: string;\n\n      /**\n       * The tools to add this file to.\n       */\n      tools?: Array<AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n}\n\nexport interface RunStreamParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Appends additional instructions at the end of the instructions for the run. This\n   * is useful for modifying the behavior on a per-run basis without overriding other\n   * instructions.\n   */\n  additional_instructions?: string | null;\n\n  /**\n   * Adds additional messages to the thread before creating the run.\n   */\n  additional_messages?: Array<RunStreamParams.AdditionalMessage> | null;\n\n  /**\n   * Overrides the\n   * [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n   * of the assistant. This is useful for modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * The maximum number of completion tokens that may be used over the course of the\n   * run. The run will make a best effort to use only the number of completion tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run.\n   * The run will make a best effort to use only the number of prompt tokens\n   * specified, across multiple turns of the run. If the run exceeds the number of\n   * prompt tokens specified, the run will end with status `incomplete`. See\n   * `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?:\n    | (string & {})\n    | 'gpt-4o'\n    | 'gpt-4o-2024-05-13'\n    | 'gpt-4-turbo'\n    | 'gpt-4-turbo-2024-04-09'\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613'\n    | null;\n\n  /**\n   * Specifies the format that the model must output. Compatible with\n   * [GPT-4o](https://platform.openai.com/docs/models/gpt-4o),\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-turbo-and-gpt-4),\n   * and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ThreadsAPI.AssistantResponseFormatOption | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   */\n  temperature?: number | null;\n\n  /**\n   * Controls which (if any) tool is called by the model. `none` means the model will\n   * not call any tools and instead generates a message. `auto` is the default value\n   * and means the model can pick between generating a message or calling one or more\n   * tools. `required` means the model must call one or more tools before responding\n   * to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that tool.\n   */\n  tool_choice?: ThreadsAPI.AssistantToolChoiceOption | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<AssistantsAPI.AssistantTool> | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  truncation_strategy?: RunStreamParams.TruncationStrategy | null;\n}\n\nexport namespace RunStreamParams {\n  export interface AdditionalMessage {\n    /**\n     * The text contents of the message.\n     */\n    content: string | Array<MessagesAPI.MessageContentPartParam>;\n\n    /**\n     * The role of the entity that is creating the message. Allowed values include:\n     *\n     * - `user`: Indicates the message is sent by an actual user and should be used in\n     *   most cases to represent user-generated messages.\n     * - `assistant`: Indicates the message is generated by the assistant. Use this\n     *   value to insert messages from the assistant into the conversation.\n     */\n    role: 'user' | 'assistant';\n\n    /**\n     * A list of files attached to the message, and the tools they should be added to.\n     */\n    attachments?: Array<AdditionalMessage.Attachment> | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace AdditionalMessage {\n    export interface Attachment {\n      /**\n       * The ID of the file to attach to the message.\n       */\n      file_id?: string;\n\n      /**\n       * The tools to add this file to.\n       */\n      tools?: Array<AssistantsAPI.CodeInterpreterTool | AssistantsAPI.FileSearchTool>;\n    }\n  }\n\n  /**\n   * Controls for how a thread will be truncated prior to the run. Use this to\n   * control the intial context window of the run.\n   */\n  export interface TruncationStrategy {\n    /**\n     * The truncation strategy to use for the thread. The default is `auto`. If set to\n     * `last_messages`, the thread will be truncated to the n most recent messages in\n     * the thread. When set to `auto`, messages in the middle of the thread will be\n     * dropped to fit the context length of the model, `max_prompt_tokens`.\n     */\n    type: 'auto' | 'last_messages';\n\n    /**\n     * The number of most recent messages from the thread when constructing the context\n     * for the run.\n     */\n    last_messages?: number | null;\n  }\n}\n\nexport type RunSubmitToolOutputsParams =\n  | RunSubmitToolOutputsParamsNonStreaming\n  | RunSubmitToolOutputsParamsStreaming;\n\nexport interface RunSubmitToolOutputsParamsBase {\n  /**\n   * A list of tools for which the outputs are being submitted.\n   */\n  tool_outputs: Array<RunSubmitToolOutputsParams.ToolOutput>;\n\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream?: boolean | null;\n}\n\nexport namespace RunSubmitToolOutputsParams {\n  export interface ToolOutput {\n    /**\n     * The output of the tool call to be submitted to continue the run.\n     */\n    output?: string;\n\n    /**\n     * The ID of the tool call in the `required_action` object within the run object\n     * the output is being submitted for.\n     */\n    tool_call_id?: string;\n  }\n\n  export type RunSubmitToolOutputsParamsNonStreaming = RunsAPI.RunSubmitToolOutputsParamsNonStreaming;\n  export type RunSubmitToolOutputsParamsStreaming = RunsAPI.RunSubmitToolOutputsParamsStreaming;\n}\n\nexport interface RunSubmitToolOutputsParamsNonStreaming extends RunSubmitToolOutputsParamsBase {\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream?: false | null;\n}\n\nexport interface RunSubmitToolOutputsParamsStreaming extends RunSubmitToolOutputsParamsBase {\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent\n   * events, terminating when the Run enters a terminal state with a `data: [DONE]`\n   * message.\n   */\n  stream: true;\n}\n\nexport interface RunSubmitToolOutputsAndPollParams {\n  /**\n   * A list of tools for which the outputs are being submitted.\n   */\n  tool_outputs: Array<RunSubmitToolOutputsAndPollParams.ToolOutput>;\n}\n\nexport namespace RunSubmitToolOutputsAndPollParams {\n  export interface ToolOutput {\n    /**\n     * The output of the tool call to be submitted to continue the run.\n     */\n    output?: string;\n\n    /**\n     * The ID of the tool call in the `required_action` object within the run object\n     * the output is being submitted for.\n     */\n    tool_call_id?: string;\n  }\n}\n\nexport interface RunSubmitToolOutputsStreamParams {\n  /**\n   * A list of tools for which the outputs are being submitted.\n   */\n  tool_outputs: Array<RunSubmitToolOutputsStreamParams.ToolOutput>;\n}\n\nexport namespace RunSubmitToolOutputsStreamParams {\n  export interface ToolOutput {\n    /**\n     * The output of the tool call to be submitted to continue the run.\n     */\n    output?: string;\n\n    /**\n     * The ID of the tool call in the `required_action` object within the run object\n     * the output is being submitted for.\n     */\n    tool_call_id?: string;\n  }\n}\n\nRuns.RunsPage = RunsPage;\nRuns.Steps = Steps;\nRuns.RunStepsPage = RunStepsPage;\n\nexport declare namespace Runs {\n  export {\n    type RequiredActionFunctionToolCall as RequiredActionFunctionToolCall,\n    type Run as Run,\n    type RunStatus as RunStatus,\n    RunsPage as RunsPage,\n    type RunCreateParams as RunCreateParams,\n    type RunCreateParamsNonStreaming as RunCreateParamsNonStreaming,\n    type RunCreateParamsStreaming as RunCreateParamsStreaming,\n    type RunUpdateParams as RunUpdateParams,\n    type RunListParams as RunListParams,\n    type RunCreateAndPollParams,\n    type RunCreateAndStreamParams,\n    type RunStreamParams,\n    type RunSubmitToolOutputsParams as RunSubmitToolOutputsParams,\n    type RunSubmitToolOutputsParamsNonStreaming as RunSubmitToolOutputsParamsNonStreaming,\n    type RunSubmitToolOutputsParamsStreaming as RunSubmitToolOutputsParamsStreaming,\n    type RunSubmitToolOutputsAndPollParams,\n    type RunSubmitToolOutputsStreamParams,\n  };\n\n  export {\n    Steps as Steps,\n    type CodeInterpreterLogs as CodeInterpreterLogs,\n    type CodeInterpreterOutputImage as CodeInterpreterOutputImage,\n    type CodeInterpreterToolCall as CodeInterpreterToolCall,\n    type CodeInterpreterToolCallDelta as CodeInterpreterToolCallDelta,\n    type FileSearchToolCall as FileSearchToolCall,\n    type FileSearchToolCallDelta as FileSearchToolCallDelta,\n    type FunctionToolCall as FunctionToolCall,\n    type FunctionToolCallDelta as FunctionToolCallDelta,\n    type MessageCreationStepDetails as MessageCreationStepDetails,\n    type RunStep as RunStep,\n    type RunStepDelta as RunStepDelta,\n    type RunStepDeltaEvent as RunStepDeltaEvent,\n    type RunStepDeltaMessageDelta as RunStepDeltaMessageDelta,\n    type RunStepInclude as RunStepInclude,\n    type ToolCall as ToolCall,\n    type ToolCallDelta as ToolCallDelta,\n    type ToolCallDeltaObject as ToolCallDeltaObject,\n    type ToolCallsStepDetails as ToolCallsStepDetails,\n    RunStepsPage as RunStepsPage,\n    type StepRetrieveParams as StepRetrieveParams,\n    type StepListParams as StepListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../../resource';\nimport { isRequestOptions } from '../../../../core';\nimport * as Core from '../../../../core';\nimport * as StepsAPI from './steps';\nimport * as Shared from '../../../shared';\nimport { CursorPage, type CursorPageParams } from '../../../../pagination';\n\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Steps extends APIResource {\n  /**\n   * Retrieves a run step.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  retrieve(\n    threadId: string,\n    runId: string,\n    stepId: string,\n    query?: StepRetrieveParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunStep>;\n  retrieve(\n    threadId: string,\n    runId: string,\n    stepId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunStep>;\n  retrieve(\n    threadId: string,\n    runId: string,\n    stepId: string,\n    query: StepRetrieveParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunStep> {\n    if (isRequestOptions(query)) {\n      return this.retrieve(threadId, runId, stepId, {}, query);\n    }\n    return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of run steps belonging to a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  list(\n    threadId: string,\n    runId: string,\n    query?: StepListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep>;\n  list(\n    threadId: string,\n    runId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep>;\n  list(\n    threadId: string,\n    runId: string,\n    query: StepListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, runId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\nexport class RunStepsPage extends CursorPage<RunStep> {}\n\n/**\n * Text output from the Code Interpreter tool call as part of a run step.\n */\nexport interface CodeInterpreterLogs {\n  /**\n   * The index of the output in the outputs array.\n   */\n  index: number;\n\n  /**\n   * Always `logs`.\n   */\n  type: 'logs';\n\n  /**\n   * The text output from the Code Interpreter tool call.\n   */\n  logs?: string;\n}\n\nexport interface CodeInterpreterOutputImage {\n  /**\n   * The index of the output in the outputs array.\n   */\n  index: number;\n\n  /**\n   * Always `image`.\n   */\n  type: 'image';\n\n  image?: CodeInterpreterOutputImage.Image;\n}\n\nexport namespace CodeInterpreterOutputImage {\n  export interface Image {\n    /**\n     * The [file](https://platform.openai.com/docs/api-reference/files) ID of the\n     * image.\n     */\n    file_id?: string;\n  }\n}\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n */\nexport interface CodeInterpreterToolCall {\n  /**\n   * The ID of the tool call.\n   */\n  id: string;\n\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  code_interpreter: CodeInterpreterToolCall.CodeInterpreter;\n\n  /**\n   * The type of tool call. This is always going to be `code_interpreter` for this\n   * type of tool call.\n   */\n  type: 'code_interpreter';\n}\n\nexport namespace CodeInterpreterToolCall {\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  export interface CodeInterpreter {\n    /**\n     * The input to the Code Interpreter tool call.\n     */\n    input: string;\n\n    /**\n     * The outputs from the Code Interpreter tool call. Code Interpreter can output one\n     * or more items, including text (`logs`) or images (`image`). Each of these are\n     * represented by a different object type.\n     */\n    outputs: Array<CodeInterpreter.Logs | CodeInterpreter.Image>;\n  }\n\n  export namespace CodeInterpreter {\n    /**\n     * Text output from the Code Interpreter tool call as part of a run step.\n     */\n    export interface Logs {\n      /**\n       * The text output from the Code Interpreter tool call.\n       */\n      logs: string;\n\n      /**\n       * Always `logs`.\n       */\n      type: 'logs';\n    }\n\n    export interface Image {\n      image: Image.Image;\n\n      /**\n       * Always `image`.\n       */\n      type: 'image';\n    }\n\n    export namespace Image {\n      export interface Image {\n        /**\n         * The [file](https://platform.openai.com/docs/api-reference/files) ID of the\n         * image.\n         */\n        file_id: string;\n      }\n    }\n  }\n}\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n */\nexport interface CodeInterpreterToolCallDelta {\n  /**\n   * The index of the tool call in the tool calls array.\n   */\n  index: number;\n\n  /**\n   * The type of tool call. This is always going to be `code_interpreter` for this\n   * type of tool call.\n   */\n  type: 'code_interpreter';\n\n  /**\n   * The ID of the tool call.\n   */\n  id?: string;\n\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  code_interpreter?: CodeInterpreterToolCallDelta.CodeInterpreter;\n}\n\nexport namespace CodeInterpreterToolCallDelta {\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  export interface CodeInterpreter {\n    /**\n     * The input to the Code Interpreter tool call.\n     */\n    input?: string;\n\n    /**\n     * The outputs from the Code Interpreter tool call. Code Interpreter can output one\n     * or more items, including text (`logs`) or images (`image`). Each of these are\n     * represented by a different object type.\n     */\n    outputs?: Array<StepsAPI.CodeInterpreterLogs | StepsAPI.CodeInterpreterOutputImage>;\n  }\n}\n\nexport interface FileSearchToolCall {\n  /**\n   * The ID of the tool call object.\n   */\n  id: string;\n\n  /**\n   * For now, this is always going to be an empty object.\n   */\n  file_search: FileSearchToolCall.FileSearch;\n\n  /**\n   * The type of tool call. This is always going to be `file_search` for this type of\n   * tool call.\n   */\n  type: 'file_search';\n}\n\nexport namespace FileSearchToolCall {\n  /**\n   * For now, this is always going to be an empty object.\n   */\n  export interface FileSearch {\n    /**\n     * The ranking options for the file search.\n     */\n    ranking_options?: FileSearch.RankingOptions;\n\n    /**\n     * The results of the file search.\n     */\n    results?: Array<FileSearch.Result>;\n  }\n\n  export namespace FileSearch {\n    /**\n     * The ranking options for the file search.\n     */\n    export interface RankingOptions {\n      /**\n       * The ranker used for the file search.\n       */\n      ranker: 'default_2024_08_21';\n\n      /**\n       * The score threshold for the file search. All values must be a floating point\n       * number between 0 and 1.\n       */\n      score_threshold: number;\n    }\n\n    /**\n     * A result instance of the file search.\n     */\n    export interface Result {\n      /**\n       * The ID of the file that result was found in.\n       */\n      file_id: string;\n\n      /**\n       * The name of the file that result was found in.\n       */\n      file_name: string;\n\n      /**\n       * The score of the result. All values must be a floating point number between 0\n       * and 1.\n       */\n      score: number;\n\n      /**\n       * The content of the result that was found. The content is only included if\n       * requested via the include query parameter.\n       */\n      content?: Array<Result.Content>;\n    }\n\n    export namespace Result {\n      export interface Content {\n        /**\n         * The text content of the file.\n         */\n        text?: string;\n\n        /**\n         * The type of the content.\n         */\n        type?: 'text';\n      }\n    }\n  }\n}\n\nexport interface FileSearchToolCallDelta {\n  /**\n   * For now, this is always going to be an empty object.\n   */\n  file_search: unknown;\n\n  /**\n   * The index of the tool call in the tool calls array.\n   */\n  index: number;\n\n  /**\n   * The type of tool call. This is always going to be `file_search` for this type of\n   * tool call.\n   */\n  type: 'file_search';\n\n  /**\n   * The ID of the tool call object.\n   */\n  id?: string;\n}\n\nexport interface FunctionToolCall {\n  /**\n   * The ID of the tool call object.\n   */\n  id: string;\n\n  /**\n   * The definition of the function that was called.\n   */\n  function: FunctionToolCall.Function;\n\n  /**\n   * The type of tool call. This is always going to be `function` for this type of\n   * tool call.\n   */\n  type: 'function';\n}\n\nexport namespace FunctionToolCall {\n  /**\n   * The definition of the function that was called.\n   */\n  export interface Function {\n    /**\n     * The arguments passed to the function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function.\n     */\n    name: string;\n\n    /**\n     * The output of the function. This will be `null` if the outputs have not been\n     * [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n     * yet.\n     */\n    output: string | null;\n  }\n}\n\nexport interface FunctionToolCallDelta {\n  /**\n   * The index of the tool call in the tool calls array.\n   */\n  index: number;\n\n  /**\n   * The type of tool call. This is always going to be `function` for this type of\n   * tool call.\n   */\n  type: 'function';\n\n  /**\n   * The ID of the tool call object.\n   */\n  id?: string;\n\n  /**\n   * The definition of the function that was called.\n   */\n  function?: FunctionToolCallDelta.Function;\n}\n\nexport namespace FunctionToolCallDelta {\n  /**\n   * The definition of the function that was called.\n   */\n  export interface Function {\n    /**\n     * The arguments passed to the function.\n     */\n    arguments?: string;\n\n    /**\n     * The name of the function.\n     */\n    name?: string;\n\n    /**\n     * The output of the function. This will be `null` if the outputs have not been\n     * [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n     * yet.\n     */\n    output?: string | null;\n  }\n}\n\n/**\n * Details of the message creation by the run step.\n */\nexport interface MessageCreationStepDetails {\n  message_creation: MessageCreationStepDetails.MessageCreation;\n\n  /**\n   * Always `message_creation`.\n   */\n  type: 'message_creation';\n}\n\nexport namespace MessageCreationStepDetails {\n  export interface MessageCreation {\n    /**\n     * The ID of the message that was created by this run step.\n     */\n    message_id: string;\n  }\n}\n\n/**\n * Represents a step in execution of a run.\n */\nexport interface RunStep {\n  /**\n   * The identifier of the run step, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants)\n   * associated with the run step.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step was cancelled.\n   */\n  cancelled_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step expired. A step is\n   * considered expired if the parent run is expired.\n   */\n  expired_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step failed.\n   */\n  failed_at: number | null;\n\n  /**\n   * The last error associated with this run step. Will be `null` if there are no\n   * errors.\n   */\n  last_error: RunStep.LastError | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The object type, which is always `thread.run.step`.\n   */\n  object: 'thread.run.step';\n\n  /**\n   * The ID of the [run](https://platform.openai.com/docs/api-reference/runs) that\n   * this run step is a part of.\n   */\n  run_id: string;\n\n  /**\n   * The status of the run step, which can be either `in_progress`, `cancelled`,\n   * `failed`, `completed`, or `expired`.\n   */\n  status: 'in_progress' | 'cancelled' | 'failed' | 'completed' | 'expired';\n\n  /**\n   * The details of the run step.\n   */\n  step_details: MessageCreationStepDetails | ToolCallsStepDetails;\n\n  /**\n   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)\n   * that was run.\n   */\n  thread_id: string;\n\n  /**\n   * The type of run step, which can be either `message_creation` or `tool_calls`.\n   */\n  type: 'message_creation' | 'tool_calls';\n\n  /**\n   * Usage statistics related to the run step. This value will be `null` while the\n   * run step's status is `in_progress`.\n   */\n  usage: RunStep.Usage | null;\n}\n\nexport namespace RunStep {\n  /**\n   * The last error associated with this run step. Will be `null` if there are no\n   * errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'rate_limit_exceeded';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n\n  /**\n   * Usage statistics related to the run step. This value will be `null` while the\n   * run step's status is `in_progress`.\n   */\n  export interface Usage {\n    /**\n     * Number of completion tokens used over the course of the run step.\n     */\n    completion_tokens: number;\n\n    /**\n     * Number of prompt tokens used over the course of the run step.\n     */\n    prompt_tokens: number;\n\n    /**\n     * Total number of tokens used (prompt + completion).\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * The delta containing the fields that have changed on the run step.\n */\nexport interface RunStepDelta {\n  /**\n   * The details of the run step.\n   */\n  step_details?: RunStepDeltaMessageDelta | ToolCallDeltaObject;\n}\n\n/**\n * Represents a run step delta i.e. any changed fields on a run step during\n * streaming.\n */\nexport interface RunStepDeltaEvent {\n  /**\n   * The identifier of the run step, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The delta containing the fields that have changed on the run step.\n   */\n  delta: RunStepDelta;\n\n  /**\n   * The object type, which is always `thread.run.step.delta`.\n   */\n  object: 'thread.run.step.delta';\n}\n\n/**\n * Details of the message creation by the run step.\n */\nexport interface RunStepDeltaMessageDelta {\n  /**\n   * Always `message_creation`.\n   */\n  type: 'message_creation';\n\n  message_creation?: RunStepDeltaMessageDelta.MessageCreation;\n}\n\nexport namespace RunStepDeltaMessageDelta {\n  export interface MessageCreation {\n    /**\n     * The ID of the message that was created by this run step.\n     */\n    message_id?: string;\n  }\n}\n\nexport type RunStepInclude = 'step_details.tool_calls[*].file_search.results[*].content';\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n */\nexport type ToolCall = CodeInterpreterToolCall | FileSearchToolCall | FunctionToolCall;\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n */\nexport type ToolCallDelta = CodeInterpreterToolCallDelta | FileSearchToolCallDelta | FunctionToolCallDelta;\n\n/**\n * Details of the tool call.\n */\nexport interface ToolCallDeltaObject {\n  /**\n   * Always `tool_calls`.\n   */\n  type: 'tool_calls';\n\n  /**\n   * An array of tool calls the run step was involved in. These can be associated\n   * with one of three types of tools: `code_interpreter`, `file_search`, or\n   * `function`.\n   */\n  tool_calls?: Array<ToolCallDelta>;\n}\n\n/**\n * Details of the tool call.\n */\nexport interface ToolCallsStepDetails {\n  /**\n   * An array of tool calls the run step was involved in. These can be associated\n   * with one of three types of tools: `code_interpreter`, `file_search`, or\n   * `function`.\n   */\n  tool_calls: Array<ToolCall>;\n\n  /**\n   * Always `tool_calls`.\n   */\n  type: 'tool_calls';\n}\n\nexport interface StepRetrieveParams {\n  /**\n   * A list of additional fields to include in the response. Currently the only\n   * supported value is `step_details.tool_calls[*].file_search.results[*].content`\n   * to fetch the file search result content.\n   *\n   * See the\n   * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n   * for more information.\n   */\n  include?: Array<RunStepInclude>;\n}\n\nexport interface StepListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * A list of additional fields to include in the response. Currently the only\n   * supported value is `step_details.tool_calls[*].file_search.results[*].content`\n   * to fetch the file search result content.\n   *\n   * See the\n   * [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n   * for more information.\n   */\n  include?: Array<RunStepInclude>;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nSteps.RunStepsPage = RunStepsPage;\n\nexport declare namespace Steps {\n  export {\n    type CodeInterpreterLogs as CodeInterpreterLogs,\n    type CodeInterpreterOutputImage as CodeInterpreterOutputImage,\n    type CodeInterpreterToolCall as CodeInterpreterToolCall,\n    type CodeInterpreterToolCallDelta as CodeInterpreterToolCallDelta,\n    type FileSearchToolCall as FileSearchToolCall,\n    type FileSearchToolCallDelta as FileSearchToolCallDelta,\n    type FunctionToolCall as FunctionToolCall,\n    type FunctionToolCallDelta as FunctionToolCallDelta,\n    type MessageCreationStepDetails as MessageCreationStepDetails,\n    type RunStep as RunStep,\n    type RunStepDelta as RunStepDelta,\n    type RunStepDeltaEvent as RunStepDeltaEvent,\n    type RunStepDeltaMessageDelta as RunStepDeltaMessageDelta,\n    type RunStepInclude as RunStepInclude,\n    type ToolCall as ToolCall,\n    type ToolCallDelta as ToolCallDelta,\n    type ToolCallDeltaObject as ToolCallDeltaObject,\n    type ToolCallsStepDetails as ToolCallsStepDetails,\n    RunStepsPage as RunStepsPage,\n    type StepRetrieveParams as StepRetrieveParams,\n    type StepListParams as StepListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport { APIPromise } from '../core';\nimport * as Core from '../core';\nimport * as CompletionsAPI from './completions';\nimport * as CompletionsCompletionsAPI from './chat/completions/completions';\nimport { Stream } from '../streaming';\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a completion for the provided prompt and parameters.\n   *\n   * @example\n   * ```ts\n   * const completion = await client.completions.create({\n   *   model: 'string',\n   *   prompt: 'This is a test.',\n   * });\n   * ```\n   */\n  create(body: CompletionCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Completion>;\n  create(\n    body: CompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion>>;\n  create(\n    body: CompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion> | Completion>;\n  create(\n    body: CompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Completion> | APIPromise<Stream<Completion>> {\n    return this._client.post('/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<Completion>\n      | APIPromise<Stream<Completion>>;\n  }\n}\n\n/**\n * Represents a completion response from the API. Note: both the streamed and\n * non-streamed response objects share the same shape (unlike the chat endpoint).\n */\nexport interface Completion {\n  /**\n   * A unique identifier for the completion.\n   */\n  id: string;\n\n  /**\n   * The list of completion choices the model generated for the input prompt.\n   */\n  choices: Array<CompletionChoice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"text_completion\"\n   */\n  object: 'text_completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: CompletionUsage;\n}\n\nexport interface CompletionChoice {\n  /**\n   * The reason the model stopped generating tokens. This will be `stop` if the model\n   * hit a natural stop point or a provided stop sequence, `length` if the maximum\n   * number of tokens specified in the request was reached, or `content_filter` if\n   * content was omitted due to a flag from our content filters.\n   */\n  finish_reason: 'stop' | 'length' | 'content_filter';\n\n  index: number;\n\n  logprobs: CompletionChoice.Logprobs | null;\n\n  text: string;\n}\n\nexport namespace CompletionChoice {\n  export interface Logprobs {\n    text_offset?: Array<number>;\n\n    token_logprobs?: Array<number>;\n\n    tokens?: Array<string>;\n\n    top_logprobs?: Array<Record<string, number>>;\n  }\n}\n\n/**\n * Usage statistics for the completion request.\n */\nexport interface CompletionUsage {\n  /**\n   * Number of tokens in the generated completion.\n   */\n  completion_tokens: number;\n\n  /**\n   * Number of tokens in the prompt.\n   */\n  prompt_tokens: number;\n\n  /**\n   * Total number of tokens used in the request (prompt + completion).\n   */\n  total_tokens: number;\n\n  /**\n   * Breakdown of tokens used in a completion.\n   */\n  completion_tokens_details?: CompletionUsage.CompletionTokensDetails;\n\n  /**\n   * Breakdown of tokens used in the prompt.\n   */\n  prompt_tokens_details?: CompletionUsage.PromptTokensDetails;\n}\n\nexport namespace CompletionUsage {\n  /**\n   * Breakdown of tokens used in a completion.\n   */\n  export interface CompletionTokensDetails {\n    /**\n     * When using Predicted Outputs, the number of tokens in the prediction that\n     * appeared in the completion.\n     */\n    accepted_prediction_tokens?: number;\n\n    /**\n     * Audio input tokens generated by the model.\n     */\n    audio_tokens?: number;\n\n    /**\n     * Tokens generated by the model for reasoning.\n     */\n    reasoning_tokens?: number;\n\n    /**\n     * When using Predicted Outputs, the number of tokens in the prediction that did\n     * not appear in the completion. However, like reasoning tokens, these tokens are\n     * still counted in the total completion tokens for purposes of billing, output,\n     * and context window limits.\n     */\n    rejected_prediction_tokens?: number;\n  }\n\n  /**\n   * Breakdown of tokens used in the prompt.\n   */\n  export interface PromptTokensDetails {\n    /**\n     * Audio input tokens present in the prompt.\n     */\n    audio_tokens?: number;\n\n    /**\n     * Cached tokens present in the prompt.\n     */\n    cached_tokens?: number;\n  }\n}\n\nexport type CompletionCreateParams = CompletionCreateParamsNonStreaming | CompletionCreateParamsStreaming;\n\nexport interface CompletionCreateParamsBase {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models) for descriptions of\n   * them.\n   */\n  model: (string & {}) | 'gpt-3.5-turbo-instruct' | 'davinci-002' | 'babbage-002';\n\n  /**\n   * The prompt(s) to generate completions for, encoded as a string, array of\n   * strings, array of tokens, or array of token arrays.\n   *\n   * Note that <|endoftext|> is the document separator that the model sees during\n   * training, so if a prompt is not specified the model will generate as if from the\n   * beginning of a new document.\n   */\n  prompt: string | Array<string> | Array<number> | Array<Array<number>> | null;\n\n  /**\n   * Generates `best_of` completions server-side and returns the \"best\" (the one with\n   * the highest log probability per token). Results cannot be streamed.\n   *\n   * When used with `n`, `best_of` controls the number of candidate completions and\n   * `n` specifies how many to return – `best_of` must be greater than `n`.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  best_of?: number | null;\n\n  /**\n   * Echo back the prompt in addition to the completion\n   */\n  echo?: boolean | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n   * tokenizer) to an associated bias value from -100 to 100. You can use this\n   * [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n   * Mathematically, the bias is added to the logits generated by the model prior to\n   * sampling. The exact effect will vary per model, but values between -1 and 1\n   * should decrease or increase likelihood of selection; values like -100 or 100\n   * should result in a ban or exclusive selection of the relevant token.\n   *\n   * As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token\n   * from being generated.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * Include the log probabilities on the `logprobs` most likely output tokens, as\n   * well the chosen tokens. For example, if `logprobs` is 5, the API will return a\n   * list of the 5 most likely tokens. The API will always return the `logprob` of\n   * the sampled token, so there may be up to `logprobs+1` elements in the response.\n   *\n   * The maximum value for `logprobs` is 5.\n   */\n  logprobs?: number | null;\n\n  /**\n   * The maximum number of [tokens](/tokenizer) that can be generated in the\n   * completion.\n   *\n   * The token count of your prompt plus `max_tokens` cannot exceed the model's\n   * context length.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n   * for counting tokens.\n   */\n  max_tokens?: number | null;\n\n  /**\n   * How many completions to generate for each prompt.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  n?: number | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * If specified, our system will make a best effort to sample deterministically,\n   * such that repeated requests with the same `seed` and parameters should return\n   * the same result.\n   *\n   * Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n   * response parameter to monitor changes in the backend.\n   */\n  seed?: number | null;\n\n  /**\n   * Not supported with latest reasoning models `o3` and `o4-mini`.\n   *\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: boolean | null;\n\n  /**\n   * Options for streaming response. Only set this when you set `stream: true`.\n   */\n  stream_options?: CompletionsCompletionsAPI.ChatCompletionStreamOptions | null;\n\n  /**\n   * The suffix that comes after a completion of inserted text.\n   *\n   * This parameter is only supported for `gpt-3.5-turbo-instruct`.\n   */\n  suffix?: string | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace CompletionCreateParams {\n  export type CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export type CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n\nexport interface CompletionCreateParamsNonStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: false | null;\n}\n\nexport interface CompletionCreateParamsStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream: true;\n}\n\nexport declare namespace Completions {\n  export {\n    type Completion as Completion,\n    type CompletionChoice as CompletionChoice,\n    type CompletionUsage as CompletionUsage,\n    type CompletionCreateParams as CompletionCreateParams,\n    type CompletionCreateParamsNonStreaming as CompletionCreateParamsNonStreaming,\n    type CompletionCreateParamsStreaming as CompletionCreateParamsStreaming,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as FilesAPI from './files/files';\nimport {\n  FileCreateParams,\n  FileCreateResponse,\n  FileListParams,\n  FileListResponse,\n  FileListResponsesPage,\n  FileRetrieveResponse,\n  Files,\n} from './files/files';\nimport { CursorPage, type CursorPageParams } from '../../pagination';\n\nexport class Containers extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this._client);\n\n  /**\n   * Create Container\n   */\n  create(\n    body: ContainerCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ContainerCreateResponse> {\n    return this._client.post('/containers', { body, ...options });\n  }\n\n  /**\n   * Retrieve Container\n   */\n  retrieve(containerId: string, options?: Core.RequestOptions): Core.APIPromise<ContainerRetrieveResponse> {\n    return this._client.get(`/containers/${containerId}`, options);\n  }\n\n  /**\n   * List Containers\n   */\n  list(\n    query?: ContainerListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ContainerListResponsesPage, ContainerListResponse>;\n  list(options?: Core.RequestOptions): Core.PagePromise<ContainerListResponsesPage, ContainerListResponse>;\n  list(\n    query: ContainerListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ContainerListResponsesPage, ContainerListResponse> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/containers', ContainerListResponsesPage, { query, ...options });\n  }\n\n  /**\n   * Delete Container\n   */\n  del(containerId: string, options?: Core.RequestOptions): Core.APIPromise<void> {\n    return this._client.delete(`/containers/${containerId}`, {\n      ...options,\n      headers: { Accept: '*/*', ...options?.headers },\n    });\n  }\n}\n\nexport class ContainerListResponsesPage extends CursorPage<ContainerListResponse> {}\n\nexport interface ContainerCreateResponse {\n  /**\n   * Unique identifier for the container.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the container was created.\n   */\n  created_at: number;\n\n  /**\n   * Name of the container.\n   */\n  name: string;\n\n  /**\n   * The type of this object.\n   */\n  object: string;\n\n  /**\n   * Status of the container (e.g., active, deleted).\n   */\n  status: string;\n\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  expires_after?: ContainerCreateResponse.ExpiresAfter;\n}\n\nexport namespace ContainerCreateResponse {\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  export interface ExpiresAfter {\n    /**\n     * The reference point for the expiration.\n     */\n    anchor?: 'last_active_at';\n\n    /**\n     * The number of minutes after the anchor before the container expires.\n     */\n    minutes?: number;\n  }\n}\n\nexport interface ContainerRetrieveResponse {\n  /**\n   * Unique identifier for the container.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the container was created.\n   */\n  created_at: number;\n\n  /**\n   * Name of the container.\n   */\n  name: string;\n\n  /**\n   * The type of this object.\n   */\n  object: string;\n\n  /**\n   * Status of the container (e.g., active, deleted).\n   */\n  status: string;\n\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  expires_after?: ContainerRetrieveResponse.ExpiresAfter;\n}\n\nexport namespace ContainerRetrieveResponse {\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  export interface ExpiresAfter {\n    /**\n     * The reference point for the expiration.\n     */\n    anchor?: 'last_active_at';\n\n    /**\n     * The number of minutes after the anchor before the container expires.\n     */\n    minutes?: number;\n  }\n}\n\nexport interface ContainerListResponse {\n  /**\n   * Unique identifier for the container.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the container was created.\n   */\n  created_at: number;\n\n  /**\n   * Name of the container.\n   */\n  name: string;\n\n  /**\n   * The type of this object.\n   */\n  object: string;\n\n  /**\n   * Status of the container (e.g., active, deleted).\n   */\n  status: string;\n\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  expires_after?: ContainerListResponse.ExpiresAfter;\n}\n\nexport namespace ContainerListResponse {\n  /**\n   * The container will expire after this time period. The anchor is the reference\n   * point for the expiration. The minutes is the number of minutes after the anchor\n   * before the container expires.\n   */\n  export interface ExpiresAfter {\n    /**\n     * The reference point for the expiration.\n     */\n    anchor?: 'last_active_at';\n\n    /**\n     * The number of minutes after the anchor before the container expires.\n     */\n    minutes?: number;\n  }\n}\n\nexport interface ContainerCreateParams {\n  /**\n   * Name of the container to create.\n   */\n  name: string;\n\n  /**\n   * Container expiration time in seconds relative to the 'anchor' time.\n   */\n  expires_after?: ContainerCreateParams.ExpiresAfter;\n\n  /**\n   * IDs of files to copy to the container.\n   */\n  file_ids?: Array<string>;\n}\n\nexport namespace ContainerCreateParams {\n  /**\n   * Container expiration time in seconds relative to the 'anchor' time.\n   */\n  export interface ExpiresAfter {\n    /**\n     * Time anchor for the expiration time. Currently only 'last_active_at' is\n     * supported.\n     */\n    anchor: 'last_active_at';\n\n    minutes: number;\n  }\n}\n\nexport interface ContainerListParams extends CursorPageParams {\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nContainers.ContainerListResponsesPage = ContainerListResponsesPage;\nContainers.Files = Files;\nContainers.FileListResponsesPage = FileListResponsesPage;\n\nexport declare namespace Containers {\n  export {\n    type ContainerCreateResponse as ContainerCreateResponse,\n    type ContainerRetrieveResponse as ContainerRetrieveResponse,\n    type ContainerListResponse as ContainerListResponse,\n    ContainerListResponsesPage as ContainerListResponsesPage,\n    type ContainerCreateParams as ContainerCreateParams,\n    type ContainerListParams as ContainerListParams,\n  };\n\n  export {\n    Files as Files,\n    type FileCreateResponse as FileCreateResponse,\n    type FileRetrieveResponse as FileRetrieveResponse,\n    type FileListResponse as FileListResponse,\n    FileListResponsesPage as FileListResponsesPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as ContentAPI from './content';\nimport { Content } from './content';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class Files extends APIResource {\n  content: ContentAPI.Content = new ContentAPI.Content(this._client);\n\n  /**\n   * Create a Container File\n   *\n   * You can send either a multipart/form-data request with the raw file content, or\n   * a JSON request with a file ID.\n   */\n  create(\n    containerId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<FileCreateResponse> {\n    return this._client.post(\n      `/containers/${containerId}/files`,\n      Core.multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n\n  /**\n   * Retrieve Container File\n   */\n  retrieve(\n    containerId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<FileRetrieveResponse> {\n    return this._client.get(`/containers/${containerId}/files/${fileId}`, options);\n  }\n\n  /**\n   * List Container files\n   */\n  list(\n    containerId: string,\n    query?: FileListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileListResponsesPage, FileListResponse>;\n  list(\n    containerId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileListResponsesPage, FileListResponse>;\n  list(\n    containerId: string,\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileListResponsesPage, FileListResponse> {\n    if (isRequestOptions(query)) {\n      return this.list(containerId, {}, query);\n    }\n    return this._client.getAPIList(`/containers/${containerId}/files`, FileListResponsesPage, {\n      query,\n      ...options,\n    });\n  }\n\n  /**\n   * Delete Container File\n   */\n  del(containerId: string, fileId: string, options?: Core.RequestOptions): Core.APIPromise<void> {\n    return this._client.delete(`/containers/${containerId}/files/${fileId}`, {\n      ...options,\n      headers: { Accept: '*/*', ...options?.headers },\n    });\n  }\n}\n\nexport class FileListResponsesPage extends CursorPage<FileListResponse> {}\n\nexport interface FileCreateResponse {\n  /**\n   * Unique identifier for the file.\n   */\n  id: string;\n\n  /**\n   * Size of the file in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The container this file belongs to.\n   */\n  container_id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The type of this object (`container.file`).\n   */\n  object: 'container.file';\n\n  /**\n   * Path of the file in the container.\n   */\n  path: string;\n\n  /**\n   * Source of the file (e.g., `user`, `assistant`).\n   */\n  source: string;\n}\n\nexport interface FileRetrieveResponse {\n  /**\n   * Unique identifier for the file.\n   */\n  id: string;\n\n  /**\n   * Size of the file in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The container this file belongs to.\n   */\n  container_id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The type of this object (`container.file`).\n   */\n  object: 'container.file';\n\n  /**\n   * Path of the file in the container.\n   */\n  path: string;\n\n  /**\n   * Source of the file (e.g., `user`, `assistant`).\n   */\n  source: string;\n}\n\nexport interface FileListResponse {\n  /**\n   * Unique identifier for the file.\n   */\n  id: string;\n\n  /**\n   * Size of the file in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The container this file belongs to.\n   */\n  container_id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The type of this object (`container.file`).\n   */\n  object: 'container.file';\n\n  /**\n   * Path of the file in the container.\n   */\n  path: string;\n\n  /**\n   * Source of the file (e.g., `user`, `assistant`).\n   */\n  source: string;\n}\n\nexport interface FileCreateParams {\n  /**\n   * The File object (not file name) to be uploaded.\n   */\n  file?: Core.Uploadable;\n\n  /**\n   * Name of the file to create.\n   */\n  file_id?: string;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nFiles.FileListResponsesPage = FileListResponsesPage;\nFiles.Content = Content;\n\nexport declare namespace Files {\n  export {\n    type FileCreateResponse as FileCreateResponse,\n    type FileRetrieveResponse as FileRetrieveResponse,\n    type FileListResponse as FileListResponse,\n    FileListResponsesPage as FileListResponsesPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n\n  export { Content as Content };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as Core from '../../../core';\nimport { type Response } from '../../../_shims/index';\n\nexport class Content extends APIResource {\n  /**\n   * Retrieve Container File Content\n   */\n  retrieve(containerId: string, fileId: string, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.get(`/containers/${containerId}/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/binary', ...options?.headers },\n      __binaryResponse: true,\n    });\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport * as Core from '../core';\n\nexport class Embeddings extends APIResource {\n  /**\n   * Creates an embedding vector representing the input text.\n   *\n   * @example\n   * ```ts\n   * const createEmbeddingResponse =\n   *   await client.embeddings.create({\n   *     input: 'The quick brown fox jumped over the lazy dog',\n   *     model: 'text-embedding-3-small',\n   *   });\n   * ```\n   */\n  create(\n    body: EmbeddingCreateParams,\n    options?: Core.RequestOptions<EmbeddingCreateParams>,\n  ): Core.APIPromise<CreateEmbeddingResponse> {\n    const hasUserProvidedEncodingFormat = !!body.encoding_format;\n    // No encoding_format specified, defaulting to base64 for performance reasons\n    // See https://github.com/openai/openai-node/pull/1312\n    let encoding_format: EmbeddingCreateParams['encoding_format'] =\n      hasUserProvidedEncodingFormat ? body.encoding_format : 'base64';\n\n    if (hasUserProvidedEncodingFormat) {\n      Core.debug('Request', 'User defined encoding_format:', body.encoding_format);\n    }\n\n    const response: Core.APIPromise<CreateEmbeddingResponse> = this._client.post('/embeddings', {\n      body: {\n        ...body,\n        encoding_format: encoding_format as EmbeddingCreateParams['encoding_format'],\n      },\n      ...options,\n    });\n\n    // if the user specified an encoding_format, return the response as-is\n    if (hasUserProvidedEncodingFormat) {\n      return response;\n    }\n\n    // in this stage, we are sure the user did not specify an encoding_format\n    // and we defaulted to base64 for performance reasons\n    // we are sure then that the response is base64 encoded, let's decode it\n    // the returned result will be a float32 array since this is OpenAI API's default encoding\n    Core.debug('response', 'Decoding base64 embeddings to float32 array');\n\n    return (response as Core.APIPromise<CreateEmbeddingResponse>)._thenUnwrap((response) => {\n      if (response && response.data) {\n        response.data.forEach((embeddingBase64Obj) => {\n          const embeddingBase64Str = embeddingBase64Obj.embedding as unknown as string;\n          embeddingBase64Obj.embedding = Core.toFloat32Array(embeddingBase64Str);\n        });\n      }\n\n      return response;\n    });\n  }\n}\n\nexport interface CreateEmbeddingResponse {\n  /**\n   * The list of embeddings generated by the model.\n   */\n  data: Array<Embedding>;\n\n  /**\n   * The name of the model used to generate the embedding.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"list\".\n   */\n  object: 'list';\n\n  /**\n   * The usage information for the request.\n   */\n  usage: CreateEmbeddingResponse.Usage;\n}\n\nexport namespace CreateEmbeddingResponse {\n  /**\n   * The usage information for the request.\n   */\n  export interface Usage {\n    /**\n     * The number of tokens used by the prompt.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used by the request.\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * Represents an embedding vector returned by embedding endpoint.\n */\nexport interface Embedding {\n  /**\n   * The embedding vector, which is a list of floats. The length of vector depends on\n   * the model as listed in the\n   * [embedding guide](https://platform.openai.com/docs/guides/embeddings).\n   */\n  embedding: Array<number>;\n\n  /**\n   * The index of the embedding in the list of embeddings.\n   */\n  index: number;\n\n  /**\n   * The object type, which is always \"embedding\".\n   */\n  object: 'embedding';\n}\n\nexport type EmbeddingModel = 'text-embedding-ada-002' | 'text-embedding-3-small' | 'text-embedding-3-large';\n\nexport interface EmbeddingCreateParams {\n  /**\n   * Input text to embed, encoded as a string or array of tokens. To embed multiple\n   * inputs in a single request, pass an array of strings or array of token arrays.\n   * The input must not exceed the max input tokens for the model (8192 tokens for\n   * all embedding models), cannot be an empty string, and any array must be 2048\n   * dimensions or less.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n   * for counting tokens. In addition to the per-input token limit, all embedding\n   * models enforce a maximum of 300,000 tokens summed across all inputs in a single\n   * request.\n   */\n  input: string | Array<string> | Array<number> | Array<Array<number>>;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models) for descriptions of\n   * them.\n   */\n  model: (string & {}) | EmbeddingModel;\n\n  /**\n   * The number of dimensions the resulting output embeddings should have. Only\n   * supported in `text-embedding-3` and later models.\n   */\n  dimensions?: number;\n\n  /**\n   * The format to return the embeddings in. Can be either `float` or\n   * [`base64`](https://pypi.org/project/pybase64/).\n   */\n  encoding_format?: 'float' | 'base64';\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport declare namespace Embeddings {\n  export {\n    type CreateEmbeddingResponse as CreateEmbeddingResponse,\n    type Embedding as Embedding,\n    type EmbeddingModel as EmbeddingModel,\n    type EmbeddingCreateParams as EmbeddingCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as Shared from '../shared';\nimport * as GraderModelsAPI from '../graders/grader-models';\nimport * as ResponsesAPI from '../responses/responses';\nimport * as RunsAPI from './runs/runs';\nimport {\n  CreateEvalCompletionsRunDataSource,\n  CreateEvalJSONLRunDataSource,\n  EvalAPIError,\n  RunCancelResponse,\n  RunCreateParams,\n  RunCreateResponse,\n  RunDeleteResponse,\n  RunListParams,\n  RunListResponse,\n  RunListResponsesPage,\n  RunRetrieveResponse,\n  Runs,\n} from './runs/runs';\nimport { CursorPage, type CursorPageParams } from '../../pagination';\n\nexport class Evals extends APIResource {\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this._client);\n\n  /**\n   * Create the structure of an evaluation that can be used to test a model's\n   * performance. An evaluation is a set of testing criteria and the config for a\n   * data source, which dictates the schema of the data used in the evaluation. After\n   * creating an evaluation, you can run it on different models and model parameters.\n   * We support several types of graders and datasources. For more information, see\n   * the [Evals guide](https://platform.openai.com/docs/guides/evals).\n   */\n  create(body: EvalCreateParams, options?: Core.RequestOptions): Core.APIPromise<EvalCreateResponse> {\n    return this._client.post('/evals', { body, ...options });\n  }\n\n  /**\n   * Get an evaluation by ID.\n   */\n  retrieve(evalId: string, options?: Core.RequestOptions): Core.APIPromise<EvalRetrieveResponse> {\n    return this._client.get(`/evals/${evalId}`, options);\n  }\n\n  /**\n   * Update certain properties of an evaluation.\n   */\n  update(\n    evalId: string,\n    body: EvalUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<EvalUpdateResponse> {\n    return this._client.post(`/evals/${evalId}`, { body, ...options });\n  }\n\n  /**\n   * List evaluations for a project.\n   */\n  list(\n    query?: EvalListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<EvalListResponsesPage, EvalListResponse>;\n  list(options?: Core.RequestOptions): Core.PagePromise<EvalListResponsesPage, EvalListResponse>;\n  list(\n    query: EvalListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<EvalListResponsesPage, EvalListResponse> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/evals', EvalListResponsesPage, { query, ...options });\n  }\n\n  /**\n   * Delete an evaluation.\n   */\n  del(evalId: string, options?: Core.RequestOptions): Core.APIPromise<EvalDeleteResponse> {\n    return this._client.delete(`/evals/${evalId}`, options);\n  }\n}\n\nexport class EvalListResponsesPage extends CursorPage<EvalListResponse> {}\n\n/**\n * A CustomDataSourceConfig which specifies the schema of your `item` and\n * optionally `sample` namespaces. The response schema defines the shape of the\n * data that will be:\n *\n * - Used to define your testing criteria and\n * - What data is required when creating a run\n */\nexport interface EvalCustomDataSourceConfig {\n  /**\n   * The json schema for the run data source items. Learn how to build JSON schemas\n   * [here](https://json-schema.org/).\n   */\n  schema: Record<string, unknown>;\n\n  /**\n   * The type of data source. Always `custom`.\n   */\n  type: 'custom';\n}\n\n/**\n * @deprecated Deprecated in favor of LogsDataSourceConfig.\n */\nexport interface EvalStoredCompletionsDataSourceConfig {\n  /**\n   * The json schema for the run data source items. Learn how to build JSON schemas\n   * [here](https://json-schema.org/).\n   */\n  schema: Record<string, unknown>;\n\n  /**\n   * The type of data source. Always `stored_completions`.\n   */\n  type: 'stored_completions';\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n}\n\n/**\n * An Eval object with a data source config and testing criteria. An Eval\n * represents a task to be done for your LLM integration. Like:\n *\n * - Improve the quality of my chatbot\n * - See how well my chatbot handles customer support\n * - Check if o4-mini is better at my usecase than gpt-4o\n */\nexport interface EvalCreateResponse {\n  /**\n   * Unique identifier for the evaluation.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the eval was created.\n   */\n  created_at: number;\n\n  /**\n   * Configuration of data sources used in runs of the evaluation.\n   */\n  data_source_config:\n    | EvalCustomDataSourceConfig\n    | EvalCreateResponse.Logs\n    | EvalStoredCompletionsDataSourceConfig;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The name of the evaluation.\n   */\n  name: string;\n\n  /**\n   * The object type.\n   */\n  object: 'eval';\n\n  /**\n   * A list of testing criteria.\n   */\n  testing_criteria: Array<\n    | GraderModelsAPI.LabelModelGrader\n    | GraderModelsAPI.StringCheckGrader\n    | EvalCreateResponse.EvalGraderTextSimilarity\n    | EvalCreateResponse.EvalGraderPython\n    | EvalCreateResponse.EvalGraderScoreModel\n  >;\n}\n\nexport namespace EvalCreateResponse {\n  /**\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\n   * schema returned by this data source config is used to defined what variables are\n   * available in your evals. `item` and `sample` are both defined when using this\n   * data source config.\n   */\n  export interface Logs {\n    /**\n     * The json schema for the run data source items. Learn how to build JSON schemas\n     * [here](https://json-schema.org/).\n     */\n    schema: Record<string, unknown>;\n\n    /**\n     * The type of data source. Always `logs`.\n     */\n    type: 'logs';\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  /**\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\n   */\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold: number;\n  }\n\n  /**\n   * A PythonGrader object that runs a python script on the input.\n   */\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n\n  /**\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\n   */\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n}\n\n/**\n * An Eval object with a data source config and testing criteria. An Eval\n * represents a task to be done for your LLM integration. Like:\n *\n * - Improve the quality of my chatbot\n * - See how well my chatbot handles customer support\n * - Check if o4-mini is better at my usecase than gpt-4o\n */\nexport interface EvalRetrieveResponse {\n  /**\n   * Unique identifier for the evaluation.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the eval was created.\n   */\n  created_at: number;\n\n  /**\n   * Configuration of data sources used in runs of the evaluation.\n   */\n  data_source_config:\n    | EvalCustomDataSourceConfig\n    | EvalRetrieveResponse.Logs\n    | EvalStoredCompletionsDataSourceConfig;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The name of the evaluation.\n   */\n  name: string;\n\n  /**\n   * The object type.\n   */\n  object: 'eval';\n\n  /**\n   * A list of testing criteria.\n   */\n  testing_criteria: Array<\n    | GraderModelsAPI.LabelModelGrader\n    | GraderModelsAPI.StringCheckGrader\n    | EvalRetrieveResponse.EvalGraderTextSimilarity\n    | EvalRetrieveResponse.EvalGraderPython\n    | EvalRetrieveResponse.EvalGraderScoreModel\n  >;\n}\n\nexport namespace EvalRetrieveResponse {\n  /**\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\n   * schema returned by this data source config is used to defined what variables are\n   * available in your evals. `item` and `sample` are both defined when using this\n   * data source config.\n   */\n  export interface Logs {\n    /**\n     * The json schema for the run data source items. Learn how to build JSON schemas\n     * [here](https://json-schema.org/).\n     */\n    schema: Record<string, unknown>;\n\n    /**\n     * The type of data source. Always `logs`.\n     */\n    type: 'logs';\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  /**\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\n   */\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold: number;\n  }\n\n  /**\n   * A PythonGrader object that runs a python script on the input.\n   */\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n\n  /**\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\n   */\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n}\n\n/**\n * An Eval object with a data source config and testing criteria. An Eval\n * represents a task to be done for your LLM integration. Like:\n *\n * - Improve the quality of my chatbot\n * - See how well my chatbot handles customer support\n * - Check if o4-mini is better at my usecase than gpt-4o\n */\nexport interface EvalUpdateResponse {\n  /**\n   * Unique identifier for the evaluation.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the eval was created.\n   */\n  created_at: number;\n\n  /**\n   * Configuration of data sources used in runs of the evaluation.\n   */\n  data_source_config:\n    | EvalCustomDataSourceConfig\n    | EvalUpdateResponse.Logs\n    | EvalStoredCompletionsDataSourceConfig;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The name of the evaluation.\n   */\n  name: string;\n\n  /**\n   * The object type.\n   */\n  object: 'eval';\n\n  /**\n   * A list of testing criteria.\n   */\n  testing_criteria: Array<\n    | GraderModelsAPI.LabelModelGrader\n    | GraderModelsAPI.StringCheckGrader\n    | EvalUpdateResponse.EvalGraderTextSimilarity\n    | EvalUpdateResponse.EvalGraderPython\n    | EvalUpdateResponse.EvalGraderScoreModel\n  >;\n}\n\nexport namespace EvalUpdateResponse {\n  /**\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\n   * schema returned by this data source config is used to defined what variables are\n   * available in your evals. `item` and `sample` are both defined when using this\n   * data source config.\n   */\n  export interface Logs {\n    /**\n     * The json schema for the run data source items. Learn how to build JSON schemas\n     * [here](https://json-schema.org/).\n     */\n    schema: Record<string, unknown>;\n\n    /**\n     * The type of data source. Always `logs`.\n     */\n    type: 'logs';\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  /**\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\n   */\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold: number;\n  }\n\n  /**\n   * A PythonGrader object that runs a python script on the input.\n   */\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n\n  /**\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\n   */\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n}\n\n/**\n * An Eval object with a data source config and testing criteria. An Eval\n * represents a task to be done for your LLM integration. Like:\n *\n * - Improve the quality of my chatbot\n * - See how well my chatbot handles customer support\n * - Check if o4-mini is better at my usecase than gpt-4o\n */\nexport interface EvalListResponse {\n  /**\n   * Unique identifier for the evaluation.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the eval was created.\n   */\n  created_at: number;\n\n  /**\n   * Configuration of data sources used in runs of the evaluation.\n   */\n  data_source_config:\n    | EvalCustomDataSourceConfig\n    | EvalListResponse.Logs\n    | EvalStoredCompletionsDataSourceConfig;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The name of the evaluation.\n   */\n  name: string;\n\n  /**\n   * The object type.\n   */\n  object: 'eval';\n\n  /**\n   * A list of testing criteria.\n   */\n  testing_criteria: Array<\n    | GraderModelsAPI.LabelModelGrader\n    | GraderModelsAPI.StringCheckGrader\n    | EvalListResponse.EvalGraderTextSimilarity\n    | EvalListResponse.EvalGraderPython\n    | EvalListResponse.EvalGraderScoreModel\n  >;\n}\n\nexport namespace EvalListResponse {\n  /**\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\n   * schema returned by this data source config is used to defined what variables are\n   * available in your evals. `item` and `sample` are both defined when using this\n   * data source config.\n   */\n  export interface Logs {\n    /**\n     * The json schema for the run data source items. Learn how to build JSON schemas\n     * [here](https://json-schema.org/).\n     */\n    schema: Record<string, unknown>;\n\n    /**\n     * The type of data source. Always `logs`.\n     */\n    type: 'logs';\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n  }\n\n  /**\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\n   */\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold: number;\n  }\n\n  /**\n   * A PythonGrader object that runs a python script on the input.\n   */\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n\n  /**\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\n   */\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n}\n\nexport interface EvalDeleteResponse {\n  deleted: boolean;\n\n  eval_id: string;\n\n  object: string;\n}\n\nexport interface EvalCreateParams {\n  /**\n   * The configuration for the data source used for the evaluation runs. Dictates the\n   * schema of the data used in the evaluation.\n   */\n  data_source_config: EvalCreateParams.Custom | EvalCreateParams.Logs | EvalCreateParams.StoredCompletions;\n\n  /**\n   * A list of graders for all eval runs in this group. Graders can reference\n   * variables in the data source using double curly braces notation, like\n   * `{{item.variable_name}}`. To reference the model's output, use the `sample`\n   * namespace (ie, `{{sample.output_text}}`).\n   */\n  testing_criteria: Array<\n    | EvalCreateParams.LabelModel\n    | GraderModelsAPI.StringCheckGrader\n    | EvalCreateParams.TextSimilarity\n    | EvalCreateParams.Python\n    | EvalCreateParams.ScoreModel\n  >;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The name of the evaluation.\n   */\n  name?: string;\n}\n\nexport namespace EvalCreateParams {\n  /**\n   * A CustomDataSourceConfig object that defines the schema for the data source used\n   * for the evaluation runs. This schema is used to define the shape of the data\n   * that will be:\n   *\n   * - Used to define your testing criteria and\n   * - What data is required when creating a run\n   */\n  export interface Custom {\n    /**\n     * The json schema for each row in the data source.\n     */\n    item_schema: Record<string, unknown>;\n\n    /**\n     * The type of data source. Always `custom`.\n     */\n    type: 'custom';\n\n    /**\n     * Whether the eval should expect you to populate the sample namespace (ie, by\n     * generating responses off of your data source)\n     */\n    include_sample_schema?: boolean;\n  }\n\n  /**\n   * A data source config which specifies the metadata property of your logs query.\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.\n   */\n  export interface Logs {\n    /**\n     * The type of data source. Always `logs`.\n     */\n    type: 'logs';\n\n    /**\n     * Metadata filters for the logs data source.\n     */\n    metadata?: Record<string, unknown>;\n  }\n\n  /**\n   * @deprecated Deprecated in favor of LogsDataSourceConfig.\n   */\n  export interface StoredCompletions {\n    /**\n     * The type of data source. Always `stored_completions`.\n     */\n    type: 'stored_completions';\n\n    /**\n     * Metadata filters for the stored completions data source.\n     */\n    metadata?: Record<string, unknown>;\n  }\n\n  /**\n   * A LabelModelGrader object which uses a model to assign labels to each item in\n   * the evaluation.\n   */\n  export interface LabelModel {\n    /**\n     * A list of chat messages forming the prompt or context. May include variable\n     * references to the `item` namespace, ie {{item.name}}.\n     */\n    input: Array<LabelModel.SimpleInputMessage | LabelModel.EvalItem>;\n\n    /**\n     * The labels to classify to each item in the evaluation.\n     */\n    labels: Array<string>;\n\n    /**\n     * The model to use for the evaluation. Must support structured outputs.\n     */\n    model: string;\n\n    /**\n     * The name of the grader.\n     */\n    name: string;\n\n    /**\n     * The labels that indicate a passing result. Must be a subset of labels.\n     */\n    passing_labels: Array<string>;\n\n    /**\n     * The object type, which is always `label_model`.\n     */\n    type: 'label_model';\n  }\n\n  export namespace LabelModel {\n    export interface SimpleInputMessage {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n       */\n      role: string;\n    }\n\n    /**\n     * A message input to the model with a role indicating instruction following\n     * hierarchy. Instructions given with the `developer` or `system` role take\n     * precedence over instructions given with the `user` role. Messages with the\n     * `assistant` role are presumed to have been generated by the model in previous\n     * interactions.\n     */\n    export interface EvalItem {\n      /**\n       * Text inputs to the model - can contain template strings.\n       */\n      content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n      /**\n       * The role of the message input. One of `user`, `assistant`, `system`, or\n       * `developer`.\n       */\n      role: 'user' | 'assistant' | 'system' | 'developer';\n\n      /**\n       * The type of the message input. Always `message`.\n       */\n      type?: 'message';\n    }\n\n    export namespace EvalItem {\n      /**\n       * A text output from the model.\n       */\n      export interface OutputText {\n        /**\n         * The text output from the model.\n         */\n        text: string;\n\n        /**\n         * The type of the output text. Always `output_text`.\n         */\n        type: 'output_text';\n      }\n    }\n  }\n\n  /**\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\n   */\n  export interface TextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold: number;\n  }\n\n  /**\n   * A PythonGrader object that runs a python script on the input.\n   */\n  export interface Python extends GraderModelsAPI.PythonGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n\n  /**\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\n   */\n  export interface ScoreModel extends GraderModelsAPI.ScoreModelGrader {\n    /**\n     * The threshold for the score.\n     */\n    pass_threshold?: number;\n  }\n}\n\nexport interface EvalUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * Rename the evaluation.\n   */\n  name?: string;\n}\n\nexport interface EvalListParams extends CursorPageParams {\n  /**\n   * Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for\n   * descending order.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Evals can be ordered by creation time or last updated time. Use `created_at` for\n   * creation time or `updated_at` for last updated time.\n   */\n  order_by?: 'created_at' | 'updated_at';\n}\n\nEvals.EvalListResponsesPage = EvalListResponsesPage;\nEvals.Runs = Runs;\nEvals.RunListResponsesPage = RunListResponsesPage;\n\nexport declare namespace Evals {\n  export {\n    type EvalCustomDataSourceConfig as EvalCustomDataSourceConfig,\n    type EvalStoredCompletionsDataSourceConfig as EvalStoredCompletionsDataSourceConfig,\n    type EvalCreateResponse as EvalCreateResponse,\n    type EvalRetrieveResponse as EvalRetrieveResponse,\n    type EvalUpdateResponse as EvalUpdateResponse,\n    type EvalListResponse as EvalListResponse,\n    type EvalDeleteResponse as EvalDeleteResponse,\n    EvalListResponsesPage as EvalListResponsesPage,\n    type EvalCreateParams as EvalCreateParams,\n    type EvalUpdateParams as EvalUpdateParams,\n    type EvalListParams as EvalListParams,\n  };\n\n  export {\n    Runs as Runs,\n    type CreateEvalCompletionsRunDataSource as CreateEvalCompletionsRunDataSource,\n    type CreateEvalJSONLRunDataSource as CreateEvalJSONLRunDataSource,\n    type EvalAPIError as EvalAPIError,\n    type RunCreateResponse as RunCreateResponse,\n    type RunRetrieveResponse as RunRetrieveResponse,\n    type RunListResponse as RunListResponse,\n    type RunDeleteResponse as RunDeleteResponse,\n    type RunCancelResponse as RunCancelResponse,\n    RunListResponsesPage as RunListResponsesPage,\n    type RunCreateParams as RunCreateParams,\n    type RunListParams as RunListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as Shared from '../../shared';\nimport * as ResponsesAPI from '../../responses/responses';\nimport * as OutputItemsAPI from './output-items';\nimport {\n  OutputItemListParams,\n  OutputItemListResponse,\n  OutputItemListResponsesPage,\n  OutputItemRetrieveResponse,\n  OutputItems,\n} from './output-items';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class Runs extends APIResource {\n  outputItems: OutputItemsAPI.OutputItems = new OutputItemsAPI.OutputItems(this._client);\n\n  /**\n   * Kicks off a new run for a given evaluation, specifying the data source, and what\n   * model configuration to use to test. The datasource will be validated against the\n   * schema specified in the config of the evaluation.\n   */\n  create(\n    evalId: string,\n    body: RunCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunCreateResponse> {\n    return this._client.post(`/evals/${evalId}/runs`, { body, ...options });\n  }\n\n  /**\n   * Get an evaluation run by ID.\n   */\n  retrieve(\n    evalId: string,\n    runId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunRetrieveResponse> {\n    return this._client.get(`/evals/${evalId}/runs/${runId}`, options);\n  }\n\n  /**\n   * Get a list of runs for an evaluation.\n   */\n  list(\n    evalId: string,\n    query?: RunListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunListResponsesPage, RunListResponse>;\n  list(\n    evalId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunListResponsesPage, RunListResponse>;\n  list(\n    evalId: string,\n    query: RunListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunListResponsesPage, RunListResponse> {\n    if (isRequestOptions(query)) {\n      return this.list(evalId, {}, query);\n    }\n    return this._client.getAPIList(`/evals/${evalId}/runs`, RunListResponsesPage, { query, ...options });\n  }\n\n  /**\n   * Delete an eval run.\n   */\n  del(evalId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<RunDeleteResponse> {\n    return this._client.delete(`/evals/${evalId}/runs/${runId}`, options);\n  }\n\n  /**\n   * Cancel an ongoing evaluation run.\n   */\n  cancel(evalId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<RunCancelResponse> {\n    return this._client.post(`/evals/${evalId}/runs/${runId}`, options);\n  }\n}\n\nexport class RunListResponsesPage extends CursorPage<RunListResponse> {}\n\n/**\n * A CompletionsRunDataSource object describing a model sampling configuration.\n */\nexport interface CreateEvalCompletionsRunDataSource {\n  /**\n   * Determines what populates the `item` namespace in this run's data source.\n   */\n  source:\n    | CreateEvalCompletionsRunDataSource.FileContent\n    | CreateEvalCompletionsRunDataSource.FileID\n    | CreateEvalCompletionsRunDataSource.StoredCompletions;\n\n  /**\n   * The type of run data source. Always `completions`.\n   */\n  type: 'completions';\n\n  /**\n   * Used when sampling from a model. Dictates the structure of the messages passed\n   * into the model. Can either be a reference to a prebuilt trajectory (ie,\n   * `item.input_trajectory`), or a template with variable references to the `item`\n   * namespace.\n   */\n  input_messages?:\n    | CreateEvalCompletionsRunDataSource.Template\n    | CreateEvalCompletionsRunDataSource.ItemReference;\n\n  /**\n   * The name of the model to use for generating completions (e.g. \"o3-mini\").\n   */\n  model?: string;\n\n  sampling_params?: CreateEvalCompletionsRunDataSource.SamplingParams;\n}\n\nexport namespace CreateEvalCompletionsRunDataSource {\n  export interface FileContent {\n    /**\n     * The content of the jsonl file.\n     */\n    content: Array<FileContent.Content>;\n\n    /**\n     * The type of jsonl source. Always `file_content`.\n     */\n    type: 'file_content';\n  }\n\n  export namespace FileContent {\n    export interface Content {\n      item: Record<string, unknown>;\n\n      sample?: Record<string, unknown>;\n    }\n  }\n\n  export interface FileID {\n    /**\n     * The identifier of the file.\n     */\n    id: string;\n\n    /**\n     * The type of jsonl source. Always `file_id`.\n     */\n    type: 'file_id';\n  }\n\n  /**\n   * A StoredCompletionsRunDataSource configuration describing a set of filters\n   */\n  export interface StoredCompletions {\n    /**\n     * The type of source. Always `stored_completions`.\n     */\n    type: 'stored_completions';\n\n    /**\n     * An optional Unix timestamp to filter items created after this time.\n     */\n    created_after?: number | null;\n\n    /**\n     * An optional Unix timestamp to filter items created before this time.\n     */\n    created_before?: number | null;\n\n    /**\n     * An optional maximum number of items to return.\n     */\n    limit?: number | null;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard.\n     *\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\n     * a maximum length of 512 characters.\n     */\n    metadata?: Shared.Metadata | null;\n\n    /**\n     * An optional model to filter by (e.g., 'gpt-4o').\n     */\n    model?: string | null;\n  }\n\n  export interface Template {\n    /**\n     * A list of chat messages forming the prompt or context. May include variable\n     * references to the `item` namespace, ie {{item.name}}.\n     */\n    template: Array<ResponsesAPI.EasyInputMessage | Template.Message>;\n\n    /**\n     * The type of input messages. Always `template`.\n     */\n    type: 'template';\n  }\n\n  export namespace Template {\n    /**\n     * A message input to the model with a role indicating instruction following\n     * hierarchy. Instructions given with the `developer` or `system` role take\n     * precedence over instructions given with the `user` role. Messages with the\n     * `assistant` role are presumed to have been generated by the model in previous\n     * interactions.\n     */\n    export interface Message {\n      /**\n       * Text inputs to the model - can contain template strings.\n       */\n      content: string | ResponsesAPI.ResponseInputText | Message.OutputText;\n\n      /**\n       * The role of the message input. One of `user`, `assistant`, `system`, or\n       * `developer`.\n       */\n      role: 'user' | 'assistant' | 'system' | 'developer';\n\n      /**\n       * The type of the message input. Always `message`.\n       */\n      type?: 'message';\n    }\n\n    export namespace Message {\n      /**\n       * A text output from the model.\n       */\n      export interface OutputText {\n        /**\n         * The text output from the model.\n         */\n        text: string;\n\n        /**\n         * The type of the output text. Always `output_text`.\n         */\n        type: 'output_text';\n      }\n    }\n  }\n\n  export interface ItemReference {\n    /**\n     * A reference to a variable in the `item` namespace. Ie, \"item.input_trajectory\"\n     */\n    item_reference: string;\n\n    /**\n     * The type of input messages. Always `item_reference`.\n     */\n    type: 'item_reference';\n  }\n\n  export interface SamplingParams {\n    /**\n     * The maximum number of tokens in the generated output.\n     */\n    max_completion_tokens?: number;\n\n    /**\n     * A seed value to initialize the randomness, during sampling.\n     */\n    seed?: number;\n\n    /**\n     * A higher temperature increases randomness in the outputs.\n     */\n    temperature?: number;\n\n    /**\n     * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n     */\n    top_p?: number;\n  }\n}\n\n/**\n * A JsonlRunDataSource object with that specifies a JSONL file that matches the\n * eval\n */\nexport interface CreateEvalJSONLRunDataSource {\n  /**\n   * Determines what populates the `item` namespace in the data source.\n   */\n  source: CreateEvalJSONLRunDataSource.FileContent | CreateEvalJSONLRunDataSource.FileID;\n\n  /**\n   * The type of data source. Always `jsonl`.\n   */\n  type: 'jsonl';\n}\n\nexport namespace CreateEvalJSONLRunDataSource {\n  export interface FileContent {\n    /**\n     * The content of the jsonl file.\n     */\n    content: Array<FileContent.Content>;\n\n    /**\n     * The type of jsonl source. Always `file_content`.\n     */\n    type: 'file_content';\n  }\n\n  export namespace FileContent {\n    export interface Content {\n      item: Record<string, unknown>;\n\n      sample?: Record<string, unknown>;\n    }\n  }\n\n  export interface FileID {\n    /**\n     * The identifier of the file.\n     */\n    id: string;\n\n    /**\n     * The type of jsonl source. Always `file_id`.\n     */\n    type: 'file_id';\n  }\n}\n\n/**\n * An object representing an error response from the Eval API.\n */\nexport interface EvalAPIError {\n  /**\n   * The error code.\n   */\n  code: string;\n\n  /**\n   * The error message.\n   */\n  message: string;\n}\n\n/**\n * A schema representing an evaluation run.\n */\nexport interface RunCreateResponse {\n  /**\n   * Unique identifier for the evaluation run.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Information about the run's data source.\n   */\n  data_source:\n    | CreateEvalJSONLRunDataSource\n    | CreateEvalCompletionsRunDataSource\n    | RunCreateResponse.Responses;\n\n  /**\n   * An object representing an error response from the Eval API.\n   */\n  error: EvalAPIError;\n\n  /**\n   * The identifier of the associated evaluation.\n   */\n  eval_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The model that is evaluated, if applicable.\n   */\n  model: string;\n\n  /**\n   * The name of the evaluation run.\n   */\n  name: string;\n\n  /**\n   * The type of the object. Always \"eval.run\".\n   */\n  object: 'eval.run';\n\n  /**\n   * Usage statistics for each model during the evaluation run.\n   */\n  per_model_usage: Array<RunCreateResponse.PerModelUsage>;\n\n  /**\n   * Results per testing criteria applied during the evaluation run.\n   */\n  per_testing_criteria_results: Array<RunCreateResponse.PerTestingCriteriaResult>;\n\n  /**\n   * The URL to the rendered evaluation run report on the UI dashboard.\n   */\n  report_url: string;\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  result_counts: RunCreateResponse.ResultCounts;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace RunCreateResponse {\n  /**\n   * A ResponsesRunDataSource object describing a model sampling configuration.\n   */\n  export interface Responses {\n    /**\n     * Determines what populates the `item` namespace in this run's data source.\n     */\n    source: Responses.FileContent | Responses.FileID | Responses.Responses;\n\n    /**\n     * The type of run data source. Always `responses`.\n     */\n    type: 'responses';\n\n    /**\n     * Used when sampling from a model. Dictates the structure of the messages passed\n     * into the model. Can either be a reference to a prebuilt trajectory (ie,\n     * `item.input_trajectory`), or a template with variable references to the `item`\n     * namespace.\n     */\n    input_messages?: Responses.Template | Responses.ItemReference;\n\n    /**\n     * The name of the model to use for generating completions (e.g. \"o3-mini\").\n     */\n    model?: string;\n\n    sampling_params?: Responses.SamplingParams;\n  }\n\n  export namespace Responses {\n    export interface FileContent {\n      /**\n       * The content of the jsonl file.\n       */\n      content: Array<FileContent.Content>;\n\n      /**\n       * The type of jsonl source. Always `file_content`.\n       */\n      type: 'file_content';\n    }\n\n    export namespace FileContent {\n      export interface Content {\n        item: Record<string, unknown>;\n\n        sample?: Record<string, unknown>;\n      }\n    }\n\n    export interface FileID {\n      /**\n       * The identifier of the file.\n       */\n      id: string;\n\n      /**\n       * The type of jsonl source. Always `file_id`.\n       */\n      type: 'file_id';\n    }\n\n    /**\n     * A EvalResponsesSource object describing a run data source configuration.\n     */\n    export interface Responses {\n      /**\n       * The type of run data source. Always `responses`.\n       */\n      type: 'responses';\n\n      /**\n       * Only include items created after this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_after?: number | null;\n\n      /**\n       * Only include items created before this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_before?: number | null;\n\n      /**\n       * Optional string to search the 'instructions' field. This is a query parameter\n       * used to select responses.\n       */\n      instructions_search?: string | null;\n\n      /**\n       * Metadata filter for the responses. This is a query parameter used to select\n       * responses.\n       */\n      metadata?: unknown | null;\n\n      /**\n       * The name of the model to find responses for. This is a query parameter used to\n       * select responses.\n       */\n      model?: string | null;\n\n      /**\n       * Optional reasoning effort parameter. This is a query parameter used to select\n       * responses.\n       */\n      reasoning_effort?: Shared.ReasoningEffort | null;\n\n      /**\n       * Sampling temperature. This is a query parameter used to select responses.\n       */\n      temperature?: number | null;\n\n      /**\n       * List of tool names. This is a query parameter used to select responses.\n       */\n      tools?: Array<string> | null;\n\n      /**\n       * Nucleus sampling parameter. This is a query parameter used to select responses.\n       */\n      top_p?: number | null;\n\n      /**\n       * List of user identifiers. This is a query parameter used to select responses.\n       */\n      users?: Array<string> | null;\n    }\n\n    export interface Template {\n      /**\n       * A list of chat messages forming the prompt or context. May include variable\n       * references to the `item` namespace, ie {{item.name}}.\n       */\n      template: Array<Template.ChatMessage | Template.EvalItem>;\n\n      /**\n       * The type of input messages. Always `template`.\n       */\n      type: 'template';\n    }\n\n    export namespace Template {\n      export interface ChatMessage {\n        /**\n         * The content of the message.\n         */\n        content: string;\n\n        /**\n         * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n         */\n        role: string;\n      }\n\n      /**\n       * A message input to the model with a role indicating instruction following\n       * hierarchy. Instructions given with the `developer` or `system` role take\n       * precedence over instructions given with the `user` role. Messages with the\n       * `assistant` role are presumed to have been generated by the model in previous\n       * interactions.\n       */\n      export interface EvalItem {\n        /**\n         * Text inputs to the model - can contain template strings.\n         */\n        content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n        /**\n         * The role of the message input. One of `user`, `assistant`, `system`, or\n         * `developer`.\n         */\n        role: 'user' | 'assistant' | 'system' | 'developer';\n\n        /**\n         * The type of the message input. Always `message`.\n         */\n        type?: 'message';\n      }\n\n      export namespace EvalItem {\n        /**\n         * A text output from the model.\n         */\n        export interface OutputText {\n          /**\n           * The text output from the model.\n           */\n          text: string;\n\n          /**\n           * The type of the output text. Always `output_text`.\n           */\n          type: 'output_text';\n        }\n      }\n    }\n\n    export interface ItemReference {\n      /**\n       * A reference to a variable in the `item` namespace. Ie, \"item.name\"\n       */\n      item_reference: string;\n\n      /**\n       * The type of input messages. Always `item_reference`.\n       */\n      type: 'item_reference';\n    }\n\n    export interface SamplingParams {\n      /**\n       * The maximum number of tokens in the generated output.\n       */\n      max_completion_tokens?: number;\n\n      /**\n       * A seed value to initialize the randomness, during sampling.\n       */\n      seed?: number;\n\n      /**\n       * A higher temperature increases randomness in the outputs.\n       */\n      temperature?: number;\n\n      /**\n       * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n       */\n      top_p?: number;\n    }\n  }\n\n  export interface PerModelUsage {\n    /**\n     * The number of tokens retrieved from cache.\n     */\n    cached_tokens: number;\n\n    /**\n     * The number of completion tokens generated.\n     */\n    completion_tokens: number;\n\n    /**\n     * The number of invocations.\n     */\n    invocation_count: number;\n\n    /**\n     * The name of the model.\n     */\n    model_name: string;\n\n    /**\n     * The number of prompt tokens used.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used.\n     */\n    total_tokens: number;\n  }\n\n  export interface PerTestingCriteriaResult {\n    /**\n     * Number of tests failed for this criteria.\n     */\n    failed: number;\n\n    /**\n     * Number of tests passed for this criteria.\n     */\n    passed: number;\n\n    /**\n     * A description of the testing criteria.\n     */\n    testing_criteria: string;\n  }\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  export interface ResultCounts {\n    /**\n     * Number of output items that resulted in an error.\n     */\n    errored: number;\n\n    /**\n     * Number of output items that failed to pass the evaluation.\n     */\n    failed: number;\n\n    /**\n     * Number of output items that passed the evaluation.\n     */\n    passed: number;\n\n    /**\n     * Total number of executed output items.\n     */\n    total: number;\n  }\n}\n\n/**\n * A schema representing an evaluation run.\n */\nexport interface RunRetrieveResponse {\n  /**\n   * Unique identifier for the evaluation run.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Information about the run's data source.\n   */\n  data_source:\n    | CreateEvalJSONLRunDataSource\n    | CreateEvalCompletionsRunDataSource\n    | RunRetrieveResponse.Responses;\n\n  /**\n   * An object representing an error response from the Eval API.\n   */\n  error: EvalAPIError;\n\n  /**\n   * The identifier of the associated evaluation.\n   */\n  eval_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The model that is evaluated, if applicable.\n   */\n  model: string;\n\n  /**\n   * The name of the evaluation run.\n   */\n  name: string;\n\n  /**\n   * The type of the object. Always \"eval.run\".\n   */\n  object: 'eval.run';\n\n  /**\n   * Usage statistics for each model during the evaluation run.\n   */\n  per_model_usage: Array<RunRetrieveResponse.PerModelUsage>;\n\n  /**\n   * Results per testing criteria applied during the evaluation run.\n   */\n  per_testing_criteria_results: Array<RunRetrieveResponse.PerTestingCriteriaResult>;\n\n  /**\n   * The URL to the rendered evaluation run report on the UI dashboard.\n   */\n  report_url: string;\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  result_counts: RunRetrieveResponse.ResultCounts;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace RunRetrieveResponse {\n  /**\n   * A ResponsesRunDataSource object describing a model sampling configuration.\n   */\n  export interface Responses {\n    /**\n     * Determines what populates the `item` namespace in this run's data source.\n     */\n    source: Responses.FileContent | Responses.FileID | Responses.Responses;\n\n    /**\n     * The type of run data source. Always `responses`.\n     */\n    type: 'responses';\n\n    /**\n     * Used when sampling from a model. Dictates the structure of the messages passed\n     * into the model. Can either be a reference to a prebuilt trajectory (ie,\n     * `item.input_trajectory`), or a template with variable references to the `item`\n     * namespace.\n     */\n    input_messages?: Responses.Template | Responses.ItemReference;\n\n    /**\n     * The name of the model to use for generating completions (e.g. \"o3-mini\").\n     */\n    model?: string;\n\n    sampling_params?: Responses.SamplingParams;\n  }\n\n  export namespace Responses {\n    export interface FileContent {\n      /**\n       * The content of the jsonl file.\n       */\n      content: Array<FileContent.Content>;\n\n      /**\n       * The type of jsonl source. Always `file_content`.\n       */\n      type: 'file_content';\n    }\n\n    export namespace FileContent {\n      export interface Content {\n        item: Record<string, unknown>;\n\n        sample?: Record<string, unknown>;\n      }\n    }\n\n    export interface FileID {\n      /**\n       * The identifier of the file.\n       */\n      id: string;\n\n      /**\n       * The type of jsonl source. Always `file_id`.\n       */\n      type: 'file_id';\n    }\n\n    /**\n     * A EvalResponsesSource object describing a run data source configuration.\n     */\n    export interface Responses {\n      /**\n       * The type of run data source. Always `responses`.\n       */\n      type: 'responses';\n\n      /**\n       * Only include items created after this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_after?: number | null;\n\n      /**\n       * Only include items created before this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_before?: number | null;\n\n      /**\n       * Optional string to search the 'instructions' field. This is a query parameter\n       * used to select responses.\n       */\n      instructions_search?: string | null;\n\n      /**\n       * Metadata filter for the responses. This is a query parameter used to select\n       * responses.\n       */\n      metadata?: unknown | null;\n\n      /**\n       * The name of the model to find responses for. This is a query parameter used to\n       * select responses.\n       */\n      model?: string | null;\n\n      /**\n       * Optional reasoning effort parameter. This is a query parameter used to select\n       * responses.\n       */\n      reasoning_effort?: Shared.ReasoningEffort | null;\n\n      /**\n       * Sampling temperature. This is a query parameter used to select responses.\n       */\n      temperature?: number | null;\n\n      /**\n       * List of tool names. This is a query parameter used to select responses.\n       */\n      tools?: Array<string> | null;\n\n      /**\n       * Nucleus sampling parameter. This is a query parameter used to select responses.\n       */\n      top_p?: number | null;\n\n      /**\n       * List of user identifiers. This is a query parameter used to select responses.\n       */\n      users?: Array<string> | null;\n    }\n\n    export interface Template {\n      /**\n       * A list of chat messages forming the prompt or context. May include variable\n       * references to the `item` namespace, ie {{item.name}}.\n       */\n      template: Array<Template.ChatMessage | Template.EvalItem>;\n\n      /**\n       * The type of input messages. Always `template`.\n       */\n      type: 'template';\n    }\n\n    export namespace Template {\n      export interface ChatMessage {\n        /**\n         * The content of the message.\n         */\n        content: string;\n\n        /**\n         * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n         */\n        role: string;\n      }\n\n      /**\n       * A message input to the model with a role indicating instruction following\n       * hierarchy. Instructions given with the `developer` or `system` role take\n       * precedence over instructions given with the `user` role. Messages with the\n       * `assistant` role are presumed to have been generated by the model in previous\n       * interactions.\n       */\n      export interface EvalItem {\n        /**\n         * Text inputs to the model - can contain template strings.\n         */\n        content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n        /**\n         * The role of the message input. One of `user`, `assistant`, `system`, or\n         * `developer`.\n         */\n        role: 'user' | 'assistant' | 'system' | 'developer';\n\n        /**\n         * The type of the message input. Always `message`.\n         */\n        type?: 'message';\n      }\n\n      export namespace EvalItem {\n        /**\n         * A text output from the model.\n         */\n        export interface OutputText {\n          /**\n           * The text output from the model.\n           */\n          text: string;\n\n          /**\n           * The type of the output text. Always `output_text`.\n           */\n          type: 'output_text';\n        }\n      }\n    }\n\n    export interface ItemReference {\n      /**\n       * A reference to a variable in the `item` namespace. Ie, \"item.name\"\n       */\n      item_reference: string;\n\n      /**\n       * The type of input messages. Always `item_reference`.\n       */\n      type: 'item_reference';\n    }\n\n    export interface SamplingParams {\n      /**\n       * The maximum number of tokens in the generated output.\n       */\n      max_completion_tokens?: number;\n\n      /**\n       * A seed value to initialize the randomness, during sampling.\n       */\n      seed?: number;\n\n      /**\n       * A higher temperature increases randomness in the outputs.\n       */\n      temperature?: number;\n\n      /**\n       * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n       */\n      top_p?: number;\n    }\n  }\n\n  export interface PerModelUsage {\n    /**\n     * The number of tokens retrieved from cache.\n     */\n    cached_tokens: number;\n\n    /**\n     * The number of completion tokens generated.\n     */\n    completion_tokens: number;\n\n    /**\n     * The number of invocations.\n     */\n    invocation_count: number;\n\n    /**\n     * The name of the model.\n     */\n    model_name: string;\n\n    /**\n     * The number of prompt tokens used.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used.\n     */\n    total_tokens: number;\n  }\n\n  export interface PerTestingCriteriaResult {\n    /**\n     * Number of tests failed for this criteria.\n     */\n    failed: number;\n\n    /**\n     * Number of tests passed for this criteria.\n     */\n    passed: number;\n\n    /**\n     * A description of the testing criteria.\n     */\n    testing_criteria: string;\n  }\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  export interface ResultCounts {\n    /**\n     * Number of output items that resulted in an error.\n     */\n    errored: number;\n\n    /**\n     * Number of output items that failed to pass the evaluation.\n     */\n    failed: number;\n\n    /**\n     * Number of output items that passed the evaluation.\n     */\n    passed: number;\n\n    /**\n     * Total number of executed output items.\n     */\n    total: number;\n  }\n}\n\n/**\n * A schema representing an evaluation run.\n */\nexport interface RunListResponse {\n  /**\n   * Unique identifier for the evaluation run.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Information about the run's data source.\n   */\n  data_source: CreateEvalJSONLRunDataSource | CreateEvalCompletionsRunDataSource | RunListResponse.Responses;\n\n  /**\n   * An object representing an error response from the Eval API.\n   */\n  error: EvalAPIError;\n\n  /**\n   * The identifier of the associated evaluation.\n   */\n  eval_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The model that is evaluated, if applicable.\n   */\n  model: string;\n\n  /**\n   * The name of the evaluation run.\n   */\n  name: string;\n\n  /**\n   * The type of the object. Always \"eval.run\".\n   */\n  object: 'eval.run';\n\n  /**\n   * Usage statistics for each model during the evaluation run.\n   */\n  per_model_usage: Array<RunListResponse.PerModelUsage>;\n\n  /**\n   * Results per testing criteria applied during the evaluation run.\n   */\n  per_testing_criteria_results: Array<RunListResponse.PerTestingCriteriaResult>;\n\n  /**\n   * The URL to the rendered evaluation run report on the UI dashboard.\n   */\n  report_url: string;\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  result_counts: RunListResponse.ResultCounts;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace RunListResponse {\n  /**\n   * A ResponsesRunDataSource object describing a model sampling configuration.\n   */\n  export interface Responses {\n    /**\n     * Determines what populates the `item` namespace in this run's data source.\n     */\n    source: Responses.FileContent | Responses.FileID | Responses.Responses;\n\n    /**\n     * The type of run data source. Always `responses`.\n     */\n    type: 'responses';\n\n    /**\n     * Used when sampling from a model. Dictates the structure of the messages passed\n     * into the model. Can either be a reference to a prebuilt trajectory (ie,\n     * `item.input_trajectory`), or a template with variable references to the `item`\n     * namespace.\n     */\n    input_messages?: Responses.Template | Responses.ItemReference;\n\n    /**\n     * The name of the model to use for generating completions (e.g. \"o3-mini\").\n     */\n    model?: string;\n\n    sampling_params?: Responses.SamplingParams;\n  }\n\n  export namespace Responses {\n    export interface FileContent {\n      /**\n       * The content of the jsonl file.\n       */\n      content: Array<FileContent.Content>;\n\n      /**\n       * The type of jsonl source. Always `file_content`.\n       */\n      type: 'file_content';\n    }\n\n    export namespace FileContent {\n      export interface Content {\n        item: Record<string, unknown>;\n\n        sample?: Record<string, unknown>;\n      }\n    }\n\n    export interface FileID {\n      /**\n       * The identifier of the file.\n       */\n      id: string;\n\n      /**\n       * The type of jsonl source. Always `file_id`.\n       */\n      type: 'file_id';\n    }\n\n    /**\n     * A EvalResponsesSource object describing a run data source configuration.\n     */\n    export interface Responses {\n      /**\n       * The type of run data source. Always `responses`.\n       */\n      type: 'responses';\n\n      /**\n       * Only include items created after this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_after?: number | null;\n\n      /**\n       * Only include items created before this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_before?: number | null;\n\n      /**\n       * Optional string to search the 'instructions' field. This is a query parameter\n       * used to select responses.\n       */\n      instructions_search?: string | null;\n\n      /**\n       * Metadata filter for the responses. This is a query parameter used to select\n       * responses.\n       */\n      metadata?: unknown | null;\n\n      /**\n       * The name of the model to find responses for. This is a query parameter used to\n       * select responses.\n       */\n      model?: string | null;\n\n      /**\n       * Optional reasoning effort parameter. This is a query parameter used to select\n       * responses.\n       */\n      reasoning_effort?: Shared.ReasoningEffort | null;\n\n      /**\n       * Sampling temperature. This is a query parameter used to select responses.\n       */\n      temperature?: number | null;\n\n      /**\n       * List of tool names. This is a query parameter used to select responses.\n       */\n      tools?: Array<string> | null;\n\n      /**\n       * Nucleus sampling parameter. This is a query parameter used to select responses.\n       */\n      top_p?: number | null;\n\n      /**\n       * List of user identifiers. This is a query parameter used to select responses.\n       */\n      users?: Array<string> | null;\n    }\n\n    export interface Template {\n      /**\n       * A list of chat messages forming the prompt or context. May include variable\n       * references to the `item` namespace, ie {{item.name}}.\n       */\n      template: Array<Template.ChatMessage | Template.EvalItem>;\n\n      /**\n       * The type of input messages. Always `template`.\n       */\n      type: 'template';\n    }\n\n    export namespace Template {\n      export interface ChatMessage {\n        /**\n         * The content of the message.\n         */\n        content: string;\n\n        /**\n         * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n         */\n        role: string;\n      }\n\n      /**\n       * A message input to the model with a role indicating instruction following\n       * hierarchy. Instructions given with the `developer` or `system` role take\n       * precedence over instructions given with the `user` role. Messages with the\n       * `assistant` role are presumed to have been generated by the model in previous\n       * interactions.\n       */\n      export interface EvalItem {\n        /**\n         * Text inputs to the model - can contain template strings.\n         */\n        content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n        /**\n         * The role of the message input. One of `user`, `assistant`, `system`, or\n         * `developer`.\n         */\n        role: 'user' | 'assistant' | 'system' | 'developer';\n\n        /**\n         * The type of the message input. Always `message`.\n         */\n        type?: 'message';\n      }\n\n      export namespace EvalItem {\n        /**\n         * A text output from the model.\n         */\n        export interface OutputText {\n          /**\n           * The text output from the model.\n           */\n          text: string;\n\n          /**\n           * The type of the output text. Always `output_text`.\n           */\n          type: 'output_text';\n        }\n      }\n    }\n\n    export interface ItemReference {\n      /**\n       * A reference to a variable in the `item` namespace. Ie, \"item.name\"\n       */\n      item_reference: string;\n\n      /**\n       * The type of input messages. Always `item_reference`.\n       */\n      type: 'item_reference';\n    }\n\n    export interface SamplingParams {\n      /**\n       * The maximum number of tokens in the generated output.\n       */\n      max_completion_tokens?: number;\n\n      /**\n       * A seed value to initialize the randomness, during sampling.\n       */\n      seed?: number;\n\n      /**\n       * A higher temperature increases randomness in the outputs.\n       */\n      temperature?: number;\n\n      /**\n       * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n       */\n      top_p?: number;\n    }\n  }\n\n  export interface PerModelUsage {\n    /**\n     * The number of tokens retrieved from cache.\n     */\n    cached_tokens: number;\n\n    /**\n     * The number of completion tokens generated.\n     */\n    completion_tokens: number;\n\n    /**\n     * The number of invocations.\n     */\n    invocation_count: number;\n\n    /**\n     * The name of the model.\n     */\n    model_name: string;\n\n    /**\n     * The number of prompt tokens used.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used.\n     */\n    total_tokens: number;\n  }\n\n  export interface PerTestingCriteriaResult {\n    /**\n     * Number of tests failed for this criteria.\n     */\n    failed: number;\n\n    /**\n     * Number of tests passed for this criteria.\n     */\n    passed: number;\n\n    /**\n     * A description of the testing criteria.\n     */\n    testing_criteria: string;\n  }\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  export interface ResultCounts {\n    /**\n     * Number of output items that resulted in an error.\n     */\n    errored: number;\n\n    /**\n     * Number of output items that failed to pass the evaluation.\n     */\n    failed: number;\n\n    /**\n     * Number of output items that passed the evaluation.\n     */\n    passed: number;\n\n    /**\n     * Total number of executed output items.\n     */\n    total: number;\n  }\n}\n\nexport interface RunDeleteResponse {\n  deleted?: boolean;\n\n  object?: string;\n\n  run_id?: string;\n}\n\n/**\n * A schema representing an evaluation run.\n */\nexport interface RunCancelResponse {\n  /**\n   * Unique identifier for the evaluation run.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Information about the run's data source.\n   */\n  data_source:\n    | CreateEvalJSONLRunDataSource\n    | CreateEvalCompletionsRunDataSource\n    | RunCancelResponse.Responses;\n\n  /**\n   * An object representing an error response from the Eval API.\n   */\n  error: EvalAPIError;\n\n  /**\n   * The identifier of the associated evaluation.\n   */\n  eval_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The model that is evaluated, if applicable.\n   */\n  model: string;\n\n  /**\n   * The name of the evaluation run.\n   */\n  name: string;\n\n  /**\n   * The type of the object. Always \"eval.run\".\n   */\n  object: 'eval.run';\n\n  /**\n   * Usage statistics for each model during the evaluation run.\n   */\n  per_model_usage: Array<RunCancelResponse.PerModelUsage>;\n\n  /**\n   * Results per testing criteria applied during the evaluation run.\n   */\n  per_testing_criteria_results: Array<RunCancelResponse.PerTestingCriteriaResult>;\n\n  /**\n   * The URL to the rendered evaluation run report on the UI dashboard.\n   */\n  report_url: string;\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  result_counts: RunCancelResponse.ResultCounts;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace RunCancelResponse {\n  /**\n   * A ResponsesRunDataSource object describing a model sampling configuration.\n   */\n  export interface Responses {\n    /**\n     * Determines what populates the `item` namespace in this run's data source.\n     */\n    source: Responses.FileContent | Responses.FileID | Responses.Responses;\n\n    /**\n     * The type of run data source. Always `responses`.\n     */\n    type: 'responses';\n\n    /**\n     * Used when sampling from a model. Dictates the structure of the messages passed\n     * into the model. Can either be a reference to a prebuilt trajectory (ie,\n     * `item.input_trajectory`), or a template with variable references to the `item`\n     * namespace.\n     */\n    input_messages?: Responses.Template | Responses.ItemReference;\n\n    /**\n     * The name of the model to use for generating completions (e.g. \"o3-mini\").\n     */\n    model?: string;\n\n    sampling_params?: Responses.SamplingParams;\n  }\n\n  export namespace Responses {\n    export interface FileContent {\n      /**\n       * The content of the jsonl file.\n       */\n      content: Array<FileContent.Content>;\n\n      /**\n       * The type of jsonl source. Always `file_content`.\n       */\n      type: 'file_content';\n    }\n\n    export namespace FileContent {\n      export interface Content {\n        item: Record<string, unknown>;\n\n        sample?: Record<string, unknown>;\n      }\n    }\n\n    export interface FileID {\n      /**\n       * The identifier of the file.\n       */\n      id: string;\n\n      /**\n       * The type of jsonl source. Always `file_id`.\n       */\n      type: 'file_id';\n    }\n\n    /**\n     * A EvalResponsesSource object describing a run data source configuration.\n     */\n    export interface Responses {\n      /**\n       * The type of run data source. Always `responses`.\n       */\n      type: 'responses';\n\n      /**\n       * Only include items created after this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_after?: number | null;\n\n      /**\n       * Only include items created before this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_before?: number | null;\n\n      /**\n       * Optional string to search the 'instructions' field. This is a query parameter\n       * used to select responses.\n       */\n      instructions_search?: string | null;\n\n      /**\n       * Metadata filter for the responses. This is a query parameter used to select\n       * responses.\n       */\n      metadata?: unknown | null;\n\n      /**\n       * The name of the model to find responses for. This is a query parameter used to\n       * select responses.\n       */\n      model?: string | null;\n\n      /**\n       * Optional reasoning effort parameter. This is a query parameter used to select\n       * responses.\n       */\n      reasoning_effort?: Shared.ReasoningEffort | null;\n\n      /**\n       * Sampling temperature. This is a query parameter used to select responses.\n       */\n      temperature?: number | null;\n\n      /**\n       * List of tool names. This is a query parameter used to select responses.\n       */\n      tools?: Array<string> | null;\n\n      /**\n       * Nucleus sampling parameter. This is a query parameter used to select responses.\n       */\n      top_p?: number | null;\n\n      /**\n       * List of user identifiers. This is a query parameter used to select responses.\n       */\n      users?: Array<string> | null;\n    }\n\n    export interface Template {\n      /**\n       * A list of chat messages forming the prompt or context. May include variable\n       * references to the `item` namespace, ie {{item.name}}.\n       */\n      template: Array<Template.ChatMessage | Template.EvalItem>;\n\n      /**\n       * The type of input messages. Always `template`.\n       */\n      type: 'template';\n    }\n\n    export namespace Template {\n      export interface ChatMessage {\n        /**\n         * The content of the message.\n         */\n        content: string;\n\n        /**\n         * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n         */\n        role: string;\n      }\n\n      /**\n       * A message input to the model with a role indicating instruction following\n       * hierarchy. Instructions given with the `developer` or `system` role take\n       * precedence over instructions given with the `user` role. Messages with the\n       * `assistant` role are presumed to have been generated by the model in previous\n       * interactions.\n       */\n      export interface EvalItem {\n        /**\n         * Text inputs to the model - can contain template strings.\n         */\n        content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n        /**\n         * The role of the message input. One of `user`, `assistant`, `system`, or\n         * `developer`.\n         */\n        role: 'user' | 'assistant' | 'system' | 'developer';\n\n        /**\n         * The type of the message input. Always `message`.\n         */\n        type?: 'message';\n      }\n\n      export namespace EvalItem {\n        /**\n         * A text output from the model.\n         */\n        export interface OutputText {\n          /**\n           * The text output from the model.\n           */\n          text: string;\n\n          /**\n           * The type of the output text. Always `output_text`.\n           */\n          type: 'output_text';\n        }\n      }\n    }\n\n    export interface ItemReference {\n      /**\n       * A reference to a variable in the `item` namespace. Ie, \"item.name\"\n       */\n      item_reference: string;\n\n      /**\n       * The type of input messages. Always `item_reference`.\n       */\n      type: 'item_reference';\n    }\n\n    export interface SamplingParams {\n      /**\n       * The maximum number of tokens in the generated output.\n       */\n      max_completion_tokens?: number;\n\n      /**\n       * A seed value to initialize the randomness, during sampling.\n       */\n      seed?: number;\n\n      /**\n       * A higher temperature increases randomness in the outputs.\n       */\n      temperature?: number;\n\n      /**\n       * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n       */\n      top_p?: number;\n    }\n  }\n\n  export interface PerModelUsage {\n    /**\n     * The number of tokens retrieved from cache.\n     */\n    cached_tokens: number;\n\n    /**\n     * The number of completion tokens generated.\n     */\n    completion_tokens: number;\n\n    /**\n     * The number of invocations.\n     */\n    invocation_count: number;\n\n    /**\n     * The name of the model.\n     */\n    model_name: string;\n\n    /**\n     * The number of prompt tokens used.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used.\n     */\n    total_tokens: number;\n  }\n\n  export interface PerTestingCriteriaResult {\n    /**\n     * Number of tests failed for this criteria.\n     */\n    failed: number;\n\n    /**\n     * Number of tests passed for this criteria.\n     */\n    passed: number;\n\n    /**\n     * A description of the testing criteria.\n     */\n    testing_criteria: string;\n  }\n\n  /**\n   * Counters summarizing the outcomes of the evaluation run.\n   */\n  export interface ResultCounts {\n    /**\n     * Number of output items that resulted in an error.\n     */\n    errored: number;\n\n    /**\n     * Number of output items that failed to pass the evaluation.\n     */\n    failed: number;\n\n    /**\n     * Number of output items that passed the evaluation.\n     */\n    passed: number;\n\n    /**\n     * Total number of executed output items.\n     */\n    total: number;\n  }\n}\n\nexport interface RunCreateParams {\n  /**\n   * Details about the run's data source.\n   */\n  data_source:\n    | CreateEvalJSONLRunDataSource\n    | CreateEvalCompletionsRunDataSource\n    | RunCreateParams.CreateEvalResponsesRunDataSource;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The name of the run.\n   */\n  name?: string;\n}\n\nexport namespace RunCreateParams {\n  /**\n   * A ResponsesRunDataSource object describing a model sampling configuration.\n   */\n  export interface CreateEvalResponsesRunDataSource {\n    /**\n     * Determines what populates the `item` namespace in this run's data source.\n     */\n    source:\n      | CreateEvalResponsesRunDataSource.FileContent\n      | CreateEvalResponsesRunDataSource.FileID\n      | CreateEvalResponsesRunDataSource.Responses;\n\n    /**\n     * The type of run data source. Always `responses`.\n     */\n    type: 'responses';\n\n    /**\n     * Used when sampling from a model. Dictates the structure of the messages passed\n     * into the model. Can either be a reference to a prebuilt trajectory (ie,\n     * `item.input_trajectory`), or a template with variable references to the `item`\n     * namespace.\n     */\n    input_messages?:\n      | CreateEvalResponsesRunDataSource.Template\n      | CreateEvalResponsesRunDataSource.ItemReference;\n\n    /**\n     * The name of the model to use for generating completions (e.g. \"o3-mini\").\n     */\n    model?: string;\n\n    sampling_params?: CreateEvalResponsesRunDataSource.SamplingParams;\n  }\n\n  export namespace CreateEvalResponsesRunDataSource {\n    export interface FileContent {\n      /**\n       * The content of the jsonl file.\n       */\n      content: Array<FileContent.Content>;\n\n      /**\n       * The type of jsonl source. Always `file_content`.\n       */\n      type: 'file_content';\n    }\n\n    export namespace FileContent {\n      export interface Content {\n        item: Record<string, unknown>;\n\n        sample?: Record<string, unknown>;\n      }\n    }\n\n    export interface FileID {\n      /**\n       * The identifier of the file.\n       */\n      id: string;\n\n      /**\n       * The type of jsonl source. Always `file_id`.\n       */\n      type: 'file_id';\n    }\n\n    /**\n     * A EvalResponsesSource object describing a run data source configuration.\n     */\n    export interface Responses {\n      /**\n       * The type of run data source. Always `responses`.\n       */\n      type: 'responses';\n\n      /**\n       * Only include items created after this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_after?: number | null;\n\n      /**\n       * Only include items created before this timestamp (inclusive). This is a query\n       * parameter used to select responses.\n       */\n      created_before?: number | null;\n\n      /**\n       * Optional string to search the 'instructions' field. This is a query parameter\n       * used to select responses.\n       */\n      instructions_search?: string | null;\n\n      /**\n       * Metadata filter for the responses. This is a query parameter used to select\n       * responses.\n       */\n      metadata?: unknown | null;\n\n      /**\n       * The name of the model to find responses for. This is a query parameter used to\n       * select responses.\n       */\n      model?: string | null;\n\n      /**\n       * Optional reasoning effort parameter. This is a query parameter used to select\n       * responses.\n       */\n      reasoning_effort?: Shared.ReasoningEffort | null;\n\n      /**\n       * Sampling temperature. This is a query parameter used to select responses.\n       */\n      temperature?: number | null;\n\n      /**\n       * List of tool names. This is a query parameter used to select responses.\n       */\n      tools?: Array<string> | null;\n\n      /**\n       * Nucleus sampling parameter. This is a query parameter used to select responses.\n       */\n      top_p?: number | null;\n\n      /**\n       * List of user identifiers. This is a query parameter used to select responses.\n       */\n      users?: Array<string> | null;\n    }\n\n    export interface Template {\n      /**\n       * A list of chat messages forming the prompt or context. May include variable\n       * references to the `item` namespace, ie {{item.name}}.\n       */\n      template: Array<Template.ChatMessage | Template.EvalItem>;\n\n      /**\n       * The type of input messages. Always `template`.\n       */\n      type: 'template';\n    }\n\n    export namespace Template {\n      export interface ChatMessage {\n        /**\n         * The content of the message.\n         */\n        content: string;\n\n        /**\n         * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n         */\n        role: string;\n      }\n\n      /**\n       * A message input to the model with a role indicating instruction following\n       * hierarchy. Instructions given with the `developer` or `system` role take\n       * precedence over instructions given with the `user` role. Messages with the\n       * `assistant` role are presumed to have been generated by the model in previous\n       * interactions.\n       */\n      export interface EvalItem {\n        /**\n         * Text inputs to the model - can contain template strings.\n         */\n        content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\n\n        /**\n         * The role of the message input. One of `user`, `assistant`, `system`, or\n         * `developer`.\n         */\n        role: 'user' | 'assistant' | 'system' | 'developer';\n\n        /**\n         * The type of the message input. Always `message`.\n         */\n        type?: 'message';\n      }\n\n      export namespace EvalItem {\n        /**\n         * A text output from the model.\n         */\n        export interface OutputText {\n          /**\n           * The text output from the model.\n           */\n          text: string;\n\n          /**\n           * The type of the output text. Always `output_text`.\n           */\n          type: 'output_text';\n        }\n      }\n    }\n\n    export interface ItemReference {\n      /**\n       * A reference to a variable in the `item` namespace. Ie, \"item.name\"\n       */\n      item_reference: string;\n\n      /**\n       * The type of input messages. Always `item_reference`.\n       */\n      type: 'item_reference';\n    }\n\n    export interface SamplingParams {\n      /**\n       * The maximum number of tokens in the generated output.\n       */\n      max_completion_tokens?: number;\n\n      /**\n       * A seed value to initialize the randomness, during sampling.\n       */\n      seed?: number;\n\n      /**\n       * A higher temperature increases randomness in the outputs.\n       */\n      temperature?: number;\n\n      /**\n       * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\n       */\n      top_p?: number;\n    }\n  }\n}\n\nexport interface RunListParams extends CursorPageParams {\n  /**\n   * Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for\n   * descending order. Defaults to `asc`.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed`\n   * | `canceled`.\n   */\n  status?: 'queued' | 'in_progress' | 'completed' | 'canceled' | 'failed';\n}\n\nRuns.RunListResponsesPage = RunListResponsesPage;\nRuns.OutputItems = OutputItems;\nRuns.OutputItemListResponsesPage = OutputItemListResponsesPage;\n\nexport declare namespace Runs {\n  export {\n    type CreateEvalCompletionsRunDataSource as CreateEvalCompletionsRunDataSource,\n    type CreateEvalJSONLRunDataSource as CreateEvalJSONLRunDataSource,\n    type EvalAPIError as EvalAPIError,\n    type RunCreateResponse as RunCreateResponse,\n    type RunRetrieveResponse as RunRetrieveResponse,\n    type RunListResponse as RunListResponse,\n    type RunDeleteResponse as RunDeleteResponse,\n    type RunCancelResponse as RunCancelResponse,\n    RunListResponsesPage as RunListResponsesPage,\n    type RunCreateParams as RunCreateParams,\n    type RunListParams as RunListParams,\n  };\n\n  export {\n    OutputItems as OutputItems,\n    type OutputItemRetrieveResponse as OutputItemRetrieveResponse,\n    type OutputItemListResponse as OutputItemListResponse,\n    OutputItemListResponsesPage as OutputItemListResponsesPage,\n    type OutputItemListParams as OutputItemListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as RunsAPI from './runs';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class OutputItems extends APIResource {\n  /**\n   * Get an evaluation run output item by ID.\n   */\n  retrieve(\n    evalId: string,\n    runId: string,\n    outputItemId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<OutputItemRetrieveResponse> {\n    return this._client.get(`/evals/${evalId}/runs/${runId}/output_items/${outputItemId}`, options);\n  }\n\n  /**\n   * Get a list of output items for an evaluation run.\n   */\n  list(\n    evalId: string,\n    runId: string,\n    query?: OutputItemListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<OutputItemListResponsesPage, OutputItemListResponse>;\n  list(\n    evalId: string,\n    runId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<OutputItemListResponsesPage, OutputItemListResponse>;\n  list(\n    evalId: string,\n    runId: string,\n    query: OutputItemListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<OutputItemListResponsesPage, OutputItemListResponse> {\n    if (isRequestOptions(query)) {\n      return this.list(evalId, runId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/evals/${evalId}/runs/${runId}/output_items`,\n      OutputItemListResponsesPage,\n      { query, ...options },\n    );\n  }\n}\n\nexport class OutputItemListResponsesPage extends CursorPage<OutputItemListResponse> {}\n\n/**\n * A schema representing an evaluation run output item.\n */\nexport interface OutputItemRetrieveResponse {\n  /**\n   * Unique identifier for the evaluation run output item.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Details of the input data source item.\n   */\n  datasource_item: Record<string, unknown>;\n\n  /**\n   * The identifier for the data source item.\n   */\n  datasource_item_id: number;\n\n  /**\n   * The identifier of the evaluation group.\n   */\n  eval_id: string;\n\n  /**\n   * The type of the object. Always \"eval.run.output_item\".\n   */\n  object: 'eval.run.output_item';\n\n  /**\n   * A list of results from the evaluation run.\n   */\n  results: Array<Record<string, unknown>>;\n\n  /**\n   * The identifier of the evaluation run associated with this output item.\n   */\n  run_id: string;\n\n  /**\n   * A sample containing the input and output of the evaluation run.\n   */\n  sample: OutputItemRetrieveResponse.Sample;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace OutputItemRetrieveResponse {\n  /**\n   * A sample containing the input and output of the evaluation run.\n   */\n  export interface Sample {\n    /**\n     * An object representing an error response from the Eval API.\n     */\n    error: RunsAPI.EvalAPIError;\n\n    /**\n     * The reason why the sample generation was finished.\n     */\n    finish_reason: string;\n\n    /**\n     * An array of input messages.\n     */\n    input: Array<Sample.Input>;\n\n    /**\n     * The maximum number of tokens allowed for completion.\n     */\n    max_completion_tokens: number;\n\n    /**\n     * The model used for generating the sample.\n     */\n    model: string;\n\n    /**\n     * An array of output messages.\n     */\n    output: Array<Sample.Output>;\n\n    /**\n     * The seed used for generating the sample.\n     */\n    seed: number;\n\n    /**\n     * The sampling temperature used.\n     */\n    temperature: number;\n\n    /**\n     * The top_p value used for sampling.\n     */\n    top_p: number;\n\n    /**\n     * Token usage details for the sample.\n     */\n    usage: Sample.Usage;\n  }\n\n  export namespace Sample {\n    /**\n     * An input message.\n     */\n    export interface Input {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the message sender (e.g., system, user, developer).\n       */\n      role: string;\n    }\n\n    export interface Output {\n      /**\n       * The content of the message.\n       */\n      content?: string;\n\n      /**\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n       */\n      role?: string;\n    }\n\n    /**\n     * Token usage details for the sample.\n     */\n    export interface Usage {\n      /**\n       * The number of tokens retrieved from cache.\n       */\n      cached_tokens: number;\n\n      /**\n       * The number of completion tokens generated.\n       */\n      completion_tokens: number;\n\n      /**\n       * The number of prompt tokens used.\n       */\n      prompt_tokens: number;\n\n      /**\n       * The total number of tokens used.\n       */\n      total_tokens: number;\n    }\n  }\n}\n\n/**\n * A schema representing an evaluation run output item.\n */\nexport interface OutputItemListResponse {\n  /**\n   * Unique identifier for the evaluation run output item.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) when the evaluation run was created.\n   */\n  created_at: number;\n\n  /**\n   * Details of the input data source item.\n   */\n  datasource_item: Record<string, unknown>;\n\n  /**\n   * The identifier for the data source item.\n   */\n  datasource_item_id: number;\n\n  /**\n   * The identifier of the evaluation group.\n   */\n  eval_id: string;\n\n  /**\n   * The type of the object. Always \"eval.run.output_item\".\n   */\n  object: 'eval.run.output_item';\n\n  /**\n   * A list of results from the evaluation run.\n   */\n  results: Array<Record<string, unknown>>;\n\n  /**\n   * The identifier of the evaluation run associated with this output item.\n   */\n  run_id: string;\n\n  /**\n   * A sample containing the input and output of the evaluation run.\n   */\n  sample: OutputItemListResponse.Sample;\n\n  /**\n   * The status of the evaluation run.\n   */\n  status: string;\n}\n\nexport namespace OutputItemListResponse {\n  /**\n   * A sample containing the input and output of the evaluation run.\n   */\n  export interface Sample {\n    /**\n     * An object representing an error response from the Eval API.\n     */\n    error: RunsAPI.EvalAPIError;\n\n    /**\n     * The reason why the sample generation was finished.\n     */\n    finish_reason: string;\n\n    /**\n     * An array of input messages.\n     */\n    input: Array<Sample.Input>;\n\n    /**\n     * The maximum number of tokens allowed for completion.\n     */\n    max_completion_tokens: number;\n\n    /**\n     * The model used for generating the sample.\n     */\n    model: string;\n\n    /**\n     * An array of output messages.\n     */\n    output: Array<Sample.Output>;\n\n    /**\n     * The seed used for generating the sample.\n     */\n    seed: number;\n\n    /**\n     * The sampling temperature used.\n     */\n    temperature: number;\n\n    /**\n     * The top_p value used for sampling.\n     */\n    top_p: number;\n\n    /**\n     * Token usage details for the sample.\n     */\n    usage: Sample.Usage;\n  }\n\n  export namespace Sample {\n    /**\n     * An input message.\n     */\n    export interface Input {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the message sender (e.g., system, user, developer).\n       */\n      role: string;\n    }\n\n    export interface Output {\n      /**\n       * The content of the message.\n       */\n      content?: string;\n\n      /**\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\n       */\n      role?: string;\n    }\n\n    /**\n     * Token usage details for the sample.\n     */\n    export interface Usage {\n      /**\n       * The number of tokens retrieved from cache.\n       */\n      cached_tokens: number;\n\n      /**\n       * The number of completion tokens generated.\n       */\n      completion_tokens: number;\n\n      /**\n       * The number of prompt tokens used.\n       */\n      prompt_tokens: number;\n\n      /**\n       * The total number of tokens used.\n       */\n      total_tokens: number;\n    }\n  }\n}\n\nexport interface OutputItemListParams extends CursorPageParams {\n  /**\n   * Sort order for output items by timestamp. Use `asc` for ascending order or\n   * `desc` for descending order. Defaults to `asc`.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Filter output items by status. Use `failed` to filter by failed output items or\n   * `pass` to filter by passed output items.\n   */\n  status?: 'fail' | 'pass';\n}\n\nOutputItems.OutputItemListResponsesPage = OutputItemListResponsesPage;\n\nexport declare namespace OutputItems {\n  export {\n    type OutputItemRetrieveResponse as OutputItemRetrieveResponse,\n    type OutputItemListResponse as OutputItemListResponse,\n    OutputItemListResponsesPage as OutputItemListResponsesPage,\n    type OutputItemListParams as OutputItemListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport { isRequestOptions } from '../core';\nimport { sleep } from '../core';\nimport { APIConnectionTimeoutError } from '../error';\nimport * as Core from '../core';\nimport { CursorPage, type CursorPageParams } from '../pagination';\nimport { type Response } from '../_shims/index';\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 100 GB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body: FileCreateParams, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.post('/files', Core.multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.get(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns a list of files.\n   */\n  list(query?: FileListParams, options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileObjectsPage, FileObject> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });\n  }\n\n  /**\n   * Delete a file.\n   */\n  del(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileDeleted> {\n    return this._client.delete(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileId: string, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/binary', ...options?.headers },\n      __binaryResponse: true,\n    });\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(fileId: string, options?: Core.RequestOptions): Core.APIPromise<string> {\n    return this._client.get(`/files/${fileId}/content`, options);\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\nexport class FileObjectsPage extends CursorPage<FileObject> {}\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'file';\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file, in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always `file`.\n   */\n  object: 'file';\n\n  /**\n   * The intended purpose of the file. Supported values are `assistants`,\n   * `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`\n   * and `vision`.\n   */\n  purpose:\n    | 'assistants'\n    | 'assistants_output'\n    | 'batch'\n    | 'batch_output'\n    | 'fine-tune'\n    | 'fine-tune-results'\n    | 'vision';\n\n  /**\n   * @deprecated Deprecated. The current status of the file, which can be either\n   * `uploaded`, `processed`, or `error`.\n   */\n  status: 'uploaded' | 'processed' | 'error';\n\n  /**\n   * The Unix timestamp (in seconds) for when the file will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * @deprecated Deprecated. For details on why a fine-tuning training file failed\n   * validation, see the `error` field on `fine_tuning.job`.\n   */\n  status_details?: string;\n}\n\n/**\n * The intended purpose of the uploaded file. One of: - `assistants`: Used in the\n * Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for\n * fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`:\n * Flexible file type for any purpose - `evals`: Used for eval data sets\n */\nexport type FilePurpose = 'assistants' | 'batch' | 'fine-tune' | 'vision' | 'user_data' | 'evals';\n\nexport interface FileCreateParams {\n  /**\n   * The File object (not file name) to be uploaded.\n   */\n  file: Core.Uploadable;\n\n  /**\n   * The intended purpose of the uploaded file. One of: - `assistants`: Used in the\n   * Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for\n   * fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`:\n   * Flexible file type for any purpose - `evals`: Used for eval data sets\n   */\n  purpose: FilePurpose;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Only return files with the given purpose.\n   */\n  purpose?: string;\n}\n\nFiles.FileObjectsPage = FileObjectsPage;\n\nexport declare namespace Files {\n  export {\n    type FileContent as FileContent,\n    type FileDeleted as FileDeleted,\n    type FileObject as FileObject,\n    type FilePurpose as FilePurpose,\n    FileObjectsPage as FileObjectsPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as MethodsAPI from './methods';\nimport {\n  DpoHyperparameters,\n  DpoMethod,\n  Methods,\n  ReinforcementHyperparameters,\n  ReinforcementMethod,\n  SupervisedHyperparameters,\n  SupervisedMethod,\n} from './methods';\nimport * as AlphaAPI from './alpha/alpha';\nimport { Alpha } from './alpha/alpha';\nimport * as CheckpointsAPI from './checkpoints/checkpoints';\nimport { Checkpoints } from './checkpoints/checkpoints';\nimport * as JobsAPI from './jobs/jobs';\nimport {\n  FineTuningJob,\n  FineTuningJobEvent,\n  FineTuningJobEventsPage,\n  FineTuningJobIntegration,\n  FineTuningJobWandbIntegration,\n  FineTuningJobWandbIntegrationObject,\n  FineTuningJobsPage,\n  JobCreateParams,\n  JobListEventsParams,\n  JobListParams,\n  Jobs,\n} from './jobs/jobs';\n\nexport class FineTuning extends APIResource {\n  methods: MethodsAPI.Methods = new MethodsAPI.Methods(this._client);\n  jobs: JobsAPI.Jobs = new JobsAPI.Jobs(this._client);\n  checkpoints: CheckpointsAPI.Checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n  alpha: AlphaAPI.Alpha = new AlphaAPI.Alpha(this._client);\n}\n\nFineTuning.Methods = Methods;\nFineTuning.Jobs = Jobs;\nFineTuning.FineTuningJobsPage = FineTuningJobsPage;\nFineTuning.FineTuningJobEventsPage = FineTuningJobEventsPage;\nFineTuning.Checkpoints = Checkpoints;\nFineTuning.Alpha = Alpha;\n\nexport declare namespace FineTuning {\n  export {\n    Methods as Methods,\n    type DpoHyperparameters as DpoHyperparameters,\n    type DpoMethod as DpoMethod,\n    type ReinforcementHyperparameters as ReinforcementHyperparameters,\n    type ReinforcementMethod as ReinforcementMethod,\n    type SupervisedHyperparameters as SupervisedHyperparameters,\n    type SupervisedMethod as SupervisedMethod,\n  };\n\n  export {\n    Jobs as Jobs,\n    type FineTuningJob as FineTuningJob,\n    type FineTuningJobEvent as FineTuningJobEvent,\n    type FineTuningJobIntegration as FineTuningJobIntegration,\n    type FineTuningJobWandbIntegration as FineTuningJobWandbIntegration,\n    type FineTuningJobWandbIntegrationObject as FineTuningJobWandbIntegrationObject,\n    FineTuningJobsPage as FineTuningJobsPage,\n    FineTuningJobEventsPage as FineTuningJobEventsPage,\n    type JobCreateParams as JobCreateParams,\n    type JobListParams as JobListParams,\n    type JobListEventsParams as JobListEventsParams,\n  };\n\n  export { Checkpoints as Checkpoints };\n\n  export { Alpha as Alpha };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as GraderModelsAPI from '../graders/grader-models';\n\nexport class Methods extends APIResource {}\n\n/**\n * The hyperparameters used for the DPO fine-tuning job.\n */\nexport interface DpoHyperparameters {\n  /**\n   * Number of examples in each batch. A larger batch size means that model\n   * parameters are updated less frequently, but with lower variance.\n   */\n  batch_size?: 'auto' | number;\n\n  /**\n   * The beta value for the DPO method. A higher beta value will increase the weight\n   * of the penalty between the policy and reference model.\n   */\n  beta?: 'auto' | number;\n\n  /**\n   * Scaling factor for the learning rate. A smaller learning rate may be useful to\n   * avoid overfitting.\n   */\n  learning_rate_multiplier?: 'auto' | number;\n\n  /**\n   * The number of epochs to train the model for. An epoch refers to one full cycle\n   * through the training dataset.\n   */\n  n_epochs?: 'auto' | number;\n}\n\n/**\n * Configuration for the DPO fine-tuning method.\n */\nexport interface DpoMethod {\n  /**\n   * The hyperparameters used for the DPO fine-tuning job.\n   */\n  hyperparameters?: DpoHyperparameters;\n}\n\n/**\n * The hyperparameters used for the reinforcement fine-tuning job.\n */\nexport interface ReinforcementHyperparameters {\n  /**\n   * Number of examples in each batch. A larger batch size means that model\n   * parameters are updated less frequently, but with lower variance.\n   */\n  batch_size?: 'auto' | number;\n\n  /**\n   * Multiplier on amount of compute used for exploring search space during training.\n   */\n  compute_multiplier?: 'auto' | number;\n\n  /**\n   * The number of training steps between evaluation runs.\n   */\n  eval_interval?: 'auto' | number;\n\n  /**\n   * Number of evaluation samples to generate per training step.\n   */\n  eval_samples?: 'auto' | number;\n\n  /**\n   * Scaling factor for the learning rate. A smaller learning rate may be useful to\n   * avoid overfitting.\n   */\n  learning_rate_multiplier?: 'auto' | number;\n\n  /**\n   * The number of epochs to train the model for. An epoch refers to one full cycle\n   * through the training dataset.\n   */\n  n_epochs?: 'auto' | number;\n\n  /**\n   * Level of reasoning effort.\n   */\n  reasoning_effort?: 'default' | 'low' | 'medium' | 'high';\n}\n\n/**\n * Configuration for the reinforcement fine-tuning method.\n */\nexport interface ReinforcementMethod {\n  /**\n   * The grader used for the fine-tuning job.\n   */\n  grader:\n    | GraderModelsAPI.StringCheckGrader\n    | GraderModelsAPI.TextSimilarityGrader\n    | GraderModelsAPI.PythonGrader\n    | GraderModelsAPI.ScoreModelGrader\n    | GraderModelsAPI.MultiGrader;\n\n  /**\n   * The hyperparameters used for the reinforcement fine-tuning job.\n   */\n  hyperparameters?: ReinforcementHyperparameters;\n}\n\n/**\n * The hyperparameters used for the fine-tuning job.\n */\nexport interface SupervisedHyperparameters {\n  /**\n   * Number of examples in each batch. A larger batch size means that model\n   * parameters are updated less frequently, but with lower variance.\n   */\n  batch_size?: 'auto' | number;\n\n  /**\n   * Scaling factor for the learning rate. A smaller learning rate may be useful to\n   * avoid overfitting.\n   */\n  learning_rate_multiplier?: 'auto' | number;\n\n  /**\n   * The number of epochs to train the model for. An epoch refers to one full cycle\n   * through the training dataset.\n   */\n  n_epochs?: 'auto' | number;\n}\n\n/**\n * Configuration for the supervised fine-tuning method.\n */\nexport interface SupervisedMethod {\n  /**\n   * The hyperparameters used for the fine-tuning job.\n   */\n  hyperparameters?: SupervisedHyperparameters;\n}\n\nexport declare namespace Methods {\n  export {\n    type DpoHyperparameters as DpoHyperparameters,\n    type DpoMethod as DpoMethod,\n    type ReinforcementHyperparameters as ReinforcementHyperparameters,\n    type ReinforcementMethod as ReinforcementMethod,\n    type SupervisedHyperparameters as SupervisedHyperparameters,\n    type SupervisedMethod as SupervisedMethod,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as GradersAPI from './graders';\nimport {\n  GraderRunParams,\n  GraderRunResponse,\n  GraderValidateParams,\n  GraderValidateResponse,\n  Graders,\n} from './graders';\n\nexport class Alpha extends APIResource {\n  graders: GradersAPI.Graders = new GradersAPI.Graders(this._client);\n}\n\nAlpha.Graders = Graders;\n\nexport declare namespace Alpha {\n  export {\n    Graders as Graders,\n    type GraderRunResponse as GraderRunResponse,\n    type GraderValidateResponse as GraderValidateResponse,\n    type GraderRunParams as GraderRunParams,\n    type GraderValidateParams as GraderValidateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as Core from '../../../core';\nimport * as GraderModelsAPI from '../../graders/grader-models';\n\nexport class Graders extends APIResource {\n  /**\n   * Run a grader.\n   *\n   * @example\n   * ```ts\n   * const response = await client.fineTuning.alpha.graders.run({\n   *   grader: {\n   *     input: 'input',\n   *     name: 'name',\n   *     operation: 'eq',\n   *     reference: 'reference',\n   *     type: 'string_check',\n   *   },\n   *   model_sample: 'model_sample',\n   *   reference_answer: 'string',\n   * });\n   * ```\n   */\n  run(body: GraderRunParams, options?: Core.RequestOptions): Core.APIPromise<GraderRunResponse> {\n    return this._client.post('/fine_tuning/alpha/graders/run', { body, ...options });\n  }\n\n  /**\n   * Validate a grader.\n   *\n   * @example\n   * ```ts\n   * const response =\n   *   await client.fineTuning.alpha.graders.validate({\n   *     grader: {\n   *       input: 'input',\n   *       name: 'name',\n   *       operation: 'eq',\n   *       reference: 'reference',\n   *       type: 'string_check',\n   *     },\n   *   });\n   * ```\n   */\n  validate(\n    body: GraderValidateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<GraderValidateResponse> {\n    return this._client.post('/fine_tuning/alpha/graders/validate', { body, ...options });\n  }\n}\n\nexport interface GraderRunResponse {\n  metadata: GraderRunResponse.Metadata;\n\n  model_grader_token_usage_per_model: Record<string, unknown>;\n\n  reward: number;\n\n  sub_rewards: Record<string, unknown>;\n}\n\nexport namespace GraderRunResponse {\n  export interface Metadata {\n    errors: Metadata.Errors;\n\n    execution_time: number;\n\n    name: string;\n\n    sampled_model_name: string | null;\n\n    scores: Record<string, unknown>;\n\n    token_usage: number | null;\n\n    type: string;\n  }\n\n  export namespace Metadata {\n    export interface Errors {\n      formula_parse_error: boolean;\n\n      invalid_variable_error: boolean;\n\n      model_grader_parse_error: boolean;\n\n      model_grader_refusal_error: boolean;\n\n      model_grader_server_error: boolean;\n\n      model_grader_server_error_details: string | null;\n\n      other_error: boolean;\n\n      python_grader_runtime_error: boolean;\n\n      python_grader_runtime_error_details: string | null;\n\n      python_grader_server_error: boolean;\n\n      python_grader_server_error_type: string | null;\n\n      sample_parse_error: boolean;\n\n      truncated_observation_error: boolean;\n\n      unresponsive_reward_error: boolean;\n    }\n  }\n}\n\nexport interface GraderValidateResponse {\n  /**\n   * The grader used for the fine-tuning job.\n   */\n  grader?:\n    | GraderModelsAPI.StringCheckGrader\n    | GraderModelsAPI.TextSimilarityGrader\n    | GraderModelsAPI.PythonGrader\n    | GraderModelsAPI.ScoreModelGrader\n    | GraderModelsAPI.MultiGrader;\n}\n\nexport interface GraderRunParams {\n  /**\n   * The grader used for the fine-tuning job.\n   */\n  grader:\n    | GraderModelsAPI.StringCheckGrader\n    | GraderModelsAPI.TextSimilarityGrader\n    | GraderModelsAPI.PythonGrader\n    | GraderModelsAPI.ScoreModelGrader\n    | GraderModelsAPI.MultiGrader;\n\n  /**\n   * The model sample to be evaluated.\n   */\n  model_sample: string;\n\n  /**\n   * The reference answer for the evaluation.\n   */\n  reference_answer: string | unknown | Array<unknown> | number;\n}\n\nexport interface GraderValidateParams {\n  /**\n   * The grader used for the fine-tuning job.\n   */\n  grader:\n    | GraderModelsAPI.StringCheckGrader\n    | GraderModelsAPI.TextSimilarityGrader\n    | GraderModelsAPI.PythonGrader\n    | GraderModelsAPI.ScoreModelGrader\n    | GraderModelsAPI.MultiGrader;\n}\n\nexport declare namespace Graders {\n  export {\n    type GraderRunResponse as GraderRunResponse,\n    type GraderValidateResponse as GraderValidateResponse,\n    type GraderRunParams as GraderRunParams,\n    type GraderValidateParams as GraderValidateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport * as PermissionsAPI from './permissions';\nimport {\n  PermissionCreateParams,\n  PermissionCreateResponse,\n  PermissionCreateResponsesPage,\n  PermissionDeleteResponse,\n  PermissionRetrieveParams,\n  PermissionRetrieveResponse,\n  Permissions,\n} from './permissions';\n\nexport class Checkpoints extends APIResource {\n  permissions: PermissionsAPI.Permissions = new PermissionsAPI.Permissions(this._client);\n}\n\nCheckpoints.Permissions = Permissions;\nCheckpoints.PermissionCreateResponsesPage = PermissionCreateResponsesPage;\n\nexport declare namespace Checkpoints {\n  export {\n    Permissions as Permissions,\n    type PermissionCreateResponse as PermissionCreateResponse,\n    type PermissionRetrieveResponse as PermissionRetrieveResponse,\n    type PermissionDeleteResponse as PermissionDeleteResponse,\n    PermissionCreateResponsesPage as PermissionCreateResponsesPage,\n    type PermissionCreateParams as PermissionCreateParams,\n    type PermissionRetrieveParams as PermissionRetrieveParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport { Page } from '../../../pagination';\n\nexport class Permissions extends APIResource {\n  /**\n   * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n   *\n   * This enables organization owners to share fine-tuned models with other projects\n   * in their organization.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const permissionCreateResponse of client.fineTuning.checkpoints.permissions.create(\n   *   'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n   *   { project_ids: ['string'] },\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  create(\n    fineTunedModelCheckpoint: string,\n    body: PermissionCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<PermissionCreateResponsesPage, PermissionCreateResponse> {\n    return this._client.getAPIList(\n      `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`,\n      PermissionCreateResponsesPage,\n      { body, method: 'post', ...options },\n    );\n  }\n\n  /**\n   * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n   *\n   * Organization owners can use this endpoint to view all permissions for a\n   * fine-tuned model checkpoint.\n   *\n   * @example\n   * ```ts\n   * const permission =\n   *   await client.fineTuning.checkpoints.permissions.retrieve(\n   *     'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   *   );\n   * ```\n   */\n  retrieve(\n    fineTunedModelCheckpoint: string,\n    query?: PermissionRetrieveParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<PermissionRetrieveResponse>;\n  retrieve(\n    fineTunedModelCheckpoint: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<PermissionRetrieveResponse>;\n  retrieve(\n    fineTunedModelCheckpoint: string,\n    query: PermissionRetrieveParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<PermissionRetrieveResponse> {\n    if (isRequestOptions(query)) {\n      return this.retrieve(fineTunedModelCheckpoint, {}, query);\n    }\n    return this._client.get(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {\n      query,\n      ...options,\n    });\n  }\n\n  /**\n   * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n   *\n   * Organization owners can use this endpoint to delete a permission for a\n   * fine-tuned model checkpoint.\n   *\n   * @example\n   * ```ts\n   * const permission =\n   *   await client.fineTuning.checkpoints.permissions.del(\n   *     'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n   *     'cp_zc4Q7MP6XxulcVzj4MZdwsAB',\n   *   );\n   * ```\n   */\n  del(\n    fineTunedModelCheckpoint: string,\n    permissionId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<PermissionDeleteResponse> {\n    return this._client.delete(\n      `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions/${permissionId}`,\n      options,\n    );\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class PermissionCreateResponsesPage extends Page<PermissionCreateResponse> {}\n\n/**\n * The `checkpoint.permission` object represents a permission for a fine-tuned\n * model checkpoint.\n */\nexport interface PermissionCreateResponse {\n  /**\n   * The permission identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the permission was created.\n   */\n  created_at: number;\n\n  /**\n   * The object type, which is always \"checkpoint.permission\".\n   */\n  object: 'checkpoint.permission';\n\n  /**\n   * The project identifier that the permission is for.\n   */\n  project_id: string;\n}\n\nexport interface PermissionRetrieveResponse {\n  data: Array<PermissionRetrieveResponse.Data>;\n\n  has_more: boolean;\n\n  object: 'list';\n\n  first_id?: string | null;\n\n  last_id?: string | null;\n}\n\nexport namespace PermissionRetrieveResponse {\n  /**\n   * The `checkpoint.permission` object represents a permission for a fine-tuned\n   * model checkpoint.\n   */\n  export interface Data {\n    /**\n     * The permission identifier, which can be referenced in the API endpoints.\n     */\n    id: string;\n\n    /**\n     * The Unix timestamp (in seconds) for when the permission was created.\n     */\n    created_at: number;\n\n    /**\n     * The object type, which is always \"checkpoint.permission\".\n     */\n    object: 'checkpoint.permission';\n\n    /**\n     * The project identifier that the permission is for.\n     */\n    project_id: string;\n  }\n}\n\nexport interface PermissionDeleteResponse {\n  /**\n   * The ID of the fine-tuned model checkpoint permission that was deleted.\n   */\n  id: string;\n\n  /**\n   * Whether the fine-tuned model checkpoint permission was successfully deleted.\n   */\n  deleted: boolean;\n\n  /**\n   * The object type, which is always \"checkpoint.permission\".\n   */\n  object: 'checkpoint.permission';\n}\n\nexport interface PermissionCreateParams {\n  /**\n   * The project identifiers to grant access to.\n   */\n  project_ids: Array<string>;\n}\n\nexport interface PermissionRetrieveParams {\n  /**\n   * Identifier for the last permission ID from the previous pagination request.\n   */\n  after?: string;\n\n  /**\n   * Number of permissions to retrieve.\n   */\n  limit?: number;\n\n  /**\n   * The order in which to retrieve permissions.\n   */\n  order?: 'ascending' | 'descending';\n\n  /**\n   * The ID of the project to get permissions for.\n   */\n  project_id?: string;\n}\n\nPermissions.PermissionCreateResponsesPage = PermissionCreateResponsesPage;\n\nexport declare namespace Permissions {\n  export {\n    type PermissionCreateResponse as PermissionCreateResponse,\n    type PermissionRetrieveResponse as PermissionRetrieveResponse,\n    type PermissionDeleteResponse as PermissionDeleteResponse,\n    PermissionCreateResponsesPage as PermissionCreateResponsesPage,\n    type PermissionCreateParams as PermissionCreateParams,\n    type PermissionRetrieveParams as PermissionRetrieveParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as MethodsAPI from '../methods';\nimport * as CheckpointsAPI from './checkpoints';\nimport {\n  CheckpointListParams,\n  Checkpoints,\n  FineTuningJobCheckpoint,\n  FineTuningJobCheckpointsPage,\n} from './checkpoints';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class Jobs extends APIResource {\n  checkpoints: CheckpointsAPI.Checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n\n  /**\n   * Creates a fine-tuning job which begins the process of creating a new model from\n   * a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   *\n   * @example\n   * ```ts\n   * const fineTuningJob = await client.fineTuning.jobs.create({\n   *   model: 'gpt-4o-mini',\n   *   training_file: 'file-abc123',\n   * });\n   * ```\n   */\n  create(body: JobCreateParams, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post('/fine_tuning/jobs', { body, ...options });\n  }\n\n  /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   *\n   * @example\n   * ```ts\n   * const fineTuningJob = await client.fineTuning.jobs.retrieve(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * );\n   * ```\n   */\n  retrieve(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n  }\n\n  /**\n   * List your organization's fine-tuning jobs\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const fineTuningJob of client.fineTuning.jobs.list()) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    query?: JobListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(\n    query: JobListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });\n  }\n\n  /**\n   * Immediately cancel a fine-tune job.\n   *\n   * @example\n   * ```ts\n   * const fineTuningJob = await client.fineTuning.jobs.cancel(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * );\n   * ```\n   */\n  cancel(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n  }\n\n  /**\n   * Get status updates for a fine-tuning job.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const fineTuningJobEvent of client.fineTuning.jobs.listEvents(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  listEvents(\n    fineTuningJobId: string,\n    query?: JobListEventsParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    query: JobListEventsParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent> {\n    if (isRequestOptions(query)) {\n      return this.listEvents(fineTuningJobId, {}, query);\n    }\n    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n      query,\n      ...options,\n    });\n  }\n\n  /**\n   * Pause a fine-tune job.\n   *\n   * @example\n   * ```ts\n   * const fineTuningJob = await client.fineTuning.jobs.pause(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * );\n   * ```\n   */\n  pause(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/pause`, options);\n  }\n\n  /**\n   * Resume a fine-tune job.\n   *\n   * @example\n   * ```ts\n   * const fineTuningJob = await client.fineTuning.jobs.resume(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * );\n   * ```\n   */\n  resume(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/resume`, options);\n  }\n}\n\nexport class FineTuningJobsPage extends CursorPage<FineTuningJob> {}\n\nexport class FineTuningJobEventsPage extends CursorPage<FineTuningJobEvent> {}\n\n/**\n * The `fine_tuning.job` object represents a fine-tuning job that has been created\n * through the API.\n */\nexport interface FineTuningJob {\n  /**\n   * The object identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  error: FineTuningJob.Error | null;\n\n  /**\n   * The name of the fine-tuned model that is being created. The value will be null\n   * if the fine-tuning job is still running.\n   */\n  fine_tuned_model: string | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The\n   * value will be null if the fine-tuning job is still running.\n   */\n  finished_at: number | null;\n\n  /**\n   * The hyperparameters used for the fine-tuning job. This value will only be\n   * returned when running `supervised` jobs.\n   */\n  hyperparameters: FineTuningJob.Hyperparameters;\n\n  /**\n   * The base model that is being fine-tuned.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"fine_tuning.job\".\n   */\n  object: 'fine_tuning.job';\n\n  /**\n   * The organization that owns the fine-tuning job.\n   */\n  organization_id: string;\n\n  /**\n   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the\n   * results with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  result_files: Array<string>;\n\n  /**\n   * The seed used for the fine-tuning job.\n   */\n  seed: number;\n\n  /**\n   * The current status of the fine-tuning job, which can be either\n   * `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.\n   */\n  status: 'validating_files' | 'queued' | 'running' | 'succeeded' | 'failed' | 'cancelled';\n\n  /**\n   * The total number of billable tokens processed by this fine-tuning job. The value\n   * will be null if the fine-tuning job is still running.\n   */\n  trained_tokens: number | null;\n\n  /**\n   * The file ID used for training. You can retrieve the training data with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  training_file: string;\n\n  /**\n   * The file ID used for validation. You can retrieve the validation results with\n   * the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  validation_file: string | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job is estimated to\n   * finish. The value will be null if the fine-tuning job is not running.\n   */\n  estimated_finish?: number | null;\n\n  /**\n   * A list of integrations to enable for this fine-tuning job.\n   */\n  integrations?: Array<FineTuningJobWandbIntegrationObject> | null;\n\n  /**\n   * The method used for fine-tuning.\n   */\n  method?: FineTuningJob.Method;\n}\n\nexport namespace FineTuningJob {\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  export interface Error {\n    /**\n     * A machine-readable error code.\n     */\n    code: string;\n\n    /**\n     * A human-readable error message.\n     */\n    message: string;\n\n    /**\n     * The parameter that was invalid, usually `training_file` or `validation_file`.\n     * This field will be null if the failure was not parameter-specific.\n     */\n    param: string | null;\n  }\n\n  /**\n   * The hyperparameters used for the fine-tuning job. This value will only be\n   * returned when running `supervised` jobs.\n   */\n  export interface Hyperparameters {\n    /**\n     * Number of examples in each batch. A larger batch size means that model\n     * parameters are updated less frequently, but with lower variance.\n     */\n    batch_size?: unknown | 'auto' | number | null;\n\n    /**\n     * Scaling factor for the learning rate. A smaller learning rate may be useful to\n     * avoid overfitting.\n     */\n    learning_rate_multiplier?: 'auto' | number;\n\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs?: 'auto' | number;\n  }\n\n  /**\n   * The method used for fine-tuning.\n   */\n  export interface Method {\n    /**\n     * The type of method. Is either `supervised`, `dpo`, or `reinforcement`.\n     */\n    type: 'supervised' | 'dpo' | 'reinforcement';\n\n    /**\n     * Configuration for the DPO fine-tuning method.\n     */\n    dpo?: MethodsAPI.DpoMethod;\n\n    /**\n     * Configuration for the reinforcement fine-tuning method.\n     */\n    reinforcement?: MethodsAPI.ReinforcementMethod;\n\n    /**\n     * Configuration for the supervised fine-tuning method.\n     */\n    supervised?: MethodsAPI.SupervisedMethod;\n  }\n}\n\n/**\n * Fine-tuning job event object\n */\nexport interface FineTuningJobEvent {\n  /**\n   * The object identifier.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * The log level of the event.\n   */\n  level: 'info' | 'warn' | 'error';\n\n  /**\n   * The message of the event.\n   */\n  message: string;\n\n  /**\n   * The object type, which is always \"fine_tuning.job.event\".\n   */\n  object: 'fine_tuning.job.event';\n\n  /**\n   * The data associated with the event.\n   */\n  data?: unknown;\n\n  /**\n   * The type of event.\n   */\n  type?: 'message' | 'metrics';\n}\n\nexport type FineTuningJobIntegration = FineTuningJobWandbIntegrationObject;\n\n/**\n * The settings for your integration with Weights and Biases. This payload\n * specifies the project that metrics will be sent to. Optionally, you can set an\n * explicit display name for your run, add tags to your run, and set a default\n * entity (team, username, etc) to be associated with your run.\n */\nexport interface FineTuningJobWandbIntegration {\n  /**\n   * The name of the project that the new run will be created under.\n   */\n  project: string;\n\n  /**\n   * The entity to use for the run. This allows you to set the team or username of\n   * the WandB user that you would like associated with the run. If not set, the\n   * default entity for the registered WandB API key is used.\n   */\n  entity?: string | null;\n\n  /**\n   * A display name to set for the run. If not set, we will use the Job ID as the\n   * name.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tags to be attached to the newly created run. These tags are passed\n   * through directly to WandB. Some default tags are generated by OpenAI:\n   * \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n   */\n  tags?: Array<string>;\n}\n\nexport interface FineTuningJobWandbIntegrationObject {\n  /**\n   * The type of the integration being enabled for the fine-tuning job\n   */\n  type: 'wandb';\n\n  /**\n   * The settings for your integration with Weights and Biases. This payload\n   * specifies the project that metrics will be sent to. Optionally, you can set an\n   * explicit display name for your run, add tags to your run, and set a default\n   * entity (team, username, etc) to be associated with your run.\n   */\n  wandb: FineTuningJobWandbIntegration;\n}\n\nexport interface JobCreateParams {\n  /**\n   * The name of the model to fine-tune. You can select one of the\n   * [supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n   */\n  model: (string & {}) | 'babbage-002' | 'davinci-002' | 'gpt-3.5-turbo' | 'gpt-4o-mini';\n\n  /**\n   * The ID of an uploaded file that contains training data.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n   * for how to upload a file.\n   *\n   * Your dataset must be formatted as a JSONL file. Additionally, you must upload\n   * your file with the purpose `fine-tune`.\n   *\n   * The contents of the file should differ depending on if the model uses the\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input),\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * format, or if the fine-tuning method uses the\n   * [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input)\n   * format.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  training_file: string;\n\n  /**\n   * @deprecated The hyperparameters used for the fine-tuning job. This value is now\n   * deprecated in favor of `method`, and should be passed in under the `method`\n   * parameter.\n   */\n  hyperparameters?: JobCreateParams.Hyperparameters;\n\n  /**\n   * A list of integrations to enable for your fine-tuning job.\n   */\n  integrations?: Array<JobCreateParams.Integration> | null;\n\n  /**\n   * The method used for fine-tuning.\n   */\n  method?: JobCreateParams.Method;\n\n  /**\n   * The seed controls the reproducibility of the job. Passing in the same seed and\n   * job parameters should produce the same results, but may differ in rare cases. If\n   * a seed is not specified, one will be generated for you.\n   */\n  seed?: number | null;\n\n  /**\n   * A string of up to 64 characters that will be added to your fine-tuned model\n   * name.\n   *\n   * For example, a `suffix` of \"custom-model-name\" would produce a model name like\n   * `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n   */\n  suffix?: string | null;\n\n  /**\n   * The ID of an uploaded file that contains validation data.\n   *\n   * If you provide this file, the data is used to generate validation metrics\n   * periodically during fine-tuning. These metrics can be viewed in the fine-tuning\n   * results file. The same data should not be present in both train and validation\n   * files.\n   *\n   * Your dataset must be formatted as a JSONL file. You must upload your file with\n   * the purpose `fine-tune`.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  validation_file?: string | null;\n}\n\nexport namespace JobCreateParams {\n  /**\n   * @deprecated The hyperparameters used for the fine-tuning job. This value is now\n   * deprecated in favor of `method`, and should be passed in under the `method`\n   * parameter.\n   */\n  export interface Hyperparameters {\n    /**\n     * Number of examples in each batch. A larger batch size means that model\n     * parameters are updated less frequently, but with lower variance.\n     */\n    batch_size?: 'auto' | number;\n\n    /**\n     * Scaling factor for the learning rate. A smaller learning rate may be useful to\n     * avoid overfitting.\n     */\n    learning_rate_multiplier?: 'auto' | number;\n\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs?: 'auto' | number;\n  }\n\n  export interface Integration {\n    /**\n     * The type of integration to enable. Currently, only \"wandb\" (Weights and Biases)\n     * is supported.\n     */\n    type: 'wandb';\n\n    /**\n     * The settings for your integration with Weights and Biases. This payload\n     * specifies the project that metrics will be sent to. Optionally, you can set an\n     * explicit display name for your run, add tags to your run, and set a default\n     * entity (team, username, etc) to be associated with your run.\n     */\n    wandb: Integration.Wandb;\n  }\n\n  export namespace Integration {\n    /**\n     * The settings for your integration with Weights and Biases. This payload\n     * specifies the project that metrics will be sent to. Optionally, you can set an\n     * explicit display name for your run, add tags to your run, and set a default\n     * entity (team, username, etc) to be associated with your run.\n     */\n    export interface Wandb {\n      /**\n       * The name of the project that the new run will be created under.\n       */\n      project: string;\n\n      /**\n       * The entity to use for the run. This allows you to set the team or username of\n       * the WandB user that you would like associated with the run. If not set, the\n       * default entity for the registered WandB API key is used.\n       */\n      entity?: string | null;\n\n      /**\n       * A display name to set for the run. If not set, we will use the Job ID as the\n       * name.\n       */\n      name?: string | null;\n\n      /**\n       * A list of tags to be attached to the newly created run. These tags are passed\n       * through directly to WandB. Some default tags are generated by OpenAI:\n       * \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n       */\n      tags?: Array<string>;\n    }\n  }\n\n  /**\n   * The method used for fine-tuning.\n   */\n  export interface Method {\n    /**\n     * The type of method. Is either `supervised`, `dpo`, or `reinforcement`.\n     */\n    type: 'supervised' | 'dpo' | 'reinforcement';\n\n    /**\n     * Configuration for the DPO fine-tuning method.\n     */\n    dpo?: MethodsAPI.DpoMethod;\n\n    /**\n     * Configuration for the reinforcement fine-tuning method.\n     */\n    reinforcement?: MethodsAPI.ReinforcementMethod;\n\n    /**\n     * Configuration for the supervised fine-tuning method.\n     */\n    supervised?: MethodsAPI.SupervisedMethod;\n  }\n}\n\nexport interface JobListParams extends CursorPageParams {}\n\nexport interface JobListEventsParams extends CursorPageParams {}\n\nJobs.FineTuningJobsPage = FineTuningJobsPage;\nJobs.FineTuningJobEventsPage = FineTuningJobEventsPage;\nJobs.Checkpoints = Checkpoints;\nJobs.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;\n\nexport declare namespace Jobs {\n  export {\n    type FineTuningJob as FineTuningJob,\n    type FineTuningJobEvent as FineTuningJobEvent,\n    type FineTuningJobIntegration as FineTuningJobIntegration,\n    type FineTuningJobWandbIntegration as FineTuningJobWandbIntegration,\n    type FineTuningJobWandbIntegrationObject as FineTuningJobWandbIntegrationObject,\n    FineTuningJobsPage as FineTuningJobsPage,\n    FineTuningJobEventsPage as FineTuningJobEventsPage,\n    type JobCreateParams as JobCreateParams,\n    type JobListParams as JobListParams,\n    type JobListEventsParams as JobListEventsParams,\n  };\n\n  export {\n    Checkpoints as Checkpoints,\n    type FineTuningJobCheckpoint as FineTuningJobCheckpoint,\n    FineTuningJobCheckpointsPage as FineTuningJobCheckpointsPage,\n    type CheckpointListParams as CheckpointListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class Checkpoints extends APIResource {\n  /**\n   * List checkpoints for a fine-tuning job.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const fineTuningJobCheckpoint of client.fineTuning.jobs.checkpoints.list(\n   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    fineTuningJobId: string,\n    query?: CheckpointListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobCheckpointsPage, FineTuningJobCheckpoint>;\n  list(\n    fineTuningJobId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobCheckpointsPage, FineTuningJobCheckpoint>;\n  list(\n    fineTuningJobId: string,\n    query: CheckpointListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobCheckpointsPage, FineTuningJobCheckpoint> {\n    if (isRequestOptions(query)) {\n      return this.list(fineTuningJobId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/fine_tuning/jobs/${fineTuningJobId}/checkpoints`,\n      FineTuningJobCheckpointsPage,\n      { query, ...options },\n    );\n  }\n}\n\nexport class FineTuningJobCheckpointsPage extends CursorPage<FineTuningJobCheckpoint> {}\n\n/**\n * The `fine_tuning.job.checkpoint` object represents a model checkpoint for a\n * fine-tuning job that is ready to use.\n */\nexport interface FineTuningJobCheckpoint {\n  /**\n   * The checkpoint identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the checkpoint was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the fine-tuned checkpoint model that is created.\n   */\n  fine_tuned_model_checkpoint: string;\n\n  /**\n   * The name of the fine-tuning job that this checkpoint was created from.\n   */\n  fine_tuning_job_id: string;\n\n  /**\n   * Metrics at the step number during the fine-tuning job.\n   */\n  metrics: FineTuningJobCheckpoint.Metrics;\n\n  /**\n   * The object type, which is always \"fine_tuning.job.checkpoint\".\n   */\n  object: 'fine_tuning.job.checkpoint';\n\n  /**\n   * The step number that the checkpoint was created at.\n   */\n  step_number: number;\n}\n\nexport namespace FineTuningJobCheckpoint {\n  /**\n   * Metrics at the step number during the fine-tuning job.\n   */\n  export interface Metrics {\n    full_valid_loss?: number;\n\n    full_valid_mean_token_accuracy?: number;\n\n    step?: number;\n\n    train_loss?: number;\n\n    train_mean_token_accuracy?: number;\n\n    valid_loss?: number;\n\n    valid_mean_token_accuracy?: number;\n  }\n}\n\nexport interface CheckpointListParams extends CursorPageParams {}\n\nCheckpoints.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;\n\nexport declare namespace Checkpoints {\n  export {\n    type FineTuningJobCheckpoint as FineTuningJobCheckpoint,\n    FineTuningJobCheckpointsPage as FineTuningJobCheckpointsPage,\n    type CheckpointListParams as CheckpointListParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as GraderModelsAPI from './grader-models';\nimport {\n  GraderModels,\n  LabelModelGrader,\n  MultiGrader,\n  PythonGrader,\n  ScoreModelGrader,\n  StringCheckGrader,\n  TextSimilarityGrader,\n} from './grader-models';\n\nexport class Graders extends APIResource {\n  graderModels: GraderModelsAPI.GraderModels = new GraderModelsAPI.GraderModels(this._client);\n}\n\nGraders.GraderModels = GraderModels;\n\nexport declare namespace Graders {\n  export {\n    GraderModels as GraderModels,\n    type LabelModelGrader as LabelModelGrader,\n    type MultiGrader as MultiGrader,\n    type PythonGrader as PythonGrader,\n    type ScoreModelGrader as ScoreModelGrader,\n    type StringCheckGrader as StringCheckGrader,\n    type TextSimilarityGrader as TextSimilarityGrader,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as ResponsesAPI from '../responses/responses';\n\nexport class GraderModels extends APIResource {}\n\n/**\n * A LabelModelGrader object which uses a model to assign labels to each item in\n * the evaluation.\n */\nexport interface LabelModelGrader {\n  input: Array<LabelModelGrader.Input>;\n\n  /**\n   * The labels to assign to each item in the evaluation.\n   */\n  labels: Array<string>;\n\n  /**\n   * The model to use for the evaluation. Must support structured outputs.\n   */\n  model: string;\n\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The labels that indicate a passing result. Must be a subset of labels.\n   */\n  passing_labels: Array<string>;\n\n  /**\n   * The object type, which is always `label_model`.\n   */\n  type: 'label_model';\n}\n\nexport namespace LabelModelGrader {\n  /**\n   * A message input to the model with a role indicating instruction following\n   * hierarchy. Instructions given with the `developer` or `system` role take\n   * precedence over instructions given with the `user` role. Messages with the\n   * `assistant` role are presumed to have been generated by the model in previous\n   * interactions.\n   */\n  export interface Input {\n    /**\n     * Text inputs to the model - can contain template strings.\n     */\n    content: string | ResponsesAPI.ResponseInputText | Input.OutputText;\n\n    /**\n     * The role of the message input. One of `user`, `assistant`, `system`, or\n     * `developer`.\n     */\n    role: 'user' | 'assistant' | 'system' | 'developer';\n\n    /**\n     * The type of the message input. Always `message`.\n     */\n    type?: 'message';\n  }\n\n  export namespace Input {\n    /**\n     * A text output from the model.\n     */\n    export interface OutputText {\n      /**\n       * The text output from the model.\n       */\n      text: string;\n\n      /**\n       * The type of the output text. Always `output_text`.\n       */\n      type: 'output_text';\n    }\n  }\n}\n\n/**\n * A MultiGrader object combines the output of multiple graders to produce a single\n * score.\n */\nexport interface MultiGrader {\n  /**\n   * A formula to calculate the output based on grader results.\n   */\n  calculate_output: string;\n\n  graders: Record<\n    string,\n    StringCheckGrader | TextSimilarityGrader | PythonGrader | ScoreModelGrader | LabelModelGrader\n  >;\n\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The object type, which is always `multi`.\n   */\n  type: 'multi';\n}\n\n/**\n * A PythonGrader object that runs a python script on the input.\n */\nexport interface PythonGrader {\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The source code of the python script.\n   */\n  source: string;\n\n  /**\n   * The object type, which is always `python`.\n   */\n  type: 'python';\n\n  /**\n   * The image tag to use for the python script.\n   */\n  image_tag?: string;\n}\n\n/**\n * A ScoreModelGrader object that uses a model to assign a score to the input.\n */\nexport interface ScoreModelGrader {\n  /**\n   * The input text. This may include template strings.\n   */\n  input: Array<ScoreModelGrader.Input>;\n\n  /**\n   * The model to use for the evaluation.\n   */\n  model: string;\n\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The object type, which is always `score_model`.\n   */\n  type: 'score_model';\n\n  /**\n   * The range of the score. Defaults to `[0, 1]`.\n   */\n  range?: Array<number>;\n\n  /**\n   * The sampling parameters for the model.\n   */\n  sampling_params?: unknown;\n}\n\nexport namespace ScoreModelGrader {\n  /**\n   * A message input to the model with a role indicating instruction following\n   * hierarchy. Instructions given with the `developer` or `system` role take\n   * precedence over instructions given with the `user` role. Messages with the\n   * `assistant` role are presumed to have been generated by the model in previous\n   * interactions.\n   */\n  export interface Input {\n    /**\n     * Text inputs to the model - can contain template strings.\n     */\n    content: string | ResponsesAPI.ResponseInputText | Input.OutputText;\n\n    /**\n     * The role of the message input. One of `user`, `assistant`, `system`, or\n     * `developer`.\n     */\n    role: 'user' | 'assistant' | 'system' | 'developer';\n\n    /**\n     * The type of the message input. Always `message`.\n     */\n    type?: 'message';\n  }\n\n  export namespace Input {\n    /**\n     * A text output from the model.\n     */\n    export interface OutputText {\n      /**\n       * The text output from the model.\n       */\n      text: string;\n\n      /**\n       * The type of the output text. Always `output_text`.\n       */\n      type: 'output_text';\n    }\n  }\n}\n\n/**\n * A StringCheckGrader object that performs a string comparison between input and\n * reference using a specified operation.\n */\nexport interface StringCheckGrader {\n  /**\n   * The input text. This may include template strings.\n   */\n  input: string;\n\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.\n   */\n  operation: 'eq' | 'ne' | 'like' | 'ilike';\n\n  /**\n   * The reference text. This may include template strings.\n   */\n  reference: string;\n\n  /**\n   * The object type, which is always `string_check`.\n   */\n  type: 'string_check';\n}\n\n/**\n * A TextSimilarityGrader object which grades text based on similarity metrics.\n */\nexport interface TextSimilarityGrader {\n  /**\n   * The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`,\n   * `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.\n   */\n  evaluation_metric:\n    | 'fuzzy_match'\n    | 'bleu'\n    | 'gleu'\n    | 'meteor'\n    | 'rouge_1'\n    | 'rouge_2'\n    | 'rouge_3'\n    | 'rouge_4'\n    | 'rouge_5'\n    | 'rouge_l';\n\n  /**\n   * The text being graded.\n   */\n  input: string;\n\n  /**\n   * The name of the grader.\n   */\n  name: string;\n\n  /**\n   * The text being graded against.\n   */\n  reference: string;\n\n  /**\n   * The type of grader.\n   */\n  type: 'text_similarity';\n}\n\nexport declare namespace GraderModels {\n  export {\n    type LabelModelGrader as LabelModelGrader,\n    type MultiGrader as MultiGrader,\n    type PythonGrader as PythonGrader,\n    type ScoreModelGrader as ScoreModelGrader,\n    type StringCheckGrader as StringCheckGrader,\n    type TextSimilarityGrader as TextSimilarityGrader,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport * as Core from '../core';\n\nexport class Images extends APIResource {\n  /**\n   * Creates a variation of a given image. This endpoint only supports `dall-e-2`.\n   *\n   * @example\n   * ```ts\n   * const imagesResponse = await client.images.createVariation({\n   *   image: fs.createReadStream('otter.png'),\n   * });\n   * ```\n   */\n  createVariation(\n    body: ImageCreateVariationParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/variations', Core.multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an edited or extended image given one or more source images and a\n   * prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.\n   *\n   * @example\n   * ```ts\n   * const imagesResponse = await client.images.edit({\n   *   image: fs.createReadStream('path/to/file'),\n   *   prompt: 'A cute baby sea otter wearing a beret',\n   * });\n   * ```\n   */\n  edit(body: ImageEditParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/edits', Core.multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an image given a prompt.\n   * [Learn more](https://platform.openai.com/docs/guides/images).\n   *\n   * @example\n   * ```ts\n   * const imagesResponse = await client.images.generate({\n   *   prompt: 'A cute baby sea otter',\n   * });\n   * ```\n   */\n  generate(body: ImageGenerateParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/generations', { body, ...options });\n  }\n}\n\n/**\n * Represents the content or the URL of an image generated by the OpenAI API.\n */\nexport interface Image {\n  /**\n   * The base64-encoded JSON of the generated image. Default value for `gpt-image-1`,\n   * and only present if `response_format` is set to `b64_json` for `dall-e-2` and\n   * `dall-e-3`.\n   */\n  b64_json?: string;\n\n  /**\n   * For `dall-e-3` only, the revised prompt that was used to generate the image.\n   */\n  revised_prompt?: string;\n\n  /**\n   * When using `dall-e-2` or `dall-e-3`, the URL of the generated image if\n   * `response_format` is set to `url` (default value). Unsupported for\n   * `gpt-image-1`.\n   */\n  url?: string;\n}\n\nexport type ImageModel = 'dall-e-2' | 'dall-e-3' | 'gpt-image-1';\n\n/**\n * The response from the image generation endpoint.\n */\nexport interface ImagesResponse {\n  /**\n   * The Unix timestamp (in seconds) of when the image was created.\n   */\n  created: number;\n\n  /**\n   * The list of generated images.\n   */\n  data?: Array<Image>;\n\n  /**\n   * For `gpt-image-1` only, the token usage information for the image generation.\n   */\n  usage?: ImagesResponse.Usage;\n}\n\nexport namespace ImagesResponse {\n  /**\n   * For `gpt-image-1` only, the token usage information for the image generation.\n   */\n  export interface Usage {\n    /**\n     * The number of tokens (images and text) in the input prompt.\n     */\n    input_tokens: number;\n\n    /**\n     * The input tokens detailed information for the image generation.\n     */\n    input_tokens_details: Usage.InputTokensDetails;\n\n    /**\n     * The number of image tokens in the output image.\n     */\n    output_tokens: number;\n\n    /**\n     * The total number of tokens (images and text) used for the image generation.\n     */\n    total_tokens: number;\n  }\n\n  export namespace Usage {\n    /**\n     * The input tokens detailed information for the image generation.\n     */\n    export interface InputTokensDetails {\n      /**\n       * The number of image tokens in the input prompt.\n       */\n      image_tokens: number;\n\n      /**\n       * The number of text tokens in the input prompt.\n       */\n      text_tokens: number;\n    }\n  }\n}\n\nexport interface ImageCreateVariationParams {\n  /**\n   * The image to use as the basis for the variation(s). Must be a valid PNG file,\n   * less than 4MB, and square.\n   */\n  image: Core.Uploadable;\n\n  /**\n   * The model to use for image generation. Only `dall-e-2` is supported at this\n   * time.\n   */\n  model?: (string & {}) | ImageModel | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`. URLs are only valid for 60 minutes after the image has been\n   * generated.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageEditParams {\n  /**\n   * The image(s) to edit. Must be a supported image file or an array of images.\n   *\n   * For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less than\n   * 25MB. You can provide up to 16 images.\n   *\n   * For `dall-e-2`, you can only provide one image, and it should be a square `png`\n   * file less than 4MB.\n   */\n  image: Core.Uploadable | Array<Core.Uploadable>;\n\n  /**\n   * A text description of the desired image(s). The maximum length is 1000\n   * characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.\n   */\n  prompt: string;\n\n  /**\n   * Allows to set transparency for the background of the generated image(s). This\n   * parameter is only supported for `gpt-image-1`. Must be one of `transparent`,\n   * `opaque` or `auto` (default value). When `auto` is used, the model will\n   * automatically determine the best background for the image.\n   *\n   * If `transparent`, the output format needs to support transparency, so it should\n   * be set to either `png` (default value) or `webp`.\n   */\n  background?: 'transparent' | 'opaque' | 'auto' | null;\n\n  /**\n   * An additional image whose fully transparent areas (e.g. where alpha is zero)\n   * indicate where `image` should be edited. If there are multiple images provided,\n   * the mask will be applied on the first image. Must be a valid PNG file, less than\n   * 4MB, and have the same dimensions as `image`.\n   */\n  mask?: Core.Uploadable;\n\n  /**\n   * The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are\n   * supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1`\n   * is used.\n   */\n  model?: (string & {}) | ImageModel | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The quality of the image that will be generated. `high`, `medium` and `low` are\n   * only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality.\n   * Defaults to `auto`.\n   */\n  quality?: 'standard' | 'low' | 'medium' | 'high' | 'auto' | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`. URLs are only valid for 60 minutes after the image has been\n   * generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1`\n   * will always return base64-encoded images.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `1024x1024`, `1536x1024`\n   * (landscape), `1024x1536` (portrait), or `auto` (default value) for\n   * `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | '1536x1024' | '1024x1536' | 'auto' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageGenerateParams {\n  /**\n   * A text description of the desired image(s). The maximum length is 32000\n   * characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters\n   * for `dall-e-3`.\n   */\n  prompt: string;\n\n  /**\n   * Allows to set transparency for the background of the generated image(s). This\n   * parameter is only supported for `gpt-image-1`. Must be one of `transparent`,\n   * `opaque` or `auto` (default value). When `auto` is used, the model will\n   * automatically determine the best background for the image.\n   *\n   * If `transparent`, the output format needs to support transparency, so it should\n   * be set to either `png` (default value) or `webp`.\n   */\n  background?: 'transparent' | 'opaque' | 'auto' | null;\n\n  /**\n   * The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or\n   * `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to\n   * `gpt-image-1` is used.\n   */\n  model?: (string & {}) | ImageModel | null;\n\n  /**\n   * Control the content-moderation level for images generated by `gpt-image-1`. Must\n   * be either `low` for less restrictive filtering or `auto` (default value).\n   */\n  moderation?: 'low' | 'auto' | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only\n   * `n=1` is supported.\n   */\n  n?: number | null;\n\n  /**\n   * The compression level (0-100%) for the generated images. This parameter is only\n   * supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and\n   * defaults to 100.\n   */\n  output_compression?: number | null;\n\n  /**\n   * The format in which the generated images are returned. This parameter is only\n   * supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.\n   */\n  output_format?: 'png' | 'jpeg' | 'webp' | null;\n\n  /**\n   * The quality of the image that will be generated.\n   *\n   * - `auto` (default value) will automatically select the best quality for the\n   *   given model.\n   * - `high`, `medium` and `low` are supported for `gpt-image-1`.\n   * - `hd` and `standard` are supported for `dall-e-3`.\n   * - `standard` is the only option for `dall-e-2`.\n   */\n  quality?: 'standard' | 'hd' | 'low' | 'medium' | 'high' | 'auto' | null;\n\n  /**\n   * The format in which generated images with `dall-e-2` and `dall-e-3` are\n   * returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes\n   * after the image has been generated. This parameter isn't supported for\n   * `gpt-image-1` which will always return base64-encoded images.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `1024x1024`, `1536x1024`\n   * (landscape), `1024x1536` (portrait), or `auto` (default value) for\n   * `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and\n   * one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.\n   */\n  size?:\n    | 'auto'\n    | '1024x1024'\n    | '1536x1024'\n    | '1024x1536'\n    | '256x256'\n    | '512x512'\n    | '1792x1024'\n    | '1024x1792'\n    | null;\n\n  /**\n   * The style of the generated images. This parameter is only supported for\n   * `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean\n   * towards generating hyper-real and dramatic images. Natural causes the model to\n   * produce more natural, less hyper-real looking images.\n   */\n  style?: 'vivid' | 'natural' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport declare namespace Images {\n  export {\n    type Image as Image,\n    type ImageModel as ImageModel,\n    type ImagesResponse as ImagesResponse,\n    type ImageCreateVariationParams as ImageCreateVariationParams,\n    type ImageEditParams as ImageEditParams,\n    type ImageGenerateParams as ImageGenerateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport * as Core from '../core';\nimport { Page } from '../pagination';\n\nexport class Models extends APIResource {\n  /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */\n  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model> {\n    return this._client.get(`/models/${model}`, options);\n  }\n\n  /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<ModelsPage, Model> {\n    return this._client.getAPIList('/models', ModelsPage, options);\n  }\n\n  /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization to\n   * delete a model.\n   */\n  del(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted> {\n    return this._client.delete(`/models/${model}`, options);\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class ModelsPage extends Page<Model> {}\n\n/**\n * Describes an OpenAI model offering that can be used with the API.\n */\nexport interface Model {\n  /**\n   * The model identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) when the model was created.\n   */\n  created: number;\n\n  /**\n   * The object type, which is always \"model\".\n   */\n  object: 'model';\n\n  /**\n   * The organization that owns the model.\n   */\n  owned_by: string;\n}\n\nexport interface ModelDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: string;\n}\n\nModels.ModelsPage = ModelsPage;\n\nexport declare namespace Models {\n  export { type Model as Model, type ModelDeleted as ModelDeleted, ModelsPage as ModelsPage };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport * as Core from '../core';\n\nexport class Moderations extends APIResource {\n  /**\n   * Classifies if text and/or image inputs are potentially harmful. Learn more in\n   * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n   */\n  create(\n    body: ModerationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ModerationCreateResponse> {\n    return this._client.post('/moderations', { body, ...options });\n  }\n}\n\nexport interface Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  categories: Moderation.Categories;\n\n  /**\n   * A list of the categories along with the input type(s) that the score applies to.\n   */\n  category_applied_input_types: Moderation.CategoryAppliedInputTypes;\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  category_scores: Moderation.CategoryScores;\n\n  /**\n   * Whether any of the below categories are flagged.\n   */\n  flagged: boolean;\n}\n\nexport namespace Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  export interface Categories {\n    /**\n     * Content that expresses, incites, or promotes harassing language towards any\n     * target.\n     */\n    harassment: boolean;\n\n    /**\n     * Harassment content that also includes violence or serious harm towards any\n     * target.\n     */\n    'harassment/threatening': boolean;\n\n    /**\n     * Content that expresses, incites, or promotes hate based on race, gender,\n     * ethnicity, religion, nationality, sexual orientation, disability status, or\n     * caste. Hateful content aimed at non-protected groups (e.g., chess players) is\n     * harassment.\n     */\n    hate: boolean;\n\n    /**\n     * Hateful content that also includes violence or serious harm towards the targeted\n     * group based on race, gender, ethnicity, religion, nationality, sexual\n     * orientation, disability status, or caste.\n     */\n    'hate/threatening': boolean;\n\n    /**\n     * Content that includes instructions or advice that facilitate the planning or\n     * execution of wrongdoing, or that gives advice or instruction on how to commit\n     * illicit acts. For example, \"how to shoplift\" would fit this category.\n     */\n    illicit: boolean | null;\n\n    /**\n     * Content that includes instructions or advice that facilitate the planning or\n     * execution of wrongdoing that also includes violence, or that gives advice or\n     * instruction on the procurement of any weapon.\n     */\n    'illicit/violent': boolean | null;\n\n    /**\n     * Content that promotes, encourages, or depicts acts of self-harm, such as\n     * suicide, cutting, and eating disorders.\n     */\n    'self-harm': boolean;\n\n    /**\n     * Content that encourages performing acts of self-harm, such as suicide, cutting,\n     * and eating disorders, or that gives instructions or advice on how to commit such\n     * acts.\n     */\n    'self-harm/instructions': boolean;\n\n    /**\n     * Content where the speaker expresses that they are engaging or intend to engage\n     * in acts of self-harm, such as suicide, cutting, and eating disorders.\n     */\n    'self-harm/intent': boolean;\n\n    /**\n     * Content meant to arouse sexual excitement, such as the description of sexual\n     * activity, or that promotes sexual services (excluding sex education and\n     * wellness).\n     */\n    sexual: boolean;\n\n    /**\n     * Sexual content that includes an individual who is under 18 years old.\n     */\n    'sexual/minors': boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury.\n     */\n    violence: boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury in graphic detail.\n     */\n    'violence/graphic': boolean;\n  }\n\n  /**\n   * A list of the categories along with the input type(s) that the score applies to.\n   */\n  export interface CategoryAppliedInputTypes {\n    /**\n     * The applied input type(s) for the category 'harassment'.\n     */\n    harassment: Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'harassment/threatening'.\n     */\n    'harassment/threatening': Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'hate'.\n     */\n    hate: Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'hate/threatening'.\n     */\n    'hate/threatening': Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'illicit'.\n     */\n    illicit: Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'illicit/violent'.\n     */\n    'illicit/violent': Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'self-harm'.\n     */\n    'self-harm': Array<'text' | 'image'>;\n\n    /**\n     * The applied input type(s) for the category 'self-harm/instructions'.\n     */\n    'self-harm/instructions': Array<'text' | 'image'>;\n\n    /**\n     * The applied input type(s) for the category 'self-harm/intent'.\n     */\n    'self-harm/intent': Array<'text' | 'image'>;\n\n    /**\n     * The applied input type(s) for the category 'sexual'.\n     */\n    sexual: Array<'text' | 'image'>;\n\n    /**\n     * The applied input type(s) for the category 'sexual/minors'.\n     */\n    'sexual/minors': Array<'text'>;\n\n    /**\n     * The applied input type(s) for the category 'violence'.\n     */\n    violence: Array<'text' | 'image'>;\n\n    /**\n     * The applied input type(s) for the category 'violence/graphic'.\n     */\n    'violence/graphic': Array<'text' | 'image'>;\n  }\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  export interface CategoryScores {\n    /**\n     * The score for the category 'harassment'.\n     */\n    harassment: number;\n\n    /**\n     * The score for the category 'harassment/threatening'.\n     */\n    'harassment/threatening': number;\n\n    /**\n     * The score for the category 'hate'.\n     */\n    hate: number;\n\n    /**\n     * The score for the category 'hate/threatening'.\n     */\n    'hate/threatening': number;\n\n    /**\n     * The score for the category 'illicit'.\n     */\n    illicit: number;\n\n    /**\n     * The score for the category 'illicit/violent'.\n     */\n    'illicit/violent': number;\n\n    /**\n     * The score for the category 'self-harm'.\n     */\n    'self-harm': number;\n\n    /**\n     * The score for the category 'self-harm/instructions'.\n     */\n    'self-harm/instructions': number;\n\n    /**\n     * The score for the category 'self-harm/intent'.\n     */\n    'self-harm/intent': number;\n\n    /**\n     * The score for the category 'sexual'.\n     */\n    sexual: number;\n\n    /**\n     * The score for the category 'sexual/minors'.\n     */\n    'sexual/minors': number;\n\n    /**\n     * The score for the category 'violence'.\n     */\n    violence: number;\n\n    /**\n     * The score for the category 'violence/graphic'.\n     */\n    'violence/graphic': number;\n  }\n}\n\n/**\n * An object describing an image to classify.\n */\nexport interface ModerationImageURLInput {\n  /**\n   * Contains either an image URL or a data URL for a base64 encoded image.\n   */\n  image_url: ModerationImageURLInput.ImageURL;\n\n  /**\n   * Always `image_url`.\n   */\n  type: 'image_url';\n}\n\nexport namespace ModerationImageURLInput {\n  /**\n   * Contains either an image URL or a data URL for a base64 encoded image.\n   */\n  export interface ImageURL {\n    /**\n     * Either a URL of the image or the base64 encoded image data.\n     */\n    url: string;\n  }\n}\n\nexport type ModerationModel =\n  | 'omni-moderation-latest'\n  | 'omni-moderation-2024-09-26'\n  | 'text-moderation-latest'\n  | 'text-moderation-stable';\n\n/**\n * An object describing an image to classify.\n */\nexport type ModerationMultiModalInput = ModerationImageURLInput | ModerationTextInput;\n\n/**\n * An object describing text to classify.\n */\nexport interface ModerationTextInput {\n  /**\n   * A string of text to classify.\n   */\n  text: string;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n}\n\n/**\n * Represents if a given text input is potentially harmful.\n */\nexport interface ModerationCreateResponse {\n  /**\n   * The unique identifier for the moderation request.\n   */\n  id: string;\n\n  /**\n   * The model used to generate the moderation results.\n   */\n  model: string;\n\n  /**\n   * A list of moderation objects.\n   */\n  results: Array<Moderation>;\n}\n\nexport interface ModerationCreateParams {\n  /**\n   * Input (or inputs) to classify. Can be a single string, an array of strings, or\n   * an array of multi-modal input objects similar to other models.\n   */\n  input: string | Array<string> | Array<ModerationMultiModalInput>;\n\n  /**\n   * The content moderation model you would like to use. Learn more in\n   * [the moderation guide](https://platform.openai.com/docs/guides/moderation), and\n   * learn about available models\n   * [here](https://platform.openai.com/docs/models#moderation).\n   */\n  model?: (string & {}) | ModerationModel;\n}\n\nexport declare namespace Moderations {\n  export {\n    type Moderation as Moderation,\n    type ModerationImageURLInput as ModerationImageURLInput,\n    type ModerationModel as ModerationModel,\n    type ModerationMultiModalInput as ModerationMultiModalInput,\n    type ModerationTextInput as ModerationTextInput,\n    type ModerationCreateResponse as ModerationCreateResponse,\n    type ModerationCreateParams as ModerationCreateParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport {\n  type ExtractParsedContentFromParams,\n  parseResponse,\n  type ResponseCreateParamsWithTools,\n  addOutputText,\n} from '../../lib/ResponsesParser';\nimport * as Core from '../../core';\nimport { APIPromise } from '../../core';\nimport { APIResource } from '../../resource';\nimport * as Shared from '../shared';\nimport * as InputItemsAPI from './input-items';\nimport { InputItemListParams, InputItems, ResponseItemList } from './input-items';\nimport * as ResponsesAPI from './responses';\nimport { ResponseStream, ResponseStreamParams } from '../../lib/responses/ResponseStream';\nimport { CursorPage } from '../../pagination';\nimport { Stream } from '../../streaming';\n\nexport interface ParsedResponseOutputText<ParsedT> extends ResponseOutputText {\n  parsed: ParsedT | null;\n}\n\nexport type ParsedContent<ParsedT> = ParsedResponseOutputText<ParsedT> | ResponseOutputRefusal;\n\nexport interface ParsedResponseOutputMessage<ParsedT> extends ResponseOutputMessage {\n  content: ParsedContent<ParsedT>[];\n}\n\nexport interface ParsedResponseFunctionToolCall extends ResponseFunctionToolCall {\n  parsed_arguments: any;\n}\n\nexport type ParsedResponseOutputItem<ParsedT> =\n  | ParsedResponseOutputMessage<ParsedT>\n  | ParsedResponseFunctionToolCall\n  | ResponseFileSearchToolCall\n  | ResponseFunctionWebSearch\n  | ResponseComputerToolCall\n  | ResponseReasoningItem\n  | ResponseOutputItem.ImageGenerationCall\n  | ResponseCodeInterpreterToolCall\n  | ResponseOutputItem.LocalShellCall\n  | ResponseOutputItem.McpCall\n  | ResponseOutputItem.McpListTools\n  | ResponseOutputItem.McpApprovalRequest;\n\nexport interface ParsedResponse<ParsedT> extends Response {\n  output: Array<ParsedResponseOutputItem<ParsedT>>;\n\n  output_parsed: ParsedT | null;\n}\n\nexport type ResponseParseParams = ResponseCreateParamsNonStreaming;\nexport class Responses extends APIResource {\n  inputItems: InputItemsAPI.InputItems = new InputItemsAPI.InputItems(this._client);\n\n  /**\n   * Creates a model response. Provide\n   * [text](https://platform.openai.com/docs/guides/text) or\n   * [image](https://platform.openai.com/docs/guides/images) inputs to generate\n   * [text](https://platform.openai.com/docs/guides/text) or\n   * [JSON](https://platform.openai.com/docs/guides/structured-outputs) outputs. Have\n   * the model call your own\n   * [custom code](https://platform.openai.com/docs/guides/function-calling) or use\n   * built-in [tools](https://platform.openai.com/docs/guides/tools) like\n   * [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n   * [file search](https://platform.openai.com/docs/guides/tools-file-search) to use\n   * your own data as input for the model's response.\n   *\n   * @example\n   * ```ts\n   * const response = await client.responses.create({\n   *   input: 'string',\n   *   model: 'gpt-4o',\n   * });\n   * ```\n   */\n  create(body: ResponseCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Response>;\n  create(\n    body: ResponseCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ResponseStreamEvent>>;\n  create(\n    body: ResponseCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ResponseStreamEvent> | Response>;\n  create(\n    body: ResponseCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Response> | APIPromise<Stream<ResponseStreamEvent>> {\n    return (\n      this._client.post('/responses', { body, ...options, stream: body.stream ?? false }) as\n        | APIPromise<Response>\n        | APIPromise<Stream<ResponseStreamEvent>>\n    )._thenUnwrap((rsp) => {\n      if ('object' in rsp && rsp.object === 'response') {\n        addOutputText(rsp as Response);\n      }\n\n      return rsp;\n    }) as APIPromise<Response> | APIPromise<Stream<ResponseStreamEvent>>;\n  }\n\n  /**\n   * Retrieves a model response with the given ID.\n   *\n   * @example\n   * ```ts\n   * const response = await client.responses.retrieve(\n   *   'resp_677efb5139a88190b512bc3fef8e535d',\n   * );\n   * ```\n   */\n\n  retrieve(\n    responseId: string,\n    query?: ResponseRetrieveParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Response>;\n  retrieve(\n    responseId: string,\n    query: ResponseRetrieveParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ResponseStreamEvent>>;\n  retrieve(\n    responseId: string,\n    query?: ResponseRetrieveParamsBase | undefined,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ResponseStreamEvent> | Response>;\n  retrieve(\n    responseId: string,\n    query: ResponseRetrieveParams | undefined = {},\n    options?: Core.RequestOptions,\n  ): APIPromise<Response> | APIPromise<Stream<ResponseStreamEvent>> {\n    return this._client.get(`/responses/${responseId}`, {\n      query,\n      ...options,\n      stream: query?.stream ?? false,\n    }) as APIPromise<Response> | APIPromise<Stream<ResponseStreamEvent>>;\n  }\n\n  /**\n   * Deletes a model response with the given ID.\n   *\n   * @example\n   * ```ts\n   * await client.responses.del(\n   *   'resp_677efb5139a88190b512bc3fef8e535d',\n   * );\n   * ```\n   */\n  del(responseId: string, options?: Core.RequestOptions): Core.APIPromise<void> {\n    return this._client.delete(`/responses/${responseId}`, {\n      ...options,\n      headers: { Accept: '*/*', ...options?.headers },\n    });\n  }\n\n  parse<Params extends ResponseCreateParamsWithTools, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ParsedResponse<ParsedT>> {\n    return this._client.responses\n      .create(body, options)\n      ._thenUnwrap((response) => parseResponse(response as Response, body));\n  }\n\n  /**\n   * Creates a model response stream\n   */\n\n  stream<Params extends ResponseStreamParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): ResponseStream<ParsedT> {\n    return ResponseStream.createResponse<ParsedT>(this._client, body, options);\n  }\n\n  /**\n   * Cancels a model response with the given ID. Only responses created with the\n   * `background` parameter set to `true` can be cancelled.\n   * [Learn more](https://platform.openai.com/docs/guides/background).\n   *\n   * @example\n   * ```ts\n   * await client.responses.cancel(\n   *   'resp_677efb5139a88190b512bc3fef8e535d',\n   * );\n   * ```\n   */\n\n  cancel(responseId: string, options?: Core.RequestOptions): Core.APIPromise<void> {\n    return this._client.post(`/responses/${responseId}/cancel`, {\n      ...options,\n      headers: { Accept: '*/*', ...options?.headers },\n    });\n  }\n}\n\nexport class ResponseItemsPage extends CursorPage<ResponseItem> {}\n\n/**\n * A tool that controls a virtual computer. Learn more about the\n * [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).\n */\nexport interface ComputerTool {\n  /**\n   * The height of the computer display.\n   */\n  display_height: number;\n\n  /**\n   * The width of the computer display.\n   */\n  display_width: number;\n\n  /**\n   * The type of computer environment to control.\n   */\n  environment: 'windows' | 'mac' | 'linux' | 'ubuntu' | 'browser';\n\n  /**\n   * The type of the computer use tool. Always `computer_use_preview`.\n   */\n  type: 'computer-preview';\n}\n\n/**\n * A message input to the model with a role indicating instruction following\n * hierarchy. Instructions given with the `developer` or `system` role take\n * precedence over instructions given with the `user` role. Messages with the\n * `assistant` role are presumed to have been generated by the model in previous\n * interactions.\n */\nexport interface EasyInputMessage {\n  /**\n   * Text, image, or audio input to the model, used to generate a response. Can also\n   * contain previous assistant responses.\n   */\n  content: string | ResponseInputMessageContentList;\n\n  /**\n   * The role of the message input. One of `user`, `assistant`, `system`, or\n   * `developer`.\n   */\n  role: 'user' | 'assistant' | 'system' | 'developer';\n\n  /**\n   * The type of the message input. Always `message`.\n   */\n  type?: 'message';\n}\n\n/**\n * A tool that searches for relevant content from uploaded files. Learn more about\n * the\n * [file search tool](https://platform.openai.com/docs/guides/tools-file-search).\n */\nexport interface FileSearchTool {\n  /**\n   * The type of the file search tool. Always `file_search`.\n   */\n  type: 'file_search';\n\n  /**\n   * The IDs of the vector stores to search.\n   */\n  vector_store_ids: Array<string>;\n\n  /**\n   * A filter to apply.\n   */\n  filters?: Shared.ComparisonFilter | Shared.CompoundFilter | null;\n\n  /**\n   * The maximum number of results to return. This number should be between 1 and 50\n   * inclusive.\n   */\n  max_num_results?: number;\n\n  /**\n   * Ranking options for search.\n   */\n  ranking_options?: FileSearchTool.RankingOptions;\n}\n\nexport namespace FileSearchTool {\n  /**\n   * Ranking options for search.\n   */\n  export interface RankingOptions {\n    /**\n     * The ranker to use for the file search.\n     */\n    ranker?: 'auto' | 'default-2024-11-15';\n\n    /**\n     * The score threshold for the file search, a number between 0 and 1. Numbers\n     * closer to 1 will attempt to return only the most relevant results, but may\n     * return fewer results.\n     */\n    score_threshold?: number;\n  }\n}\n\n/**\n * Defines a function in your own code the model can choose to call. Learn more\n * about\n * [function calling](https://platform.openai.com/docs/guides/function-calling).\n */\nexport interface FunctionTool {\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n\n  /**\n   * A JSON schema object describing the parameters of the function.\n   */\n  parameters: Record<string, unknown> | null;\n\n  /**\n   * Whether to enforce strict parameter validation. Default `true`.\n   */\n  strict: boolean | null;\n\n  /**\n   * The type of the function tool. Always `function`.\n   */\n  type: 'function';\n\n  /**\n   * A description of the function. Used by the model to determine whether or not to\n   * call the function.\n   */\n  description?: string | null;\n}\n\nexport interface Response {\n  /**\n   * Unique identifier for this Response.\n   */\n  id: string;\n\n  /**\n   * Unix timestamp (in seconds) of when this Response was created.\n   */\n  created_at: number;\n\n  output_text: string;\n\n  /**\n   * An error object returned when the model fails to generate a Response.\n   */\n  error: ResponseError | null;\n\n  /**\n   * Details about why the response is incomplete.\n   */\n  incomplete_details: Response.IncompleteDetails | null;\n\n  /**\n   * Inserts a system (or developer) message as the first item in the model's\n   * context.\n   *\n   * When using along with `previous_response_id`, the instructions from a previous\n   * response will not be carried over to the next response. This makes it simple to\n   * swap out system (or developer) messages in new responses.\n   */\n  instructions: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI offers a\n   * wide range of models with different capabilities, performance characteristics,\n   * and price points. Refer to the\n   * [model guide](https://platform.openai.com/docs/models) to browse and compare\n   * available models.\n   */\n  model: Shared.ResponsesModel;\n\n  /**\n   * The object type of this resource - always set to `response`.\n   */\n  object: 'response';\n\n  /**\n   * An array of content items generated by the model.\n   *\n   * - The length and order of items in the `output` array is dependent on the\n   *   model's response.\n   * - Rather than accessing the first item in the `output` array and assuming it's\n   *   an `assistant` message with the content generated by the model, you might\n   *   consider using the `output_text` property where supported in SDKs.\n   */\n  output: Array<ResponseOutputItem>;\n\n  /**\n   * Whether to allow the model to run tool calls in parallel.\n   */\n  parallel_tool_calls: boolean;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic. We generally recommend altering this or `top_p` but\n   * not both.\n   */\n  temperature: number | null;\n\n  /**\n   * How the model should select which tool (or tools) to use when generating a\n   * response. See the `tools` parameter to see how to specify which tools the model\n   * can call.\n   */\n  tool_choice: ToolChoiceOptions | ToolChoiceTypes | ToolChoiceFunction;\n\n  /**\n   * An array of tools the model may call while generating a response. You can\n   * specify which tool to use by setting the `tool_choice` parameter.\n   *\n   * The two categories of tools you can provide the model are:\n   *\n   * - **Built-in tools**: Tools that are provided by OpenAI that extend the model's\n   *   capabilities, like\n   *   [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n   *   [file search](https://platform.openai.com/docs/guides/tools-file-search).\n   *   Learn more about\n   *   [built-in tools](https://platform.openai.com/docs/guides/tools).\n   * - **Function calls (custom tools)**: Functions that are defined by you, enabling\n   *   the model to call your own code. Learn more about\n   *   [function calling](https://platform.openai.com/docs/guides/function-calling).\n   */\n  tools: Array<Tool>;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p: number | null;\n\n  /**\n   * Whether to run the model response in the background.\n   * [Learn more](https://platform.openai.com/docs/guides/background).\n   */\n  background?: boolean | null;\n\n  /**\n   * An upper bound for the number of tokens that can be generated for a response,\n   * including visible output tokens and\n   * [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).\n   */\n  max_output_tokens?: number | null;\n\n  /**\n   * The unique ID of the previous response to the model. Use this to create\n   * multi-turn conversations. Learn more about\n   * [conversation state](https://platform.openai.com/docs/guides/conversation-state).\n   */\n  previous_response_id?: string | null;\n\n  /**\n   * **o-series models only**\n   *\n   * Configuration options for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n   */\n  reasoning?: Shared.Reasoning | null;\n\n  /**\n   * Specifies the latency tier to use for processing the request. This parameter is\n   * relevant for customers subscribed to the scale tier service:\n   *\n   * - If set to 'auto', and the Project is Scale tier enabled, the system will\n   *   utilize scale tier credits until they are exhausted.\n   * - If set to 'auto', and the Project is not Scale tier enabled, the request will\n   *   be processed using the default service tier with a lower uptime SLA and no\n   *   latency guarentee.\n   * - If set to 'default', the request will be processed using the default service\n   *   tier with a lower uptime SLA and no latency guarentee.\n   * - If set to 'flex', the request will be processed with the Flex Processing\n   *   service tier.\n   *   [Learn more](https://platform.openai.com/docs/guides/flex-processing).\n   * - When not set, the default behavior is 'auto'.\n   *\n   * When this parameter is set, the response body will include the `service_tier`\n   * utilized.\n   */\n  service_tier?: 'auto' | 'default' | 'flex' | null;\n\n  /**\n   * The status of the response generation. One of `completed`, `failed`,\n   * `in_progress`, `cancelled`, `queued`, or `incomplete`.\n   */\n  status?: ResponseStatus;\n\n  /**\n   * Configuration options for a text response from the model. Can be plain text or\n   * structured JSON data. Learn more:\n   *\n   * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n   * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n   */\n  text?: ResponseTextConfig;\n\n  /**\n   * The truncation strategy to use for the model response.\n   *\n   * - `auto`: If the context of this response and previous ones exceeds the model's\n   *   context window size, the model will truncate the response to fit the context\n   *   window by dropping input items in the middle of the conversation.\n   * - `disabled` (default): If a model response will exceed the context window size\n   *   for a model, the request will fail with a 400 error.\n   */\n  truncation?: 'auto' | 'disabled' | null;\n\n  /**\n   * Represents token usage details including input tokens, output tokens, a\n   * breakdown of output tokens, and the total tokens used.\n   */\n  usage?: ResponseUsage;\n\n  /**\n   * A stable identifier for your end-users. Used to boost cache hit rates by better\n   * bucketing similar requests and to help OpenAI detect and prevent abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace Response {\n  /**\n   * Details about why the response is incomplete.\n   */\n  export interface IncompleteDetails {\n    /**\n     * The reason why the response is incomplete.\n     */\n    reason?: 'max_output_tokens' | 'content_filter';\n  }\n}\n\n/**\n * Emitted when there is a partial audio response.\n */\nexport interface ResponseAudioDeltaEvent {\n  /**\n   * A chunk of Base64 encoded response audio bytes.\n   */\n  delta: string;\n\n  /**\n   * A sequence number for this chunk of the stream response.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.audio.delta`.\n   */\n  type: 'response.audio.delta';\n}\n\n/**\n * Emitted when the audio response is complete.\n */\nexport interface ResponseAudioDoneEvent {\n  /**\n   * The sequence number of the delta.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.audio.done`.\n   */\n  type: 'response.audio.done';\n}\n\n/**\n * Emitted when there is a partial transcript of audio.\n */\nexport interface ResponseAudioTranscriptDeltaEvent {\n  /**\n   * The partial transcript of the audio response.\n   */\n  delta: string;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.audio.transcript.delta`.\n   */\n  type: 'response.audio.transcript.delta';\n}\n\n/**\n * Emitted when the full audio transcript is completed.\n */\nexport interface ResponseAudioTranscriptDoneEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.audio.transcript.done`.\n   */\n  type: 'response.audio.transcript.done';\n}\n\n/**\n * Emitted when a partial code snippet is added by the code interpreter.\n */\nexport interface ResponseCodeInterpreterCallCodeDeltaEvent {\n  /**\n   * The partial code snippet added by the code interpreter.\n   */\n  delta: string;\n\n  /**\n   * The index of the output item that the code interpreter call is in progress.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.code_interpreter_call.code.delta`.\n   */\n  type: 'response.code_interpreter_call.code.delta';\n}\n\n/**\n * Emitted when code snippet output is finalized by the code interpreter.\n */\nexport interface ResponseCodeInterpreterCallCodeDoneEvent {\n  /**\n   * The final code snippet output by the code interpreter.\n   */\n  code: string;\n\n  /**\n   * The index of the output item that the code interpreter call is in progress.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.code_interpreter_call.code.done`.\n   */\n  type: 'response.code_interpreter_call.code.done';\n}\n\n/**\n * Emitted when the code interpreter call is completed.\n */\nexport interface ResponseCodeInterpreterCallCompletedEvent {\n  /**\n   * A tool call to run code.\n   */\n  code_interpreter_call: ResponseCodeInterpreterToolCall;\n\n  /**\n   * The index of the output item that the code interpreter call is in progress.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.code_interpreter_call.completed`.\n   */\n  type: 'response.code_interpreter_call.completed';\n}\n\n/**\n * Emitted when a code interpreter call is in progress.\n */\nexport interface ResponseCodeInterpreterCallInProgressEvent {\n  /**\n   * A tool call to run code.\n   */\n  code_interpreter_call: ResponseCodeInterpreterToolCall;\n\n  /**\n   * The index of the output item that the code interpreter call is in progress.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.code_interpreter_call.in_progress`.\n   */\n  type: 'response.code_interpreter_call.in_progress';\n}\n\n/**\n * Emitted when the code interpreter is actively interpreting the code snippet.\n */\nexport interface ResponseCodeInterpreterCallInterpretingEvent {\n  /**\n   * A tool call to run code.\n   */\n  code_interpreter_call: ResponseCodeInterpreterToolCall;\n\n  /**\n   * The index of the output item that the code interpreter call is in progress.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.code_interpreter_call.interpreting`.\n   */\n  type: 'response.code_interpreter_call.interpreting';\n}\n\n/**\n * A tool call to run code.\n */\nexport interface ResponseCodeInterpreterToolCall {\n  /**\n   * The unique ID of the code interpreter tool call.\n   */\n  id: string;\n\n  /**\n   * The code to run.\n   */\n  code: string;\n\n  /**\n   * The results of the code interpreter tool call.\n   */\n  results: Array<ResponseCodeInterpreterToolCall.Logs | ResponseCodeInterpreterToolCall.Files>;\n\n  /**\n   * The status of the code interpreter tool call.\n   */\n  status: 'in_progress' | 'interpreting' | 'completed';\n\n  /**\n   * The type of the code interpreter tool call. Always `code_interpreter_call`.\n   */\n  type: 'code_interpreter_call';\n\n  /**\n   * The ID of the container used to run the code.\n   */\n  container_id?: string;\n}\n\nexport namespace ResponseCodeInterpreterToolCall {\n  /**\n   * The output of a code interpreter tool call that is text.\n   */\n  export interface Logs {\n    /**\n     * The logs of the code interpreter tool call.\n     */\n    logs: string;\n\n    /**\n     * The type of the code interpreter text output. Always `logs`.\n     */\n    type: 'logs';\n  }\n\n  /**\n   * The output of a code interpreter tool call that is a file.\n   */\n  export interface Files {\n    files: Array<Files.File>;\n\n    /**\n     * The type of the code interpreter file output. Always `files`.\n     */\n    type: 'files';\n  }\n\n  export namespace Files {\n    export interface File {\n      /**\n       * The ID of the file.\n       */\n      file_id: string;\n\n      /**\n       * The MIME type of the file.\n       */\n      mime_type: string;\n    }\n  }\n}\n\n/**\n * Emitted when the model response is complete.\n */\nexport interface ResponseCompletedEvent {\n  /**\n   * Properties of the completed response.\n   */\n  response: Response;\n\n  /**\n   * The sequence number for this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.completed`.\n   */\n  type: 'response.completed';\n}\n\n/**\n * A tool call to a computer use tool. See the\n * [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use)\n * for more information.\n */\nexport interface ResponseComputerToolCall {\n  /**\n   * The unique ID of the computer call.\n   */\n  id: string;\n\n  /**\n   * A click action.\n   */\n  action:\n    | ResponseComputerToolCall.Click\n    | ResponseComputerToolCall.DoubleClick\n    | ResponseComputerToolCall.Drag\n    | ResponseComputerToolCall.Keypress\n    | ResponseComputerToolCall.Move\n    | ResponseComputerToolCall.Screenshot\n    | ResponseComputerToolCall.Scroll\n    | ResponseComputerToolCall.Type\n    | ResponseComputerToolCall.Wait;\n\n  /**\n   * An identifier used when responding to the tool call with output.\n   */\n  call_id: string;\n\n  /**\n   * The pending safety checks for the computer call.\n   */\n  pending_safety_checks: Array<ResponseComputerToolCall.PendingSafetyCheck>;\n\n  /**\n   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n   * Populated when items are returned via API.\n   */\n  status: 'in_progress' | 'completed' | 'incomplete';\n\n  /**\n   * The type of the computer call. Always `computer_call`.\n   */\n  type: 'computer_call';\n}\n\nexport namespace ResponseComputerToolCall {\n  /**\n   * A click action.\n   */\n  export interface Click {\n    /**\n     * Indicates which mouse button was pressed during the click. One of `left`,\n     * `right`, `wheel`, `back`, or `forward`.\n     */\n    button: 'left' | 'right' | 'wheel' | 'back' | 'forward';\n\n    /**\n     * Specifies the event type. For a click action, this property is always set to\n     * `click`.\n     */\n    type: 'click';\n\n    /**\n     * The x-coordinate where the click occurred.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate where the click occurred.\n     */\n    y: number;\n  }\n\n  /**\n   * A double click action.\n   */\n  export interface DoubleClick {\n    /**\n     * Specifies the event type. For a double click action, this property is always set\n     * to `double_click`.\n     */\n    type: 'double_click';\n\n    /**\n     * The x-coordinate where the double click occurred.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate where the double click occurred.\n     */\n    y: number;\n  }\n\n  /**\n   * A drag action.\n   */\n  export interface Drag {\n    /**\n     * An array of coordinates representing the path of the drag action. Coordinates\n     * will appear as an array of objects, eg\n     *\n     * ```\n     * [\n     *   { x: 100, y: 200 },\n     *   { x: 200, y: 300 }\n     * ]\n     * ```\n     */\n    path: Array<Drag.Path>;\n\n    /**\n     * Specifies the event type. For a drag action, this property is always set to\n     * `drag`.\n     */\n    type: 'drag';\n  }\n\n  export namespace Drag {\n    /**\n     * A series of x/y coordinate pairs in the drag path.\n     */\n    export interface Path {\n      /**\n       * The x-coordinate.\n       */\n      x: number;\n\n      /**\n       * The y-coordinate.\n       */\n      y: number;\n    }\n  }\n\n  /**\n   * A collection of keypresses the model would like to perform.\n   */\n  export interface Keypress {\n    /**\n     * The combination of keys the model is requesting to be pressed. This is an array\n     * of strings, each representing a key.\n     */\n    keys: Array<string>;\n\n    /**\n     * Specifies the event type. For a keypress action, this property is always set to\n     * `keypress`.\n     */\n    type: 'keypress';\n  }\n\n  /**\n   * A mouse move action.\n   */\n  export interface Move {\n    /**\n     * Specifies the event type. For a move action, this property is always set to\n     * `move`.\n     */\n    type: 'move';\n\n    /**\n     * The x-coordinate to move to.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate to move to.\n     */\n    y: number;\n  }\n\n  /**\n   * A screenshot action.\n   */\n  export interface Screenshot {\n    /**\n     * Specifies the event type. For a screenshot action, this property is always set\n     * to `screenshot`.\n     */\n    type: 'screenshot';\n  }\n\n  /**\n   * A scroll action.\n   */\n  export interface Scroll {\n    /**\n     * The horizontal scroll distance.\n     */\n    scroll_x: number;\n\n    /**\n     * The vertical scroll distance.\n     */\n    scroll_y: number;\n\n    /**\n     * Specifies the event type. For a scroll action, this property is always set to\n     * `scroll`.\n     */\n    type: 'scroll';\n\n    /**\n     * The x-coordinate where the scroll occurred.\n     */\n    x: number;\n\n    /**\n     * The y-coordinate where the scroll occurred.\n     */\n    y: number;\n  }\n\n  /**\n   * An action to type in text.\n   */\n  export interface Type {\n    /**\n     * The text to type.\n     */\n    text: string;\n\n    /**\n     * Specifies the event type. For a type action, this property is always set to\n     * `type`.\n     */\n    type: 'type';\n  }\n\n  /**\n   * A wait action.\n   */\n  export interface Wait {\n    /**\n     * Specifies the event type. For a wait action, this property is always set to\n     * `wait`.\n     */\n    type: 'wait';\n  }\n\n  /**\n   * A pending safety check for the computer call.\n   */\n  export interface PendingSafetyCheck {\n    /**\n     * The ID of the pending safety check.\n     */\n    id: string;\n\n    /**\n     * The type of the pending safety check.\n     */\n    code: string;\n\n    /**\n     * Details about the pending safety check.\n     */\n    message: string;\n  }\n}\n\nexport interface ResponseComputerToolCallOutputItem {\n  /**\n   * The unique ID of the computer call tool output.\n   */\n  id: string;\n\n  /**\n   * The ID of the computer tool call that produced the output.\n   */\n  call_id: string;\n\n  /**\n   * A computer screenshot image used with the computer use tool.\n   */\n  output: ResponseComputerToolCallOutputScreenshot;\n\n  /**\n   * The type of the computer tool call output. Always `computer_call_output`.\n   */\n  type: 'computer_call_output';\n\n  /**\n   * The safety checks reported by the API that have been acknowledged by the\n   * developer.\n   */\n  acknowledged_safety_checks?: Array<ResponseComputerToolCallOutputItem.AcknowledgedSafetyCheck>;\n\n  /**\n   * The status of the message input. One of `in_progress`, `completed`, or\n   * `incomplete`. Populated when input items are returned via API.\n   */\n  status?: 'in_progress' | 'completed' | 'incomplete';\n}\n\nexport namespace ResponseComputerToolCallOutputItem {\n  /**\n   * A pending safety check for the computer call.\n   */\n  export interface AcknowledgedSafetyCheck {\n    /**\n     * The ID of the pending safety check.\n     */\n    id: string;\n\n    /**\n     * The type of the pending safety check.\n     */\n    code: string;\n\n    /**\n     * Details about the pending safety check.\n     */\n    message: string;\n  }\n}\n\n/**\n * A computer screenshot image used with the computer use tool.\n */\nexport interface ResponseComputerToolCallOutputScreenshot {\n  /**\n   * Specifies the event type. For a computer screenshot, this property is always set\n   * to `computer_screenshot`.\n   */\n  type: 'computer_screenshot';\n\n  /**\n   * The identifier of an uploaded file that contains the screenshot.\n   */\n  file_id?: string;\n\n  /**\n   * The URL of the screenshot image.\n   */\n  image_url?: string;\n}\n\n/**\n * Multi-modal input and output contents.\n */\nexport type ResponseContent =\n  | ResponseInputText\n  | ResponseInputImage\n  | ResponseInputFile\n  | ResponseOutputText\n  | ResponseOutputRefusal;\n\n/**\n * Emitted when a new content part is added.\n */\nexport interface ResponseContentPartAddedEvent {\n  /**\n   * The index of the content part that was added.\n   */\n  content_index: number;\n\n  /**\n   * The ID of the output item that the content part was added to.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the content part was added to.\n   */\n  output_index: number;\n\n  /**\n   * The content part that was added.\n   */\n  part: ResponseOutputText | ResponseOutputRefusal;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.content_part.added`.\n   */\n  type: 'response.content_part.added';\n}\n\n/**\n * Emitted when a content part is done.\n */\nexport interface ResponseContentPartDoneEvent {\n  /**\n   * The index of the content part that is done.\n   */\n  content_index: number;\n\n  /**\n   * The ID of the output item that the content part was added to.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the content part was added to.\n   */\n  output_index: number;\n\n  /**\n   * The content part that is done.\n   */\n  part: ResponseOutputText | ResponseOutputRefusal;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.content_part.done`.\n   */\n  type: 'response.content_part.done';\n}\n\n/**\n * An event that is emitted when a response is created.\n */\nexport interface ResponseCreatedEvent {\n  /**\n   * The response that was created.\n   */\n  response: Response;\n\n  /**\n   * The sequence number for this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.created`.\n   */\n  type: 'response.created';\n}\n\n/**\n * An error object returned when the model fails to generate a Response.\n */\nexport interface ResponseError {\n  /**\n   * The error code for the response.\n   */\n  code:\n    | 'server_error'\n    | 'rate_limit_exceeded'\n    | 'invalid_prompt'\n    | 'vector_store_timeout'\n    | 'invalid_image'\n    | 'invalid_image_format'\n    | 'invalid_base64_image'\n    | 'invalid_image_url'\n    | 'image_too_large'\n    | 'image_too_small'\n    | 'image_parse_error'\n    | 'image_content_policy_violation'\n    | 'invalid_image_mode'\n    | 'image_file_too_large'\n    | 'unsupported_image_media_type'\n    | 'empty_image_file'\n    | 'failed_to_download_image'\n    | 'image_file_not_found';\n\n  /**\n   * A human-readable description of the error.\n   */\n  message: string;\n}\n\n/**\n * Emitted when an error occurs.\n */\nexport interface ResponseErrorEvent {\n  /**\n   * The error code.\n   */\n  code: string | null;\n\n  /**\n   * The error message.\n   */\n  message: string;\n\n  /**\n   * The error parameter.\n   */\n  param: string | null;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `error`.\n   */\n  type: 'error';\n}\n\n/**\n * An event that is emitted when a response fails.\n */\nexport interface ResponseFailedEvent {\n  /**\n   * The response that failed.\n   */\n  response: Response;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.failed`.\n   */\n  type: 'response.failed';\n}\n\n/**\n * Emitted when a file search call is completed (results found).\n */\nexport interface ResponseFileSearchCallCompletedEvent {\n  /**\n   * The ID of the output item that the file search call is initiated.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the file search call is initiated.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.file_search_call.completed`.\n   */\n  type: 'response.file_search_call.completed';\n}\n\n/**\n * Emitted when a file search call is initiated.\n */\nexport interface ResponseFileSearchCallInProgressEvent {\n  /**\n   * The ID of the output item that the file search call is initiated.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the file search call is initiated.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.file_search_call.in_progress`.\n   */\n  type: 'response.file_search_call.in_progress';\n}\n\n/**\n * Emitted when a file search is currently searching.\n */\nexport interface ResponseFileSearchCallSearchingEvent {\n  /**\n   * The ID of the output item that the file search call is initiated.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the file search call is searching.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.file_search_call.searching`.\n   */\n  type: 'response.file_search_call.searching';\n}\n\n/**\n * The results of a file search tool call. See the\n * [file search guide](https://platform.openai.com/docs/guides/tools-file-search)\n * for more information.\n */\nexport interface ResponseFileSearchToolCall {\n  /**\n   * The unique ID of the file search tool call.\n   */\n  id: string;\n\n  /**\n   * The queries used to search for files.\n   */\n  queries: Array<string>;\n\n  /**\n   * The status of the file search tool call. One of `in_progress`, `searching`,\n   * `incomplete` or `failed`,\n   */\n  status: 'in_progress' | 'searching' | 'completed' | 'incomplete' | 'failed';\n\n  /**\n   * The type of the file search tool call. Always `file_search_call`.\n   */\n  type: 'file_search_call';\n\n  /**\n   * The results of the file search tool call.\n   */\n  results?: Array<ResponseFileSearchToolCall.Result> | null;\n}\n\nexport namespace ResponseFileSearchToolCall {\n  export interface Result {\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format, and\n     * querying for objects via API or the dashboard. Keys are strings with a maximum\n     * length of 64 characters. Values are strings with a maximum length of 512\n     * characters, booleans, or numbers.\n     */\n    attributes?: Record<string, string | number | boolean> | null;\n\n    /**\n     * The unique ID of the file.\n     */\n    file_id?: string;\n\n    /**\n     * The name of the file.\n     */\n    filename?: string;\n\n    /**\n     * The relevance score of the file - a value between 0 and 1.\n     */\n    score?: number;\n\n    /**\n     * The text that was retrieved from the file.\n     */\n    text?: string;\n  }\n}\n\n/**\n * An object specifying the format that the model must output.\n *\n * Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, which\n * ensures the model will match your supplied JSON schema. Learn more in the\n * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n *\n * The default format is `{ \"type\": \"text\" }` with no additional options.\n *\n * **Not recommended for gpt-4o and newer models:**\n *\n * Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n * ensures the message the model generates is valid JSON. Using `json_schema` is\n * preferred for models that support it.\n */\nexport type ResponseFormatTextConfig =\n  | Shared.ResponseFormatText\n  | ResponseFormatTextJSONSchemaConfig\n  | Shared.ResponseFormatJSONObject;\n\n/**\n * JSON Schema response format. Used to generate structured JSON responses. Learn\n * more about\n * [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n */\nexport interface ResponseFormatTextJSONSchemaConfig {\n  /**\n   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores\n   * and dashes, with a maximum length of 64.\n   */\n  name: string;\n\n  /**\n   * The schema for the response format, described as a JSON Schema object. Learn how\n   * to build JSON schemas [here](https://json-schema.org/).\n   */\n  schema: Record<string, unknown>;\n\n  /**\n   * The type of response format being defined. Always `json_schema`.\n   */\n  type: 'json_schema';\n\n  /**\n   * A description of what the response format is for, used by the model to determine\n   * how to respond in the format.\n   */\n  description?: string;\n\n  /**\n   * Whether to enable strict schema adherence when generating the output. If set to\n   * true, the model will always follow the exact schema defined in the `schema`\n   * field. Only a subset of JSON Schema is supported when `strict` is `true`. To\n   * learn more, read the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   */\n  strict?: boolean | null;\n}\n\n/**\n * Emitted when there is a partial function-call arguments delta.\n */\nexport interface ResponseFunctionCallArgumentsDeltaEvent {\n  /**\n   * The function-call arguments delta that is added.\n   */\n  delta: string;\n\n  /**\n   * The ID of the output item that the function-call arguments delta is added to.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the function-call arguments delta is added to.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.function_call_arguments.delta`.\n   */\n  type: 'response.function_call_arguments.delta';\n}\n\n/**\n * Emitted when function-call arguments are finalized.\n */\nexport interface ResponseFunctionCallArgumentsDoneEvent {\n  /**\n   * The function-call arguments.\n   */\n  arguments: string;\n\n  /**\n   * The ID of the item.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  type: 'response.function_call_arguments.done';\n}\n\n/**\n * A tool call to run a function. See the\n * [function calling guide](https://platform.openai.com/docs/guides/function-calling)\n * for more information.\n */\nexport interface ResponseFunctionToolCall {\n  /**\n   * A JSON string of the arguments to pass to the function.\n   */\n  arguments: string;\n\n  /**\n   * The unique ID of the function tool call generated by the model.\n   */\n  call_id: string;\n\n  /**\n   * The name of the function to run.\n   */\n  name: string;\n\n  /**\n   * The type of the function tool call. Always `function_call`.\n   */\n  type: 'function_call';\n\n  /**\n   * The unique ID of the function tool call.\n   */\n  id?: string;\n\n  /**\n   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n   * Populated when items are returned via API.\n   */\n  status?: 'in_progress' | 'completed' | 'incomplete';\n}\n\n/**\n * A tool call to run a function. See the\n * [function calling guide](https://platform.openai.com/docs/guides/function-calling)\n * for more information.\n */\nexport interface ResponseFunctionToolCallItem extends ResponseFunctionToolCall {\n  /**\n   * The unique ID of the function tool call.\n   */\n  id: string;\n}\n\nexport interface ResponseFunctionToolCallOutputItem {\n  /**\n   * The unique ID of the function call tool output.\n   */\n  id: string;\n\n  /**\n   * The unique ID of the function tool call generated by the model.\n   */\n  call_id: string;\n\n  /**\n   * A JSON string of the output of the function tool call.\n   */\n  output: string;\n\n  /**\n   * The type of the function tool call output. Always `function_call_output`.\n   */\n  type: 'function_call_output';\n\n  /**\n   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n   * Populated when items are returned via API.\n   */\n  status?: 'in_progress' | 'completed' | 'incomplete';\n}\n\n/**\n * The results of a web search tool call. See the\n * [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for\n * more information.\n */\nexport interface ResponseFunctionWebSearch {\n  /**\n   * The unique ID of the web search tool call.\n   */\n  id: string;\n\n  /**\n   * The status of the web search tool call.\n   */\n  status: 'in_progress' | 'searching' | 'completed' | 'failed';\n\n  /**\n   * The type of the web search tool call. Always `web_search_call`.\n   */\n  type: 'web_search_call';\n}\n\n/**\n * Emitted when an image generation tool call has completed and the final image is\n * available.\n */\nexport interface ResponseImageGenCallCompletedEvent {\n  /**\n   * The unique identifier of the image generation item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.image_generation_call.completed'.\n   */\n  type: 'response.image_generation_call.completed';\n}\n\n/**\n * Emitted when an image generation tool call is actively generating an image\n * (intermediate state).\n */\nexport interface ResponseImageGenCallGeneratingEvent {\n  /**\n   * The unique identifier of the image generation item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of the image generation item being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.image_generation_call.generating'.\n   */\n  type: 'response.image_generation_call.generating';\n}\n\n/**\n * Emitted when an image generation tool call is in progress.\n */\nexport interface ResponseImageGenCallInProgressEvent {\n  /**\n   * The unique identifier of the image generation item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of the image generation item being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.image_generation_call.in_progress'.\n   */\n  type: 'response.image_generation_call.in_progress';\n}\n\n/**\n * Emitted when a partial image is available during image generation streaming.\n */\nexport interface ResponseImageGenCallPartialImageEvent {\n  /**\n   * The unique identifier of the image generation item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * Base64-encoded partial image data, suitable for rendering as an image.\n   */\n  partial_image_b64: string;\n\n  /**\n   * 0-based index for the partial image (backend is 1-based, but this is 0-based for\n   * the user).\n   */\n  partial_image_index: number;\n\n  /**\n   * The sequence number of the image generation item being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.image_generation_call.partial_image'.\n   */\n  type: 'response.image_generation_call.partial_image';\n}\n\n/**\n * Emitted when the response is in progress.\n */\nexport interface ResponseInProgressEvent {\n  /**\n   * The response that is in progress.\n   */\n  response: Response;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.in_progress`.\n   */\n  type: 'response.in_progress';\n}\n\n/**\n * Specify additional output data to include in the model response. Currently\n * supported values are:\n *\n * - `file_search_call.results`: Include the search results of the file search tool\n *   call.\n * - `message.input_image.image_url`: Include image urls from the input message.\n * - `computer_call_output.output.image_url`: Include image urls from the computer\n *   call output.\n * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n *   tokens in reasoning item outputs. This enables reasoning items to be used in\n *   multi-turn conversations when using the Responses API statelessly (like when\n *   the `store` parameter is set to `false`, or when an organization is enrolled\n *   in the zero data retention program).\n */\nexport type ResponseIncludable =\n  | 'file_search_call.results'\n  | 'message.input_image.image_url'\n  | 'computer_call_output.output.image_url'\n  | 'reasoning.encrypted_content';\n\n/**\n * An event that is emitted when a response finishes as incomplete.\n */\nexport interface ResponseIncompleteEvent {\n  /**\n   * The response that was incomplete.\n   */\n  response: Response;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.incomplete`.\n   */\n  type: 'response.incomplete';\n}\n\n/**\n * A list of one or many input items to the model, containing different content\n * types.\n */\nexport type ResponseInput = Array<ResponseInputItem>;\n\n/**\n * An audio input to the model.\n */\nexport interface ResponseInputAudio {\n  /**\n   * Base64-encoded audio data.\n   */\n  data: string;\n\n  /**\n   * The format of the audio data. Currently supported formats are `mp3` and `wav`.\n   */\n  format: 'mp3' | 'wav';\n\n  /**\n   * The type of the input item. Always `input_audio`.\n   */\n  type: 'input_audio';\n}\n\n/**\n * A text input to the model.\n */\nexport type ResponseInputContent = ResponseInputText | ResponseInputImage | ResponseInputFile;\n\n/**\n * A file input to the model.\n */\nexport interface ResponseInputFile {\n  /**\n   * The type of the input item. Always `input_file`.\n   */\n  type: 'input_file';\n\n  /**\n   * The content of the file to be sent to the model.\n   */\n  file_data?: string;\n\n  /**\n   * The ID of the file to be sent to the model.\n   */\n  file_id?: string | null;\n\n  /**\n   * The name of the file to be sent to the model.\n   */\n  filename?: string;\n}\n\n/**\n * An image input to the model. Learn about\n * [image inputs](https://platform.openai.com/docs/guides/vision).\n */\nexport interface ResponseInputImage {\n  /**\n   * The detail level of the image to be sent to the model. One of `high`, `low`, or\n   * `auto`. Defaults to `auto`.\n   */\n  detail: 'low' | 'high' | 'auto';\n\n  /**\n   * The type of the input item. Always `input_image`.\n   */\n  type: 'input_image';\n\n  /**\n   * The ID of the file to be sent to the model.\n   */\n  file_id?: string | null;\n\n  /**\n   * The URL of the image to be sent to the model. A fully qualified URL or base64\n   * encoded image in a data URL.\n   */\n  image_url?: string | null;\n}\n\n/**\n * A message input to the model with a role indicating instruction following\n * hierarchy. Instructions given with the `developer` or `system` role take\n * precedence over instructions given with the `user` role. Messages with the\n * `assistant` role are presumed to have been generated by the model in previous\n * interactions.\n */\nexport type ResponseInputItem =\n  | EasyInputMessage\n  | ResponseInputItem.Message\n  | ResponseOutputMessage\n  | ResponseFileSearchToolCall\n  | ResponseComputerToolCall\n  | ResponseInputItem.ComputerCallOutput\n  | ResponseFunctionWebSearch\n  | ResponseFunctionToolCall\n  | ResponseInputItem.FunctionCallOutput\n  | ResponseReasoningItem\n  | ResponseInputItem.ImageGenerationCall\n  | ResponseCodeInterpreterToolCall\n  | ResponseInputItem.LocalShellCall\n  | ResponseInputItem.LocalShellCallOutput\n  | ResponseInputItem.McpListTools\n  | ResponseInputItem.McpApprovalRequest\n  | ResponseInputItem.McpApprovalResponse\n  | ResponseInputItem.McpCall\n  | ResponseInputItem.ItemReference;\n\nexport namespace ResponseInputItem {\n  /**\n   * A message input to the model with a role indicating instruction following\n   * hierarchy. Instructions given with the `developer` or `system` role take\n   * precedence over instructions given with the `user` role.\n   */\n  export interface Message {\n    /**\n     * A list of one or many input items to the model, containing different content\n     * types.\n     */\n    content: ResponsesAPI.ResponseInputMessageContentList;\n\n    /**\n     * The role of the message input. One of `user`, `system`, or `developer`.\n     */\n    role: 'user' | 'system' | 'developer';\n\n    /**\n     * The status of item. One of `in_progress`, `completed`, or `incomplete`.\n     * Populated when items are returned via API.\n     */\n    status?: 'in_progress' | 'completed' | 'incomplete';\n\n    /**\n     * The type of the message input. Always set to `message`.\n     */\n    type?: 'message';\n  }\n\n  /**\n   * The output of a computer tool call.\n   */\n  export interface ComputerCallOutput {\n    /**\n     * The ID of the computer tool call that produced the output.\n     */\n    call_id: string;\n\n    /**\n     * A computer screenshot image used with the computer use tool.\n     */\n    output: ResponsesAPI.ResponseComputerToolCallOutputScreenshot;\n\n    /**\n     * The type of the computer tool call output. Always `computer_call_output`.\n     */\n    type: 'computer_call_output';\n\n    /**\n     * The ID of the computer tool call output.\n     */\n    id?: string | null;\n\n    /**\n     * The safety checks reported by the API that have been acknowledged by the\n     * developer.\n     */\n    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;\n\n    /**\n     * The status of the message input. One of `in_progress`, `completed`, or\n     * `incomplete`. Populated when input items are returned via API.\n     */\n    status?: 'in_progress' | 'completed' | 'incomplete' | null;\n  }\n\n  export namespace ComputerCallOutput {\n    /**\n     * A pending safety check for the computer call.\n     */\n    export interface AcknowledgedSafetyCheck {\n      /**\n       * The ID of the pending safety check.\n       */\n      id: string;\n\n      /**\n       * The type of the pending safety check.\n       */\n      code?: string | null;\n\n      /**\n       * Details about the pending safety check.\n       */\n      message?: string | null;\n    }\n  }\n\n  /**\n   * The output of a function tool call.\n   */\n  export interface FunctionCallOutput {\n    /**\n     * The unique ID of the function tool call generated by the model.\n     */\n    call_id: string;\n\n    /**\n     * A JSON string of the output of the function tool call.\n     */\n    output: string;\n\n    /**\n     * The type of the function tool call output. Always `function_call_output`.\n     */\n    type: 'function_call_output';\n\n    /**\n     * The unique ID of the function tool call output. Populated when this item is\n     * returned via API.\n     */\n    id?: string | null;\n\n    /**\n     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n     * Populated when items are returned via API.\n     */\n    status?: 'in_progress' | 'completed' | 'incomplete' | null;\n  }\n\n  /**\n   * An image generation request made by the model.\n   */\n  export interface ImageGenerationCall {\n    /**\n     * The unique ID of the image generation call.\n     */\n    id: string;\n\n    /**\n     * The generated image encoded in base64.\n     */\n    result: string | null;\n\n    /**\n     * The status of the image generation call.\n     */\n    status: 'in_progress' | 'completed' | 'generating' | 'failed';\n\n    /**\n     * The type of the image generation call. Always `image_generation_call`.\n     */\n    type: 'image_generation_call';\n  }\n\n  /**\n   * A tool call to run a command on the local shell.\n   */\n  export interface LocalShellCall {\n    /**\n     * The unique ID of the local shell call.\n     */\n    id: string;\n\n    /**\n     * Execute a shell command on the server.\n     */\n    action: LocalShellCall.Action;\n\n    /**\n     * The unique ID of the local shell tool call generated by the model.\n     */\n    call_id: string;\n\n    /**\n     * The status of the local shell call.\n     */\n    status: 'in_progress' | 'completed' | 'incomplete';\n\n    /**\n     * The type of the local shell call. Always `local_shell_call`.\n     */\n    type: 'local_shell_call';\n  }\n\n  export namespace LocalShellCall {\n    /**\n     * Execute a shell command on the server.\n     */\n    export interface Action {\n      /**\n       * The command to run.\n       */\n      command: Array<string>;\n\n      /**\n       * Environment variables to set for the command.\n       */\n      env: Record<string, string>;\n\n      /**\n       * The type of the local shell action. Always `exec`.\n       */\n      type: 'exec';\n\n      /**\n       * Optional timeout in milliseconds for the command.\n       */\n      timeout_ms?: number | null;\n\n      /**\n       * Optional user to run the command as.\n       */\n      user?: string | null;\n\n      /**\n       * Optional working directory to run the command in.\n       */\n      working_directory?: string | null;\n    }\n  }\n\n  /**\n   * The output of a local shell tool call.\n   */\n  export interface LocalShellCallOutput {\n    /**\n     * The unique ID of the local shell tool call generated by the model.\n     */\n    id: string;\n\n    /**\n     * A JSON string of the output of the local shell tool call.\n     */\n    output: string;\n\n    /**\n     * The type of the local shell tool call output. Always `local_shell_call_output`.\n     */\n    type: 'local_shell_call_output';\n\n    /**\n     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n     */\n    status?: 'in_progress' | 'completed' | 'incomplete' | null;\n  }\n\n  /**\n   * A list of tools available on an MCP server.\n   */\n  export interface McpListTools {\n    /**\n     * The unique ID of the list.\n     */\n    id: string;\n\n    /**\n     * The label of the MCP server.\n     */\n    server_label: string;\n\n    /**\n     * The tools available on the server.\n     */\n    tools: Array<McpListTools.Tool>;\n\n    /**\n     * The type of the item. Always `mcp_list_tools`.\n     */\n    type: 'mcp_list_tools';\n\n    /**\n     * Error message if the server could not list tools.\n     */\n    error?: string | null;\n  }\n\n  export namespace McpListTools {\n    /**\n     * A tool available on an MCP server.\n     */\n    export interface Tool {\n      /**\n       * The JSON schema describing the tool's input.\n       */\n      input_schema: unknown;\n\n      /**\n       * The name of the tool.\n       */\n      name: string;\n\n      /**\n       * Additional annotations about the tool.\n       */\n      annotations?: unknown | null;\n\n      /**\n       * The description of the tool.\n       */\n      description?: string | null;\n    }\n  }\n\n  /**\n   * A request for human approval of a tool invocation.\n   */\n  export interface McpApprovalRequest {\n    /**\n     * The unique ID of the approval request.\n     */\n    id: string;\n\n    /**\n     * A JSON string of arguments for the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool to run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server making the request.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_approval_request`.\n     */\n    type: 'mcp_approval_request';\n  }\n\n  /**\n   * A response to an MCP approval request.\n   */\n  export interface McpApprovalResponse {\n    /**\n     * The ID of the approval request being answered.\n     */\n    approval_request_id: string;\n\n    /**\n     * Whether the request was approved.\n     */\n    approve: boolean;\n\n    /**\n     * The type of the item. Always `mcp_approval_response`.\n     */\n    type: 'mcp_approval_response';\n\n    /**\n     * The unique ID of the approval response\n     */\n    id?: string | null;\n\n    /**\n     * Optional reason for the decision.\n     */\n    reason?: string | null;\n  }\n\n  /**\n   * An invocation of a tool on an MCP server.\n   */\n  export interface McpCall {\n    /**\n     * The unique ID of the tool call.\n     */\n    id: string;\n\n    /**\n     * A JSON string of the arguments passed to the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool that was run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server running the tool.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_call`.\n     */\n    type: 'mcp_call';\n\n    /**\n     * The error from the tool call, if any.\n     */\n    error?: string | null;\n\n    /**\n     * The output from the tool call.\n     */\n    output?: string | null;\n  }\n\n  /**\n   * An internal identifier for an item to reference.\n   */\n  export interface ItemReference {\n    /**\n     * The ID of the item to reference.\n     */\n    id: string;\n\n    /**\n     * The type of item to reference. Always `item_reference`.\n     */\n    type?: 'item_reference' | null;\n  }\n}\n\n/**\n * A list of one or many input items to the model, containing different content\n * types.\n */\nexport type ResponseInputMessageContentList = Array<ResponseInputContent>;\n\nexport interface ResponseInputMessageItem {\n  /**\n   * The unique ID of the message input.\n   */\n  id: string;\n\n  /**\n   * A list of one or many input items to the model, containing different content\n   * types.\n   */\n  content: ResponseInputMessageContentList;\n\n  /**\n   * The role of the message input. One of `user`, `system`, or `developer`.\n   */\n  role: 'user' | 'system' | 'developer';\n\n  /**\n   * The status of item. One of `in_progress`, `completed`, or `incomplete`.\n   * Populated when items are returned via API.\n   */\n  status?: 'in_progress' | 'completed' | 'incomplete';\n\n  /**\n   * The type of the message input. Always set to `message`.\n   */\n  type?: 'message';\n}\n\n/**\n * A text input to the model.\n */\nexport interface ResponseInputText {\n  /**\n   * The text input to the model.\n   */\n  text: string;\n\n  /**\n   * The type of the input item. Always `input_text`.\n   */\n  type: 'input_text';\n}\n\n/**\n * Content item used to generate a response.\n */\nexport type ResponseItem =\n  | ResponseInputMessageItem\n  | ResponseOutputMessage\n  | ResponseFileSearchToolCall\n  | ResponseComputerToolCall\n  | ResponseComputerToolCallOutputItem\n  | ResponseFunctionWebSearch\n  | ResponseFunctionToolCallItem\n  | ResponseFunctionToolCallOutputItem\n  | ResponseItem.ImageGenerationCall\n  | ResponseCodeInterpreterToolCall\n  | ResponseItem.LocalShellCall\n  | ResponseItem.LocalShellCallOutput\n  | ResponseItem.McpListTools\n  | ResponseItem.McpApprovalRequest\n  | ResponseItem.McpApprovalResponse\n  | ResponseItem.McpCall;\n\nexport namespace ResponseItem {\n  /**\n   * An image generation request made by the model.\n   */\n  export interface ImageGenerationCall {\n    /**\n     * The unique ID of the image generation call.\n     */\n    id: string;\n\n    /**\n     * The generated image encoded in base64.\n     */\n    result: string | null;\n\n    /**\n     * The status of the image generation call.\n     */\n    status: 'in_progress' | 'completed' | 'generating' | 'failed';\n\n    /**\n     * The type of the image generation call. Always `image_generation_call`.\n     */\n    type: 'image_generation_call';\n  }\n\n  /**\n   * A tool call to run a command on the local shell.\n   */\n  export interface LocalShellCall {\n    /**\n     * The unique ID of the local shell call.\n     */\n    id: string;\n\n    /**\n     * Execute a shell command on the server.\n     */\n    action: LocalShellCall.Action;\n\n    /**\n     * The unique ID of the local shell tool call generated by the model.\n     */\n    call_id: string;\n\n    /**\n     * The status of the local shell call.\n     */\n    status: 'in_progress' | 'completed' | 'incomplete';\n\n    /**\n     * The type of the local shell call. Always `local_shell_call`.\n     */\n    type: 'local_shell_call';\n  }\n\n  export namespace LocalShellCall {\n    /**\n     * Execute a shell command on the server.\n     */\n    export interface Action {\n      /**\n       * The command to run.\n       */\n      command: Array<string>;\n\n      /**\n       * Environment variables to set for the command.\n       */\n      env: Record<string, string>;\n\n      /**\n       * The type of the local shell action. Always `exec`.\n       */\n      type: 'exec';\n\n      /**\n       * Optional timeout in milliseconds for the command.\n       */\n      timeout_ms?: number | null;\n\n      /**\n       * Optional user to run the command as.\n       */\n      user?: string | null;\n\n      /**\n       * Optional working directory to run the command in.\n       */\n      working_directory?: string | null;\n    }\n  }\n\n  /**\n   * The output of a local shell tool call.\n   */\n  export interface LocalShellCallOutput {\n    /**\n     * The unique ID of the local shell tool call generated by the model.\n     */\n    id: string;\n\n    /**\n     * A JSON string of the output of the local shell tool call.\n     */\n    output: string;\n\n    /**\n     * The type of the local shell tool call output. Always `local_shell_call_output`.\n     */\n    type: 'local_shell_call_output';\n\n    /**\n     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n     */\n    status?: 'in_progress' | 'completed' | 'incomplete' | null;\n  }\n\n  /**\n   * A list of tools available on an MCP server.\n   */\n  export interface McpListTools {\n    /**\n     * The unique ID of the list.\n     */\n    id: string;\n\n    /**\n     * The label of the MCP server.\n     */\n    server_label: string;\n\n    /**\n     * The tools available on the server.\n     */\n    tools: Array<McpListTools.Tool>;\n\n    /**\n     * The type of the item. Always `mcp_list_tools`.\n     */\n    type: 'mcp_list_tools';\n\n    /**\n     * Error message if the server could not list tools.\n     */\n    error?: string | null;\n  }\n\n  export namespace McpListTools {\n    /**\n     * A tool available on an MCP server.\n     */\n    export interface Tool {\n      /**\n       * The JSON schema describing the tool's input.\n       */\n      input_schema: unknown;\n\n      /**\n       * The name of the tool.\n       */\n      name: string;\n\n      /**\n       * Additional annotations about the tool.\n       */\n      annotations?: unknown | null;\n\n      /**\n       * The description of the tool.\n       */\n      description?: string | null;\n    }\n  }\n\n  /**\n   * A request for human approval of a tool invocation.\n   */\n  export interface McpApprovalRequest {\n    /**\n     * The unique ID of the approval request.\n     */\n    id: string;\n\n    /**\n     * A JSON string of arguments for the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool to run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server making the request.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_approval_request`.\n     */\n    type: 'mcp_approval_request';\n  }\n\n  /**\n   * A response to an MCP approval request.\n   */\n  export interface McpApprovalResponse {\n    /**\n     * The unique ID of the approval response\n     */\n    id: string;\n\n    /**\n     * The ID of the approval request being answered.\n     */\n    approval_request_id: string;\n\n    /**\n     * Whether the request was approved.\n     */\n    approve: boolean;\n\n    /**\n     * The type of the item. Always `mcp_approval_response`.\n     */\n    type: 'mcp_approval_response';\n\n    /**\n     * Optional reason for the decision.\n     */\n    reason?: string | null;\n  }\n\n  /**\n   * An invocation of a tool on an MCP server.\n   */\n  export interface McpCall {\n    /**\n     * The unique ID of the tool call.\n     */\n    id: string;\n\n    /**\n     * A JSON string of the arguments passed to the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool that was run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server running the tool.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_call`.\n     */\n    type: 'mcp_call';\n\n    /**\n     * The error from the tool call, if any.\n     */\n    error?: string | null;\n\n    /**\n     * The output from the tool call.\n     */\n    output?: string | null;\n  }\n}\n\n/**\n * Emitted when there is a delta (partial update) to the arguments of an MCP tool\n * call.\n */\nexport interface ResponseMcpCallArgumentsDeltaEvent {\n  /**\n   * The partial update to the arguments for the MCP tool call.\n   */\n  delta: unknown;\n\n  /**\n   * The unique identifier of the MCP tool call item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_call.arguments_delta'.\n   */\n  type: 'response.mcp_call.arguments_delta';\n}\n\n/**\n * Emitted when the arguments for an MCP tool call are finalized.\n */\nexport interface ResponseMcpCallArgumentsDoneEvent {\n  /**\n   * The finalized arguments for the MCP tool call.\n   */\n  arguments: unknown;\n\n  /**\n   * The unique identifier of the MCP tool call item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_call.arguments_done'.\n   */\n  type: 'response.mcp_call.arguments_done';\n}\n\n/**\n * Emitted when an MCP tool call has completed successfully.\n */\nexport interface ResponseMcpCallCompletedEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_call.completed'.\n   */\n  type: 'response.mcp_call.completed';\n}\n\n/**\n * Emitted when an MCP tool call has failed.\n */\nexport interface ResponseMcpCallFailedEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_call.failed'.\n   */\n  type: 'response.mcp_call.failed';\n}\n\n/**\n * Emitted when an MCP tool call is in progress.\n */\nexport interface ResponseMcpCallInProgressEvent {\n  /**\n   * The unique identifier of the MCP tool call item being processed.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_call.in_progress'.\n   */\n  type: 'response.mcp_call.in_progress';\n}\n\n/**\n * Emitted when the list of available MCP tools has been successfully retrieved.\n */\nexport interface ResponseMcpListToolsCompletedEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_list_tools.completed'.\n   */\n  type: 'response.mcp_list_tools.completed';\n}\n\n/**\n * Emitted when the attempt to list available MCP tools has failed.\n */\nexport interface ResponseMcpListToolsFailedEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_list_tools.failed'.\n   */\n  type: 'response.mcp_list_tools.failed';\n}\n\n/**\n * Emitted when the system is in the process of retrieving the list of available\n * MCP tools.\n */\nexport interface ResponseMcpListToolsInProgressEvent {\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.mcp_list_tools.in_progress'.\n   */\n  type: 'response.mcp_list_tools.in_progress';\n}\n\n/**\n * An audio output from the model.\n */\nexport interface ResponseOutputAudio {\n  /**\n   * Base64-encoded audio data from the model.\n   */\n  data: string;\n\n  /**\n   * The transcript of the audio data from the model.\n   */\n  transcript: string;\n\n  /**\n   * The type of the output audio. Always `output_audio`.\n   */\n  type: 'output_audio';\n}\n\n/**\n * An output message from the model.\n */\nexport type ResponseOutputItem =\n  | ResponseOutputMessage\n  | ResponseFileSearchToolCall\n  | ResponseFunctionToolCall\n  | ResponseFunctionWebSearch\n  | ResponseComputerToolCall\n  | ResponseReasoningItem\n  | ResponseOutputItem.ImageGenerationCall\n  | ResponseCodeInterpreterToolCall\n  | ResponseOutputItem.LocalShellCall\n  | ResponseOutputItem.McpCall\n  | ResponseOutputItem.McpListTools\n  | ResponseOutputItem.McpApprovalRequest;\n\nexport namespace ResponseOutputItem {\n  /**\n   * An image generation request made by the model.\n   */\n  export interface ImageGenerationCall {\n    /**\n     * The unique ID of the image generation call.\n     */\n    id: string;\n\n    /**\n     * The generated image encoded in base64.\n     */\n    result: string | null;\n\n    /**\n     * The status of the image generation call.\n     */\n    status: 'in_progress' | 'completed' | 'generating' | 'failed';\n\n    /**\n     * The type of the image generation call. Always `image_generation_call`.\n     */\n    type: 'image_generation_call';\n  }\n\n  /**\n   * A tool call to run a command on the local shell.\n   */\n  export interface LocalShellCall {\n    /**\n     * The unique ID of the local shell call.\n     */\n    id: string;\n\n    /**\n     * Execute a shell command on the server.\n     */\n    action: LocalShellCall.Action;\n\n    /**\n     * The unique ID of the local shell tool call generated by the model.\n     */\n    call_id: string;\n\n    /**\n     * The status of the local shell call.\n     */\n    status: 'in_progress' | 'completed' | 'incomplete';\n\n    /**\n     * The type of the local shell call. Always `local_shell_call`.\n     */\n    type: 'local_shell_call';\n  }\n\n  export namespace LocalShellCall {\n    /**\n     * Execute a shell command on the server.\n     */\n    export interface Action {\n      /**\n       * The command to run.\n       */\n      command: Array<string>;\n\n      /**\n       * Environment variables to set for the command.\n       */\n      env: Record<string, string>;\n\n      /**\n       * The type of the local shell action. Always `exec`.\n       */\n      type: 'exec';\n\n      /**\n       * Optional timeout in milliseconds for the command.\n       */\n      timeout_ms?: number | null;\n\n      /**\n       * Optional user to run the command as.\n       */\n      user?: string | null;\n\n      /**\n       * Optional working directory to run the command in.\n       */\n      working_directory?: string | null;\n    }\n  }\n\n  /**\n   * An invocation of a tool on an MCP server.\n   */\n  export interface McpCall {\n    /**\n     * The unique ID of the tool call.\n     */\n    id: string;\n\n    /**\n     * A JSON string of the arguments passed to the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool that was run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server running the tool.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_call`.\n     */\n    type: 'mcp_call';\n\n    /**\n     * The error from the tool call, if any.\n     */\n    error?: string | null;\n\n    /**\n     * The output from the tool call.\n     */\n    output?: string | null;\n  }\n\n  /**\n   * A list of tools available on an MCP server.\n   */\n  export interface McpListTools {\n    /**\n     * The unique ID of the list.\n     */\n    id: string;\n\n    /**\n     * The label of the MCP server.\n     */\n    server_label: string;\n\n    /**\n     * The tools available on the server.\n     */\n    tools: Array<McpListTools.Tool>;\n\n    /**\n     * The type of the item. Always `mcp_list_tools`.\n     */\n    type: 'mcp_list_tools';\n\n    /**\n     * Error message if the server could not list tools.\n     */\n    error?: string | null;\n  }\n\n  export namespace McpListTools {\n    /**\n     * A tool available on an MCP server.\n     */\n    export interface Tool {\n      /**\n       * The JSON schema describing the tool's input.\n       */\n      input_schema: unknown;\n\n      /**\n       * The name of the tool.\n       */\n      name: string;\n\n      /**\n       * Additional annotations about the tool.\n       */\n      annotations?: unknown | null;\n\n      /**\n       * The description of the tool.\n       */\n      description?: string | null;\n    }\n  }\n\n  /**\n   * A request for human approval of a tool invocation.\n   */\n  export interface McpApprovalRequest {\n    /**\n     * The unique ID of the approval request.\n     */\n    id: string;\n\n    /**\n     * A JSON string of arguments for the tool.\n     */\n    arguments: string;\n\n    /**\n     * The name of the tool to run.\n     */\n    name: string;\n\n    /**\n     * The label of the MCP server making the request.\n     */\n    server_label: string;\n\n    /**\n     * The type of the item. Always `mcp_approval_request`.\n     */\n    type: 'mcp_approval_request';\n  }\n}\n\n/**\n * Emitted when a new output item is added.\n */\nexport interface ResponseOutputItemAddedEvent {\n  /**\n   * The output item that was added.\n   */\n  item: ResponseOutputItem;\n\n  /**\n   * The index of the output item that was added.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.output_item.added`.\n   */\n  type: 'response.output_item.added';\n}\n\n/**\n * Emitted when an output item is marked done.\n */\nexport interface ResponseOutputItemDoneEvent {\n  /**\n   * The output item that was marked done.\n   */\n  item: ResponseOutputItem;\n\n  /**\n   * The index of the output item that was marked done.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.output_item.done`.\n   */\n  type: 'response.output_item.done';\n}\n\n/**\n * An output message from the model.\n */\nexport interface ResponseOutputMessage {\n  /**\n   * The unique ID of the output message.\n   */\n  id: string;\n\n  /**\n   * The content of the output message.\n   */\n  content: Array<ResponseOutputText | ResponseOutputRefusal>;\n\n  /**\n   * The role of the output message. Always `assistant`.\n   */\n  role: 'assistant';\n\n  /**\n   * The status of the message input. One of `in_progress`, `completed`, or\n   * `incomplete`. Populated when input items are returned via API.\n   */\n  status: 'in_progress' | 'completed' | 'incomplete';\n\n  /**\n   * The type of the output message. Always `message`.\n   */\n  type: 'message';\n}\n\n/**\n * A refusal from the model.\n */\nexport interface ResponseOutputRefusal {\n  /**\n   * The refusal explanationfrom the model.\n   */\n  refusal: string;\n\n  /**\n   * The type of the refusal. Always `refusal`.\n   */\n  type: 'refusal';\n}\n\n/**\n * A text output from the model.\n */\nexport interface ResponseOutputText {\n  /**\n   * The annotations of the text output.\n   */\n  annotations: Array<\n    ResponseOutputText.FileCitation | ResponseOutputText.URLCitation | ResponseOutputText.FilePath\n  >;\n\n  /**\n   * The text output from the model.\n   */\n  text: string;\n\n  /**\n   * The type of the output text. Always `output_text`.\n   */\n  type: 'output_text';\n\n  logprobs?: Array<ResponseOutputText.Logprob>;\n}\n\nexport namespace ResponseOutputText {\n  /**\n   * A citation to a file.\n   */\n  export interface FileCitation {\n    /**\n     * The ID of the file.\n     */\n    file_id: string;\n\n    /**\n     * The index of the file in the list of files.\n     */\n    index: number;\n\n    /**\n     * The type of the file citation. Always `file_citation`.\n     */\n    type: 'file_citation';\n  }\n\n  /**\n   * A citation for a web resource used to generate a model response.\n   */\n  export interface URLCitation {\n    /**\n     * The index of the last character of the URL citation in the message.\n     */\n    end_index: number;\n\n    /**\n     * The index of the first character of the URL citation in the message.\n     */\n    start_index: number;\n\n    /**\n     * The title of the web resource.\n     */\n    title: string;\n\n    /**\n     * The type of the URL citation. Always `url_citation`.\n     */\n    type: 'url_citation';\n\n    /**\n     * The URL of the web resource.\n     */\n    url: string;\n  }\n\n  /**\n   * A path to a file.\n   */\n  export interface FilePath {\n    /**\n     * The ID of the file.\n     */\n    file_id: string;\n\n    /**\n     * The index of the file in the list of files.\n     */\n    index: number;\n\n    /**\n     * The type of the file path. Always `file_path`.\n     */\n    type: 'file_path';\n  }\n\n  /**\n   * The log probability of a token.\n   */\n  export interface Logprob {\n    token: string;\n\n    bytes: Array<number>;\n\n    logprob: number;\n\n    top_logprobs: Array<Logprob.TopLogprob>;\n  }\n\n  export namespace Logprob {\n    /**\n     * The top log probability of a token.\n     */\n    export interface TopLogprob {\n      token: string;\n\n      bytes: Array<number>;\n\n      logprob: number;\n    }\n  }\n}\n\n/**\n * Emitted when an annotation is added to output text content.\n */\nexport interface ResponseOutputTextAnnotationAddedEvent {\n  /**\n   * The annotation object being added. (See annotation schema for details.)\n   */\n  annotation: unknown;\n\n  /**\n   * The index of the annotation within the content part.\n   */\n  annotation_index: number;\n\n  /**\n   * The index of the content part within the output item.\n   */\n  content_index: number;\n\n  /**\n   * The unique identifier of the item to which the annotation is being added.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.output_text_annotation.added'.\n   */\n  type: 'response.output_text_annotation.added';\n}\n\n/**\n * Emitted when a response is queued and waiting to be processed.\n */\nexport interface ResponseQueuedEvent {\n  /**\n   * The full response object that is queued.\n   */\n  response: Response;\n\n  /**\n   * The sequence number for this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.queued'.\n   */\n  type: 'response.queued';\n}\n\n/**\n * Emitted when there is a delta (partial update) to the reasoning content.\n */\nexport interface ResponseReasoningDeltaEvent {\n  /**\n   * The index of the reasoning content part within the output item.\n   */\n  content_index: number;\n\n  /**\n   * The partial update to the reasoning content.\n   */\n  delta: unknown;\n\n  /**\n   * The unique identifier of the item for which reasoning is being updated.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always 'response.reasoning.delta'.\n   */\n  type: 'response.reasoning.delta';\n}\n\n/**\n * Emitted when the reasoning content is finalized for an item.\n */\nexport interface ResponseReasoningDoneEvent {\n  /**\n   * The index of the reasoning content part within the output item.\n   */\n  content_index: number;\n\n  /**\n   * The unique identifier of the item for which reasoning is finalized.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The finalized reasoning text.\n   */\n  text: string;\n\n  /**\n   * The type of the event. Always 'response.reasoning.done'.\n   */\n  type: 'response.reasoning.done';\n}\n\n/**\n * A description of the chain of thought used by a reasoning model while generating\n * a response. Be sure to include these items in your `input` to the Responses API\n * for subsequent turns of a conversation if you are manually\n * [managing context](https://platform.openai.com/docs/guides/conversation-state).\n */\nexport interface ResponseReasoningItem {\n  /**\n   * The unique identifier of the reasoning content.\n   */\n  id: string;\n\n  /**\n   * Reasoning text contents.\n   */\n  summary: Array<ResponseReasoningItem.Summary>;\n\n  /**\n   * The type of the object. Always `reasoning`.\n   */\n  type: 'reasoning';\n\n  /**\n   * The encrypted content of the reasoning item - populated when a response is\n   * generated with `reasoning.encrypted_content` in the `include` parameter.\n   */\n  encrypted_content?: string | null;\n\n  /**\n   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n   * Populated when items are returned via API.\n   */\n  status?: 'in_progress' | 'completed' | 'incomplete';\n}\n\nexport namespace ResponseReasoningItem {\n  export interface Summary {\n    /**\n     * A short summary of the reasoning used by the model when generating the response.\n     */\n    text: string;\n\n    /**\n     * The type of the object. Always `summary_text`.\n     */\n    type: 'summary_text';\n  }\n}\n\n/**\n * Emitted when there is a delta (partial update) to the reasoning summary content.\n */\nexport interface ResponseReasoningSummaryDeltaEvent {\n  /**\n   * The partial update to the reasoning summary content.\n   */\n  delta: unknown;\n\n  /**\n   * The unique identifier of the item for which the reasoning summary is being\n   * updated.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the output item.\n   */\n  summary_index: number;\n\n  /**\n   * The type of the event. Always 'response.reasoning_summary.delta'.\n   */\n  type: 'response.reasoning_summary.delta';\n}\n\n/**\n * Emitted when the reasoning summary content is finalized for an item.\n */\nexport interface ResponseReasoningSummaryDoneEvent {\n  /**\n   * The unique identifier of the item for which the reasoning summary is finalized.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item in the response's output array.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the output item.\n   */\n  summary_index: number;\n\n  /**\n   * The finalized reasoning summary text.\n   */\n  text: string;\n\n  /**\n   * The type of the event. Always 'response.reasoning_summary.done'.\n   */\n  type: 'response.reasoning_summary.done';\n}\n\n/**\n * Emitted when a new reasoning summary part is added.\n */\nexport interface ResponseReasoningSummaryPartAddedEvent {\n  /**\n   * The ID of the item this summary part is associated with.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item this summary part is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The summary part that was added.\n   */\n  part: ResponseReasoningSummaryPartAddedEvent.Part;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the reasoning summary.\n   */\n  summary_index: number;\n\n  /**\n   * The type of the event. Always `response.reasoning_summary_part.added`.\n   */\n  type: 'response.reasoning_summary_part.added';\n}\n\nexport namespace ResponseReasoningSummaryPartAddedEvent {\n  /**\n   * The summary part that was added.\n   */\n  export interface Part {\n    /**\n     * The text of the summary part.\n     */\n    text: string;\n\n    /**\n     * The type of the summary part. Always `summary_text`.\n     */\n    type: 'summary_text';\n  }\n}\n\n/**\n * Emitted when a reasoning summary part is completed.\n */\nexport interface ResponseReasoningSummaryPartDoneEvent {\n  /**\n   * The ID of the item this summary part is associated with.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item this summary part is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The completed summary part.\n   */\n  part: ResponseReasoningSummaryPartDoneEvent.Part;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the reasoning summary.\n   */\n  summary_index: number;\n\n  /**\n   * The type of the event. Always `response.reasoning_summary_part.done`.\n   */\n  type: 'response.reasoning_summary_part.done';\n}\n\nexport namespace ResponseReasoningSummaryPartDoneEvent {\n  /**\n   * The completed summary part.\n   */\n  export interface Part {\n    /**\n     * The text of the summary part.\n     */\n    text: string;\n\n    /**\n     * The type of the summary part. Always `summary_text`.\n     */\n    type: 'summary_text';\n  }\n}\n\n/**\n * Emitted when a delta is added to a reasoning summary text.\n */\nexport interface ResponseReasoningSummaryTextDeltaEvent {\n  /**\n   * The text delta that was added to the summary.\n   */\n  delta: string;\n\n  /**\n   * The ID of the item this summary text delta is associated with.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item this summary text delta is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the reasoning summary.\n   */\n  summary_index: number;\n\n  /**\n   * The type of the event. Always `response.reasoning_summary_text.delta`.\n   */\n  type: 'response.reasoning_summary_text.delta';\n}\n\n/**\n * Emitted when a reasoning summary text is completed.\n */\nexport interface ResponseReasoningSummaryTextDoneEvent {\n  /**\n   * The ID of the item this summary text is associated with.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item this summary text is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The index of the summary part within the reasoning summary.\n   */\n  summary_index: number;\n\n  /**\n   * The full text of the completed reasoning summary.\n   */\n  text: string;\n\n  /**\n   * The type of the event. Always `response.reasoning_summary_text.done`.\n   */\n  type: 'response.reasoning_summary_text.done';\n}\n\n/**\n * Emitted when there is a partial refusal text.\n */\nexport interface ResponseRefusalDeltaEvent {\n  /**\n   * The index of the content part that the refusal text is added to.\n   */\n  content_index: number;\n\n  /**\n   * The refusal text that is added.\n   */\n  delta: string;\n\n  /**\n   * The ID of the output item that the refusal text is added to.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the refusal text is added to.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.refusal.delta`.\n   */\n  type: 'response.refusal.delta';\n}\n\n/**\n * Emitted when refusal text is finalized.\n */\nexport interface ResponseRefusalDoneEvent {\n  /**\n   * The index of the content part that the refusal text is finalized.\n   */\n  content_index: number;\n\n  /**\n   * The ID of the output item that the refusal text is finalized.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the refusal text is finalized.\n   */\n  output_index: number;\n\n  /**\n   * The refusal text that is finalized.\n   */\n  refusal: string;\n\n  /**\n   * The sequence number of this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.refusal.done`.\n   */\n  type: 'response.refusal.done';\n}\n\n/**\n * The status of the response generation. One of `completed`, `failed`,\n * `in_progress`, `cancelled`, `queued`, or `incomplete`.\n */\nexport type ResponseStatus = 'completed' | 'failed' | 'in_progress' | 'cancelled' | 'queued' | 'incomplete';\n\n/**\n * Emitted when there is a partial audio response.\n */\nexport type ResponseStreamEvent =\n  | ResponseAudioDeltaEvent\n  | ResponseAudioDoneEvent\n  | ResponseAudioTranscriptDeltaEvent\n  | ResponseAudioTranscriptDoneEvent\n  | ResponseCodeInterpreterCallCodeDeltaEvent\n  | ResponseCodeInterpreterCallCodeDoneEvent\n  | ResponseCodeInterpreterCallCompletedEvent\n  | ResponseCodeInterpreterCallInProgressEvent\n  | ResponseCodeInterpreterCallInterpretingEvent\n  | ResponseCompletedEvent\n  | ResponseContentPartAddedEvent\n  | ResponseContentPartDoneEvent\n  | ResponseCreatedEvent\n  | ResponseErrorEvent\n  | ResponseFileSearchCallCompletedEvent\n  | ResponseFileSearchCallInProgressEvent\n  | ResponseFileSearchCallSearchingEvent\n  | ResponseFunctionCallArgumentsDeltaEvent\n  | ResponseFunctionCallArgumentsDoneEvent\n  | ResponseInProgressEvent\n  | ResponseFailedEvent\n  | ResponseIncompleteEvent\n  | ResponseOutputItemAddedEvent\n  | ResponseOutputItemDoneEvent\n  | ResponseReasoningSummaryPartAddedEvent\n  | ResponseReasoningSummaryPartDoneEvent\n  | ResponseReasoningSummaryTextDeltaEvent\n  | ResponseReasoningSummaryTextDoneEvent\n  | ResponseRefusalDeltaEvent\n  | ResponseRefusalDoneEvent\n  | ResponseTextDeltaEvent\n  | ResponseTextDoneEvent\n  | ResponseWebSearchCallCompletedEvent\n  | ResponseWebSearchCallInProgressEvent\n  | ResponseWebSearchCallSearchingEvent\n  | ResponseImageGenCallCompletedEvent\n  | ResponseImageGenCallGeneratingEvent\n  | ResponseImageGenCallInProgressEvent\n  | ResponseImageGenCallPartialImageEvent\n  | ResponseMcpCallArgumentsDeltaEvent\n  | ResponseMcpCallArgumentsDoneEvent\n  | ResponseMcpCallCompletedEvent\n  | ResponseMcpCallFailedEvent\n  | ResponseMcpCallInProgressEvent\n  | ResponseMcpListToolsCompletedEvent\n  | ResponseMcpListToolsFailedEvent\n  | ResponseMcpListToolsInProgressEvent\n  | ResponseOutputTextAnnotationAddedEvent\n  | ResponseQueuedEvent\n  | ResponseReasoningDeltaEvent\n  | ResponseReasoningDoneEvent\n  | ResponseReasoningSummaryDeltaEvent\n  | ResponseReasoningSummaryDoneEvent;\n\n/**\n * Configuration options for a text response from the model. Can be plain text or\n * structured JSON data. Learn more:\n *\n * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n */\nexport interface ResponseTextConfig {\n  /**\n   * An object specifying the format that the model must output.\n   *\n   * Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, which\n   * ensures the model will match your supplied JSON schema. Learn more in the\n   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n   *\n   * The default format is `{ \"type\": \"text\" }` with no additional options.\n   *\n   * **Not recommended for gpt-4o and newer models:**\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n   * ensures the message the model generates is valid JSON. Using `json_schema` is\n   * preferred for models that support it.\n   */\n  format?: ResponseFormatTextConfig;\n}\n\n/**\n * Emitted when there is an additional text delta.\n */\nexport interface ResponseTextDeltaEvent {\n  /**\n   * The index of the content part that the text delta was added to.\n   */\n  content_index: number;\n\n  /**\n   * The text delta that was added.\n   */\n  delta: string;\n\n  /**\n   * The ID of the output item that the text delta was added to.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the text delta was added to.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number for this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.output_text.delta`.\n   */\n  type: 'response.output_text.delta';\n}\n\n/**\n * Emitted when text content is finalized.\n */\nexport interface ResponseTextDoneEvent {\n  /**\n   * The index of the content part that the text content is finalized.\n   */\n  content_index: number;\n\n  /**\n   * The ID of the output item that the text content is finalized.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the text content is finalized.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number for this event.\n   */\n  sequence_number: number;\n\n  /**\n   * The text content that is finalized.\n   */\n  text: string;\n\n  /**\n   * The type of the event. Always `response.output_text.done`.\n   */\n  type: 'response.output_text.done';\n}\n\n/**\n * Represents token usage details including input tokens, output tokens, a\n * breakdown of output tokens, and the total tokens used.\n */\nexport interface ResponseUsage {\n  /**\n   * The number of input tokens.\n   */\n  input_tokens: number;\n\n  /**\n   * A detailed breakdown of the input tokens.\n   */\n  input_tokens_details: ResponseUsage.InputTokensDetails;\n\n  /**\n   * The number of output tokens.\n   */\n  output_tokens: number;\n\n  /**\n   * A detailed breakdown of the output tokens.\n   */\n  output_tokens_details: ResponseUsage.OutputTokensDetails;\n\n  /**\n   * The total number of tokens used.\n   */\n  total_tokens: number;\n}\n\nexport namespace ResponseUsage {\n  /**\n   * A detailed breakdown of the input tokens.\n   */\n  export interface InputTokensDetails {\n    /**\n     * The number of tokens that were retrieved from the cache.\n     * [More on prompt caching](https://platform.openai.com/docs/guides/prompt-caching).\n     */\n    cached_tokens: number;\n  }\n\n  /**\n   * A detailed breakdown of the output tokens.\n   */\n  export interface OutputTokensDetails {\n    /**\n     * The number of reasoning tokens.\n     */\n    reasoning_tokens: number;\n  }\n}\n\n/**\n * Emitted when a web search call is completed.\n */\nexport interface ResponseWebSearchCallCompletedEvent {\n  /**\n   * Unique ID for the output item associated with the web search call.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the web search call is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of the web search call being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.web_search_call.completed`.\n   */\n  type: 'response.web_search_call.completed';\n}\n\n/**\n * Emitted when a web search call is initiated.\n */\nexport interface ResponseWebSearchCallInProgressEvent {\n  /**\n   * Unique ID for the output item associated with the web search call.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the web search call is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of the web search call being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.web_search_call.in_progress`.\n   */\n  type: 'response.web_search_call.in_progress';\n}\n\n/**\n * Emitted when a web search call is executing.\n */\nexport interface ResponseWebSearchCallSearchingEvent {\n  /**\n   * Unique ID for the output item associated with the web search call.\n   */\n  item_id: string;\n\n  /**\n   * The index of the output item that the web search call is associated with.\n   */\n  output_index: number;\n\n  /**\n   * The sequence number of the web search call being processed.\n   */\n  sequence_number: number;\n\n  /**\n   * The type of the event. Always `response.web_search_call.searching`.\n   */\n  type: 'response.web_search_call.searching';\n}\n\n/**\n * A tool that can be used to generate a response.\n */\nexport type Tool =\n  | FunctionTool\n  | FileSearchTool\n  | WebSearchTool\n  | ComputerTool\n  | Tool.Mcp\n  | Tool.CodeInterpreter\n  | Tool.ImageGeneration\n  | Tool.LocalShell;\n\nexport namespace Tool {\n  /**\n   * Give the model access to additional tools via remote Model Context Protocol\n   * (MCP) servers.\n   * [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).\n   */\n  export interface Mcp {\n    /**\n     * A label for this MCP server, used to identify it in tool calls.\n     */\n    server_label: string;\n\n    /**\n     * The URL for the MCP server.\n     */\n    server_url: string;\n\n    /**\n     * The type of the MCP tool. Always `mcp`.\n     */\n    type: 'mcp';\n\n    /**\n     * List of allowed tool names or a filter object.\n     */\n    allowed_tools?: Array<string> | Mcp.McpAllowedToolsFilter | null;\n\n    /**\n     * Optional HTTP headers to send to the MCP server. Use for authentication or other\n     * purposes.\n     */\n    headers?: Record<string, string> | null;\n\n    /**\n     * Specify which of the MCP server's tools require approval.\n     */\n    require_approval?: Mcp.McpToolApprovalFilter | 'always' | 'never' | null;\n  }\n\n  export namespace Mcp {\n    /**\n     * A filter object to specify which tools are allowed.\n     */\n    export interface McpAllowedToolsFilter {\n      /**\n       * List of allowed tool names.\n       */\n      tool_names?: Array<string>;\n    }\n\n    export interface McpToolApprovalFilter {\n      /**\n       * A list of tools that always require approval.\n       */\n      always?: McpToolApprovalFilter.Always;\n\n      /**\n       * A list of tools that never require approval.\n       */\n      never?: McpToolApprovalFilter.Never;\n    }\n\n    export namespace McpToolApprovalFilter {\n      /**\n       * A list of tools that always require approval.\n       */\n      export interface Always {\n        /**\n         * List of tools that require approval.\n         */\n        tool_names?: Array<string>;\n      }\n\n      /**\n       * A list of tools that never require approval.\n       */\n      export interface Never {\n        /**\n         * List of tools that do not require approval.\n         */\n        tool_names?: Array<string>;\n      }\n    }\n  }\n\n  /**\n   * A tool that runs Python code to help generate a response to a prompt.\n   */\n  export interface CodeInterpreter {\n    /**\n     * The code interpreter container. Can be a container ID or an object that\n     * specifies uploaded file IDs to make available to your code.\n     */\n    container: string | CodeInterpreter.CodeInterpreterToolAuto;\n\n    /**\n     * The type of the code interpreter tool. Always `code_interpreter`.\n     */\n    type: 'code_interpreter';\n  }\n\n  export namespace CodeInterpreter {\n    /**\n     * Configuration for a code interpreter container. Optionally specify the IDs of\n     * the files to run the code on.\n     */\n    export interface CodeInterpreterToolAuto {\n      /**\n       * Always `auto`.\n       */\n      type: 'auto';\n\n      /**\n       * An optional list of uploaded files to make available to your code.\n       */\n      file_ids?: Array<string>;\n    }\n  }\n\n  /**\n   * A tool that generates images using a model like `gpt-image-1`.\n   */\n  export interface ImageGeneration {\n    /**\n     * The type of the image generation tool. Always `image_generation`.\n     */\n    type: 'image_generation';\n\n    /**\n     * Background type for the generated image. One of `transparent`, `opaque`, or\n     * `auto`. Default: `auto`.\n     */\n    background?: 'transparent' | 'opaque' | 'auto';\n\n    /**\n     * Optional mask for inpainting. Contains `image_url` (string, optional) and\n     * `file_id` (string, optional).\n     */\n    input_image_mask?: ImageGeneration.InputImageMask;\n\n    /**\n     * The image generation model to use. Default: `gpt-image-1`.\n     */\n    model?: 'gpt-image-1';\n\n    /**\n     * Moderation level for the generated image. Default: `auto`.\n     */\n    moderation?: 'auto' | 'low';\n\n    /**\n     * Compression level for the output image. Default: 100.\n     */\n    output_compression?: number;\n\n    /**\n     * The output format of the generated image. One of `png`, `webp`, or `jpeg`.\n     * Default: `png`.\n     */\n    output_format?: 'png' | 'webp' | 'jpeg';\n\n    /**\n     * Number of partial images to generate in streaming mode, from 0 (default value)\n     * to 3.\n     */\n    partial_images?: number;\n\n    /**\n     * The quality of the generated image. One of `low`, `medium`, `high`, or `auto`.\n     * Default: `auto`.\n     */\n    quality?: 'low' | 'medium' | 'high' | 'auto';\n\n    /**\n     * The size of the generated image. One of `1024x1024`, `1024x1536`, `1536x1024`,\n     * or `auto`. Default: `auto`.\n     */\n    size?: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';\n  }\n\n  export namespace ImageGeneration {\n    /**\n     * Optional mask for inpainting. Contains `image_url` (string, optional) and\n     * `file_id` (string, optional).\n     */\n    export interface InputImageMask {\n      /**\n       * File ID for the mask image.\n       */\n      file_id?: string;\n\n      /**\n       * Base64-encoded mask image.\n       */\n      image_url?: string;\n    }\n  }\n\n  /**\n   * A tool that allows the model to execute shell commands in a local environment.\n   */\n  export interface LocalShell {\n    /**\n     * The type of the local shell tool. Always `local_shell`.\n     */\n    type: 'local_shell';\n  }\n}\n\n/**\n * Use this option to force the model to call a specific function.\n */\nexport interface ToolChoiceFunction {\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n\n  /**\n   * For function calling, the type is always `function`.\n   */\n  type: 'function';\n}\n\n/**\n * Controls which (if any) tool is called by the model.\n *\n * `none` means the model will not call any tool and instead generates a message.\n *\n * `auto` means the model can pick between generating a message or calling one or\n * more tools.\n *\n * `required` means the model must call one or more tools.\n */\nexport type ToolChoiceOptions = 'none' | 'auto' | 'required';\n\n/**\n * Indicates that the model should use a built-in tool to generate a response.\n * [Learn more about built-in tools](https://platform.openai.com/docs/guides/tools).\n */\nexport interface ToolChoiceTypes {\n  /**\n   * The type of hosted tool the model should to use. Learn more about\n   * [built-in tools](https://platform.openai.com/docs/guides/tools).\n   *\n   * Allowed values are:\n   *\n   * - `file_search`\n   * - `web_search_preview`\n   * - `computer_use_preview`\n   * - `code_interpreter`\n   * - `mcp`\n   * - `image_generation`\n   */\n  type:\n    | 'file_search'\n    | 'web_search_preview'\n    | 'computer_use_preview'\n    | 'web_search_preview_2025_03_11'\n    | 'image_generation'\n    | 'code_interpreter'\n    | 'mcp';\n}\n\n/**\n * This tool searches the web for relevant results to use in a response. Learn more\n * about the\n * [web search tool](https://platform.openai.com/docs/guides/tools-web-search).\n */\nexport interface WebSearchTool {\n  /**\n   * The type of the web search tool. One of `web_search_preview` or\n   * `web_search_preview_2025_03_11`.\n   */\n  type: 'web_search_preview' | 'web_search_preview_2025_03_11';\n\n  /**\n   * High level guidance for the amount of context window space to use for the\n   * search. One of `low`, `medium`, or `high`. `medium` is the default.\n   */\n  search_context_size?: 'low' | 'medium' | 'high';\n\n  /**\n   * The user's location.\n   */\n  user_location?: WebSearchTool.UserLocation | null;\n}\n\nexport namespace WebSearchTool {\n  /**\n   * The user's location.\n   */\n  export interface UserLocation {\n    /**\n     * The type of location approximation. Always `approximate`.\n     */\n    type: 'approximate';\n\n    /**\n     * Free text input for the city of the user, e.g. `San Francisco`.\n     */\n    city?: string | null;\n\n    /**\n     * The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of\n     * the user, e.g. `US`.\n     */\n    country?: string | null;\n\n    /**\n     * Free text input for the region of the user, e.g. `California`.\n     */\n    region?: string | null;\n\n    /**\n     * The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the\n     * user, e.g. `America/Los_Angeles`.\n     */\n    timezone?: string | null;\n  }\n}\n\nexport type ResponseCreateParams = ResponseCreateParamsNonStreaming | ResponseCreateParamsStreaming;\n\nexport interface ResponseCreateParamsBase {\n  /**\n   * Text, image, or file inputs to the model, used to generate a response.\n   *\n   * Learn more:\n   *\n   * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n   * - [Image inputs](https://platform.openai.com/docs/guides/images)\n   * - [File inputs](https://platform.openai.com/docs/guides/pdf-files)\n   * - [Conversation state](https://platform.openai.com/docs/guides/conversation-state)\n   * - [Function calling](https://platform.openai.com/docs/guides/function-calling)\n   */\n  input: string | ResponseInput;\n\n  /**\n   * Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI offers a\n   * wide range of models with different capabilities, performance characteristics,\n   * and price points. Refer to the\n   * [model guide](https://platform.openai.com/docs/models) to browse and compare\n   * available models.\n   */\n  model: Shared.ResponsesModel;\n\n  /**\n   * Whether to run the model response in the background.\n   * [Learn more](https://platform.openai.com/docs/guides/background).\n   */\n  background?: boolean | null;\n\n  /**\n   * Specify additional output data to include in the model response. Currently\n   * supported values are:\n   *\n   * - `file_search_call.results`: Include the search results of the file search tool\n   *   call.\n   * - `message.input_image.image_url`: Include image urls from the input message.\n   * - `computer_call_output.output.image_url`: Include image urls from the computer\n   *   call output.\n   * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n   *   tokens in reasoning item outputs. This enables reasoning items to be used in\n   *   multi-turn conversations when using the Responses API statelessly (like when\n   *   the `store` parameter is set to `false`, or when an organization is enrolled\n   *   in the zero data retention program).\n   */\n  include?: Array<ResponseIncludable> | null;\n\n  /**\n   * Inserts a system (or developer) message as the first item in the model's\n   * context.\n   *\n   * When using along with `previous_response_id`, the instructions from a previous\n   * response will not be carried over to the next response. This makes it simple to\n   * swap out system (or developer) messages in new responses.\n   */\n  instructions?: string | null;\n\n  /**\n   * An upper bound for the number of tokens that can be generated for a response,\n   * including visible output tokens and\n   * [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).\n   */\n  max_output_tokens?: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * Whether to allow the model to run tool calls in parallel.\n   */\n  parallel_tool_calls?: boolean | null;\n\n  /**\n   * The unique ID of the previous response to the model. Use this to create\n   * multi-turn conversations. Learn more about\n   * [conversation state](https://platform.openai.com/docs/guides/conversation-state).\n   */\n  previous_response_id?: string | null;\n\n  /**\n   * **o-series models only**\n   *\n   * Configuration options for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n   */\n  reasoning?: Shared.Reasoning | null;\n\n  /**\n   * Specifies the latency tier to use for processing the request. This parameter is\n   * relevant for customers subscribed to the scale tier service:\n   *\n   * - If set to 'auto', and the Project is Scale tier enabled, the system will\n   *   utilize scale tier credits until they are exhausted.\n   * - If set to 'auto', and the Project is not Scale tier enabled, the request will\n   *   be processed using the default service tier with a lower uptime SLA and no\n   *   latency guarentee.\n   * - If set to 'default', the request will be processed using the default service\n   *   tier with a lower uptime SLA and no latency guarentee.\n   * - If set to 'flex', the request will be processed with the Flex Processing\n   *   service tier.\n   *   [Learn more](https://platform.openai.com/docs/guides/flex-processing).\n   * - When not set, the default behavior is 'auto'.\n   *\n   * When this parameter is set, the response body will include the `service_tier`\n   * utilized.\n   */\n  service_tier?: 'auto' | 'default' | 'flex' | null;\n\n  /**\n   * Whether to store the generated model response for later retrieval via API.\n   */\n  store?: boolean | null;\n\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream?: boolean | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic. We generally recommend altering this or `top_p` but\n   * not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * Configuration options for a text response from the model. Can be plain text or\n   * structured JSON data. Learn more:\n   *\n   * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n   * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n   */\n  text?: ResponseTextConfig;\n\n  /**\n   * How the model should select which tool (or tools) to use when generating a\n   * response. See the `tools` parameter to see how to specify which tools the model\n   * can call.\n   */\n  tool_choice?: ToolChoiceOptions | ToolChoiceTypes | ToolChoiceFunction;\n\n  /**\n   * An array of tools the model may call while generating a response. You can\n   * specify which tool to use by setting the `tool_choice` parameter.\n   *\n   * The two categories of tools you can provide the model are:\n   *\n   * - **Built-in tools**: Tools that are provided by OpenAI that extend the model's\n   *   capabilities, like\n   *   [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n   *   [file search](https://platform.openai.com/docs/guides/tools-file-search).\n   *   Learn more about\n   *   [built-in tools](https://platform.openai.com/docs/guides/tools).\n   * - **Function calls (custom tools)**: Functions that are defined by you, enabling\n   *   the model to call your own code. Learn more about\n   *   [function calling](https://platform.openai.com/docs/guides/function-calling).\n   */\n  tools?: Array<Tool>;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * The truncation strategy to use for the model response.\n   *\n   * - `auto`: If the context of this response and previous ones exceeds the model's\n   *   context window size, the model will truncate the response to fit the context\n   *   window by dropping input items in the middle of the conversation.\n   * - `disabled` (default): If a model response will exceed the context window size\n   *   for a model, the request will fail with a 400 error.\n   */\n  truncation?: 'auto' | 'disabled' | null;\n\n  /**\n   * A stable identifier for your end-users. Used to boost cache hit rates by better\n   * bucketing similar requests and to help OpenAI detect and prevent abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace ResponseCreateParams {\n  export type ResponseCreateParamsNonStreaming = ResponsesAPI.ResponseCreateParamsNonStreaming;\n  export type ResponseCreateParamsStreaming = ResponsesAPI.ResponseCreateParamsStreaming;\n}\n\nexport interface ResponseCreateParamsNonStreaming extends ResponseCreateParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream?: false | null;\n}\n\nexport interface ResponseCreateParamsStreaming extends ResponseCreateParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream: true;\n}\n\nexport type ResponseRetrieveParams = ResponseRetrieveParamsNonStreaming | ResponseRetrieveParamsStreaming;\n\nexport interface ResponseRetrieveParamsBase {\n  /**\n   * Additional fields to include in the response. See the `include` parameter for\n   * Response creation above for more information.\n   */\n  include?: Array<ResponseIncludable>;\n\n  /**\n   * The sequence number of the event after which to start streaming.\n   */\n  starting_after?: number;\n\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream?: boolean;\n}\n\nexport namespace ResponseRetrieveParams {\n  export type ResponseRetrieveParamsNonStreaming = ResponsesAPI.ResponseRetrieveParamsNonStreaming;\n  export type ResponseRetrieveParamsStreaming = ResponsesAPI.ResponseRetrieveParamsStreaming;\n}\n\nexport interface ResponseRetrieveParamsNonStreaming extends ResponseRetrieveParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream?: false;\n}\n\nexport interface ResponseRetrieveParamsStreaming extends ResponseRetrieveParamsBase {\n  /**\n   * If set to true, the model response data will be streamed to the client as it is\n   * generated using\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n   * See the\n   * [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n   * for more information.\n   */\n  stream: true;\n}\n\nResponses.InputItems = InputItems;\n\nexport declare namespace Responses {\n  export {\n    type ComputerTool as ComputerTool,\n    type EasyInputMessage as EasyInputMessage,\n    type FileSearchTool as FileSearchTool,\n    type FunctionTool as FunctionTool,\n    type Response as Response,\n    type ResponseAudioDeltaEvent as ResponseAudioDeltaEvent,\n    type ResponseAudioDoneEvent as ResponseAudioDoneEvent,\n    type ResponseAudioTranscriptDeltaEvent as ResponseAudioTranscriptDeltaEvent,\n    type ResponseAudioTranscriptDoneEvent as ResponseAudioTranscriptDoneEvent,\n    type ResponseCodeInterpreterCallCodeDeltaEvent as ResponseCodeInterpreterCallCodeDeltaEvent,\n    type ResponseCodeInterpreterCallCodeDoneEvent as ResponseCodeInterpreterCallCodeDoneEvent,\n    type ResponseCodeInterpreterCallCompletedEvent as ResponseCodeInterpreterCallCompletedEvent,\n    type ResponseCodeInterpreterCallInProgressEvent as ResponseCodeInterpreterCallInProgressEvent,\n    type ResponseCodeInterpreterCallInterpretingEvent as ResponseCodeInterpreterCallInterpretingEvent,\n    type ResponseCodeInterpreterToolCall as ResponseCodeInterpreterToolCall,\n    type ResponseCompletedEvent as ResponseCompletedEvent,\n    type ResponseComputerToolCall as ResponseComputerToolCall,\n    type ResponseComputerToolCallOutputItem as ResponseComputerToolCallOutputItem,\n    type ResponseComputerToolCallOutputScreenshot as ResponseComputerToolCallOutputScreenshot,\n    type ResponseContent as ResponseContent,\n    type ResponseContentPartAddedEvent as ResponseContentPartAddedEvent,\n    type ResponseContentPartDoneEvent as ResponseContentPartDoneEvent,\n    type ResponseCreatedEvent as ResponseCreatedEvent,\n    type ResponseError as ResponseError,\n    type ResponseErrorEvent as ResponseErrorEvent,\n    type ResponseFailedEvent as ResponseFailedEvent,\n    type ResponseFileSearchCallCompletedEvent as ResponseFileSearchCallCompletedEvent,\n    type ResponseFileSearchCallInProgressEvent as ResponseFileSearchCallInProgressEvent,\n    type ResponseFileSearchCallSearchingEvent as ResponseFileSearchCallSearchingEvent,\n    type ResponseFileSearchToolCall as ResponseFileSearchToolCall,\n    type ResponseFormatTextConfig as ResponseFormatTextConfig,\n    type ResponseFormatTextJSONSchemaConfig as ResponseFormatTextJSONSchemaConfig,\n    type ResponseFunctionCallArgumentsDeltaEvent as ResponseFunctionCallArgumentsDeltaEvent,\n    type ResponseFunctionCallArgumentsDoneEvent as ResponseFunctionCallArgumentsDoneEvent,\n    type ResponseFunctionToolCall as ResponseFunctionToolCall,\n    type ResponseFunctionToolCallItem as ResponseFunctionToolCallItem,\n    type ResponseFunctionToolCallOutputItem as ResponseFunctionToolCallOutputItem,\n    type ResponseFunctionWebSearch as ResponseFunctionWebSearch,\n    type ResponseImageGenCallCompletedEvent as ResponseImageGenCallCompletedEvent,\n    type ResponseImageGenCallGeneratingEvent as ResponseImageGenCallGeneratingEvent,\n    type ResponseImageGenCallInProgressEvent as ResponseImageGenCallInProgressEvent,\n    type ResponseImageGenCallPartialImageEvent as ResponseImageGenCallPartialImageEvent,\n    type ResponseInProgressEvent as ResponseInProgressEvent,\n    type ResponseIncludable as ResponseIncludable,\n    type ResponseIncompleteEvent as ResponseIncompleteEvent,\n    type ResponseInput as ResponseInput,\n    type ResponseInputAudio as ResponseInputAudio,\n    type ResponseInputContent as ResponseInputContent,\n    type ResponseInputFile as ResponseInputFile,\n    type ResponseInputImage as ResponseInputImage,\n    type ResponseInputItem as ResponseInputItem,\n    type ResponseInputMessageContentList as ResponseInputMessageContentList,\n    type ResponseInputMessageItem as ResponseInputMessageItem,\n    type ResponseInputText as ResponseInputText,\n    type ResponseItem as ResponseItem,\n    type ResponseMcpCallArgumentsDeltaEvent as ResponseMcpCallArgumentsDeltaEvent,\n    type ResponseMcpCallArgumentsDoneEvent as ResponseMcpCallArgumentsDoneEvent,\n    type ResponseMcpCallCompletedEvent as ResponseMcpCallCompletedEvent,\n    type ResponseMcpCallFailedEvent as ResponseMcpCallFailedEvent,\n    type ResponseMcpCallInProgressEvent as ResponseMcpCallInProgressEvent,\n    type ResponseMcpListToolsCompletedEvent as ResponseMcpListToolsCompletedEvent,\n    type ResponseMcpListToolsFailedEvent as ResponseMcpListToolsFailedEvent,\n    type ResponseMcpListToolsInProgressEvent as ResponseMcpListToolsInProgressEvent,\n    type ResponseOutputAudio as ResponseOutputAudio,\n    type ResponseOutputItem as ResponseOutputItem,\n    type ResponseOutputItemAddedEvent as ResponseOutputItemAddedEvent,\n    type ResponseOutputItemDoneEvent as ResponseOutputItemDoneEvent,\n    type ResponseOutputMessage as ResponseOutputMessage,\n    type ResponseOutputRefusal as ResponseOutputRefusal,\n    type ResponseOutputText as ResponseOutputText,\n    type ResponseOutputTextAnnotationAddedEvent as ResponseOutputTextAnnotationAddedEvent,\n    type ResponseQueuedEvent as ResponseQueuedEvent,\n    type ResponseReasoningDeltaEvent as ResponseReasoningDeltaEvent,\n    type ResponseReasoningDoneEvent as ResponseReasoningDoneEvent,\n    type ResponseReasoningItem as ResponseReasoningItem,\n    type ResponseReasoningSummaryDeltaEvent as ResponseReasoningSummaryDeltaEvent,\n    type ResponseReasoningSummaryDoneEvent as ResponseReasoningSummaryDoneEvent,\n    type ResponseReasoningSummaryPartAddedEvent as ResponseReasoningSummaryPartAddedEvent,\n    type ResponseReasoningSummaryPartDoneEvent as ResponseReasoningSummaryPartDoneEvent,\n    type ResponseReasoningSummaryTextDeltaEvent as ResponseReasoningSummaryTextDeltaEvent,\n    type ResponseReasoningSummaryTextDoneEvent as ResponseReasoningSummaryTextDoneEvent,\n    type ResponseRefusalDeltaEvent as ResponseRefusalDeltaEvent,\n    type ResponseRefusalDoneEvent as ResponseRefusalDoneEvent,\n    type ResponseStatus as ResponseStatus,\n    type ResponseStreamEvent as ResponseStreamEvent,\n    type ResponseTextConfig as ResponseTextConfig,\n    type ResponseTextDeltaEvent as ResponseTextDeltaEvent,\n    type ResponseTextDoneEvent as ResponseTextDoneEvent,\n    type ResponseUsage as ResponseUsage,\n    type ResponseWebSearchCallCompletedEvent as ResponseWebSearchCallCompletedEvent,\n    type ResponseWebSearchCallInProgressEvent as ResponseWebSearchCallInProgressEvent,\n    type ResponseWebSearchCallSearchingEvent as ResponseWebSearchCallSearchingEvent,\n    type Tool as Tool,\n    type ToolChoiceFunction as ToolChoiceFunction,\n    type ToolChoiceOptions as ToolChoiceOptions,\n    type ToolChoiceTypes as ToolChoiceTypes,\n    type WebSearchTool as WebSearchTool,\n    type ResponseCreateParams as ResponseCreateParams,\n    type ResponseCreateParamsNonStreaming as ResponseCreateParamsNonStreaming,\n    type ResponseCreateParamsStreaming as ResponseCreateParamsStreaming,\n    type ResponseRetrieveParams as ResponseRetrieveParams,\n    type ResponseRetrieveParamsNonStreaming as ResponseRetrieveParamsNonStreaming,\n    type ResponseRetrieveParamsStreaming as ResponseRetrieveParamsStreaming,\n  };\n\n  export {\n    InputItems as InputItems,\n    type ResponseItemList as ResponseItemList,\n    type InputItemListParams as InputItemListParams,\n  };\n}\n","import { OpenAIError } from '../error';\nimport type { ChatCompletionTool } from '../resources/chat/completions';\nimport {\n  ResponseTextConfig,\n  type FunctionTool,\n  type ParsedContent,\n  type ParsedResponse,\n  type ParsedResponseFunctionToolCall,\n  type ParsedResponseOutputItem,\n  type Response,\n  type ResponseCreateParamsBase,\n  type ResponseCreateParamsNonStreaming,\n  type ResponseFunctionToolCall,\n  type Tool,\n} from '../resources/responses/responses';\nimport { type AutoParseableTextFormat, isAutoParsableResponseFormat } from '../lib/parser';\n\nexport type ParseableToolsParams = Array<Tool> | ChatCompletionTool | null;\n\nexport type ResponseCreateParamsWithTools = ResponseCreateParamsBase & {\n  tools?: ParseableToolsParams;\n};\n\ntype TextConfigParams = { text?: ResponseTextConfig };\n\nexport type ExtractParsedContentFromParams<Params extends TextConfigParams> =\n  NonNullable<Params['text']>['format'] extends AutoParseableTextFormat<infer P> ? P : null;\n\nexport function maybeParseResponse<\n  Params extends ResponseCreateParamsBase | null,\n  ParsedT = Params extends null ? null : ExtractParsedContentFromParams<NonNullable<Params>>,\n>(response: Response, params: Params): ParsedResponse<ParsedT> {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...response,\n      output_parsed: null,\n      output: response.output.map((item) => {\n        if (item.type === 'function_call') {\n          return {\n            ...item,\n            parsed_arguments: null,\n          };\n        }\n\n        if (item.type === 'message') {\n          return {\n            ...item,\n            content: item.content.map((content) => ({\n              ...content,\n              parsed: null,\n            })),\n          };\n        } else {\n          return item;\n        }\n      }),\n    };\n  }\n\n  return parseResponse(response, params);\n}\n\nexport function parseResponse<\n  Params extends ResponseCreateParamsBase,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(response: Response, params: Params): ParsedResponse<ParsedT> {\n  const output: Array<ParsedResponseOutputItem<ParsedT>> = response.output.map(\n    (item): ParsedResponseOutputItem<ParsedT> => {\n      if (item.type === 'function_call') {\n        return {\n          ...item,\n          parsed_arguments: parseToolCall(params, item),\n        };\n      }\n      if (item.type === 'message') {\n        const content: Array<ParsedContent<ParsedT>> = item.content.map((content) => {\n          if (content.type === 'output_text') {\n            return {\n              ...content,\n              parsed: parseTextFormat(params, content.text),\n            };\n          }\n\n          return content;\n        });\n\n        return {\n          ...item,\n          content,\n        };\n      }\n\n      return item;\n    },\n  );\n\n  const parsed: Omit<ParsedResponse<ParsedT>, 'output_parsed'> = Object.assign({}, response, { output });\n  if (!Object.getOwnPropertyDescriptor(response, 'output_text')) {\n    addOutputText(parsed);\n  }\n\n  Object.defineProperty(parsed, 'output_parsed', {\n    enumerable: true,\n    get() {\n      for (const output of parsed.output) {\n        if (output.type !== 'message') {\n          continue;\n        }\n\n        for (const content of output.content) {\n          if (content.type === 'output_text' && content.parsed !== null) {\n            return content.parsed;\n          }\n        }\n      }\n\n      return null;\n    },\n  });\n\n  return parsed as ParsedResponse<ParsedT>;\n}\n\nfunction parseTextFormat<\n  Params extends ResponseCreateParamsBase,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(params: Params, content: string): ParsedT | null {\n  if (params.text?.format?.type !== 'json_schema') {\n    return null;\n  }\n\n  if ('$parseRaw' in params.text?.format) {\n    const text_format = params.text?.format as unknown as AutoParseableTextFormat<ParsedT>;\n    return text_format.$parseRaw(content);\n  }\n\n  return JSON.parse(content);\n}\n\nexport function hasAutoParseableInput(params: ResponseCreateParamsWithTools): boolean {\n  if (isAutoParsableResponseFormat(params.text?.format)) {\n    return true;\n  }\n\n  return false;\n}\n\ntype ToolOptions = {\n  name: string;\n  arguments: any;\n  function?: ((args: any) => any) | undefined;\n};\n\nexport type AutoParseableResponseTool<\n  OptionsT extends ToolOptions,\n  HasFunction = OptionsT['function'] extends Function ? true : false,\n> = FunctionTool & {\n  __arguments: OptionsT['arguments']; // type-level only\n  __name: OptionsT['name']; // type-level only\n\n  $brand: 'auto-parseable-tool';\n  $callback: ((args: OptionsT['arguments']) => any) | undefined;\n  $parseRaw(args: string): OptionsT['arguments'];\n};\n\nexport function makeParseableResponseTool<OptionsT extends ToolOptions>(\n  tool: FunctionTool,\n  {\n    parser,\n    callback,\n  }: {\n    parser: (content: string) => OptionsT['arguments'];\n    callback: ((args: any) => any) | undefined;\n  },\n): AutoParseableResponseTool<OptionsT['arguments']> {\n  const obj = { ...tool };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n    $callback: {\n      value: callback,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableResponseTool<OptionsT['arguments']>;\n}\n\nexport function isAutoParsableTool(tool: any): tool is AutoParseableResponseTool<any> {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\n\nfunction getInputToolByName(input_tools: Array<Tool>, name: string): FunctionTool | undefined {\n  return input_tools.find((tool) => tool.type === 'function' && tool.name === name) as\n    | FunctionTool\n    | undefined;\n}\n\nfunction parseToolCall<Params extends ResponseCreateParamsBase>(\n  params: Params,\n  toolCall: ResponseFunctionToolCall,\n): ParsedResponseFunctionToolCall {\n  const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n\n  return {\n    ...toolCall,\n    ...toolCall,\n    parsed_arguments:\n      isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments)\n      : inputTool?.strict ? JSON.parse(toolCall.arguments)\n      : null,\n  };\n}\n\nexport function shouldParseToolCall(\n  params: ResponseCreateParamsNonStreaming | null | undefined,\n  toolCall: ResponseFunctionToolCall,\n): boolean {\n  if (!params) {\n    return false;\n  }\n\n  const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n  return isAutoParsableTool(inputTool) || inputTool?.strict || false;\n}\n\nexport function validateInputTools(tools: ChatCompletionTool[] | undefined) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(\n        `Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``,\n      );\n    }\n\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(\n        `The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`,\n      );\n    }\n  }\n}\n\nexport function addOutputText(rsp: Response): void {\n  const texts: string[] = [];\n  for (const output of rsp.output) {\n    if (output.type !== 'message') {\n      continue;\n    }\n\n    for (const content of output.content) {\n      if (content.type === 'output_text') {\n        texts.push(content.text);\n      }\n    }\n  }\n\n  rsp.output_text = texts.join('');\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as ResponsesAPI from './responses';\nimport { ResponseItemsPage } from './responses';\nimport { type CursorPageParams } from '../../pagination';\n\nexport class InputItems extends APIResource {\n  /**\n   * Returns a list of input items for a given response.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const responseItem of client.responses.inputItems.list(\n   *   'response_id',\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    responseId: string,\n    query?: InputItemListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ResponseItemsPage, ResponsesAPI.ResponseItem>;\n  list(\n    responseId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ResponseItemsPage, ResponsesAPI.ResponseItem>;\n  list(\n    responseId: string,\n    query: InputItemListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ResponseItemsPage, ResponsesAPI.ResponseItem> {\n    if (isRequestOptions(query)) {\n      return this.list(responseId, {}, query);\n    }\n    return this._client.getAPIList(`/responses/${responseId}/input_items`, ResponseItemsPage, {\n      query,\n      ...options,\n    });\n  }\n}\n\n/**\n * A list of Response items.\n */\nexport interface ResponseItemList {\n  /**\n   * A list of items used to generate this response.\n   */\n  data: Array<ResponsesAPI.ResponseItem>;\n\n  /**\n   * The ID of the first item in the list.\n   */\n  first_id: string;\n\n  /**\n   * Whether there are more items available.\n   */\n  has_more: boolean;\n\n  /**\n   * The ID of the last item in the list.\n   */\n  last_id: string;\n\n  /**\n   * The type of object returned, must be `list`.\n   */\n  object: 'list';\n}\n\nexport interface InputItemListParams extends CursorPageParams {\n  /**\n   * An item ID to list items before, used in pagination.\n   */\n  before?: string;\n\n  /**\n   * Additional fields to include in the response. See the `include` parameter for\n   * Response creation above for more information.\n   */\n  include?: Array<ResponsesAPI.ResponseIncludable>;\n\n  /**\n   * The order to return the input items in. Default is `desc`.\n   *\n   * - `asc`: Return the input items in ascending order.\n   * - `desc`: Return the input items in descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport declare namespace InputItems {\n  export { type ResponseItemList as ResponseItemList, type InputItemListParams as InputItemListParams };\n}\n\nexport { ResponseItemsPage };\n","import {\n  ResponseTextConfig,\n  type ParsedResponse,\n  type Response,\n  type ResponseCreateParamsBase,\n  type ResponseCreateParamsStreaming,\n  type ResponseStreamEvent,\n} from '../../resources/responses/responses';\nimport * as Core from '../../core';\nimport { APIUserAbortError, OpenAIError } from '../../error';\nimport OpenAI from '../../index';\nimport { type BaseEvents, EventStream } from '../EventStream';\nimport { type ResponseFunctionCallArgumentsDeltaEvent, type ResponseTextDeltaEvent } from './EventTypes';\nimport { maybeParseResponse, ParseableToolsParams } from '../ResponsesParser';\nimport { Stream } from \"../../streaming\";\n\nexport type ResponseStreamParams = ResponseCreateAndStreamParams | ResponseStreamByIdParams;\n\nexport type ResponseCreateAndStreamParams = Omit<ResponseCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport type ResponseStreamByIdParams = {\n  /**\n   * The ID of the response to stream.\n   */\n  response_id: string;\n  /**\n   * If provided, the stream will start after the event with the given sequence number.\n   */\n  starting_after?: number;\n  /**\n   * Configuration options for a text response from the model. Can be plain text or\n   * structured JSON data. Learn more:\n   *\n   * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n   * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n   */\n  text?: ResponseTextConfig;\n\n  /**\n   * An array of tools the model may call while generating a response. When continuing a stream, provide\n   * the same tools as the original request.\n   */\n  tools?: ParseableToolsParams;\n};\n\ntype ResponseEvents = BaseEvents &\n  Omit<\n    {\n      [K in ResponseStreamEvent['type']]: (event: Extract<ResponseStreamEvent, { type: K }>) => void;\n    },\n    'response.output_text.delta' | 'response.function_call_arguments.delta'\n  > & {\n    event: (event: ResponseStreamEvent) => void;\n    'response.output_text.delta': (event: ResponseTextDeltaEvent) => void;\n    'response.function_call_arguments.delta': (event: ResponseFunctionCallArgumentsDeltaEvent) => void;\n  };\n\nexport type ResponseStreamingParams = Omit<ResponseCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class ResponseStream<ParsedT = null>\n  extends EventStream<ResponseEvents>\n  implements AsyncIterable<ResponseStreamEvent>\n{\n  #params: ResponseStreamingParams | null;\n  #currentResponseSnapshot: Response | undefined;\n  #finalResponse: ParsedResponse<ParsedT> | undefined;\n\n  constructor(params: ResponseStreamingParams | null) {\n    super();\n    this.#params = params;\n  }\n\n  static createResponse<ParsedT>(\n    client: OpenAI,\n    params: ResponseStreamParams,\n    options?: Core.RequestOptions,\n  ): ResponseStream<ParsedT> {\n    const runner = new ResponseStream<ParsedT>(params as ResponseCreateParamsStreaming);\n    runner._run(() =>\n      runner._createOrRetrieveResponse(client, params, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentResponseSnapshot = undefined;\n  }\n\n  #addEvent(this: ResponseStream<ParsedT>, event: ResponseStreamEvent, starting_after: number | null) {\n    if (this.ended) return;\n\n    const maybeEmit = (name: string, event: ResponseStreamEvent & { snapshot?: string }) => {\n      if (starting_after == null || event.sequence_number > starting_after) {\n        this._emit(name as any, event);\n      }\n    };\n\n    const response = this.#accumulateResponse(event);\n    maybeEmit('event', event);\n\n    switch (event.type) {\n      case 'response.output_text.delta': {\n        const output = response.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          const content = output.content[event.content_index];\n          if (!content) {\n            throw new OpenAIError(`missing content at index ${event.content_index}`);\n          }\n          if (content.type !== 'output_text') {\n            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n          }\n\n          maybeEmit('response.output_text.delta', {\n            ...event,\n            snapshot: content.text,\n          });\n        }\n        break;\n      }\n      case 'response.function_call_arguments.delta': {\n        const output = response.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'function_call') {\n          maybeEmit('response.function_call_arguments.delta', {\n            ...event,\n            snapshot: output.arguments,\n          });\n        }\n        break;\n      }\n      default:\n        maybeEmit(event.type, event);\n        break;\n    }\n  }\n\n  #endRequest(): ParsedResponse<ParsedT> {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentResponseSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any events`);\n    }\n    this.#currentResponseSnapshot = undefined;\n    const parsedResponse = finalizeResponse<ParsedT>(snapshot, this.#params);\n    this.#finalResponse = parsedResponse;\n\n    return parsedResponse;\n  }\n\n  protected async _createOrRetrieveResponse(\n    client: OpenAI,\n    params: ResponseStreamParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedResponse<ParsedT>> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n\n    let stream: Stream<ResponseStreamEvent> | undefined;\n    let starting_after: number | null = null;\n    if ('response_id' in params) {\n      stream = await client.responses.retrieve(\n        params.response_id,\n        { stream: true },\n        { ...options, signal: this.controller.signal, stream: true },\n      );\n      starting_after = params.starting_after ?? null;\n    } else {\n      stream = await client.responses.create(\n        { ...params, stream: true },\n        { ...options, signal: this.controller.signal },\n      );\n    }\n\n    this._connected();\n    for await (const event of stream) {\n      this.#addEvent(event, starting_after);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this.#endRequest();\n  }\n\n  #accumulateResponse(event: ResponseStreamEvent): Response {\n    let snapshot = this.#currentResponseSnapshot;\n    if (!snapshot) {\n      if (event.type !== 'response.created') {\n        throw new OpenAIError(\n          `When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`,\n        );\n      }\n      snapshot = this.#currentResponseSnapshot = event.response;\n      return snapshot;\n    }\n\n    switch (event.type) {\n      case 'response.output_item.added': {\n        snapshot.output.push(event.item);\n        break;\n      }\n      case 'response.content_part.added': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          output.content.push(event.part);\n        }\n        break;\n      }\n      case 'response.output_text.delta': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          const content = output.content[event.content_index];\n          if (!content) {\n            throw new OpenAIError(`missing content at index ${event.content_index}`);\n          }\n          if (content.type !== 'output_text') {\n            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n          }\n          content.text += event.delta;\n        }\n        break;\n      }\n      case 'response.function_call_arguments.delta': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'function_call') {\n          output.arguments += event.delta;\n        }\n        break;\n      }\n      case 'response.completed': {\n        this.#currentResponseSnapshot = event.response;\n        break;\n      }\n    }\n\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](this: ResponseStream<ParsedT>): AsyncIterator<ResponseStreamEvent> {\n    const pushQueue: ResponseStreamEvent[] = [];\n    const readQueue: {\n      resolve: (event: ResponseStreamEvent | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    this.on('event', (event) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ResponseStreamEvent>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ResponseStreamEvent | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((event) => (event ? { value: event, done: false } : { value: undefined, done: true }));\n        }\n        const event = pushQueue.shift()!;\n        return { value: event, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  /**\n   * @returns a promise that resolves with the final Response, or rejects\n   * if an error occurred or the stream ended prematurely without producing a REsponse.\n   */\n  async finalResponse(): Promise<ParsedResponse<ParsedT>> {\n    await this.done();\n    const response = this.#finalResponse;\n    if (!response) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return response;\n  }\n}\n\nfunction finalizeResponse<ParsedT>(\n  snapshot: Response,\n  params: ResponseStreamingParams | null,\n): ParsedResponse<ParsedT> {\n  return maybeParseResponse(snapshot, params);\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\nimport * as FilesAPI from '../files';\nimport * as PartsAPI from './parts';\nimport { PartCreateParams, Parts, UploadPart } from './parts';\n\nexport class Uploads extends APIResource {\n  parts: PartsAPI.Parts = new PartsAPI.Parts(this._client);\n\n  /**\n   * Creates an intermediate\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n   * that you can add\n   * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n   * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n   * after you create it.\n   *\n   * Once you complete the Upload, we will create a\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n   * contains all the parts you uploaded. This File is usable in the rest of our\n   * platform as a regular File object.\n   *\n   * For certain `purpose` values, the correct `mime_type` must be specified. Please\n   * refer to documentation for the\n   * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n   *\n   * For guidance on the proper filename extensions for each purpose, please follow\n   * the documentation on\n   * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n   */\n  create(body: UploadCreateParams, options?: Core.RequestOptions): Core.APIPromise<Upload> {\n    return this._client.post('/uploads', { body, ...options });\n  }\n\n  /**\n   * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n   */\n  cancel(uploadId: string, options?: Core.RequestOptions): Core.APIPromise<Upload> {\n    return this._client.post(`/uploads/${uploadId}/cancel`, options);\n  }\n\n  /**\n   * Completes the\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n   *\n   * Within the returned Upload object, there is a nested\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n   * is ready to use in the rest of the platform.\n   *\n   * You can specify the order of the Parts by passing in an ordered list of the Part\n   * IDs.\n   *\n   * The number of bytes uploaded upon completion must match the number of bytes\n   * initially specified when creating the Upload object. No Parts may be added after\n   * an Upload is completed.\n   */\n  complete(\n    uploadId: string,\n    body: UploadCompleteParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Upload> {\n    return this._client.post(`/uploads/${uploadId}/complete`, { body, ...options });\n  }\n}\n\n/**\n * The Upload object can accept byte chunks in the form of Parts.\n */\nexport interface Upload {\n  /**\n   * The Upload unique identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The intended number of bytes to be uploaded.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the Upload was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the Upload will expire.\n   */\n  expires_at: number;\n\n  /**\n   * The name of the file to be uploaded.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always \"upload\".\n   */\n  object: 'upload';\n\n  /**\n   * The intended purpose of the file.\n   * [Please refer here](https://platform.openai.com/docs/api-reference/files/object#files/object-purpose)\n   * for acceptable values.\n   */\n  purpose: string;\n\n  /**\n   * The status of the Upload.\n   */\n  status: 'pending' | 'completed' | 'cancelled' | 'expired';\n\n  /**\n   * The `File` object represents a document that has been uploaded to OpenAI.\n   */\n  file?: FilesAPI.FileObject | null;\n}\n\nexport interface UploadCreateParams {\n  /**\n   * The number of bytes in the file you are uploading.\n   */\n  bytes: number;\n\n  /**\n   * The name of the file to upload.\n   */\n  filename: string;\n\n  /**\n   * The MIME type of the file.\n   *\n   * This must fall within the supported MIME types for your file purpose. See the\n   * supported MIME types for assistants and vision.\n   */\n  mime_type: string;\n\n  /**\n   * The intended purpose of the uploaded file.\n   *\n   * See the\n   * [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n   */\n  purpose: FilesAPI.FilePurpose;\n}\n\nexport interface UploadCompleteParams {\n  /**\n   * The ordered list of Part IDs.\n   */\n  part_ids: Array<string>;\n\n  /**\n   * The optional md5 checksum for the file contents to verify if the bytes uploaded\n   * matches what you expect.\n   */\n  md5?: string;\n}\n\nUploads.Parts = Parts;\n\nexport declare namespace Uploads {\n  export {\n    type Upload as Upload,\n    type UploadCreateParams as UploadCreateParams,\n    type UploadCompleteParams as UploadCompleteParams,\n  };\n\n  export { Parts as Parts, type UploadPart as UploadPart, type PartCreateParams as PartCreateParams };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\n\nexport class Parts extends APIResource {\n  /**\n   * Adds a\n   * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n   * A Part represents a chunk of bytes from the file you are trying to upload.\n   *\n   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n   * maximum of 8 GB.\n   *\n   * It is possible to add multiple Parts in parallel. You can decide the intended\n   * order of the Parts when you\n   * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n   */\n  create(\n    uploadId: string,\n    body: PartCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<UploadPart> {\n    return this._client.post(\n      `/uploads/${uploadId}/parts`,\n      Core.multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n}\n\n/**\n * The upload Part represents a chunk of bytes we can add to an Upload object.\n */\nexport interface UploadPart {\n  /**\n   * The upload Part unique identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the Part was created.\n   */\n  created_at: number;\n\n  /**\n   * The object type, which is always `upload.part`.\n   */\n  object: 'upload.part';\n\n  /**\n   * The ID of the Upload object that this Part was added to.\n   */\n  upload_id: string;\n}\n\nexport interface PartCreateParams {\n  /**\n   * The chunk of bytes for this Part.\n   */\n  data: Core.Uploadable;\n}\n\nexport declare namespace Parts {\n  export { type UploadPart as UploadPart, type PartCreateParams as PartCreateParams };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as Shared from '../shared';\nimport * as FileBatchesAPI from './file-batches';\nimport {\n  FileBatchCreateParams,\n  FileBatchListFilesParams,\n  FileBatches,\n  VectorStoreFileBatch,\n} from './file-batches';\nimport * as FilesAPI from './files';\nimport {\n  FileContentResponse,\n  FileContentResponsesPage,\n  FileCreateParams,\n  FileListParams,\n  FileUpdateParams,\n  Files,\n  VectorStoreFile,\n  VectorStoreFileDeleted,\n  VectorStoreFilesPage,\n} from './files';\nimport { CursorPage, type CursorPageParams, Page } from '../../pagination';\n\nexport class VectorStores extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this._client);\n  fileBatches: FileBatchesAPI.FileBatches = new FileBatchesAPI.FileBatches(this._client);\n\n  /**\n   * Create a vector store.\n   */\n  create(body: VectorStoreCreateParams, options?: Core.RequestOptions): Core.APIPromise<VectorStore> {\n    return this._client.post('/vector_stores', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a vector store.\n   */\n  retrieve(vectorStoreId: string, options?: Core.RequestOptions): Core.APIPromise<VectorStore> {\n    return this._client.get(`/vector_stores/${vectorStoreId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a vector store.\n   */\n  update(\n    vectorStoreId: string,\n    body: VectorStoreUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStore> {\n    return this._client.post(`/vector_stores/${vectorStoreId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of vector stores.\n   */\n  list(\n    query?: VectorStoreListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoresPage, VectorStore>;\n  list(options?: Core.RequestOptions): Core.PagePromise<VectorStoresPage, VectorStore>;\n  list(\n    query: VectorStoreListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoresPage, VectorStore> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/vector_stores', VectorStoresPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a vector store.\n   */\n  del(vectorStoreId: string, options?: Core.RequestOptions): Core.APIPromise<VectorStoreDeleted> {\n    return this._client.delete(`/vector_stores/${vectorStoreId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Search a vector store for relevant chunks based on a query and file attributes\n   * filter.\n   */\n  search(\n    vectorStoreId: string,\n    body: VectorStoreSearchParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreSearchResponsesPage, VectorStoreSearchResponse> {\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/search`, VectorStoreSearchResponsesPage, {\n      body,\n      method: 'post',\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n}\n\nexport class VectorStoresPage extends CursorPage<VectorStore> {}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class VectorStoreSearchResponsesPage extends Page<VectorStoreSearchResponse> {}\n\n/**\n * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of\n * `800` and `chunk_overlap_tokens` of `400`.\n */\nexport interface AutoFileChunkingStrategyParam {\n  /**\n   * Always `auto`.\n   */\n  type: 'auto';\n}\n\n/**\n * The strategy used to chunk the file.\n */\nexport type FileChunkingStrategy = StaticFileChunkingStrategyObject | OtherFileChunkingStrategyObject;\n\n/**\n * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n * strategy. Only applicable if `file_ids` is non-empty.\n */\nexport type FileChunkingStrategyParam = AutoFileChunkingStrategyParam | StaticFileChunkingStrategyObjectParam;\n\n/**\n * This is returned when the chunking strategy is unknown. Typically, this is\n * because the file was indexed before the `chunking_strategy` concept was\n * introduced in the API.\n */\nexport interface OtherFileChunkingStrategyObject {\n  /**\n   * Always `other`.\n   */\n  type: 'other';\n}\n\nexport interface StaticFileChunkingStrategy {\n  /**\n   * The number of tokens that overlap between chunks. The default value is `400`.\n   *\n   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.\n   */\n  chunk_overlap_tokens: number;\n\n  /**\n   * The maximum number of tokens in each chunk. The default value is `800`. The\n   * minimum value is `100` and the maximum value is `4096`.\n   */\n  max_chunk_size_tokens: number;\n}\n\nexport interface StaticFileChunkingStrategyObject {\n  static: StaticFileChunkingStrategy;\n\n  /**\n   * Always `static`.\n   */\n  type: 'static';\n}\n\n/**\n * Customize your own chunking strategy by setting chunk size and chunk overlap.\n */\nexport interface StaticFileChunkingStrategyObjectParam {\n  static: StaticFileChunkingStrategy;\n\n  /**\n   * Always `static`.\n   */\n  type: 'static';\n}\n\n/**\n * A vector store is a collection of processed files can be used by the\n * `file_search` tool.\n */\nexport interface VectorStore {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store was created.\n   */\n  created_at: number;\n\n  file_counts: VectorStore.FileCounts;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store was last active.\n   */\n  last_active_at: number | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata: Shared.Metadata | null;\n\n  /**\n   * The name of the vector store.\n   */\n  name: string;\n\n  /**\n   * The object type, which is always `vector_store`.\n   */\n  object: 'vector_store';\n\n  /**\n   * The status of the vector store, which can be either `expired`, `in_progress`, or\n   * `completed`. A status of `completed` indicates that the vector store is ready\n   * for use.\n   */\n  status: 'expired' | 'in_progress' | 'completed';\n\n  /**\n   * The total number of bytes used by the files in the vector store.\n   */\n  usage_bytes: number;\n\n  /**\n   * The expiration policy for a vector store.\n   */\n  expires_after?: VectorStore.ExpiresAfter;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store will expire.\n   */\n  expires_at?: number | null;\n}\n\nexport namespace VectorStore {\n  export interface FileCounts {\n    /**\n     * The number of files that were cancelled.\n     */\n    cancelled: number;\n\n    /**\n     * The number of files that have been successfully processed.\n     */\n    completed: number;\n\n    /**\n     * The number of files that have failed to process.\n     */\n    failed: number;\n\n    /**\n     * The number of files that are currently being processed.\n     */\n    in_progress: number;\n\n    /**\n     * The total number of files.\n     */\n    total: number;\n  }\n\n  /**\n   * The expiration policy for a vector store.\n   */\n  export interface ExpiresAfter {\n    /**\n     * Anchor timestamp after which the expiration policy applies. Supported anchors:\n     * `last_active_at`.\n     */\n    anchor: 'last_active_at';\n\n    /**\n     * The number of days after the anchor time that the vector store will expire.\n     */\n    days: number;\n  }\n}\n\nexport interface VectorStoreDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'vector_store.deleted';\n}\n\nexport interface VectorStoreSearchResponse {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard. Keys are strings with a maximum\n   * length of 64 characters. Values are strings with a maximum length of 512\n   * characters, booleans, or numbers.\n   */\n  attributes: Record<string, string | number | boolean> | null;\n\n  /**\n   * Content chunks from the file.\n   */\n  content: Array<VectorStoreSearchResponse.Content>;\n\n  /**\n   * The ID of the vector store file.\n   */\n  file_id: string;\n\n  /**\n   * The name of the vector store file.\n   */\n  filename: string;\n\n  /**\n   * The similarity score for the result.\n   */\n  score: number;\n}\n\nexport namespace VectorStoreSearchResponse {\n  export interface Content {\n    /**\n     * The text content returned from search.\n     */\n    text: string;\n\n    /**\n     * The type of content.\n     */\n    type: 'text';\n  }\n}\n\nexport interface VectorStoreCreateParams {\n  /**\n   * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n   * strategy. Only applicable if `file_ids` is non-empty.\n   */\n  chunking_strategy?: FileChunkingStrategyParam;\n\n  /**\n   * The expiration policy for a vector store.\n   */\n  expires_after?: VectorStoreCreateParams.ExpiresAfter;\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the vector store should use. Useful for tools like `file_search` that can access\n   * files.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The name of the vector store.\n   */\n  name?: string;\n}\n\nexport namespace VectorStoreCreateParams {\n  /**\n   * The expiration policy for a vector store.\n   */\n  export interface ExpiresAfter {\n    /**\n     * Anchor timestamp after which the expiration policy applies. Supported anchors:\n     * `last_active_at`.\n     */\n    anchor: 'last_active_at';\n\n    /**\n     * The number of days after the anchor time that the vector store will expire.\n     */\n    days: number;\n  }\n}\n\nexport interface VectorStoreUpdateParams {\n  /**\n   * The expiration policy for a vector store.\n   */\n  expires_after?: VectorStoreUpdateParams.ExpiresAfter | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard.\n   *\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\n   * a maximum length of 512 characters.\n   */\n  metadata?: Shared.Metadata | null;\n\n  /**\n   * The name of the vector store.\n   */\n  name?: string | null;\n}\n\nexport namespace VectorStoreUpdateParams {\n  /**\n   * The expiration policy for a vector store.\n   */\n  export interface ExpiresAfter {\n    /**\n     * Anchor timestamp after which the expiration policy applies. Supported anchors:\n     * `last_active_at`.\n     */\n    anchor: 'last_active_at';\n\n    /**\n     * The number of days after the anchor time that the vector store will expire.\n     */\n    days: number;\n  }\n}\n\nexport interface VectorStoreListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport interface VectorStoreSearchParams {\n  /**\n   * A query string for a search\n   */\n  query: string | Array<string>;\n\n  /**\n   * A filter to apply based on file attributes.\n   */\n  filters?: Shared.ComparisonFilter | Shared.CompoundFilter;\n\n  /**\n   * The maximum number of results to return. This number should be between 1 and 50\n   * inclusive.\n   */\n  max_num_results?: number;\n\n  /**\n   * Ranking options for search.\n   */\n  ranking_options?: VectorStoreSearchParams.RankingOptions;\n\n  /**\n   * Whether to rewrite the natural language query for vector search.\n   */\n  rewrite_query?: boolean;\n}\n\nexport namespace VectorStoreSearchParams {\n  /**\n   * Ranking options for search.\n   */\n  export interface RankingOptions {\n    ranker?: 'auto' | 'default-2024-11-15';\n\n    score_threshold?: number;\n  }\n}\n\nVectorStores.VectorStoresPage = VectorStoresPage;\nVectorStores.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;\nVectorStores.Files = Files;\nVectorStores.VectorStoreFilesPage = VectorStoreFilesPage;\nVectorStores.FileContentResponsesPage = FileContentResponsesPage;\nVectorStores.FileBatches = FileBatches;\n\nexport declare namespace VectorStores {\n  export {\n    type AutoFileChunkingStrategyParam as AutoFileChunkingStrategyParam,\n    type FileChunkingStrategy as FileChunkingStrategy,\n    type FileChunkingStrategyParam as FileChunkingStrategyParam,\n    type OtherFileChunkingStrategyObject as OtherFileChunkingStrategyObject,\n    type StaticFileChunkingStrategy as StaticFileChunkingStrategy,\n    type StaticFileChunkingStrategyObject as StaticFileChunkingStrategyObject,\n    type StaticFileChunkingStrategyObjectParam as StaticFileChunkingStrategyObjectParam,\n    type VectorStore as VectorStore,\n    type VectorStoreDeleted as VectorStoreDeleted,\n    type VectorStoreSearchResponse as VectorStoreSearchResponse,\n    VectorStoresPage as VectorStoresPage,\n    VectorStoreSearchResponsesPage as VectorStoreSearchResponsesPage,\n    type VectorStoreCreateParams as VectorStoreCreateParams,\n    type VectorStoreUpdateParams as VectorStoreUpdateParams,\n    type VectorStoreListParams as VectorStoreListParams,\n    type VectorStoreSearchParams as VectorStoreSearchParams,\n  };\n\n  export {\n    Files as Files,\n    type VectorStoreFile as VectorStoreFile,\n    type VectorStoreFileDeleted as VectorStoreFileDeleted,\n    type FileContentResponse as FileContentResponse,\n    VectorStoreFilesPage as VectorStoreFilesPage,\n    FileContentResponsesPage as FileContentResponsesPage,\n    type FileCreateParams as FileCreateParams,\n    type FileUpdateParams as FileUpdateParams,\n    type FileListParams as FileListParams,\n  };\n\n  export {\n    FileBatches as FileBatches,\n    type VectorStoreFileBatch as VectorStoreFileBatch,\n    type FileBatchCreateParams as FileBatchCreateParams,\n    type FileBatchListFilesParams as FileBatchListFilesParams,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { isRequestOptions } from '../../core';\nimport { sleep } from '../../core';\nimport { Uploadable } from '../../core';\nimport { allSettledWithThrow } from '../../lib/Util';\nimport * as Core from '../../core';\nimport * as FilesAPI from './files';\nimport { VectorStoreFilesPage } from './files';\nimport * as VectorStoresAPI from './vector-stores';\nimport { type CursorPageParams } from '../../pagination';\n\nexport class FileBatches extends APIResource {\n  /**\n   * Create a vector store file batch.\n   */\n  create(\n    vectorStoreId: string,\n    body: FileBatchCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a vector store file batch.\n   */\n  retrieve(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Cancel a vector store file batch. This attempts to cancel the processing of\n   * files in this batch as soon as possible.\n   */\n  cancel(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a vector store batch and poll until all files have been processed.\n   */\n  async createAndPoll(\n    vectorStoreId: string,\n    body: FileBatchCreateParams,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFileBatch> {\n    const batch = await this.create(vectorStoreId, body);\n    return await this.poll(vectorStoreId, batch.id, options);\n  }\n\n  /**\n   * Returns a list of vector store files in a batch.\n   */\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    query?: FileBatchListFilesParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile>;\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile>;\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    query: FileBatchListFilesParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile> {\n    if (isRequestOptions(query)) {\n      return this.listFiles(vectorStoreId, batchId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`,\n      VectorStoreFilesPage,\n      { query, ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } },\n    );\n  }\n\n  /**\n   * Wait for the given file batch to be processed.\n   *\n   * Note: this will return even if one of the files failed to process, you need to\n   * check batch.file_counts.failed_count to handle this case.\n   */\n  async poll(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFileBatch> {\n    const headers: { [key: string]: string } = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n\n    while (true) {\n      const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {\n        ...options,\n        headers,\n      }).withResponse();\n\n      switch (batch.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'cancelled':\n        case 'completed':\n          return batch;\n      }\n    }\n  }\n\n  /**\n   * Uploads the given files concurrently and then creates a vector store file batch.\n   *\n   * The concurrency limit is configurable using the `maxConcurrency` parameter.\n   */\n  async uploadAndPoll(\n    vectorStoreId: string,\n    { files, fileIds = [] }: { files: Uploadable[]; fileIds?: string[] },\n    options?: Core.RequestOptions & { pollIntervalMs?: number; maxConcurrency?: number },\n  ): Promise<VectorStoreFileBatch> {\n    if (files == null || files.length == 0) {\n      throw new Error(\n        `No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`,\n      );\n    }\n\n    const configuredConcurrency = options?.maxConcurrency ?? 5;\n\n    // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n    const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n\n    const client = this._client;\n    const fileIterator = files.values();\n    const allFileIds: string[] = [...fileIds];\n\n    // This code is based on this design. The libraries don't accommodate our environment limits.\n    // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n    async function processFiles(iterator: IterableIterator<Uploadable>) {\n      for (let item of iterator) {\n        const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);\n        allFileIds.push(fileObj.id);\n      }\n    }\n\n    // Start workers to process results\n    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n\n    // Wait for all processing to complete.\n    await allSettledWithThrow(workers);\n\n    return await this.createAndPoll(vectorStoreId, {\n      file_ids: allFileIds,\n    });\n  }\n}\n\n/**\n * A batch of files attached to a vector store.\n */\nexport interface VectorStoreFileBatch {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store files batch was\n   * created.\n   */\n  created_at: number;\n\n  file_counts: VectorStoreFileBatch.FileCounts;\n\n  /**\n   * The object type, which is always `vector_store.file_batch`.\n   */\n  object: 'vector_store.files_batch';\n\n  /**\n   * The status of the vector store files batch, which can be either `in_progress`,\n   * `completed`, `cancelled` or `failed`.\n   */\n  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';\n\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * that the [File](https://platform.openai.com/docs/api-reference/files) is\n   * attached to.\n   */\n  vector_store_id: string;\n}\n\nexport namespace VectorStoreFileBatch {\n  export interface FileCounts {\n    /**\n     * The number of files that where cancelled.\n     */\n    cancelled: number;\n\n    /**\n     * The number of files that have been processed.\n     */\n    completed: number;\n\n    /**\n     * The number of files that have failed to process.\n     */\n    failed: number;\n\n    /**\n     * The number of files that are currently being processed.\n     */\n    in_progress: number;\n\n    /**\n     * The total number of files.\n     */\n    total: number;\n  }\n}\n\nexport interface FileBatchCreateParams {\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the vector store should use. Useful for tools like `file_search` that can access\n   * files.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard. Keys are strings with a maximum\n   * length of 64 characters. Values are strings with a maximum length of 512\n   * characters, booleans, or numbers.\n   */\n  attributes?: Record<string, string | number | boolean> | null;\n\n  /**\n   * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n   * strategy. Only applicable if `file_ids` is non-empty.\n   */\n  chunking_strategy?: VectorStoresAPI.FileChunkingStrategyParam;\n}\n\nexport interface FileBatchListFilesParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n   */\n  filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport declare namespace FileBatches {\n  export {\n    type VectorStoreFileBatch as VectorStoreFileBatch,\n    type FileBatchCreateParams as FileBatchCreateParams,\n    type FileBatchListFilesParams as FileBatchListFilesParams,\n  };\n}\n\nexport { VectorStoreFilesPage };\n","/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */\nexport const allSettledWithThrow = async <R>(promises: Promise<R>[]): Promise<R[]> => {\n  const results = await Promise.allSettled(promises);\n  const rejected = results.filter((result): result is PromiseRejectedResult => result.status === 'rejected');\n  if (rejected.length) {\n    for (const result of rejected) {\n      console.error(result.reason);\n    }\n\n    throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\n  }\n\n  // Note: TS was complaining about using `.filter().map()` here for some reason\n  const values: R[] = [];\n  for (const result of results) {\n    if (result.status === 'fulfilled') {\n      values.push(result.value);\n    }\n  }\n  return values;\n};\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport { sleep, Uploadable, isRequestOptions } from '../../core';\nimport * as Core from '../../core';\nimport * as VectorStoresAPI from './vector-stores';\nimport { CursorPage, type CursorPageParams, Page } from '../../pagination';\n\nexport class Files extends APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(\n    vectorStoreId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFile> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFile> {\n    return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Update attributes on a vector store file.\n   */\n  update(\n    vectorStoreId: string,\n    fileId: string,\n    body: FileUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFile> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of vector store files.\n   */\n  list(\n    vectorStoreId: string,\n    query?: FileListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile>;\n  list(\n    vectorStoreId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile>;\n  list(\n    vectorStoreId: string,\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile> {\n    if (isRequestOptions(query)) {\n      return this.list(vectorStoreId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  del(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileDeleted> {\n    return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(\n    vectorStoreId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const headers: { [key: string]: string } = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const fileResponse = await this.retrieve(vectorStoreId, fileId, {\n        ...options,\n        headers,\n      }).withResponse();\n\n      const file = fileResponse.data;\n\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(\n    vectorStoreId: string,\n    file: Uploadable,\n    options?: Core.RequestOptions,\n  ): Promise<VectorStoreFile> {\n    const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);\n    return this.create(vectorStoreId, { file_id: fileInfo.id }, options);\n  }\n\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(\n    vectorStoreId: string,\n    file: Uploadable,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n\n  /**\n   * Retrieve the parsed contents of a vector store file.\n   */\n  content(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileContentResponsesPage, FileContentResponse> {\n    return this._client.getAPIList(\n      `/vector_stores/${vectorStoreId}/files/${fileId}/content`,\n      FileContentResponsesPage,\n      { ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } },\n    );\n  }\n}\n\nexport class VectorStoreFilesPage extends CursorPage<VectorStoreFile> {}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileContentResponsesPage extends Page<FileContentResponse> {}\n\n/**\n * A list of files attached to a vector store.\n */\nexport interface VectorStoreFile {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store file was created.\n   */\n  created_at: number;\n\n  /**\n   * The last error associated with this vector store file. Will be `null` if there\n   * are no errors.\n   */\n  last_error: VectorStoreFile.LastError | null;\n\n  /**\n   * The object type, which is always `vector_store.file`.\n   */\n  object: 'vector_store.file';\n\n  /**\n   * The status of the vector store file, which can be either `in_progress`,\n   * `completed`, `cancelled`, or `failed`. The status `completed` indicates that the\n   * vector store file is ready for use.\n   */\n  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';\n\n  /**\n   * The total vector store usage in bytes. Note that this may be different from the\n   * original file size.\n   */\n  usage_bytes: number;\n\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * that the [File](https://platform.openai.com/docs/api-reference/files) is\n   * attached to.\n   */\n  vector_store_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard. Keys are strings with a maximum\n   * length of 64 characters. Values are strings with a maximum length of 512\n   * characters, booleans, or numbers.\n   */\n  attributes?: Record<string, string | number | boolean> | null;\n\n  /**\n   * The strategy used to chunk the file.\n   */\n  chunking_strategy?: VectorStoresAPI.FileChunkingStrategy;\n}\n\nexport namespace VectorStoreFile {\n  /**\n   * The last error associated with this vector store file. Will be `null` if there\n   * are no errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'unsupported_file' | 'invalid_file';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n}\n\nexport interface VectorStoreFileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'vector_store.file.deleted';\n}\n\nexport interface FileContentResponse {\n  /**\n   * The text content\n   */\n  text?: string;\n\n  /**\n   * The content type (currently only `\"text\"`)\n   */\n  type?: string;\n}\n\nexport interface FileCreateParams {\n  /**\n   * A [File](https://platform.openai.com/docs/api-reference/files) ID that the\n   * vector store should use. Useful for tools like `file_search` that can access\n   * files.\n   */\n  file_id: string;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard. Keys are strings with a maximum\n   * length of 64 characters. Values are strings with a maximum length of 512\n   * characters, booleans, or numbers.\n   */\n  attributes?: Record<string, string | number | boolean> | null;\n\n  /**\n   * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n   * strategy. Only applicable if `file_ids` is non-empty.\n   */\n  chunking_strategy?: VectorStoresAPI.FileChunkingStrategyParam;\n}\n\nexport interface FileUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format, and\n   * querying for objects via API or the dashboard. Keys are strings with a maximum\n   * length of 64 characters. Values are strings with a maximum length of 512\n   * characters, booleans, or numbers.\n   */\n  attributes: Record<string, string | number | boolean> | null;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n   */\n  filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nFiles.VectorStoreFilesPage = VectorStoreFilesPage;\nFiles.FileContentResponsesPage = FileContentResponsesPage;\n\nexport declare namespace Files {\n  export {\n    type VectorStoreFile as VectorStoreFile,\n    type VectorStoreFileDeleted as VectorStoreFileDeleted,\n    type FileContentResponse as FileContentResponse,\n    VectorStoreFilesPage as VectorStoreFilesPage,\n    FileContentResponsesPage as FileContentResponsesPage,\n    type FileCreateParams as FileCreateParams,\n    type FileUpdateParams as FileUpdateParams,\n    type FileListParams as FileListParams,\n  };\n}\n","/**\n * Common AI Provider Interface\n * All AI providers must implement this interface\n */\n\nexport interface Message {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface StreamOptions {\n  onToken?: (token: string) => void;\n  signal?: AbortSignal;\n}\n\nexport interface CompletionOptions {\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  stopSequences?: string[];\n  stream?: boolean;\n  streamOptions?: StreamOptions;\n}\n\nexport interface CodeReviewResult {\n  issues: Array<{\n    line: number;\n    severity: 'error' | 'warning' | 'info';\n    message: string;\n    suggestion?: string;\n  }>;\n  summary: string;\n  improvements: string[];\n}\n\nexport interface VisionResponse {\n  description: string;\n  objects?: Array<{\n    name: string;\n    confidence: number;\n    location?: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  }>;\n  text?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface ModelInfo {\n  name: string;\n  description?: string;\n  contextWindow?: number;\n  maxTokens?: number;\n  pricing?: {\n    input: number;\n    output: number;\n  };\n  capabilities: {\n    vision?: boolean;\n    streaming?: boolean;\n    codeGeneration?: boolean;\n    embeddings?: boolean;\n  };\n}\n\nexport interface IAIProvider {\n  readonly name: string;\n  readonly models: string[];\n\n  /**\n   * Initialize the provider with API key and configuration\n   */\n  initialize(apiKey: string, config?: Record<string, unknown>): Promise<void>;\n\n  /**\n   * Chat completion\n   */\n  chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string>;\n\n  /**\n   * Streaming chat completion\n   */\n  chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string>;\n\n  /**\n   * Generate code based on prompt\n   */\n  generateCode(prompt: string, language?: string, model?: string): Promise<string>;\n\n  /**\n   * Review code and provide feedback\n   */\n  reviewCode(code: string, language?: string, model?: string): Promise<CodeReviewResult>;\n\n  /**\n   * Vision understanding (optional)\n   */\n  vision?(image: Buffer, prompt: string, model?: string): Promise<VisionResponse>;\n\n  /**\n   * Generate embeddings (optional)\n   */\n  embeddings?(text: string, model?: string): Promise<number[]>;\n\n  /**\n   * Validate connection to the provider\n   */\n  validateConnection?(): Promise<boolean>;\n\n  /**\n   * Get model information\n   */\n  getModelInfo?(model?: string): Promise<ModelInfo>;\n\n  /**\n   * Estimate cost for tokens\n   */\n  estimateCost?(tokens: number, model?: string): number;\n\n  /**\n   * Check if the provider is properly initialized\n   */\n  isInitialized(): boolean;\n\n  /**\n   * Get available models\n   */\n  getModels(): string[];\n\n  /**\n   * Get default model\n   */\n  getDefaultModel(): string;\n}\n\n/**\n * Base abstract class for AI providers\n */\nexport abstract class BaseAIProvider implements IAIProvider {\n  protected apiKey: string = '';\n  protected config: Record<string, unknown> = {};\n  protected initialized: boolean = false;\n\n  abstract readonly name: string;\n  abstract readonly models: string[];\n\n  async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    this.apiKey = apiKey;\n    this.config = config || {};\n    this.initialized = true;\n  }\n\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  getModels(): string[] {\n    return this.models;\n  }\n\n  getDefaultModel(): string {\n    if (this.models.length === 0) {\n      throw new Error(`No models available for ${this.name} provider`);\n    }\n    const defaultModel = this.models[0];\n    if (!defaultModel) {\n      throw new Error(`Invalid default model for ${this.name} provider`);\n    }\n    return defaultModel;\n  }\n\n  protected validateModel(model?: string): string {\n    const selectedModel = model || this.getDefaultModel();\n    if (!this.models.includes(selectedModel)) {\n      throw new Error(`Model ${selectedModel} is not supported by ${this.name} provider`);\n    }\n    return selectedModel;\n  }\n\n  protected ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new Error(`${this.name} provider is not initialized. Call initialize() first.`);\n    }\n  }\n\n  abstract chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string>;\n  abstract chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string>;\n  abstract generateCode(prompt: string, language?: string, model?: string): Promise<string>;\n  abstract reviewCode(code: string, language?: string, model?: string): Promise<CodeReviewResult>;\n}\n\n/**\n * Provider Registry\n */\nexport class AIProviderRegistry {\n  private static providers = new Map<string, IAIProvider>();\n  private static defaultProvider: string | null = null;\n\n  static register(provider: IAIProvider): void {\n    this.providers.set(provider.name.toLowerCase(), provider);\n  }\n\n  static get(name: string): IAIProvider | undefined {\n    return this.providers.get(name.toLowerCase());\n  }\n\n  static getAll(): IAIProvider[] {\n    return Array.from(this.providers.values());\n  }\n\n  static setDefault(name: string): void {\n    if (!this.providers.has(name.toLowerCase())) {\n      throw new Error(`Provider ${name} is not registered`);\n    }\n    this.defaultProvider = name.toLowerCase();\n  }\n\n  static getDefault(): IAIProvider | undefined {\n    if (!this.defaultProvider) {\n      // Return the first registered provider as default\n      const firstProvider = this.providers.values().next().value;\n      return firstProvider;\n    }\n    return this.providers.get(this.defaultProvider);\n  }\n\n  static clear(): void {\n    this.providers.clear();\n    this.defaultProvider = null;\n  }\n}\n","import Anthropic from '@anthropic-ai/sdk';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class AnthropicProvider extends BaseAIProvider {\n  readonly name = 'Anthropic';\n  readonly models = [\n    'claude-opus-4.1',\n    'claude-3-5-sonnet-20241022',\n    'claude-3-5-haiku-20241022',\n    'claude-3-opus-20240229',\n    'claude-3-sonnet-20240229',\n    'claude-3-haiku-20240307',\n  ];\n\n  private client?: Anthropic;\n\n  async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new Anthropic({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n      maxRetries: (config?.['maxRetries'] as number) || 3,\n    });\n  }\n\n  private convertMessages(messages: Message[]): Anthropic.MessageParam[] {\n    // Extract system message if present (unused for now but kept for future use)\n    const _systemMessage = messages.find((m) => m.role === 'system');\n    void _systemMessage; // Will be used in future implementation\n    const conversationMessages = messages.filter((m) => m.role !== 'system');\n\n    return conversationMessages.map((m) => ({\n      role: m.role as 'user' | 'assistant',\n      content: m.content,\n    }));\n  }\n\n  private getSystemMessage(messages: Message[]): string | undefined {\n    const systemMessage = messages.find((m) => m.role === 'system');\n    return systemMessage?.content;\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const response = await this.client!.messages.create({\n      model: selectedModel,\n      messages: this.convertMessages(messages),\n      system: this.getSystemMessage(messages),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP,\n      stop_sequences: options?.stopSequences,\n    });\n\n    // Handle different content types\n    const content = response.content[0];\n    if (content && content.type === 'text' && 'text' in content) {\n      return content.text;\n    }\n\n    return '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const stream = await this.client!.messages.create({\n      model: selectedModel,\n      messages: this.convertMessages(messages),\n      system: this.getSystemMessage(messages),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP,\n      stop_sequences: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const event of stream) {\n      if (event.type === 'content_block_delta' && event.delta.type === 'text_delta') {\n        const text = event.delta.text;\n        yield text;\n\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(text);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from './core';\nimport * as Errors from './error';\nimport { type Agent } from './_shims/index';\nimport * as Uploads from './uploads';\nimport * as API from \"./resources/index\";\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['ANTHROPIC_API_KEY'].\n   */\n  apiKey?: string | null | undefined;\n\n  /**\n   * Defaults to process.env['ANTHROPIC_AUTH_TOKEN'].\n   */\n  authToken?: string | null | undefined;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   *\n   * Defaults to process.env['ANTHROPIC_BASE_URL'].\n   */\n  baseURL?: string | null | undefined;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery;\n}\n\n/** API Client for interfacing with the Anthropic API. */\nexport class Anthropic extends Core.APIClient {\n  apiKey: string | null;\n  authToken: string | null;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the Anthropic API.\n   *\n   * @param {string | null | undefined} [opts.apiKey=process.env['ANTHROPIC_API_KEY'] ?? null]\n   * @param {string | null | undefined} [opts.authToken=process.env['ANTHROPIC_AUTH_TOKEN'] ?? null]\n   * @param {string} [opts.baseURL=process.env['ANTHROPIC_BASE_URL'] ?? https://api.anthropic.com] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   */\n  constructor({\n    baseURL = Core.readEnv('ANTHROPIC_BASE_URL'),\n    apiKey = Core.readEnv('ANTHROPIC_API_KEY') ?? null,\n    authToken = Core.readEnv('ANTHROPIC_AUTH_TOKEN') ?? null,\n    ...opts\n  }: ClientOptions = {}) {\n    const options: ClientOptions = {\n      apiKey,\n      authToken,\n      ...opts,\n      baseURL: baseURL || `https://api.anthropic.com`,\n    };\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 600000 /* 10 minutes */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n    this._options = options;\n\n    this.apiKey = apiKey;\n    this.authToken = authToken;\n  }\n\n  completions: API.Completions = new API.Completions(this);\n  messages: API.Messages = new API.Messages(this);\n  beta: API.Beta = new API.Beta(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      'anthropic-version': '2023-06-01',\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override validateHeaders(headers: Core.Headers, customHeaders: Core.Headers) {\n    if (this.apiKey && headers['x-api-key']) {\n      return;\n    }\n    if (customHeaders['x-api-key'] === null) {\n      return;\n    }\n\n    if (this.authToken && headers['authorization']) {\n      return;\n    }\n    if (customHeaders['authorization'] === null) {\n      return;\n    }\n\n    throw new Error(\n      'Could not resolve authentication method. Expected either apiKey or authToken to be set. Or for one of the \"X-Api-Key\" or \"Authorization\" headers to be explicitly omitted',\n    );\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    const apiKeyAuth = this.apiKeyAuth(opts);\n    const bearerAuth = this.bearerAuth(opts);\n\n    if (apiKeyAuth != null && !Core.isEmptyObj(apiKeyAuth)) {\n      return apiKeyAuth;\n    }\n\n    if (bearerAuth != null && !Core.isEmptyObj(bearerAuth)) {\n      return bearerAuth;\n    }\n    return {};\n  }\n\n  protected apiKeyAuth(opts: Core.FinalRequestOptions): Core.Headers {\n    if (this.apiKey == null) {\n      return {};\n    }\n    return { 'X-Api-Key': this.apiKey };\n  }\n\n  protected bearerAuth(opts: Core.FinalRequestOptions): Core.Headers {\n    if (this.authToken == null) {\n      return {};\n    }\n    return { Authorization: `Bearer ${this.authToken}` };\n  }\n\n  static Anthropic = this;\n  static HUMAN_PROMPT = '\\n\\nHuman:';\n  static AI_PROMPT = '\\n\\nAssistant:';\n\n  static AnthropicError = Errors.AnthropicError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n\n  static toFile = Uploads.toFile;\n  static fileFromPath = Uploads.fileFromPath;\n}\n\nexport const { HUMAN_PROMPT, AI_PROMPT } = Anthropic;\n\nexport const {\n  AnthropicError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} = Errors;\n\nexport import toFile = Uploads.toFile;\nexport import fileFromPath = Uploads.fileFromPath;\n\nexport namespace Anthropic {\n  export import RequestOptions = Core.RequestOptions;\n\n  export import Completions = API.Completions;\n  export import Completion = API.Completion;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n\n  export import Messages = API.Messages;\n  export import ContentBlock = API.ContentBlock;\n  export import ContentBlockDeltaEvent = API.ContentBlockDeltaEvent;\n  export import ContentBlockStartEvent = API.ContentBlockStartEvent;\n  export import ContentBlockStopEvent = API.ContentBlockStopEvent;\n  export import ImageBlockParam = API.ImageBlockParam;\n  export import Message = API.Message;\n  export import MessageDeltaEvent = API.MessageDeltaEvent;\n  export import MessageDeltaUsage = API.MessageDeltaUsage;\n  export import MessageParam = API.MessageParam;\n  export import MessageStartEvent = API.MessageStartEvent;\n  export import MessageStopEvent = API.MessageStopEvent;\n  export import MessageStreamEvent = API.MessageStreamEvent;\n  export import TextBlock = API.TextBlock;\n  export import TextBlockParam = API.TextBlockParam;\n  export import TextDelta = API.TextDelta;\n  export import Usage = API.Usage;\n  export import MessageCreateParams = API.MessageCreateParams;\n  export import MessageCreateParamsNonStreaming = API.MessageCreateParamsNonStreaming;\n  export import MessageCreateParamsStreaming = API.MessageCreateParamsStreaming;\n  export import MessageStreamParams = API.MessageStreamParams;\n\n  export import Beta = API.Beta;\n}\n\nexport default Anthropic;\n","export const VERSION = '0.20.9'; // x-release-please-version\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from '@anthropic-ai/sdk/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  ReadableStream: any;\n  getMultipartRequestOptions: <T = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let ReadableStream: Shims['ReadableStream'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import '@anthropic-ai/sdk/shims/${shims.kind}'\\` before importing anything else from @anthropic-ai/sdk`,\n    );\n  }\n  if (kind) {\n    throw new Error(\n      `can't \\`import '@anthropic-ai/sdk/shims/${shims.kind}'\\` after \\`import '@anthropic-ai/sdk/shims/${kind}'\\``,\n    );\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  ReadableStream = shims.ReadableStream;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as nf from 'node-fetch';\nimport * as fd from 'formdata-node';\nimport { type File, type FilePropertyBag } from 'formdata-node';\nimport KeepAliveAgent from 'agentkeepalive';\nimport { AbortController as AbortControllerPolyfill } from 'abort-controller';\nimport { ReadStream as FsReadStream } from 'node:fs';\nimport { type Agent } from 'node:http';\nimport { FormDataEncoder } from 'form-data-encoder';\nimport { Readable } from 'node:stream';\nimport { type RequestOptions } from '../core';\nimport { MultipartBody } from './MultipartBody';\nimport { type Shims } from './registry';\n\n// @ts-ignore (this package does not have proper export maps for this export)\nimport { ReadableStream } from 'web-streams-polyfill/dist/ponyfill.es2018.js';\n\ntype FileFromPathOptions = Omit<FilePropertyBag, 'lastModified'>;\n\nlet fileFromPathWarned = false;\n\n/**\n * @deprecated use fs.createReadStream('./my/file.txt') instead\n */\nasync function fileFromPath(path: string): Promise<File>;\nasync function fileFromPath(path: string, filename?: string): Promise<File>;\nasync function fileFromPath(path: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, filename?: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, ...args: any[]): Promise<File> {\n  // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n  const { fileFromPath: _fileFromPath } = await import('formdata-node/file-from-path');\n\n  if (!fileFromPathWarned) {\n    console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n    fileFromPathWarned = true;\n  }\n  // @ts-ignore\n  return await _fileFromPath(path, ...args);\n}\n\nconst defaultHttpAgent: Agent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\nconst defaultHttpsAgent: Agent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\n\nasync function getMultipartRequestOptions<T = Record<string, unknown>>(\n  form: fd.FormData,\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T>> {\n  const encoder = new FormDataEncoder(form);\n  const readable = Readable.from(encoder);\n  const body = new MultipartBody(readable);\n  const headers = {\n    ...opts.headers,\n    ...encoder.headers,\n    'Content-Length': encoder.contentLength,\n  };\n\n  return { ...opts, body: body as any, headers };\n}\n\nexport function getRuntime(): Shims {\n  // Polyfill global object if needed.\n  if (typeof AbortController === 'undefined') {\n    // @ts-expect-error (the types are subtly different, but compatible in practice)\n    globalThis.AbortController = AbortControllerPolyfill;\n  }\n  return {\n    kind: 'node',\n    fetch: nf.default,\n    Request: nf.Request,\n    Response: nf.Response,\n    Headers: nf.Headers,\n    FormData: fd.FormData,\n    Blob: fd.Blob,\n    File: fd.File,\n    ReadableStream,\n    getMultipartRequestOptions,\n    getDefaultAgent: (url: string): Agent => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),\n    fileFromPath,\n    isFsReadStream: (value: any): value is FsReadStream => value instanceof FsReadStream,\n  };\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n  constructor(public body: any) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { castToError, Headers } from './core';\n\nexport class AnthropicError extends Error {}\n\nexport class APIError extends AnthropicError {\n  readonly status: number | undefined;\n  readonly headers: Headers | undefined;\n  readonly error: Object | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    super(`${APIError.makeMessage(status, error, message)}`);\n    this.status = status;\n    this.headers = headers;\n    this.error = error;\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg =\n      error?.message ?\n        typeof error.message === 'string' ?\n          error.message\n        : JSON.stringify(error.message)\n      : error ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return '(no status code or body)';\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    if (!status) {\n      return new APIConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = errorResponse as Record<string, any>;\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new APIError(status, error, message, headers);\n  }\n}\n\nexport class APIUserAbortError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message }: { message?: string } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\n\nexport class APIConnectionError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class APIConnectionTimeoutError extends APIConnectionError {\n  constructor({ message }: { message?: string } = {}) {\n    super({ message: message ?? 'Request timed out.' });\n  }\n}\n\nexport class BadRequestError extends APIError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends APIError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends APIError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends APIError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends APIError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends APIError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends APIError {\n  override readonly status: 429 = 429;\n}\n\nexport class InternalServerError extends APIError {}\n","import { ReadableStream, type Response } from './_shims/index';\nimport { AnthropicError } from './error';\n\nimport { safeJSON, createResponseHeaders } from \"./core\";\nimport { APIError } from \"./error\";\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController) {\n    let consumed = false;\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (sse.event === 'completion') {\n            try {\n              yield JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n          }\n\n          if (\n            sse.event === 'message_start' ||\n            sse.event === 'message_delta' ||\n            sse.event === 'message_stop' ||\n            sse.event === 'content_block_start' ||\n            sse.event === 'content_block_delta' ||\n            sse.event === 'content_block_stop'\n          ) {\n            try {\n              yield JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n          }\n\n          if (sse.event === 'ping') {\n            continue;\n          }\n\n          if (sse.event === 'error') {\n            const errText = sse.data;\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n\n            throw APIError.generate(undefined, errJSON, errMessage, createResponseHeaders(response.headers));\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController) {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl: any) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nexport async function* _iterSSEMessages(\n  response: Response,\n  controller: AbortController,\n): AsyncGenerator<ServerSentEvent, void, unknown> {\n  if (!response.body) {\n    controller.abort();\n    throw new AnthropicError(`Attempted to iterate over a response with no body`);\n  }\n\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new LineDecoder();\n\n  const iter = readableStreamAsyncIterable<Bytes>(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator: AsyncIterableIterator<Bytes>): AsyncGenerator<Uint8Array> {\n  let data = new Uint8Array();\n\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n\n    let patternIndex;\n    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n\n  if (data.length > 0) {\n    yield data;\n  }\n}\n\nfunction findDoubleNewlineIndex(buffer: Uint8Array): number {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = 0; i < buffer.length - 2; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (\n      buffer[i] === carriage &&\n      buffer[i + 1] === newline &&\n      i + 3 < buffer.length &&\n      buffer[i + 2] === carriage &&\n      buffer[i + 3] === newline\n    ) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n\n  return -1;\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    // if there is a trailing new line then the last entry will be an empty\n    // string which we don't care about\n    if (trailingNewline) {\n      lines.pop();\n    }\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new AnthropicError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new AnthropicError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new AnthropicError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n\n/** This is an internal helper function that's just used for testing */\nexport function _decodeChunks(chunks: string[]): string[] {\n  const decoder = new LineDecoder();\n  const lines: string[] = [];\n  for (const chunk of chunks) {\n    lines.push(...decoder.decode(chunk));\n  }\n\n  return lines;\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n","import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options?: FilePropertyBag | undefined,\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  // Use the file's options if there isn't one provided\n  options ??= isFileLike(value) ? { lastModified: value.lastModified, type: value.type } : {};\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n        ?.name}; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n","import { VERSION } from './version';\nimport { Stream } from './streaming';\nimport {\n  AnthropicError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n} from './error';\nimport {\n  kind as shimsKind,\n  type Readable,\n  getDefaultAgent,\n  type Agent,\n  fetch,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/index';\nexport { type Response };\nimport { isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    debug('response', response.status, response.url, response.headers, response.body);\n\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n\n    if (props.options.__streamClass) {\n      return props.options.__streamClass.fromSSEResponse(response, props.controller) as any;\n    }\n\n    return Stream.fromSSEResponse(response, props.controller) as any;\n  }\n\n  // fetch refuses to read the body when the status code is 204.\n  if (response.status === 204) {\n    return null as T;\n  }\n\n  if (props.options.__binaryResponse) {\n    return response as unknown as T;\n  }\n\n  const contentType = response.headers.get('content-type');\n  const isJSON =\n    contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\n  if (isJSON) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  return text as unknown as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:\n   * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)\n   * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:\n   * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)\n   * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries = 2,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req>(options: FinalRequestOptions<Req>): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders = this.buildHeaders({ options, headers, contentLength });\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    return { req, url, timeout };\n  }\n\n  private buildHeaders({\n    options,\n    headers,\n    contentLength,\n  }: {\n    options: FinalRequestOptions;\n    headers: Record<string, string | null | undefined>;\n    contentLength: string | null | undefined;\n  }): Record<string, string> {\n    const reqHeaders: Record<string, string> = {};\n    if (contentLength) {\n      reqHeaders['content-length'] = contentLength;\n    }\n\n    const defaultHeaders = this.defaultHeaders(options);\n    applyHeadersMut(reqHeaders, defaultHeaders);\n    applyHeadersMut(reqHeaders, headers);\n\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\n      delete reqHeaders['content-type'];\n    }\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return reqHeaders;\n  }\n\n  /**\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\n   */\n  protected async prepareOptions(options: FinalRequestOptions): Promise<void> {}\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest<Req>(\n    optionsInput: PromiseOrValue<FinalRequestOptions<Req>>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    await this.prepareOptions(options);\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch((e) => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\n      url.search = this.stringifyQuery(query as Record<string, unknown>);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new AnthropicError(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return (\n      this.getRequestClient()\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, { signal: controller.signal as any, ...options })\n        .finally(() => {\n          clearTimeout(timeout);\n        })\n    );\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    let timeoutMillis: number | undefined;\n\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n    if (retryAfterMillisHeader) {\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\n      if (!Number.isNaN(timeoutMs)) {\n        timeoutMillis = timeoutMs;\n      }\n    }\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader && !timeoutMillis) {\n      const timeoutSeconds = parseFloat(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n\n    return this.makeRequest(options, retriesRemaining - 1);\n  }\n\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 8.0;\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n\n    // Apply some jitter, take up to at most 25 percent of the retry time.\n    const jitter = 1 - Math.random() * 0.25;\n\n    return sleepSeconds * jitter * 1000;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new AnthropicError(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value as any);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req = unknown | Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | null | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n\n  __binaryResponse?: boolean | undefined;\n  __streamClass?: typeof Stream;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n\n  __binaryResponse: true,\n  __streamClass: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req = unknown | Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version':\n        typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new AnthropicError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new AnthropicError(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new AnthropicError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env]?.trim() ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env)?.trim();\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders: Headers, newHeaders: Headers): void {\n  for (const k in newHeaders) {\n    if (!hasOwn(newHeaders, k)) continue;\n    const lowerKey = k.toLowerCase();\n    if (!lowerKey) continue;\n\n    const val = newHeaders[k];\n\n    if (val === null) {\n      delete targetHeaders[lowerKey];\n    } else if (val !== undefined) {\n      targetHeaders[lowerKey] = val;\n    }\n  }\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\n    console.log(`Anthropic:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getRequiredHeader = (headers: HeadersLike, header: string): string => {\n  const lowerCasedHeader = header.toLowerCase();\n  if (isHeadersProtocol(headers)) {\n    // to deal with the case where the header looks like Stainless-Event-Id\n    const intercapsHeader =\n      header[0]?.toUpperCase() +\n      header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n      const value = headers.get(key);\n      if (value) {\n        return value;\n      }\n    }\n  }\n\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === lowerCasedHeader) {\n      if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n        return value[0];\n      }\n      return value;\n    }\n  }\n\n  throw new Error(`Could not find ${header} header`);\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new AnthropicError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nexport { Beta } from './beta/beta';\nexport {\n  Completion,\n  CompletionCreateParams,\n  CompletionCreateParamsNonStreaming,\n  CompletionCreateParamsStreaming,\n  Completions,\n} from './completions';\nexport {\n  ContentBlock,\n  ContentBlockDeltaEvent,\n  ContentBlockStartEvent,\n  ContentBlockStopEvent,\n  ImageBlockParam,\n  Message,\n  MessageDeltaEvent,\n  MessageDeltaUsage,\n  MessageParam,\n  MessageStartEvent,\n  MessageStopEvent,\n  MessageStreamEvent,\n  TextBlock,\n  TextBlockParam,\n  TextDelta,\n  Usage,\n  MessageCreateParams,\n  MessageCreateParamsNonStreaming,\n  MessageCreateParamsStreaming,\n  MessageStreamParams,\n  Messages,\n} from './messages';\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from \"../../resource\";\nimport * as ToolsAPI from \"./tools/tools\";\n\nexport class Beta extends APIResource {\n  tools: ToolsAPI.Tools = new ToolsAPI.Tools(this._client);\n}\n\nexport namespace Beta {\n  export import Tools = ToolsAPI.Tools;\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from \"./core\";\n\nexport class APIResource {\n  protected _client: Core.APIClient;\n\n  constructor(client: Core.APIClient) {\n    this._client = client;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from \"../../../resource\";\nimport * as MessagesAPI from \"./messages\";\n\nexport class Tools extends APIResource {\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this._client);\n}\n\nexport namespace Tools {\n  export import Messages = MessagesAPI.Messages;\n  export import Tool = MessagesAPI.Tool;\n  export import ToolResultBlockParam = MessagesAPI.ToolResultBlockParam;\n  export import ToolUseBlock = MessagesAPI.ToolUseBlock;\n  export import ToolUseBlockParam = MessagesAPI.ToolUseBlockParam;\n  export import ToolsBetaContentBlock = MessagesAPI.ToolsBetaContentBlock;\n  export import ToolsBetaMessage = MessagesAPI.ToolsBetaMessage;\n  export import ToolsBetaMessageParam = MessagesAPI.ToolsBetaMessageParam;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageCreateParamsNonStreaming = MessagesAPI.MessageCreateParamsNonStreaming;\n  export import MessageCreateParamsStreaming = MessagesAPI.MessageCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from \"../../../core\";\nimport { APIPromise } from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport * as ToolsMessagesAPI from \"./messages\";\nimport * as MessagesAPI from \"../../messages\";\nimport { Stream } from \"../../../streaming\";\n\nexport class Messages extends APIResource {\n  /**\n   * Create a Message.\n   *\n   * Send a structured list of input messages with text and/or image content, and the\n   * model will generate the next message in the conversation.\n   *\n   * The Messages API can be used for for either single queries or stateless\n   * multi-turn conversations.\n   */\n  create(body: MessageCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<ToolsBetaMessage>;\n  create(\n    body: MessageCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<MessagesAPI.MessageStreamEvent>>;\n  create(\n    body: MessageCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<MessagesAPI.MessageStreamEvent> | ToolsBetaMessage>;\n  create(\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<ToolsBetaMessage> | APIPromise<Stream<MessagesAPI.MessageStreamEvent>> {\n    return this._client.post('/v1/messages?beta=tools', {\n      body,\n      timeout: 600000,\n      ...options,\n      headers: { 'anthropic-beta': 'tools-2024-04-04', ...options?.headers },\n      stream: body.stream ?? false,\n    }) as APIPromise<ToolsBetaMessage> | APIPromise<Stream<MessagesAPI.MessageStreamEvent>>;\n  }\n}\n\nexport interface Tool {\n  /**\n   * [JSON schema](https://json-schema.org/) for this tool's input.\n   *\n   * This defines the shape of the `input` that your tool accepts and that the model\n   * will produce.\n   */\n  input_schema: Tool.InputSchema;\n\n  name: string;\n\n  /**\n   * Description of what this tool does.\n   *\n   * Tool descriptions should be as detailed as possible. The more information that\n   * the model has about what the tool is and how to use it, the better it will\n   * perform. You can use natural language descriptions to reinforce important\n   * aspects of the tool input JSON schema.\n   */\n  description?: string;\n}\n\nexport namespace Tool {\n  /**\n   * [JSON schema](https://json-schema.org/) for this tool's input.\n   *\n   * This defines the shape of the `input` that your tool accepts and that the model\n   * will produce.\n   */\n  export interface InputSchema {\n    type: 'object';\n\n    properties?: unknown | null;\n    [k: string]: unknown;\n  }\n}\n\nexport interface ToolResultBlockParam {\n  tool_use_id: string;\n\n  type: 'tool_result';\n\n  content?: Array<MessagesAPI.TextBlockParam>;\n\n  is_error?: boolean;\n}\n\nexport interface ToolUseBlock {\n  id: string;\n\n  input: unknown;\n\n  name: string;\n\n  type: 'tool_use';\n}\n\nexport interface ToolUseBlockParam {\n  id: string;\n\n  input: unknown;\n\n  name: string;\n\n  type: 'tool_use';\n}\n\nexport type ToolsBetaContentBlock = MessagesAPI.TextBlock | ToolUseBlock;\n\nexport interface ToolsBetaMessage {\n  /**\n   * Unique object identifier.\n   *\n   * The format and length of IDs may change over time.\n   */\n  id: string;\n\n  /**\n   * Content generated by the model.\n   *\n   * This is an array of content blocks, each of which has a `type` that determines\n   * its shape. Currently, the only `type` in responses is `\"text\"`.\n   *\n   * Example:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"Hi, I'm Claude.\" }]\n   * ```\n   *\n   * If the request input `messages` ended with an `assistant` turn, then the\n   * response `content` will continue directly from that last turn. You can use this\n   * to constrain the model's output.\n   *\n   * For example, if the input `messages` were:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Then the response `content` might be:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"B)\" }]\n   * ```\n   */\n  content: Array<ToolsBetaContentBlock>;\n\n  /**\n   * The model that handled the request.\n   */\n  model: string;\n\n  /**\n   * Conversational role of the generated message.\n   *\n   * This will always be `\"assistant\"`.\n   */\n  role: 'assistant';\n\n  /**\n   * The reason that we stopped.\n   *\n   * This may be one the following values:\n   *\n   * - `\"end_turn\"`: the model reached a natural stopping point\n   * - `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n   * - `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n   * - `\"tool_use\"`: (tools beta only) the model invoked one or more tools\n   *\n   * In non-streaming mode this value is always non-null. In streaming mode, it is\n   * null in the `message_start` event and non-null otherwise.\n   */\n  stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | 'tool_use' | null;\n\n  /**\n   * Which custom stop sequence was generated, if any.\n   *\n   * This value will be a non-null string if one of your custom stop sequences was\n   * generated.\n   */\n  stop_sequence: string | null;\n\n  /**\n   * Object type.\n   *\n   * For Messages, this is always `\"message\"`.\n   */\n  type: 'message';\n\n  /**\n   * Billing and rate-limit usage.\n   *\n   * Anthropic's API bills and rate-limits by token counts, as tokens represent the\n   * underlying cost to our systems.\n   *\n   * Under the hood, the API transforms requests into a format suitable for the\n   * model. The model's output then goes through a parsing stage before becoming an\n   * API response. As a result, the token counts in `usage` will not match one-to-one\n   * with the exact visible content of an API request or response.\n   *\n   * For example, `output_tokens` will be non-zero, even for an empty string response\n   * from Claude.\n   */\n  usage: MessagesAPI.Usage;\n}\n\nexport interface ToolsBetaMessageParam {\n  content:\n    | string\n    | Array<\n        MessagesAPI.TextBlockParam | MessagesAPI.ImageBlockParam | ToolUseBlockParam | ToolResultBlockParam\n      >;\n\n  role: 'user' | 'assistant';\n}\n\nexport type MessageCreateParams = MessageCreateParamsNonStreaming | MessageCreateParamsStreaming;\n\nexport interface MessageCreateParamsBase {\n  /**\n   * The maximum number of tokens to generate before stopping.\n   *\n   * Note that our models may stop _before_ reaching this maximum. This parameter\n   * only specifies the absolute maximum number of tokens to generate.\n   *\n   * Different models have different maximum values for this parameter. See\n   * [models](https://docs.anthropic.com/claude/docs/models-overview) for details.\n   */\n  max_tokens: number;\n\n  /**\n   * Input messages.\n   *\n   * Our models are trained to operate on alternating `user` and `assistant`\n   * conversational turns. When creating a new `Message`, you specify the prior\n   * conversational turns with the `messages` parameter, and the model then generates\n   * the next `Message` in the conversation.\n   *\n   * Each input message must be an object with a `role` and `content`. You can\n   * specify a single `user`-role message, or you can include multiple `user` and\n   * `assistant` messages. The first message must always use the `user` role.\n   *\n   * If the final message uses the `assistant` role, the response content will\n   * continue immediately from the content in that message. This can be used to\n   * constrain part of the model's response.\n   *\n   * Example with a single `user` message:\n   *\n   * ```json\n   * [{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n   * ```\n   *\n   * Example with multiple conversational turns:\n   *\n   * ```json\n   * [\n   *   { \"role\": \"user\", \"content\": \"Hello there.\" },\n   *   { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n   *   { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n   * ]\n   * ```\n   *\n   * Example with a partially-filled response from Claude:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Each input message `content` may be either a single `string` or an array of\n   * content blocks, where each block has a specific `type`. Using a `string` for\n   * `content` is shorthand for an array of one content block of type `\"text\"`. The\n   * following input messages are equivalent:\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": \"Hello, Claude\" }\n   * ```\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n   * ```\n   *\n   * Starting with Claude 3 models, you can also send image content blocks:\n   *\n   * ```json\n   * {\n   *   \"role\": \"user\",\n   *   \"content\": [\n   *     {\n   *       \"type\": \"image\",\n   *       \"source\": {\n   *         \"type\": \"base64\",\n   *         \"media_type\": \"image/jpeg\",\n   *         \"data\": \"/9j/4AAQSkZJRg...\"\n   *       }\n   *     },\n   *     { \"type\": \"text\", \"text\": \"What is in this image?\" }\n   *   ]\n   * }\n   * ```\n   *\n   * We currently support the `base64` source type for images, and the `image/jpeg`,\n   * `image/png`, `image/gif`, and `image/webp` media types.\n   *\n   * See [examples](https://docs.anthropic.com/claude/reference/messages-examples)\n   * for more input examples.\n   *\n   * Note that if you want to include a\n   * [system prompt](https://docs.anthropic.com/claude/docs/system-prompts), you can\n   * use the top-level `system` parameter — there is no `\"system\"` role for input\n   * messages in the Messages API.\n   */\n  messages: Array<ToolsBetaMessageParam>;\n\n  /**\n   * The model that will complete your prompt.\n   *\n   * See [models](https://docs.anthropic.com/claude/docs/models-overview) for\n   * additional details and options.\n   */\n  model: string;\n\n  /**\n   * An object describing metadata about the request.\n   */\n  metadata?: MessageCreateParams.Metadata;\n\n  /**\n   * Custom text sequences that will cause the model to stop generating.\n   *\n   * Our models will normally stop when they have naturally completed their turn,\n   * which will result in a response `stop_reason` of `\"end_turn\"`.\n   *\n   * If you want the model to stop generating when it encounters custom strings of\n   * text, you can use the `stop_sequences` parameter. If the model encounters one of\n   * the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"`\n   * and the response `stop_sequence` value will contain the matched stop sequence.\n   */\n  stop_sequences?: Array<string>;\n\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream?: boolean;\n\n  /**\n   * System prompt.\n   *\n   * A system prompt is a way of providing context and instructions to Claude, such\n   * as specifying a particular goal or role. See our\n   * [guide to system prompts](https://docs.anthropic.com/claude/docs/system-prompts).\n   */\n  system?: string;\n\n  /**\n   * Amount of randomness injected into the response.\n   *\n   * Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n   * for analytical / multiple choice, and closer to `1.0` for creative and\n   * generative tasks.\n   *\n   * Note that even with `temperature` of `0.0`, the results will not be fully\n   * deterministic.\n   */\n  temperature?: number;\n\n  /**\n   * [beta] Definitions of tools that the model may use.\n   *\n   * If you include `tools` in your API request, the model may return `tool_use`\n   * content blocks that represent the model's use of those tools. You can then run\n   * those tools using the tool input generated by the model and then optionally\n   * return results back to the model using `tool_result` content blocks.\n   *\n   * Each tool definition includes:\n   *\n   * - `name`: Name of the tool.\n   * - `description`: Optional, but strongly-recommended description of the tool.\n   * - `input_schema`: [JSON schema](https://json-schema.org/) for the tool `input`\n   *   shape that the model will produce in `tool_use` output content blocks.\n   *\n   * For example, if you defined `tools` as:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"name\": \"get_stock_price\",\n   *     \"description\": \"Get the current stock price for a given ticker symbol.\",\n   *     \"input_schema\": {\n   *       \"type\": \"object\",\n   *       \"properties\": {\n   *         \"ticker\": {\n   *           \"type\": \"string\",\n   *           \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n   *         }\n   *       },\n   *       \"required\": [\"ticker\"]\n   *     }\n   *   }\n   * ]\n   * ```\n   *\n   * And then asked the model \"What's the S&P 500 at today?\", the model might produce\n   * `tool_use` content blocks in the response like this:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_use\",\n   *     \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"name\": \"get_stock_price\",\n   *     \"input\": { \"ticker\": \"^GSPC\" }\n   *   }\n   * ]\n   * ```\n   *\n   * You might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an\n   * input, and return the following back to the model in a subsequent `user`\n   * message:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_result\",\n   *     \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"content\": \"259.75 USD\"\n   *   }\n   * ]\n   * ```\n   *\n   * Tools can be used for workflows that include running client-side tools and\n   * functions, or more generally whenever you want the model to produce a particular\n   * JSON structure of output.\n   *\n   * See our [beta guide](https://docs.anthropic.com/claude/docs/tool-use) for more\n   * details.\n   */\n  tools?: Array<Tool>;\n\n  /**\n   * Only sample from the top K options for each subsequent token.\n   *\n   * Used to remove \"long tail\" low probability responses.\n   * [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_k?: number;\n\n  /**\n   * Use nucleus sampling.\n   *\n   * In nucleus sampling, we compute the cumulative distribution over all the options\n   * for each subsequent token in decreasing probability order and cut it off once it\n   * reaches a particular probability specified by `top_p`. You should either alter\n   * `temperature` or `top_p`, but not both.\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_p?: number;\n}\n\nexport namespace MessageCreateParams {\n  /**\n   * An object describing metadata about the request.\n   */\n  export interface Metadata {\n    /**\n     * An external identifier for the user who is associated with the request.\n     *\n     * This should be a uuid, hash value, or other opaque identifier. Anthropic may use\n     * this id to help detect abuse. Do not include any identifying information such as\n     * name, email address, or phone number.\n     */\n    user_id?: string | null;\n  }\n\n  export type MessageCreateParamsNonStreaming = ToolsMessagesAPI.MessageCreateParamsNonStreaming;\n  export type MessageCreateParamsStreaming = ToolsMessagesAPI.MessageCreateParamsStreaming;\n}\n\nexport interface MessageCreateParamsNonStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream?: false;\n}\n\nexport interface MessageCreateParamsStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream: true;\n}\n\nexport namespace Messages {\n  export import Tool = ToolsMessagesAPI.Tool;\n  export import ToolResultBlockParam = ToolsMessagesAPI.ToolResultBlockParam;\n  export import ToolUseBlock = ToolsMessagesAPI.ToolUseBlock;\n  export import ToolUseBlockParam = ToolsMessagesAPI.ToolUseBlockParam;\n  export import ToolsBetaContentBlock = ToolsMessagesAPI.ToolsBetaContentBlock;\n  export import ToolsBetaMessage = ToolsMessagesAPI.ToolsBetaMessage;\n  export import ToolsBetaMessageParam = ToolsMessagesAPI.ToolsBetaMessageParam;\n  export import MessageCreateParams = ToolsMessagesAPI.MessageCreateParams;\n  export import MessageCreateParamsNonStreaming = ToolsMessagesAPI.MessageCreateParamsNonStreaming;\n  export import MessageCreateParamsStreaming = ToolsMessagesAPI.MessageCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from \"../core\";\nimport { APIPromise } from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as CompletionsAPI from \"./completions\";\nimport { Stream } from \"../streaming\";\n\nexport class Completions extends APIResource {\n  /**\n   * [Legacy] Create a Text Completion.\n   *\n   * The Text Completions API is a legacy API. We recommend using the\n   * [Messages API](https://docs.anthropic.com/claude/reference/messages_post) going\n   * forward.\n   *\n   * Future models and features will not be compatible with Text Completions. See our\n   * [migration guide](https://docs.anthropic.com/claude/reference/migrating-from-text-completions-to-messages)\n   * for guidance in migrating from Text Completions to Messages.\n   */\n  create(body: CompletionCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Completion>;\n  create(\n    body: CompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion>>;\n  create(\n    body: CompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion> | Completion>;\n  create(\n    body: CompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Completion> | APIPromise<Stream<Completion>> {\n    return this._client.post('/v1/complete', {\n      body,\n      timeout: 600000,\n      ...options,\n      stream: body.stream ?? false,\n    }) as APIPromise<Completion> | APIPromise<Stream<Completion>>;\n  }\n}\n\nexport interface Completion {\n  /**\n   * Unique object identifier.\n   *\n   * The format and length of IDs may change over time.\n   */\n  id: string;\n\n  /**\n   * The resulting completion up to and excluding the stop sequences.\n   */\n  completion: string;\n\n  /**\n   * The model that handled the request.\n   */\n  model: string;\n\n  /**\n   * The reason that we stopped.\n   *\n   * This may be one the following values:\n   *\n   * - `\"stop_sequence\"`: we reached a stop sequence — either provided by you via the\n   *   `stop_sequences` parameter, or a stop sequence built into the model\n   * - `\"max_tokens\"`: we exceeded `max_tokens_to_sample` or the model's maximum\n   */\n  stop_reason: string | null;\n\n  /**\n   * Object type.\n   *\n   * For Text Completions, this is always `\"completion\"`.\n   */\n  type: 'completion';\n}\n\nexport type CompletionCreateParams = CompletionCreateParamsNonStreaming | CompletionCreateParamsStreaming;\n\nexport interface CompletionCreateParamsBase {\n  /**\n   * The maximum number of tokens to generate before stopping.\n   *\n   * Note that our models may stop _before_ reaching this maximum. This parameter\n   * only specifies the absolute maximum number of tokens to generate.\n   */\n  max_tokens_to_sample: number;\n\n  /**\n   * The model that will complete your prompt.\n   *\n   * See [models](https://docs.anthropic.com/claude/docs/models-overview) for\n   * additional details and options.\n   */\n  model: (string & {}) | 'claude-2.0' | 'claude-2.1' | 'claude-instant-1.2';\n\n  /**\n   * The prompt that you want Claude to complete.\n   *\n   * For proper response generation you will need to format your prompt using\n   * alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n   *\n   * ```\n   * \"\\n\\nHuman: {userQuestion}\\n\\nAssistant:\"\n   * ```\n   *\n   * See\n   * [prompt validation](https://anthropic.readme.io/claude/reference/prompt-validation)\n   * and our guide to\n   * [prompt design](https://docs.anthropic.com/claude/docs/introduction-to-prompt-design)\n   * for more details.\n   */\n  prompt: string;\n\n  /**\n   * An object describing metadata about the request.\n   */\n  metadata?: CompletionCreateParams.Metadata;\n\n  /**\n   * Sequences that will cause the model to stop generating.\n   *\n   * Our models stop on `\"\\n\\nHuman:\"`, and may include additional built-in stop\n   * sequences in the future. By providing the stop_sequences parameter, you may\n   * include additional strings that will cause the model to stop generating.\n   */\n  stop_sequences?: Array<string>;\n\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See\n   * [streaming](https://docs.anthropic.com/claude/reference/text-completions-streaming)\n   * for details.\n   */\n  stream?: boolean;\n\n  /**\n   * Amount of randomness injected into the response.\n   *\n   * Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n   * for analytical / multiple choice, and closer to `1.0` for creative and\n   * generative tasks.\n   *\n   * Note that even with `temperature` of `0.0`, the results will not be fully\n   * deterministic.\n   */\n  temperature?: number;\n\n  /**\n   * Only sample from the top K options for each subsequent token.\n   *\n   * Used to remove \"long tail\" low probability responses.\n   * [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_k?: number;\n\n  /**\n   * Use nucleus sampling.\n   *\n   * In nucleus sampling, we compute the cumulative distribution over all the options\n   * for each subsequent token in decreasing probability order and cut it off once it\n   * reaches a particular probability specified by `top_p`. You should either alter\n   * `temperature` or `top_p`, but not both.\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_p?: number;\n}\n\nexport namespace CompletionCreateParams {\n  /**\n   * An object describing metadata about the request.\n   */\n  export interface Metadata {\n    /**\n     * An external identifier for the user who is associated with the request.\n     *\n     * This should be a uuid, hash value, or other opaque identifier. Anthropic may use\n     * this id to help detect abuse. Do not include any identifying information such as\n     * name, email address, or phone number.\n     */\n    user_id?: string | null;\n  }\n\n  export type CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export type CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n\nexport interface CompletionCreateParamsNonStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See\n   * [streaming](https://docs.anthropic.com/claude/reference/text-completions-streaming)\n   * for details.\n   */\n  stream?: false;\n}\n\nexport interface CompletionCreateParamsStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See\n   * [streaming](https://docs.anthropic.com/claude/reference/text-completions-streaming)\n   * for details.\n   */\n  stream: true;\n}\n\nexport namespace Completions {\n  export import Completion = CompletionsAPI.Completion;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from \"../core\";\nimport { APIPromise } from \"../core\";\nimport { APIResource } from \"../resource\";\nimport { MessageStream } from \"../lib/MessageStream\";\nexport { MessageStream } from \"../lib/MessageStream\";\nimport * as MessagesAPI from \"./messages\";\nimport { Stream } from \"../streaming\";\n\nexport class Messages extends APIResource {\n  /**\n   * Create a Message.\n   *\n   * Send a structured list of input messages with text and/or image content, and the\n   * model will generate the next message in the conversation.\n   *\n   * The Messages API can be used for for either single queries or stateless\n   * multi-turn conversations.\n   */\n  create(body: MessageCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Message>;\n  create(\n    body: MessageCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<MessageStreamEvent>>;\n  create(\n    body: MessageCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<MessageStreamEvent> | Message>;\n  create(\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Message> | APIPromise<Stream<MessageStreamEvent>> {\n    return this._client.post('/v1/messages', {\n      body,\n      timeout: 600000,\n      ...options,\n      stream: body.stream ?? false,\n    }) as APIPromise<Message> | APIPromise<Stream<MessageStreamEvent>>;\n  }\n\n  /**\n   * Create a Message stream\n   */\n  stream(body: MessageStreamParams, options?: Core.RequestOptions): MessageStream {\n    return MessageStream.createMessage(this, body, options);\n  }\n}\n\nexport type ContentBlock = TextBlock;\n\nexport interface ContentBlockDeltaEvent {\n  delta: TextDelta;\n\n  index: number;\n\n  type: 'content_block_delta';\n}\n\nexport interface ContentBlockStartEvent {\n  content_block: TextBlock;\n\n  index: number;\n\n  type: 'content_block_start';\n}\n\nexport interface ContentBlockStopEvent {\n  index: number;\n\n  type: 'content_block_stop';\n}\n\nexport interface ImageBlockParam {\n  source: ImageBlockParam.Source;\n\n  type: 'image';\n}\n\nexport namespace ImageBlockParam {\n  export interface Source {\n    data: string;\n\n    media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\n\n    type: 'base64';\n  }\n}\n\nexport interface Message {\n  /**\n   * Unique object identifier.\n   *\n   * The format and length of IDs may change over time.\n   */\n  id: string;\n\n  /**\n   * Content generated by the model.\n   *\n   * This is an array of content blocks, each of which has a `type` that determines\n   * its shape. Currently, the only `type` in responses is `\"text\"`.\n   *\n   * Example:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"Hi, I'm Claude.\" }]\n   * ```\n   *\n   * If the request input `messages` ended with an `assistant` turn, then the\n   * response `content` will continue directly from that last turn. You can use this\n   * to constrain the model's output.\n   *\n   * For example, if the input `messages` were:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Then the response `content` might be:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"B)\" }]\n   * ```\n   */\n  content: Array<TextBlock>;\n\n  /**\n   * The model that handled the request.\n   */\n  model: string;\n\n  /**\n   * Conversational role of the generated message.\n   *\n   * This will always be `\"assistant\"`.\n   */\n  role: 'assistant';\n\n  /**\n   * The reason that we stopped.\n   *\n   * This may be one the following values:\n   *\n   * - `\"end_turn\"`: the model reached a natural stopping point\n   * - `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n   * - `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n   *\n   * In non-streaming mode this value is always non-null. In streaming mode, it is\n   * null in the `message_start` event and non-null otherwise.\n   */\n  stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | null;\n\n  /**\n   * Which custom stop sequence was generated, if any.\n   *\n   * This value will be a non-null string if one of your custom stop sequences was\n   * generated.\n   */\n  stop_sequence: string | null;\n\n  /**\n   * Object type.\n   *\n   * For Messages, this is always `\"message\"`.\n   */\n  type: 'message';\n\n  /**\n   * Billing and rate-limit usage.\n   *\n   * Anthropic's API bills and rate-limits by token counts, as tokens represent the\n   * underlying cost to our systems.\n   *\n   * Under the hood, the API transforms requests into a format suitable for the\n   * model. The model's output then goes through a parsing stage before becoming an\n   * API response. As a result, the token counts in `usage` will not match one-to-one\n   * with the exact visible content of an API request or response.\n   *\n   * For example, `output_tokens` will be non-zero, even for an empty string response\n   * from Claude.\n   */\n  usage: Usage;\n}\n\nexport interface MessageDeltaEvent {\n  delta: MessageDeltaEvent.Delta;\n\n  type: 'message_delta';\n\n  /**\n   * Billing and rate-limit usage.\n   *\n   * Anthropic's API bills and rate-limits by token counts, as tokens represent the\n   * underlying cost to our systems.\n   *\n   * Under the hood, the API transforms requests into a format suitable for the\n   * model. The model's output then goes through a parsing stage before becoming an\n   * API response. As a result, the token counts in `usage` will not match one-to-one\n   * with the exact visible content of an API request or response.\n   *\n   * For example, `output_tokens` will be non-zero, even for an empty string response\n   * from Claude.\n   */\n  usage: MessageDeltaUsage;\n}\n\nexport namespace MessageDeltaEvent {\n  export interface Delta {\n    stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | null;\n\n    stop_sequence: string | null;\n  }\n}\n\nexport interface MessageDeltaUsage {\n  /**\n   * The cumulative number of output tokens which were used.\n   */\n  output_tokens: number;\n}\n\nexport interface MessageParam {\n  content: string | Array<TextBlockParam | ImageBlockParam>;\n\n  role: 'user' | 'assistant';\n}\n\nexport interface MessageStartEvent {\n  message: Message;\n\n  type: 'message_start';\n}\n\nexport interface MessageStopEvent {\n  type: 'message_stop';\n}\n\nexport type MessageStreamEvent =\n  | MessageStartEvent\n  | MessageDeltaEvent\n  | MessageStopEvent\n  | ContentBlockStartEvent\n  | ContentBlockDeltaEvent\n  | ContentBlockStopEvent;\n\nexport interface TextBlock {\n  text: string;\n\n  type: 'text';\n}\n\nexport interface TextBlockParam {\n  text: string;\n\n  type: 'text';\n}\n\nexport interface TextDelta {\n  text: string;\n\n  type: 'text_delta';\n}\n\nexport interface Usage {\n  /**\n   * The number of input tokens which were used.\n   */\n  input_tokens: number;\n\n  /**\n   * The number of output tokens which were used.\n   */\n  output_tokens: number;\n}\n\nexport type MessageCreateParams = MessageCreateParamsNonStreaming | MessageCreateParamsStreaming;\n\nexport interface MessageCreateParamsBase {\n  /**\n   * The maximum number of tokens to generate before stopping.\n   *\n   * Note that our models may stop _before_ reaching this maximum. This parameter\n   * only specifies the absolute maximum number of tokens to generate.\n   *\n   * Different models have different maximum values for this parameter. See\n   * [models](https://docs.anthropic.com/claude/docs/models-overview) for details.\n   */\n  max_tokens: number;\n\n  /**\n   * Input messages.\n   *\n   * Our models are trained to operate on alternating `user` and `assistant`\n   * conversational turns. When creating a new `Message`, you specify the prior\n   * conversational turns with the `messages` parameter, and the model then generates\n   * the next `Message` in the conversation.\n   *\n   * Each input message must be an object with a `role` and `content`. You can\n   * specify a single `user`-role message, or you can include multiple `user` and\n   * `assistant` messages. The first message must always use the `user` role.\n   *\n   * If the final message uses the `assistant` role, the response content will\n   * continue immediately from the content in that message. This can be used to\n   * constrain part of the model's response.\n   *\n   * Example with a single `user` message:\n   *\n   * ```json\n   * [{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n   * ```\n   *\n   * Example with multiple conversational turns:\n   *\n   * ```json\n   * [\n   *   { \"role\": \"user\", \"content\": \"Hello there.\" },\n   *   { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n   *   { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n   * ]\n   * ```\n   *\n   * Example with a partially-filled response from Claude:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Each input message `content` may be either a single `string` or an array of\n   * content blocks, where each block has a specific `type`. Using a `string` for\n   * `content` is shorthand for an array of one content block of type `\"text\"`. The\n   * following input messages are equivalent:\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": \"Hello, Claude\" }\n   * ```\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n   * ```\n   *\n   * Starting with Claude 3 models, you can also send image content blocks:\n   *\n   * ```json\n   * {\n   *   \"role\": \"user\",\n   *   \"content\": [\n   *     {\n   *       \"type\": \"image\",\n   *       \"source\": {\n   *         \"type\": \"base64\",\n   *         \"media_type\": \"image/jpeg\",\n   *         \"data\": \"/9j/4AAQSkZJRg...\"\n   *       }\n   *     },\n   *     { \"type\": \"text\", \"text\": \"What is in this image?\" }\n   *   ]\n   * }\n   * ```\n   *\n   * We currently support the `base64` source type for images, and the `image/jpeg`,\n   * `image/png`, `image/gif`, and `image/webp` media types.\n   *\n   * See [examples](https://docs.anthropic.com/claude/reference/messages-examples)\n   * for more input examples.\n   *\n   * Note that if you want to include a\n   * [system prompt](https://docs.anthropic.com/claude/docs/system-prompts), you can\n   * use the top-level `system` parameter — there is no `\"system\"` role for input\n   * messages in the Messages API.\n   */\n  messages: Array<MessageParam>;\n\n  /**\n   * The model that will complete your prompt.\n   *\n   * See [models](https://docs.anthropic.com/claude/docs/models-overview) for\n   * additional details and options.\n   */\n  model:\n    | (string & {})\n    | 'claude-3-opus-20240229'\n    | 'claude-3-sonnet-20240229'\n    | 'claude-3-haiku-20240307'\n    | 'claude-2.1'\n    | 'claude-2.0'\n    | 'claude-instant-1.2';\n\n  /**\n   * An object describing metadata about the request.\n   */\n  metadata?: MessageCreateParams.Metadata;\n\n  /**\n   * Custom text sequences that will cause the model to stop generating.\n   *\n   * Our models will normally stop when they have naturally completed their turn,\n   * which will result in a response `stop_reason` of `\"end_turn\"`.\n   *\n   * If you want the model to stop generating when it encounters custom strings of\n   * text, you can use the `stop_sequences` parameter. If the model encounters one of\n   * the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"`\n   * and the response `stop_sequence` value will contain the matched stop sequence.\n   */\n  stop_sequences?: Array<string>;\n\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream?: boolean;\n\n  /**\n   * System prompt.\n   *\n   * A system prompt is a way of providing context and instructions to Claude, such\n   * as specifying a particular goal or role. See our\n   * [guide to system prompts](https://docs.anthropic.com/claude/docs/system-prompts).\n   */\n  system?: string;\n\n  /**\n   * Amount of randomness injected into the response.\n   *\n   * Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n   * for analytical / multiple choice, and closer to `1.0` for creative and\n   * generative tasks.\n   *\n   * Note that even with `temperature` of `0.0`, the results will not be fully\n   * deterministic.\n   */\n  temperature?: number;\n\n  /**\n   * Only sample from the top K options for each subsequent token.\n   *\n   * Used to remove \"long tail\" low probability responses.\n   * [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_k?: number;\n\n  /**\n   * Use nucleus sampling.\n   *\n   * In nucleus sampling, we compute the cumulative distribution over all the options\n   * for each subsequent token in decreasing probability order and cut it off once it\n   * reaches a particular probability specified by `top_p`. You should either alter\n   * `temperature` or `top_p`, but not both.\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_p?: number;\n}\n\nexport namespace MessageCreateParams {\n  /**\n   * An object describing metadata about the request.\n   */\n  export interface Metadata {\n    /**\n     * An external identifier for the user who is associated with the request.\n     *\n     * This should be a uuid, hash value, or other opaque identifier. Anthropic may use\n     * this id to help detect abuse. Do not include any identifying information such as\n     * name, email address, or phone number.\n     */\n    user_id?: string | null;\n  }\n\n  export type MessageCreateParamsNonStreaming = MessagesAPI.MessageCreateParamsNonStreaming;\n  export type MessageCreateParamsStreaming = MessagesAPI.MessageCreateParamsStreaming;\n}\n\nexport interface MessageCreateParamsNonStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream?: false;\n}\n\nexport interface MessageCreateParamsStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/claude/reference/messages-streaming)\n   * for details.\n   */\n  stream: true;\n}\n\nexport interface MessageStreamParams {\n  /**\n   * The maximum number of tokens to generate before stopping.\n   *\n   * Note that our models may stop _before_ reaching this maximum. This parameter\n   * only specifies the absolute maximum number of tokens to generate.\n   *\n   * Different models have different maximum values for this parameter. See\n   * [models](https://docs.anthropic.com/claude/docs/models-overview) for details.\n   */\n  max_tokens: number;\n\n  /**\n   * Input messages.\n   *\n   * Our models are trained to operate on alternating `user` and `assistant`\n   * conversational turns. When creating a new `Message`, you specify the prior\n   * conversational turns with the `messages` parameter, and the model then generates\n   * the next `Message` in the conversation.\n   *\n   * Each input message must be an object with a `role` and `content`. You can\n   * specify a single `user`-role message, or you can include multiple `user` and\n   * `assistant` messages. The first message must always use the `user` role.\n   *\n   * If the final message uses the `assistant` role, the response content will\n   * continue immediately from the content in that message. This can be used to\n   * constrain part of the model's response.\n   *\n   * Example with a single `user` message:\n   *\n   * ```json\n   * [{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n   * ```\n   *\n   * Example with multiple conversational turns:\n   *\n   * ```json\n   * [\n   *   { \"role\": \"user\", \"content\": \"Hello there.\" },\n   *   { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n   *   { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n   * ]\n   * ```\n   *\n   * Example with a partially-filled response from Claude:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Each input message `content` may be either a single `string` or an array of\n   * content blocks, where each block has a specific `type`. Using a `string` for\n   * `content` is shorthand for an array of one content block of type `\"text\"`. The\n   * following input messages are equivalent:\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": \"Hello, Claude\" }\n   * ```\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n   * ```\n   *\n   * Starting with Claude 3 models, you can also send image content blocks:\n   *\n   * ```json\n   * {\n   *   \"role\": \"user\",\n   *   \"content\": [\n   *     {\n   *       \"type\": \"image\",\n   *       \"source\": {\n   *         \"type\": \"base64\",\n   *         \"media_type\": \"image/jpeg\",\n   *         \"data\": \"/9j/4AAQSkZJRg...\"\n   *       }\n   *     },\n   *     { \"type\": \"text\", \"text\": \"What is in this image?\" }\n   *   ]\n   * }\n   * ```\n   *\n   * We currently support the `base64` source type for images, and the `image/jpeg`,\n   * `image/png`, `image/gif`, and `image/webp` media types.\n   *\n   * See [examples](https://docs.anthropic.com/claude/reference/messages-examples)\n   * for more input examples.\n   *\n   * Note that if you want to include a\n   * [system prompt](https://docs.anthropic.com/claude/docs/system-prompts), you can\n   * use the top-level `system` parameter — there is no `\"system\"` role for input\n   * messages in the Messages API.\n   */\n  messages: Array<MessageParam>;\n\n  /**\n   * The model that will complete your prompt.\n   *\n   * See [models](https://docs.anthropic.com/claude/docs/models-overview) for\n   * additional details and options.\n   */\n  model:\n    | (string & {})\n    | 'claude-3-opus-20240229'\n    | 'claude-3-sonnet-20240229'\n    | 'claude-3-haiku-20240307'\n    | 'claude-2.1'\n    | 'claude-2.0'\n    | 'claude-instant-1.2';\n\n  /**\n   * An object describing metadata about the request.\n   */\n  metadata?: MessageStreamParams.Metadata;\n\n  /**\n   * Custom text sequences that will cause the model to stop generating.\n   *\n   * Our models will normally stop when they have naturally completed their turn,\n   * which will result in a response `stop_reason` of `\"end_turn\"`.\n   *\n   * If you want the model to stop generating when it encounters custom strings of\n   * text, you can use the `stop_sequences` parameter. If the model encounters one of\n   * the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"`\n   * and the response `stop_sequence` value will contain the matched stop sequence.\n   */\n  stop_sequences?: Array<string>;\n\n  /**\n   * System prompt.\n   *\n   * A system prompt is a way of providing context and instructions to Claude, such\n   * as specifying a particular goal or role. See our\n   * [guide to system prompts](https://docs.anthropic.com/claude/docs/system-prompts).\n   */\n  system?: string;\n\n  /**\n   * Amount of randomness injected into the response.\n   *\n   * Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n   * for analytical / multiple choice, and closer to `1.0` for creative and\n   * generative tasks.\n   *\n   * Note that even with `temperature` of `0.0`, the results will not be fully\n   * deterministic.\n   */\n  temperature?: number;\n\n  /**\n   * Only sample from the top K options for each subsequent token.\n   *\n   * Used to remove \"long tail\" low probability responses.\n   * [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_k?: number;\n\n  /**\n   * Use nucleus sampling.\n   *\n   * In nucleus sampling, we compute the cumulative distribution over all the options\n   * for each subsequent token in decreasing probability order and cut it off once it\n   * reaches a particular probability specified by `top_p`. You should either alter\n   * `temperature` or `top_p`, but not both.\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_p?: number;\n}\n\nexport namespace MessageStreamParams {\n  /**\n   * An object describing metadata about the request.\n   */\n  export interface Metadata {\n    /**\n     * An external identifier for the user who is associated with the request.\n     *\n     * This should be a uuid, hash value, or other opaque identifier. Anthropic may use\n     * this id to help detect abuse. Do not include any identifying information such as\n     * name, email address, or phone number.\n     */\n    user_id?: string | null;\n  }\n}\n\nexport namespace Messages {\n  export import ContentBlock = MessagesAPI.ContentBlock;\n  export import ContentBlockDeltaEvent = MessagesAPI.ContentBlockDeltaEvent;\n  export import ContentBlockStartEvent = MessagesAPI.ContentBlockStartEvent;\n  export import ContentBlockStopEvent = MessagesAPI.ContentBlockStopEvent;\n  export import ImageBlockParam = MessagesAPI.ImageBlockParam;\n  export import Message = MessagesAPI.Message;\n  export import MessageDeltaEvent = MessagesAPI.MessageDeltaEvent;\n  export import MessageDeltaUsage = MessagesAPI.MessageDeltaUsage;\n  export import MessageParam = MessagesAPI.MessageParam;\n  export import MessageStartEvent = MessagesAPI.MessageStartEvent;\n  export import MessageStopEvent = MessagesAPI.MessageStopEvent;\n  export import MessageStreamEvent = MessagesAPI.MessageStreamEvent;\n  export import TextBlock = MessagesAPI.TextBlock;\n  export import TextBlockParam = MessagesAPI.TextBlockParam;\n  export import TextDelta = MessagesAPI.TextDelta;\n  export import Usage = MessagesAPI.Usage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageCreateParamsNonStreaming = MessagesAPI.MessageCreateParamsNonStreaming;\n  export import MessageCreateParamsStreaming = MessagesAPI.MessageCreateParamsStreaming;\n  export import MessageStreamParams = MessagesAPI.MessageStreamParams;\n}\n","import * as Core from \"../core\";\nimport { AnthropicError, APIUserAbortError } from \"../error\";\nimport {\n  ContentBlock,\n  Messages,\n  Message,\n  MessageStreamEvent,\n  MessageParam,\n  MessageCreateParams,\n  MessageStreamParams,\n} from \"../resources/messages\";\nimport { type ReadableStream } from \"../_shims/index\";\nimport { Stream } from \"../streaming\";\n\nexport interface MessageStreamEvents {\n  connect: () => void;\n  streamEvent: (event: MessageStreamEvent, snapshot: Message) => void;\n  text: (textDelta: string, textSnapshot: string) => void;\n  message: (message: Message) => void;\n  contentBlock: (content: ContentBlock) => void;\n  finalMessage: (message: Message) => void;\n  error: (error: AnthropicError) => void;\n  abort: (error: APIUserAbortError) => void;\n  end: () => void;\n}\n\ntype MessageStreamEventListeners<Event extends keyof MessageStreamEvents> = {\n  listener: MessageStreamEvents[Event];\n  once?: boolean;\n}[];\n\nexport class MessageStream implements AsyncIterable<MessageStreamEvent> {\n  messages: MessageParam[] = [];\n  receivedMessages: Message[] = [];\n  #currentMessageSnapshot: Message | undefined;\n\n  controller: AbortController = new AbortController();\n\n  #connectedPromise: Promise<void>;\n  #resolveConnectedPromise: () => void = () => {};\n  #rejectConnectedPromise: (error: AnthropicError) => void = () => {};\n\n  #endPromise: Promise<void>;\n  #resolveEndPromise: () => void = () => {};\n  #rejectEndPromise: (error: AnthropicError) => void = () => {};\n\n  #listeners: { [Event in keyof MessageStreamEvents]?: MessageStreamEventListeners<Event> } = {};\n\n  #ended = false;\n  #errored = false;\n  #aborted = false;\n  #catchingPromiseCreated = false;\n\n  constructor() {\n    this.#connectedPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveConnectedPromise = resolve;\n      this.#rejectConnectedPromise = reject;\n    });\n\n    this.#endPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveEndPromise = resolve;\n      this.#rejectEndPromise = reject;\n    });\n\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    this.#connectedPromise.catch(() => {});\n    this.#endPromise.catch(() => {});\n  }\n\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream: ReadableStream): MessageStream {\n    const runner = new MessageStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  static createMessage(\n    messages: Messages,\n    params: MessageStreamParams,\n    options?: Core.RequestOptions,\n  ): MessageStream {\n    const runner = new MessageStream();\n    for (const message of params.messages) {\n      runner._addMessageParam(message);\n    }\n    runner._run(() =>\n      runner._createMessage(\n        messages,\n        { ...params, stream: true },\n        { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } },\n      ),\n    );\n    return runner;\n  }\n\n  protected _run(executor: () => Promise<any>) {\n    executor().then(() => {\n      this._emitFinal();\n      this._emit('end');\n    }, this.#handleError);\n  }\n\n  protected _addMessageParam(message: MessageParam) {\n    this.messages.push(message);\n  }\n\n  protected _addMessage(message: Message, emit = true) {\n    this.receivedMessages.push(message);\n    if (emit) {\n      this._emit('message', message);\n    }\n  }\n\n  protected async _createMessage(\n    messages: Messages,\n    params: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<void> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    const stream = await messages.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const event of stream) {\n      this.#addStreamEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    this.#endRequest();\n  }\n\n  protected _connected() {\n    if (this.ended) return;\n    this.#resolveConnectedPromise();\n    this._emit('connect');\n  }\n\n  get ended(): boolean {\n    return this.#ended;\n  }\n\n  get errored(): boolean {\n    return this.#errored;\n  }\n\n  get aborted(): boolean {\n    return this.#aborted;\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this MessageStream, so that calls can be chained\n   */\n  on<Event extends keyof MessageStreamEvents>(event: Event, listener: MessageStreamEvents[Event]): this {\n    const listeners: MessageStreamEventListeners<Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener });\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this MessageStream, so that calls can be chained\n   */\n  off<Event extends keyof MessageStreamEvents>(event: Event, listener: MessageStreamEvents[Event]): this {\n    const listeners = this.#listeners[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex((l) => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this MessageStream, so that calls can be chained\n   */\n  once<Event extends keyof MessageStreamEvents>(event: Event, listener: MessageStreamEvents[Event]): this {\n    const listeners: MessageStreamEventListeners<Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener, once: true });\n    return this;\n  }\n\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted<Event extends keyof MessageStreamEvents>(\n    event: Event,\n  ): Promise<\n    Parameters<MessageStreamEvents[Event]> extends [infer Param] ? Param\n    : Parameters<MessageStreamEvents[Event]> extends [] ? void\n    : Parameters<MessageStreamEvents[Event]>\n  > {\n    return new Promise((resolve, reject) => {\n      this.#catchingPromiseCreated = true;\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve as any);\n    });\n  }\n\n  async done(): Promise<void> {\n    this.#catchingPromiseCreated = true;\n    await this.#endPromise;\n  }\n\n  get currentMessage(): Message | undefined {\n    return this.#currentMessageSnapshot;\n  }\n\n  #getFinalMessage(): Message {\n    if (this.receivedMessages.length === 0) {\n      throw new AnthropicError('stream ended without producing a Message with role=assistant');\n    }\n    return this.receivedMessages.at(-1)!;\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant Message response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a Message.\n   */\n  async finalMessage(): Promise<Message> {\n    await this.done();\n    return this.#getFinalMessage();\n  }\n\n  #getFinalText(): string {\n    if (this.receivedMessages.length === 0) {\n      throw new AnthropicError('stream ended without producing a Message with role=assistant');\n    }\n    const textBlocks = this.receivedMessages\n      .at(-1)!\n      .content.filter((block) => block.type === 'text')\n      .map((block) => block.text);\n    if (textBlocks.length === 0) {\n      throw new AnthropicError('stream ended without producing a content block with type=text');\n    }\n    return textBlocks.join(' ');\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant Message's text response, concatenated\n   * together if there are more than one text blocks.\n   * Rejects if an error occurred or the stream ended prematurely without producing a Message.\n   */\n  async finalText(): Promise<string> {\n    await this.done();\n    return this.#getFinalText();\n  }\n\n  #handleError = (error: unknown) => {\n    this.#errored = true;\n    if (error instanceof Error && error.name === 'AbortError') {\n      error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n      this.#aborted = true;\n      return this._emit('abort', error);\n    }\n    if (error instanceof AnthropicError) {\n      return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n      const anthropicError: AnthropicError = new AnthropicError(error.message);\n      // @ts-ignore\n      anthropicError.cause = error;\n      return this._emit('error', anthropicError);\n    }\n    return this._emit('error', new AnthropicError(String(error)));\n  };\n\n  protected _emit<Event extends keyof MessageStreamEvents>(\n    event: Event,\n    ...args: Parameters<MessageStreamEvents[Event]>\n  ) {\n    // make sure we don't emit any MessageStreamEvents after end\n    if (this.#ended) return;\n\n    if (event === 'end') {\n      this.#ended = true;\n      this.#resolveEndPromise();\n    }\n\n    const listeners: MessageStreamEventListeners<Event> | undefined = this.#listeners[event];\n    if (listeners) {\n      this.#listeners[event] = listeners.filter((l) => !l.once) as any;\n      listeners.forEach(({ listener }: any) => listener(...args));\n    }\n\n    if (event === 'abort') {\n      const error = args[0] as APIUserAbortError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n      return;\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n\n      const error = args[0] as AnthropicError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.final...()\n        // - etc.\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n    }\n  }\n\n  protected _emitFinal() {\n    const finalMessage = this.receivedMessages.at(-1);\n    if (finalMessage) {\n      this._emit('finalMessage', this.#getFinalMessage());\n    }\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentMessageSnapshot = undefined;\n  }\n  #addStreamEvent(event: MessageStreamEvent) {\n    if (this.ended) return;\n    const messageSnapshot = this.#accumulateMessage(event);\n    this._emit('streamEvent', event, messageSnapshot);\n\n    switch (event.type) {\n      case 'content_block_delta': {\n        if (event.delta.type === 'text_delta') {\n          this._emit('text', event.delta.text, messageSnapshot.content.at(-1)!.text || '');\n        }\n        break;\n      }\n      case 'message_stop': {\n        this._addMessageParam(messageSnapshot);\n        this._addMessage(messageSnapshot, true);\n        break;\n      }\n      case 'content_block_stop': {\n        this._emit('contentBlock', messageSnapshot.content.at(-1)!);\n        break;\n      }\n      case 'message_start': {\n        this.#currentMessageSnapshot = messageSnapshot;\n        break;\n      }\n      case 'content_block_start':\n      case 'message_delta':\n        break;\n    }\n  }\n  #endRequest(): Message {\n    if (this.ended) {\n      throw new AnthropicError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentMessageSnapshot;\n    if (!snapshot) {\n      throw new AnthropicError(`request ended without sending any chunks`);\n    }\n    this.#currentMessageSnapshot = undefined;\n    return snapshot;\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<void> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    this._connected();\n    const stream = Stream.fromReadableStream<MessageStreamEvent>(readableStream, this.controller);\n    for await (const event of stream) {\n      this.#addStreamEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    this.#endRequest();\n  }\n\n  /**\n   * Mutates this.#currentMessage with the current event. Handling the accumulation of multiple messages\n   * will be needed to be handled by the caller, this method will throw if you try to accumulate for multiple\n   * messages.\n   */\n  #accumulateMessage(event: MessageStreamEvent): Message {\n    let snapshot = this.#currentMessageSnapshot;\n\n    if (event.type === 'message_start') {\n      if (snapshot) {\n        throw new AnthropicError(`Unexpected event order, got ${event.type} before receiving \"message_stop\"`);\n      }\n      return event.message;\n    }\n\n    if (!snapshot) {\n      throw new AnthropicError(`Unexpected event order, got ${event.type} before \"message_start\"`);\n    }\n\n    switch (event.type) {\n      case 'message_stop':\n        return snapshot;\n      case 'message_delta':\n        snapshot.stop_reason = event.delta.stop_reason;\n        snapshot.stop_sequence = event.delta.stop_sequence;\n        snapshot.usage.output_tokens = event.usage.output_tokens;\n        return snapshot;\n      case 'content_block_start':\n        snapshot.content.push(event.content_block);\n        return snapshot;\n      case 'content_block_delta': {\n        const snapshotContent = snapshot.content.at(event.index);\n        if (snapshotContent?.type === 'text' && event.delta.type === 'text_delta') {\n          snapshotContent.text += event.delta.text;\n        }\n        return snapshot;\n      }\n      case 'content_block_stop':\n        return snapshot;\n    }\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<MessageStreamEvent> {\n    const pushQueue: MessageStreamEvent[] = [];\n    const readQueue: {\n      resolve: (chunk: MessageStreamEvent | undefined) => void;\n      reject: (error: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    this.on('streamEvent', (event) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<MessageStreamEvent>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<MessageStreamEvent | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\n","/**\n * Google AI Provider Implementation\n */\n\nimport { BaseProvider } from './base-provider';\nimport { AIRequest, AIResponse, ModelInfo } from '../types';\n\nexport class GoogleProvider extends BaseProvider {\n  name = 'google';\n  private modelsCache?: ModelInfo[];\n\n  constructor(apiKey?: string) {\n    super({\n      apiKey,\n      apiBase: 'https://generativelanguage.googleapis.com/v1beta',\n    });\n  }\n\n  async isAvailable(): Promise<boolean> {\n    if (!this.apiKey || this.apiKey.startsWith('your-gemini-')) {\n      return false;\n    }\n\n    try {\n      await this.makeRequest(`${this.apiBase}/models?key=${this.apiKey}`, {\n        method: 'GET',\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async getModels(): Promise<ModelInfo[]> {\n    if (this.modelsCache) return this.modelsCache;\n\n    const models: ModelInfo[] = [\n      {\n        id: 'gemini-2.5-pro',\n        name: 'Gemini 2.5 Pro',\n        provider: this.name,\n        description: 'Most capable Gemini model',\n        contextLength: 128000,\n        capabilities: ['text', 'vision', 'code', 'multimodal'],\n        pricing: { input: 0.0025, output: 0.01 },\n        available: await this.isAvailable(),\n        recommendedFor: ['complex_tasks', 'multimodal', 'analysis'],\n      },\n      {\n        id: 'gemini-2.5-flash',\n        name: 'Gemini 2.5 Flash',\n        provider: this.name,\n        description: 'Fast and efficient Gemini model',\n        contextLength: 32000,\n        capabilities: ['text', 'vision', 'code'],\n        pricing: { input: 0.0001, output: 0.0004 },\n        available: await this.isAvailable(),\n        recommendedFor: ['quick_tasks', 'cost_effective', 'general_use'],\n      },\n    ];\n\n    this.modelsCache = models;\n    return models;\n  }\n\n  async chat(request: AIRequest): Promise<AIResponse> {\n    if (!(await this.isAvailable())) {\n      throw new Error('Google AI API not available');\n    }\n\n    const model = request.model || 'gemini-2.5-flash';\n    const startTime = Date.now();\n\n    const payload = {\n      contents: [\n        {\n          parts: [{ text: request.messages.map((m) => `${m.role}: ${m.content}`).join('\\n') }],\n        },\n      ],\n      generationConfig: {\n        temperature: request.temperature || 0.7,\n        maxOutputTokens: request.maxTokens || 4000,\n      },\n    };\n\n    const response = await this.makeRequest(\n      `${this.apiBase}/models/${model}:generateContent?key=${this.apiKey}`,\n      {\n        method: 'POST',\n        body: JSON.stringify(payload),\n      },\n    );\n\n    return {\n      content: response.candidates?.[0]?.content?.parts?.[0]?.text || '',\n      model,\n      provider: this.name,\n      responseTime: Date.now() - startTime,\n    };\n  }\n\n  estimateCost(tokens: number, model = 'gemini-2.5-flash'): number {\n    const pricing = {\n      'gemini-2.5-pro': { input: 0.0025, output: 0.01 },\n      'gemini-2.5-flash': { input: 0.0001, output: 0.0004 },\n      'gemini-1.5-pro': { input: 0.00125, output: 0.005 },\n      'gemini-1.5-flash': { input: 0.00005, output: 0.00015 },\n    };\n\n    const modelPricing = pricing[model as keyof typeof pricing] || pricing['gemini-2.5-flash'];\n    return tokens * 0.75 * modelPricing.input + tokens * 0.25 * modelPricing.output;\n  }\n}\n","/**\n * Base AI Provider Class\n */\n\nimport { AIProvider, AIRequest, AIResponse, ModelInfo } from '../types';\n\nexport abstract class BaseProvider implements AIProvider {\n  abstract name: string;\n  protected apiKey?: string;\n  protected apiBase?: string;\n\n  constructor(config: { apiKey?: string; apiBase?: string } = {}) {\n    this.apiKey = config.apiKey;\n    this.apiBase = config.apiBase;\n  }\n\n  abstract isAvailable(): Promise<boolean>;\n  abstract getModels(): Promise<ModelInfo[]>;\n  abstract chat(request: AIRequest): Promise<AIResponse>;\n\n  // Optional methods with default implementations\n  async vision(_image: Buffer, _prompt: string): Promise<AIResponse> {\n    throw new Error(`${this.name} does not support vision tasks`);\n  }\n\n  async generateCode(prompt: string, language?: string): Promise<AIResponse> {\n    const codePrompt = language\n      ? `Generate ${language} code for: ${prompt}`\n      : `Generate code for: ${prompt}`;\n\n    return this.chat({\n      messages: [{ role: 'user', content: codePrompt }],\n      taskType: 'coding',\n    });\n  }\n\n  estimateCost(_tokens: number): number {\n    return 0; // Free by default (local providers)\n  }\n\n  protected async makeRequest(url: string, options: unknown): Promise<unknown> {\n    const fetch = (await import('node-fetch')).default;\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`${this.name} API error: ${response.status} ${error}`);\n    }\n\n    return response.json();\n  }\n\n  protected async makeStreamRequest(\n    url: string,\n    options: unknown,\n  ): Promise<AsyncGenerator<string>> {\n    const fetch = (await import('node-fetch')).default;\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`${this.name} API error: ${response.status} ${error}`);\n    }\n\n    return this.parseStreamResponse(response);\n  }\n\n  private async *parseStreamResponse(response: unknown): AsyncGenerator<string> {\n    const reader = response.body?.getReader();\n    if (!reader) return;\n\n    const decoder = new TextDecoder();\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n').filter((line) => line.trim());\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n\n            try {\n              const parsed = JSON.parse(data) as Record<string, unknown>;\n              const content = this.extractStreamContent(parsed);\n              if (content) yield content;\n            } catch (e: unknown) {\n              // Skip invalid JSON\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  protected extractStreamContent(data: unknown): string | null {\n    // Override in subclasses for provider-specific parsing\n    return data?.choices?.[0]?.delta?.content || null;\n  }\n\n  protected createModelInfo(model: unknown): ModelInfo {\n    return {\n      id: model.id,\n      name: model.name || model.id,\n      provider: this.name,\n      description: model.description || '',\n      contextLength: model.context_length || 4096,\n      capabilities: model.capabilities || ['text'],\n      pricing: model.pricing,\n      local: model.local || false,\n      available: true,\n      memoryRequired: model.memory_required,\n      recommendedFor: model.recommended_for || ['general_purpose'],\n    };\n  }\n}\n","/**\n * Groq Provider Implementation (Fast Inference)\n */\n\nimport { BaseProvider } from './base-provider';\nimport { AIRequest, AIResponse, ModelInfo } from '../types';\n\nexport class GroqProvider extends BaseProvider {\n  name = 'groq';\n  private modelsCache?: ModelInfo[];\n\n  constructor(apiKey?: string) {\n    super({\n      apiKey,\n      apiBase: 'https://api.groq.com/openai/v1',\n    });\n  }\n\n  async isAvailable(): Promise<boolean> {\n    if (!this.apiKey || this.apiKey.startsWith('gsk_your-groq-')) {\n      return false;\n    }\n\n    try {\n      await this.makeRequest(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async getModels(): Promise<ModelInfo[]> {\n    if (this.modelsCache) return this.modelsCache;\n\n    const models: ModelInfo[] = [\n      {\n        id: 'llama-3.3-70b-versatile',\n        name: 'Llama 3.3 70B',\n        provider: this.name,\n        description: 'Most capable Llama model with versatile performance',\n        contextLength: 32768,\n        capabilities: ['text', 'reasoning', 'code'],\n        pricing: { input: 0.00059, output: 0.00079 },\n        available: await this.isAvailable(),\n        recommendedFor: ['complex_reasoning', 'coding', 'analysis'],\n      },\n      {\n        id: 'llama-3.2-90b-vision-preview',\n        name: 'Llama 3.2 90B Vision',\n        provider: this.name,\n        description: 'Vision-capable Llama model for multimodal tasks',\n        contextLength: 128000,\n        capabilities: ['text', 'vision', 'reasoning'],\n        pricing: { input: 0.0009, output: 0.0009 },\n        available: await this.isAvailable(),\n        recommendedFor: ['vision_tasks', 'multimodal', 'analysis'],\n      },\n      {\n        id: 'mixtral-8x7b-32768',\n        name: 'Mixtral 8x7B',\n        provider: this.name,\n        description: 'Mixture of experts model for balanced performance',\n        contextLength: 32768,\n        capabilities: ['text', 'reasoning', 'code'],\n        pricing: { input: 0.00024, output: 0.00024 },\n        available: await this.isAvailable(),\n        recommendedFor: ['balanced_performance', 'multilingual'],\n      },\n      {\n        id: 'gemma2-9b-it',\n        name: 'Gemma 2 9B',\n        provider: this.name,\n        description: \"Google's efficient open model\",\n        contextLength: 8192,\n        capabilities: ['text', 'reasoning'],\n        pricing: { input: 0.0002, output: 0.0002 },\n        available: await this.isAvailable(),\n        recommendedFor: ['quick_tasks', 'cost_effective'],\n      },\n    ];\n\n    this.modelsCache = models;\n    return models;\n  }\n\n  async chat(request: AIRequest): Promise<AIResponse> {\n    if (!(await this.isAvailable())) {\n      throw new Error('Groq API not available');\n    }\n\n    const model = request.model || 'mixtral-8x7b-32768';\n    const startTime = Date.now();\n\n    const payload = {\n      model,\n      messages: request.messages,\n      temperature: request.temperature || 0.7,\n      max_tokens: request.maxTokens || 4000,\n      stream: request.stream || false,\n    };\n\n    if (request.stream) {\n      const stream = await this.makeStreamRequest(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      return {\n        stream,\n        model,\n        provider: this.name,\n        responseTime: Date.now() - startTime,\n      };\n    }\n\n    const response = await this.makeRequest(`${this.apiBase}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || '',\n      model,\n      provider: this.name,\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n      responseTime: Date.now() - startTime,\n    };\n  }\n\n  async vision(image: Buffer, prompt: string): Promise<AIResponse> {\n    if (!(await this.isAvailable())) {\n      throw new Error('Groq API not available');\n    }\n\n    const base64Image = image.toString('base64');\n    const startTime = Date.now();\n\n    const payload = {\n      model: 'llama-3.2-90b-vision-preview',\n      messages: [\n        {\n          role: 'user',\n          content: [\n            { type: 'text', text: prompt },\n            {\n              type: 'image_url',\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`,\n              },\n            },\n          ],\n        },\n      ],\n      max_tokens: 4000,\n    };\n\n    const response = await this.makeRequest(`${this.apiBase}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || '',\n      model: 'llama-3.2-90b-vision-preview',\n      provider: this.name,\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n      responseTime: Date.now() - startTime,\n    };\n  }\n\n  estimateCost(tokens: number, model = 'mixtral-8x7b-32768'): number {\n    const pricing = {\n      'llama-3.3-70b-versatile': { input: 0.00059, output: 0.00079 },\n      'llama-3.2-90b-vision-preview': { input: 0.0009, output: 0.0009 },\n      'mixtral-8x7b-32768': { input: 0.00024, output: 0.00024 },\n      'gemma2-9b-it': { input: 0.0002, output: 0.0002 },\n    };\n\n    const modelPricing = pricing[model as keyof typeof pricing] || pricing['mixtral-8x7b-32768'];\n    return tokens * 0.75 * modelPricing.input + tokens * 0.25 * modelPricing.output;\n  }\n}\n","// Note: Using groq-sdk package for Grok AI (x.ai) integration\nimport Groq from 'groq-sdk';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class GrokProvider extends BaseAIProvider {\n  readonly name = 'Grok';\n  readonly models = [\n    'grok-4-0709',\n    'llama-3.3-70b-versatile',\n    'llama-3.1-70b-versatile',\n    'llama-3.1-8b-instant',\n    'mixtral-8x7b-32768',\n    'gemma2-9b-it',\n    'gemma-7b-it',\n  ];\n\n  private client?: Groq; // Using Groq SDK for Grok AI\n\n  async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new Groq({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n    });\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const completion = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n    });\n\n    return completion.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const stream = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content;\n      if (content) {\n        yield content;\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(content);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from './core';\nimport * as Errors from './error';\nimport { type Agent } from './_shims/index';\nimport * as Uploads from './uploads';\nimport * as API from \"./resources/index\";\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['GROQ_API_KEY'].\n   */\n  apiKey?: string | undefined;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   *\n   * Defaults to process.env['GROQ_BASE_URL'].\n   */\n  baseURL?: string | null | undefined;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery;\n\n  /**\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\n   */\n  dangerouslyAllowBrowser?: boolean;\n}\n\n/** API Client for interfacing with the Groq API. */\nexport class Groq extends Core.APIClient {\n  apiKey: string;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the Groq API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]\n   * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('GROQ_BASE_URL'),\n    apiKey = Core.readEnv('GROQ_API_KEY'),\n    ...opts\n  }: ClientOptions = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.GroqError(\n        \"The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).\",\n      );\n    }\n\n    const options: ClientOptions = {\n      apiKey,\n      ...opts,\n      baseURL: baseURL || `https://api.groq.com`,\n    };\n\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.GroqError(\n        'This is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Groq({ dangerouslyAllowBrowser: true })',\n      );\n    }\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 60000 /* 1 minute */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n    this._options = options;\n\n    this.apiKey = apiKey;\n  }\n\n  chat: API.Chat = new API.Chat(this);\n  audio: API.Audio = new API.Audio(this);\n  models: API.Models = new API.Models(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n\n  static Groq = this;\n\n  static GroqError = Errors.GroqError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n}\n\nexport const {\n  GroqError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} = Errors;\n\nexport import toFile = Uploads.toFile;\nexport import fileFromPath = Uploads.fileFromPath;\n\nexport namespace Groq {\n  // Helper functions\n  export import toFile = Uploads.toFile;\n  export import fileFromPath = Uploads.fileFromPath;\n\n  export import RequestOptions = Core.RequestOptions;\n\n  export import Chat = API.Chat;\n\n  export import Audio = API.Audio;\n  export import Translation = API.Translation;\n\n  export import Models = API.Models;\n  export import Model = API.Model;\n  export import ModelList = API.ModelList;\n}\n\nexport default Groq;\n","export const VERSION = '0.3.3'; // x-release-please-version\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'groq-sdk/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  ReadableStream: any;\n  getMultipartRequestOptions: <T = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let ReadableStream: Shims['ReadableStream'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import 'groq-sdk/shims/${shims.kind}'\\` before importing anything else from groq-sdk`,\n    );\n  }\n  if (kind) {\n    throw new Error(\n      `can't \\`import 'groq-sdk/shims/${shims.kind}'\\` after \\`import 'groq-sdk/shims/${kind}'\\``,\n    );\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  ReadableStream = shims.ReadableStream;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as nf from 'node-fetch';\nimport * as fd from 'formdata-node';\nimport { type File, type FilePropertyBag } from 'formdata-node';\nimport KeepAliveAgent from 'agentkeepalive';\nimport { AbortController as AbortControllerPolyfill } from 'abort-controller';\nimport { ReadStream as FsReadStream } from 'node:fs';\nimport { type Agent } from 'node:http';\nimport { FormDataEncoder } from 'form-data-encoder';\nimport { Readable } from 'node:stream';\nimport { type RequestOptions } from '../core';\nimport { MultipartBody } from './MultipartBody';\nimport { type Shims } from './registry';\n\n// @ts-ignore (this package does not have proper export maps for this export)\nimport { ReadableStream } from 'web-streams-polyfill/dist/ponyfill.es2018.js';\n\ntype FileFromPathOptions = Omit<FilePropertyBag, 'lastModified'>;\n\nlet fileFromPathWarned = false;\n\n/**\n * @deprecated use fs.createReadStream('./my/file.txt') instead\n */\nasync function fileFromPath(path: string): Promise<File>;\nasync function fileFromPath(path: string, filename?: string): Promise<File>;\nasync function fileFromPath(path: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, filename?: string, options?: FileFromPathOptions): Promise<File>;\nasync function fileFromPath(path: string, ...args: any[]): Promise<File> {\n  // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n  const { fileFromPath: _fileFromPath } = await import('formdata-node/file-from-path');\n\n  if (!fileFromPathWarned) {\n    console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n    fileFromPathWarned = true;\n  }\n  // @ts-ignore\n  return await _fileFromPath(path, ...args);\n}\n\nconst defaultHttpAgent: Agent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\nconst defaultHttpsAgent: Agent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\n\nasync function getMultipartRequestOptions<T = Record<string, unknown>>(\n  form: fd.FormData,\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T>> {\n  const encoder = new FormDataEncoder(form);\n  const readable = Readable.from(encoder);\n  const body = new MultipartBody(readable);\n  const headers = {\n    ...opts.headers,\n    ...encoder.headers,\n    'Content-Length': encoder.contentLength,\n  };\n\n  return { ...opts, body: body as any, headers };\n}\n\nexport function getRuntime(): Shims {\n  // Polyfill global object if needed.\n  if (typeof AbortController === 'undefined') {\n    // @ts-expect-error (the types are subtly different, but compatible in practice)\n    globalThis.AbortController = AbortControllerPolyfill;\n  }\n  return {\n    kind: 'node',\n    fetch: nf.default,\n    Request: nf.Request,\n    Response: nf.Response,\n    Headers: nf.Headers,\n    FormData: fd.FormData,\n    Blob: fd.Blob,\n    File: fd.File,\n    ReadableStream,\n    getMultipartRequestOptions,\n    getDefaultAgent: (url: string): Agent => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),\n    fileFromPath,\n    isFsReadStream: (value: any): value is FsReadStream => value instanceof FsReadStream,\n  };\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n  constructor(public body: any) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { castToError, Headers } from './core';\n\nexport class GroqError extends Error {}\n\nexport class APIError extends GroqError {\n  readonly status: number | undefined;\n  readonly headers: Headers | undefined;\n  readonly error: Object | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    super(`${APIError.makeMessage(status, error, message)}`);\n    this.status = status;\n    this.headers = headers;\n    this.error = error;\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg =\n      error?.message ?\n        typeof error.message === 'string' ?\n          error.message\n        : JSON.stringify(error.message)\n      : error ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return '(no status code or body)';\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    if (!status) {\n      return new APIConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = errorResponse as Record<string, any>;\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new APIError(status, error, message, headers);\n  }\n}\n\nexport class APIUserAbortError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message }: { message?: string } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\n\nexport class APIConnectionError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class APIConnectionTimeoutError extends APIConnectionError {\n  constructor({ message }: { message?: string } = {}) {\n    super({ message: message ?? 'Request timed out.' });\n  }\n}\n\nexport class BadRequestError extends APIError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends APIError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends APIError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends APIError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends APIError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends APIError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends APIError {\n  override readonly status: 429 = 429;\n}\n\nexport class InternalServerError extends APIError {}\n","import { ReadableStream, type Response } from \"../_shims/index\";\nimport { GroqError } from \"../error\";\n\nimport { APIError } from \"../error\";\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController) {\n    let consumed = false;\n    const decoder = new SSEDecoder();\n\n    async function* iterMessages(): AsyncGenerator<ServerSentEvent, void, unknown> {\n      if (!response.body) {\n        controller.abort();\n        throw new GroqError(`Attempted to iterate over a response with no body`);\n      }\n\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(response.body);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          const sse = decoder.decode(line);\n          if (sse) yield sse;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        const sse = decoder.decode(line);\n        if (sse) yield sse;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of iterMessages()) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (sse.event === null) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, undefined);\n            }\n\n            yield data;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController) {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new GroqError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new GroqError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new GroqError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n","import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options: FilePropertyBag | undefined = {},\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n        ?.name}; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n","import { VERSION } from './version';\nimport { Stream } from './lib/streaming';\nimport {\n  GroqError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n} from './error';\nimport {\n  kind as shimsKind,\n  type Readable,\n  getDefaultAgent,\n  type Agent,\n  fetch,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/index';\nexport { type Response };\nimport { isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    debug('response', response.status, response.url, response.headers, response.body);\n\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n\n    if (props.options.__streamClass) {\n      return props.options.__streamClass.fromSSEResponse(response, props.controller) as any;\n    }\n\n    return Stream.fromSSEResponse(response, props.controller) as any;\n  }\n\n  // fetch refuses to read the body when the status code is 204.\n  if (response.status === 204) {\n    return null as T;\n  }\n\n  if (props.options.__binaryResponse) {\n    return response as unknown as T;\n  }\n\n  const contentType = response.headers.get('content-type');\n  const isJSON =\n    contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\n  if (isJSON) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  return text as unknown as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'groq-sdk'`:\n   * - `import 'groq-sdk/shims/node'` (if you're running on Node)\n   * - `import 'groq-sdk/shims/web'` (otherwise)\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'groq-sdk'`:\n   * - `import 'groq-sdk/shims/node'` (if you're running on Node)\n   * - `import 'groq-sdk/shims/web'` (otherwise)\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries = 2,\n    timeout = 60000, // 1 minute\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req>(options: FinalRequestOptions<Req>): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders = this.buildHeaders({ options, headers, contentLength });\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    return { req, url, timeout };\n  }\n\n  private buildHeaders({\n    options,\n    headers,\n    contentLength,\n  }: {\n    options: FinalRequestOptions;\n    headers: Record<string, string | null | undefined>;\n    contentLength: string | null | undefined;\n  }): Record<string, string> {\n    const reqHeaders: Record<string, string> = {};\n    if (contentLength) {\n      reqHeaders['content-length'] = contentLength;\n    }\n\n    const defaultHeaders = this.defaultHeaders(options);\n    applyHeadersMut(reqHeaders, defaultHeaders);\n    applyHeadersMut(reqHeaders, headers);\n\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\n      delete reqHeaders['content-type'];\n    }\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return reqHeaders;\n  }\n\n  /**\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\n   */\n  protected async prepareOptions(options: FinalRequestOptions): Promise<void> {}\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest<Req>(\n    optionsInput: PromiseOrValue<FinalRequestOptions<Req>>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    await this.prepareOptions(options);\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch((e) => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\n      url.search = this.stringifyQuery(query as Record<string, unknown>);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new GroqError(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return (\n      this.getRequestClient()\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, { signal: controller.signal as any, ...options })\n        .finally(() => {\n          clearTimeout(timeout);\n        })\n    );\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    let timeoutMillis: number | undefined;\n\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n    if (retryAfterMillisHeader) {\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\n      if (!Number.isNaN(timeoutMs)) {\n        timeoutMillis = timeoutMs;\n      }\n    }\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader && !timeoutMillis) {\n      const timeoutSeconds = parseFloat(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n\n    return this.makeRequest(options, retriesRemaining - 1);\n  }\n\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 8.0;\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n\n    // Apply some jitter, take up to at most 25 percent of the retry time.\n    const jitter = 1 - Math.random() * 0.25;\n\n    return sleepSeconds * jitter * 1000;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new GroqError(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value as any);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req = unknown | Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | null | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n\n  __binaryResponse?: boolean | undefined;\n  __streamClass?: typeof Stream;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n\n  __binaryResponse: true,\n  __streamClass: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req = unknown | Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new GroqError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new GroqError(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new GroqError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env]?.trim() ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env)?.trim();\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders: Headers, newHeaders: Headers): void {\n  for (const k in newHeaders) {\n    if (!hasOwn(newHeaders, k)) continue;\n    const lowerKey = k.toLowerCase();\n    if (!lowerKey) continue;\n\n    const val = newHeaders[k];\n\n    if (val === null) {\n      delete targetHeaders[lowerKey];\n    } else if (val !== undefined) {\n      targetHeaders[lowerKey] = val;\n    }\n  }\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`Groq:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getRequiredHeader = (headers: HeadersLike, header: string): string => {\n  const lowerCasedHeader = header.toLowerCase();\n  if (isHeadersProtocol(headers)) {\n    // to deal with the case where the header looks like Stainless-Event-Id\n    const intercapsHeader =\n      header[0]?.toUpperCase() +\n      header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n      const value = headers.get(key);\n      if (value) {\n        return value;\n      }\n    }\n  }\n\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === lowerCasedHeader) {\n      if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n        return value[0];\n      }\n      return value;\n    }\n  }\n\n  throw new Error(`Could not find ${header} header`);\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new GroqError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nexport { Chat } from './chat/chat';\nexport { Model, ModelList, Models } from './models';\nexport { Translation, Audio } from './audio/audio';\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as CompletionsAPI from \"./completions\";\n\nexport class Chat extends APIResource {\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\n}\n\nexport namespace Chat {\n  export import Completions = CompletionsAPI.Completions;\n  export import ChatCompletion = CompletionsAPI.ChatCompletion;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport type { Groq } from './index';\n\nexport class APIResource {\n  protected _client: Groq;\n\n  constructor(client: Groq) {\n    this._client = client;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as CompletionsAPI from \"./completions\";\nimport { Stream } from \"../../lib/streaming\";\nimport { ChatCompletionChunk } from \"../../lib/chat_completions_ext\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a completion for a chat prompt\n   */\n  create(\n    body: ChatCompletionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Stream<ChatCompletionChunk>>;\n  create(\n    body: ChatCompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>> {\n    return this._client.post('/openai/v1/chat/completions', { body, ...options, stream: body.stream ?? false }) as\n      | Core.APIPromise<ChatCompletion>\n      | Core.APIPromise<Stream<ChatCompletionChunk>>;\n  }\n}\n\nexport interface ChatCompletion {\n  choices: Array<ChatCompletion.Choice>;\n\n  id?: string;\n\n  created?: number;\n\n  model?: string;\n\n  object?: string;\n\n  system_fingerprint?: string;\n\n  usage?: ChatCompletion.Usage;\n}\n\nexport namespace ChatCompletion {\n  export interface Choice {\n    finish_reason: string;\n\n    index: number;\n\n    logprobs: Choice.Logprobs;\n\n    message: Choice.Message;\n  }\n\n  export namespace Choice {\n    export interface Logprobs {\n      content?: Array<Logprobs.Content>;\n    }\n\n    export namespace Logprobs {\n      export interface Content {\n        token?: string;\n\n        bytes?: Array<number>;\n\n        logprob?: number;\n\n        top_logprobs?: Array<Content.TopLogprob>;\n      }\n\n      export namespace Content {\n        export interface TopLogprob {\n          token?: string;\n\n          bytes?: Array<number>;\n\n          logprob?: number;\n        }\n      }\n    }\n\n    export interface Message {\n      content: string;\n\n      role: string;\n\n      tool_calls?: Array<Message.ToolCall>;\n    }\n\n    export namespace Message {\n      export interface ToolCall {\n        id?: string;\n\n        function?: ToolCall.Function;\n\n        type?: string;\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          arguments?: string;\n\n          name?: string;\n        }\n      }\n    }\n  }\n\n  export interface Usage {\n    completion_time?: number;\n\n    completion_tokens?: number;\n\n    prompt_time?: number;\n\n    prompt_tokens?: number;\n\n    queue_time?: number;\n\n    total_time?: number;\n\n    total_tokens?: number;\n  }\n}\n\nexport interface ChatCompletionCreateParamsBase {\n  messages: Array<CompletionCreateParams.Message>;\n\n  model: string;\n\n  frequency_penalty?: number;\n\n  logit_bias?: Record<string, number>;\n\n  logprobs?: boolean;\n\n  max_tokens?: number;\n\n  n?: number;\n\n  presence_penalty?: number;\n\n  response_format?: CompletionCreateParams.ResponseFormat;\n\n  seed?: number;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  stream?: boolean;\n\n  temperature?: number;\n\n  tool_choice?: CompletionCreateParams.ToolChoice;\n\n  tools?: Array<CompletionCreateParams.Tool>;\n\n  top_logprobs?: number;\n\n  top_p?: number;\n\n  user?: string;\n}\n\nexport namespace CompletionCreateParams {\n  export interface Message {\n    content: string;\n\n    role: string;\n\n    name?: string;\n\n    /**\n     * ToolMessage Fields\n     */\n    tool_call_id?: string;\n\n    /**\n     * AssistantMessage Fields\n     */\n    tool_calls?: Array<Message.ToolCall>;\n  }\n\n  export namespace Message {\n    export interface ToolCall {\n      id?: string;\n\n      function?: ToolCall.Function;\n\n      type?: string;\n    }\n\n    export namespace ToolCall {\n      export interface Function {\n        arguments?: string;\n\n        name?: string;\n      }\n    }\n  }\n\n  export interface ResponseFormat {\n    type?: string;\n  }\n\n  export interface ToolChoice {\n    string?: string;\n\n    toolChoice?: ToolChoice.ToolChoice;\n  }\n\n  export namespace ToolChoice {\n    export interface ToolChoice {\n      function?: ToolChoice.Function;\n\n      type?: string;\n    }\n\n    export namespace ToolChoice {\n      export interface Function {\n        name?: string;\n      }\n    }\n  }\n\n  export interface Tool {\n    function?: Tool.Function;\n\n    type?: string;\n  }\n\n  export namespace Tool {\n    export interface Function {\n      description?: string;\n\n      name?: string;\n\n      parameters?: Record<string, unknown>;\n    }\n  }\n}\n\nexport namespace Completions {\n  export import ChatCompletion = CompletionsAPI.ChatCompletion;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n}\n\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\n  stream?: false;\n}\n\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\n  stream: true;\n}\n\nexport type ChatCompletionCreateParams =\n  | ChatCompletionCreateParamsNonStreaming\n  | ChatCompletionCreateParamsStreaming;\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as ModelsAPI from \"./models\";\n\nexport class Models extends APIResource {\n  /**\n   * Get a specific model\n   */\n  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model> {\n    return this._client.get(`/openai/v1/models/${model}`, options);\n  }\n\n  /**\n   * get all available models\n   */\n  list(options?: Core.RequestOptions): Core.APIPromise<ModelList> {\n    return this._client.get('/openai/v1/models', options);\n  }\n\n  /**\n   * Delete a model\n   */\n  delete(model: string, options?: Core.RequestOptions): Core.APIPromise<void> {\n    return this._client.delete(`/openai/v1/models/${model}`, {\n      ...options,\n      headers: { Accept: '*/*', ...options?.headers },\n    });\n  }\n}\n\nexport interface Model {\n  id?: string;\n\n  created?: number;\n\n  object?: string;\n\n  owned_by?: string;\n}\n\nexport interface ModelList {\n  data?: Array<Model>;\n\n  object?: string;\n}\n\nexport namespace Models {\n  export import Model = ModelsAPI.Model;\n  export import ModelList = ModelsAPI.ModelList;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as AudioAPI from \"./audio\";\nimport * as TranscriptionsAPI from \"./transcriptions\";\nimport * as TranslationsAPI from \"./translations\";\n\nexport class Audio extends APIResource {\n  transcriptions: TranscriptionsAPI.Transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n  translations: TranslationsAPI.Translations = new TranslationsAPI.Translations(this._client);\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport namespace Audio {\n  export import Translation = AudioAPI.Translation;\n  export import Transcriptions = TranscriptionsAPI.Transcriptions;\n  export import Transcription = TranscriptionsAPI.Transcription;\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\n  export import Translations = TranslationsAPI.Translations;\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranscriptionsAPI from \"./transcriptions\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\n    return this._client.post(\n      '/openai/v1/audio/transcriptions',\n      multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n}\n\n/**\n * Represents a transcription response returned by model, based on the provided\n * input.\n */\nexport interface Transcription {\n  /**\n   * The transcribed text.\n   */\n  text: string;\n}\n\nexport interface TranscriptionCreateParams {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\n   */\n  model: (string & {}) | 'whisper-large-v3';\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n   * improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the\n   * audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * `response_format` must be set `verbose_json` to use timestamp granularities.\n   * Either or both of these options are supported: `word`, or `segment`. Note: There\n   * is no additional latency for segment timestamps, but generating word timestamps\n   * incurs additional latency.\n   */\n  timestamp_granularities?: Array<'word' | 'segment'>;\n}\n\nexport namespace Transcriptions {\n  export import Transcription = TranscriptionsAPI.Transcription;\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranslationsAPI from \"./translations\";\nimport * as AudioAPI from \"./audio\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(\n    body: TranslationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<AudioAPI.Translation> {\n    return this._client.post(\n      '/openai/v1/audio/translations',\n      multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\n   */\n  model: (string & {}) | 'whisper-large-v3';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\n   * English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface LMStudioConfig {\n  apiBase?: string;\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\nexport class LMStudioProvider extends BaseAIProvider {\n  readonly name = 'LMStudio';\n  readonly models = [\n    'gpt-oss-120b',\n    'gpt-oss-20b',\n    'qwen3-30b',\n    'llama-3-70b',\n    'mistral-7b',\n    'codellama-34b',\n  ];\n\n  private apiBase: string = 'http://localhost:1234/v1';\n  private timeout: number = 300000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n\n  async initialize(apiKey: string = 'lm-studio', config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    const lmConfig = config as LMStudioConfig;\n    this.apiBase =\n      lmConfig?.apiBase || process.env['LMSTUDIO_API_BASE'] || 'http://localhost:1234/v1';\n    this.timeout = lmConfig?.timeout || parseInt(process.env['LMSTUDIO_TIMEOUT'] || '300000');\n    this.retryAttempts =\n      lmConfig?.retryAttempts || parseInt(process.env['LMSTUDIO_RETRY_ATTEMPTS'] || '3');\n    this.retryDelay =\n      lmConfig?.retryDelay || parseInt(process.env['LMSTUDIO_RETRY_DELAY'] || '1000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('LM Studio server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as unknown;\n        this.availableModels = data.data.map((model: unknown) => model.id);\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP || 0.95,\n      stop: options?.stopSequences,\n      stream: false,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`LM Studio API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as unknown;\n    return data.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP || 0.95,\n      stop: options?.stopSequences,\n      stream: true,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`LM Studio API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown; // Node.js fetch response\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n\n            try {\n              const parsed = JSON.parse(data) as Record<string, unknown>;\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 8192 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // LM Studio specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async switchModel(modelType: '120b' | '20b'): Promise<void> {\n    if (modelType === '120b') {\n      this.config['model'] = 'gpt-oss-120b';\n    } else {\n      this.config['model'] = 'gpt-oss-20b';\n    }\n  }\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface OllamaConfig {\n  apiBase?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\nexport class OllamaProvider extends BaseAIProvider {\n  readonly name = 'Ollama';\n  readonly models = [\n    'llama3.2:3b',\n    'llama3.2:1b',\n    'qwen2.5:7b',\n    'qwen2.5:14b',\n    'qwen2.5:32b',\n    'qwen2.5-vl:7b',\n    'codellama:7b',\n    'codellama:13b',\n    'codellama:34b',\n    'deepseek-coder:6.7b',\n    'deepseek-coder:33b',\n    'phi3.5:3.8b',\n    'phi3.5:14b',\n    'mistral:7b',\n    'mixtral:8x7b',\n    'nomic-embed-text',\n  ];\n\n  private apiBase: string = 'http://localhost:11434';\n  private timeout: number = 300000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n\n  async initialize(apiKey: string = 'ollama', config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    const ollamaConfig = config as OllamaConfig;\n    this.apiBase =\n      ollamaConfig?.apiBase || process.env['OLLAMA_API_BASE'] || 'http://localhost:11434';\n    this.timeout = ollamaConfig?.timeout || parseInt(process.env['OLLAMA_TIMEOUT'] || '300000');\n    this.retryAttempts =\n      ollamaConfig?.retryAttempts || parseInt(process.env['OLLAMA_RETRY_ATTEMPTS'] || '3');\n    this.retryDelay =\n      ollamaConfig?.retryDelay || parseInt(process.env['OLLAMA_RETRY_DELAY'] || '1000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/api/version`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('Ollama server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/api/tags`, {\n        method: 'GET',\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as unknown;\n        this.availableModels = data.models?.map((model: unknown) => model.name) || [];\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    // Convert to Ollama format\n    const prompt = this.messagesToPrompt(messages);\n\n    const payload = {\n      model: selectedModel,\n      prompt: prompt,\n      stream: false,\n      options: {\n        temperature: options?.temperature || 0.7,\n        top_p: options?.topP || 0.95,\n        stop: options?.stopSequences,\n        num_predict: options?.maxTokens || 4096,\n      },\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Ollama API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as unknown;\n    return data.response || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    // Convert to Ollama format\n    const prompt = this.messagesToPrompt(messages);\n\n    const payload = {\n      model: selectedModel,\n      prompt: prompt,\n      stream: true,\n      options: {\n        temperature: options?.temperature || 0.7,\n        top_p: options?.topP || 0.95,\n        stop: options?.stopSequences,\n        num_predict: options?.maxTokens || 4096,\n      },\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Ollama API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown; // Node.js fetch response\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      const running = true;\n      while (running) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim()) {\n            try {\n              const parsed = JSON.parse(line) as Record<string, unknown>;\n              const content = parsed.response;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n              if (parsed.done) return;\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  private messagesToPrompt(messages: Message[]): string {\n    // Convert messages to a single prompt for Ollama\n    let prompt = '';\n\n    for (const message of messages) {\n      if (message.role === 'system') {\n        prompt += `System: ${message.content}\\n\\n`;\n      } else if (message.role === 'user') {\n        prompt += `User: ${message.content}\\n\\n`;\n      } else if (message.role === 'assistant') {\n        prompt += `Assistant: ${message.content}\\n\\n`;\n      }\n    }\n\n    prompt += 'Assistant: ';\n    return prompt;\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 8192 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // Ollama specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async pullModel(modelName: string): Promise<void> {\n    const response = await fetch(`${this.apiBase}/api/pull`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name: modelName }),\n      signal: AbortSignal.timeout(600000), // 10 minutes for model download\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to pull model ${modelName}: ${errorData}`);\n    }\n\n    // Wait for pull completion (streaming response)\n    const nodeResponse = response as unknown;\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) return;\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      const running = true;\n      while (running) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim()) {\n            try {\n              const parsed = JSON.parse(line) as Record<string, unknown>;\n              if (parsed.status === 'success') return;\n              if (parsed.error) {\n                throw new Error(`Model pull failed: ${parsed.error}`);\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async deleteModel(modelName: string): Promise<void> {\n    const response = await fetch(`${this.apiBase}/api/delete`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name: modelName }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to delete model ${modelName}: ${errorData}`);\n    }\n  }\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface VLLMConfig {\n  apiBase?: string;\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  topK?: number;\n  timeout?: number;\n  stopSequences?: string[];\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n}\n\nexport class VLLMProvider extends BaseAIProvider {\n  readonly name = 'vLLM';\n  readonly models = [\n    'stabilityai/japanese-stablelm-2-instruct-1_6b',\n    'mistralai/Mistral-7B-v0.1',\n    'mistralai/Mistral-7B-Instruct-v0.1',\n    'meta-llama/Llama-2-7b-hf',\n    'meta-llama/Llama-2-7b-chat-hf',\n    'meta-llama/Llama-2-13b-hf',\n    'meta-llama/Llama-2-13b-chat-hf',\n    'codellama/CodeLlama-7b-hf',\n    'codellama/CodeLlama-13b-hf',\n  ];\n\n  private apiBase: string = 'http://localhost:8000/v1';\n  private timeout: number = 120000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n  private vllmConfig: VLLMConfig = {};\n\n  async initialize(apiKey: string = 'vllm-local', config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.vllmConfig = (config as VLLMConfig) || {};\n    this.apiBase =\n      this.vllmConfig.apiBase || process.env['VLLM_API_BASE'] || 'http://localhost:8000/v1';\n    this.timeout = this.vllmConfig.timeout || parseInt(process.env['VLLM_TIMEOUT'] || '120000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('vLLM server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as unknown;\n        this.availableModels = data.data?.map((model: unknown) => model.id) || [];\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || this.vllmConfig.maxTokens || 2048,\n      temperature: options?.temperature || this.vllmConfig.temperature || 0.7,\n      top_p: options?.topP || this.vllmConfig.topP || 0.95,\n      top_k: this.vllmConfig.topK || 50,\n      frequency_penalty: this.vllmConfig.frequencyPenalty || 0,\n      presence_penalty: this.vllmConfig.presencePenalty || 0,\n      stop: options?.stopSequences || this.vllmConfig.stopSequences,\n      stream: false,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`vLLM API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as unknown;\n    return data.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || this.vllmConfig.maxTokens || 2048,\n      temperature: options?.temperature || this.vllmConfig.temperature || 0.7,\n      top_p: options?.topP || this.vllmConfig.topP || 0.95,\n      top_k: this.vllmConfig.topK || 50,\n      frequency_penalty: this.vllmConfig.frequencyPenalty || 0,\n      presence_penalty: this.vllmConfig.presencePenalty || 0,\n      stop: options?.stopSequences || this.vllmConfig.stopSequences,\n      stream: true,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`vLLM API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown; // Node.js fetch response\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n\n            try {\n              const parsed = JSON.parse(data) as Record<string, unknown>;\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 4096 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as Record<string, unknown>;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // vLLM specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async selectModelForTask(task: 'japanese' | 'code' | 'general' | 'fast'): Promise<string> {\n    const availableModels = await this.getAvailableModels();\n\n    switch (task) {\n      case 'japanese': {\n        // Prefer Japanese-specific models\n        const japaneseModels = availableModels.filter(\n          (m) => m.includes('japanese') || m.includes('jp'),\n        );\n        if (japaneseModels.length > 0 && japaneseModels[0]) {\n          return japaneseModels[0];\n        }\n        break;\n      }\n\n      case 'code': {\n        // Prefer code-optimized models\n        const codeModels = availableModels.filter(\n          (m) => m.includes('code') || m.includes('instruct'),\n        );\n        if (codeModels.length > 0 && codeModels[0]) {\n          return codeModels[0];\n        }\n        break;\n      }\n\n      case 'fast': {\n        // Prefer smaller models for speed\n        const smallModels = availableModels.filter(\n          (m) => m.includes('1_6b') || m.includes('1.6b') || m.includes('7b'),\n        );\n        if (smallModels.length > 0 && smallModels[0]) {\n          return smallModels[0];\n        }\n        break;\n      }\n    }\n\n    // Default to first available model\n    return availableModels[0] || this.getDefaultModel();\n  }\n}\n","/**\n * Intelligent Router Service\n * Routes AI requests to optimal providers based on task type and priority\n */\n\nimport { AIRequest, AIResponse, TaskType, PriorityMode } from '../types';\nimport { AIProviderManager } from '../providers/manager';\nimport { ConfigManager } from '../config/config-manager';\nimport { getRecommendedModel } from '../config/models';\n\nexport class IntelligentRouter {\n  private providerManager: AIProviderManager;\n  private config: ConfigManager;\n\n  constructor(providerManager: AIProviderManager, config: ConfigManager) {\n    this.providerManager = providerManager;\n    this.config = config;\n  }\n\n  async route(request: AIRequest): Promise<AIResponse> {\n    // 1. Determine task type if not specified\n    const taskType = request.taskType || this.detectTaskType(request);\n\n    // 2. Get optimal provider and model\n    const { providerName, modelId } = await this.selectOptimal(taskType, request);\n\n    // 3. Get provider instance\n    const provider = this.providerManager.getProvider(providerName);\n    if (!provider) {\n      throw new Error(`Provider ${providerName} not available`);\n    }\n\n    // 4. Execute request\n    const finalRequest = { ...request, model: modelId };\n    return provider.chat(finalRequest);\n  }\n\n  async routeVision(image: Buffer, prompt: string): Promise<AIResponse> {\n    const availableProviders = this.providerManager.getAvailableProviders();\n\n    // Priority order for vision tasks\n    const visionProviders = ['openai', 'anthropic', 'ollama', 'groq'];\n\n    for (const providerName of visionProviders) {\n      if (availableProviders.includes(providerName)) {\n        const provider = this.providerManager.getProvider(providerName);\n        if (provider?.vision) {\n          try {\n            return await provider.vision(image, prompt);\n          } catch (error: unknown) {\n            // Try next provider\n            continue;\n          }\n        }\n      }\n    }\n\n    throw new Error('No vision-capable providers available');\n  }\n\n  async routeCode(prompt: string, language?: string): Promise<AIResponse> {\n    const request: AIRequest = {\n      messages: [\n        {\n          role: 'user',\n          content: language ? `Generate ${language} code: ${prompt}` : `Generate code: ${prompt}`,\n        },\n      ],\n      taskType: 'coding',\n    };\n\n    return this.route(request);\n  }\n\n  private detectTaskType(request: AIRequest): TaskType {\n    const content = request.messages\n      .map((m) => m.content)\n      .join(' ')\n      .toLowerCase();\n\n    // Simple keyword-based detection\n    if (\n      this.containsKeywords(content, [\n        'code',\n        'function',\n        'class',\n        'programming',\n        'debug',\n        'implement',\n      ])\n    ) {\n      return 'coding';\n    }\n\n    if (\n      this.containsKeywords(content, ['analyze', 'reason', 'solve', 'logic', 'problem', 'math'])\n    ) {\n      return 'reasoning';\n    }\n\n    if (this.containsKeywords(content, ['image', 'picture', 'visual', 'see', 'look', 'describe'])) {\n      return 'vision';\n    }\n\n    if (this.containsKeywords(content, ['quick', 'fast', 'simple', 'brief'])) {\n      return 'quick_tasks';\n    }\n\n    if (this.containsKeywords(content, ['cheap', 'cost', 'budget', 'affordable'])) {\n      return 'cost_effective';\n    }\n\n    if (this.containsKeywords(content, ['private', 'local', 'offline', 'secure'])) {\n      return 'privacy';\n    }\n\n    if (this.containsKeywords(content, ['japanese', 'chinese', 'korean', 'translate'])) {\n      return 'multilingual';\n    }\n\n    if (this.containsKeywords(content, ['news', 'current', 'today', 'recent', 'latest'])) {\n      return 'current_events';\n    }\n\n    return 'chat';\n  }\n\n  private containsKeywords(text: string, keywords: string[]): boolean {\n    return keywords.some((keyword) => text.includes(keyword));\n  }\n\n  private async selectOptimal(\n    taskType: TaskType,\n    request: AIRequest,\n  ): Promise<{ providerName: string; modelId: string }> {\n    // 1. If provider/model specified, use that\n    if (request.provider) {\n      const availableProviders = this.providerManager.getAvailableProviders();\n      if (!availableProviders.includes(request.provider)) {\n        throw new Error(`Requested provider ${request.provider} not available`);\n      }\n\n      return {\n        providerName: request.provider,\n        modelId: request.model || (await this.getDefaultModelForProvider(request.provider)),\n      };\n    }\n\n    // 2. Get priority mode\n    const priorityMode = this.config.get('priority', 'auto') as PriorityMode;\n\n    // 3. Select optimal provider\n    const providerName = this.providerManager.selectOptimalProvider(taskType, priorityMode);\n    if (!providerName) {\n      throw new Error('No AI providers available');\n    }\n\n    // 4. Get recommended model for task\n    const availableModels = await this.getModelsForProvider(providerName);\n    const modelId =\n      request.model || getRecommendedModel(taskType, availableModels) || availableModels[0];\n\n    if (!modelId) {\n      throw new Error(`No models available for provider ${providerName}`);\n    }\n\n    return { providerName, modelId };\n  }\n\n  private async getModelsForProvider(providerName: string): Promise<string[]> {\n    const provider = this.providerManager.getProvider(providerName);\n    if (!provider) return [];\n\n    try {\n      const models = await provider.getModels();\n      return models.filter((m) => m.available).map((m) => m.id);\n    } catch {\n      return [];\n    }\n  }\n\n  private async getDefaultModelForProvider(providerName: string): Promise<string> {\n    const models = await this.getModelsForProvider(providerName);\n    return models[0] || 'default';\n  }\n\n  updatePriorityMode(mode: PriorityMode): void {\n    this.config.set('priority', mode);\n  }\n}\n","/**\n * Model Configurations\n * Static model definitions and routing rules\n */\n\nimport { TaskType } from '../types';\n\nexport const TASK_ROUTING: Record<TaskType, string[]> = {\n  coding: ['gpt-5', 'claude-sonnet-4-20250514', 'qwen2.5:32b', 'codellama:13b'],\n  reasoning: ['o1', 'claude-opus-4-1-20250805', 'gpt-5', 'llama-3.3-70b-versatile'],\n  vision: ['gpt-4o', 'claude-3-5-sonnet-20241022', 'qwen2.5-vl:7b', 'llama-3.2-90b-vision-preview'],\n  quick_tasks: ['gpt-5-mini', 'gemini-2.5-flash', 'claude-3-5-haiku-20241022', 'llama3.2:3b'],\n  cost_effective: [\n    'gemini-2.5-flash',\n    'claude-3-5-haiku-20241022',\n    'gpt-4o-mini',\n    'mixtral-8x7b-32768',\n  ],\n  privacy: [\n    'gpt-oss-120b',\n    'qwen2.5:32b',\n    'japanese-stablelm-2-instruct-1_6b',\n    'mistral-7b-instruct',\n  ],\n  multilingual: ['qwen2.5:32b', 'qwen2.5-vl:7b', 'gemini-2.5-pro', 'mixtral-8x7b-32768'],\n  current_events: ['grok-2', 'gemini-2.5-pro', 'gpt-5', 'claude-opus-4-1-20250805'],\n  chat: ['gpt-4o-mini', 'claude-3-5-haiku-20241022', 'gemini-2.5-flash', 'mixtral-8x7b-32768'],\n};\n\nexport const PROVIDER_PRIORITY_MODES = {\n  'privacy-first': ['lmstudio', 'ollama', 'vllm', 'anthropic', 'openai', 'google', 'groq', 'grok'],\n  performance: ['groq', 'grok', 'ollama', 'lmstudio', 'google', 'openai', 'anthropic', 'vllm'],\n  'cost-effective': ['ollama', 'vllm', 'google', 'groq', 'openai', 'anthropic', 'grok', 'lmstudio'],\n  balanced: ['lmstudio', 'ollama', 'google', 'groq', 'openai', 'anthropic', 'grok', 'vllm'],\n};\n\nexport function getRecommendedModel(\n  taskType: TaskType,\n  availableModels: string[],\n): string | undefined {\n  const recommendations = TASK_ROUTING[taskType] || TASK_ROUTING.chat;\n\n  for (const modelId of recommendations) {\n    if (availableModels.includes(modelId)) {\n      return modelId;\n    }\n  }\n\n  // Fallback to first available model\n  return availableModels[0];\n}\n\nexport function isLocalProvider(providerName: string): boolean {\n  return ['lmstudio', 'ollama', 'vllm'].includes(providerName);\n}\n\nexport function isCloudProvider(providerName: string): boolean {\n  return ['openai', 'anthropic', 'google', 'groq', 'grok'].includes(providerName);\n}\n","/**\n * MARIA CODE Health Monitoring System\n * Real-time monitoring of AI providers and system health\n */\n\nimport { EventEmitter } from 'events';\nimport { IAIProvider } from '../providers/ai-provider.js';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { homedir } from 'os';\n\nexport interface HealthStatus {\n  status: 'healthy' | 'degraded' | 'critical' | 'offline';\n  uptime: number; // milliseconds\n  lastCheck: Date;\n  responseTime: number;\n  error?: string;\n}\n\nexport interface ProviderHealth {\n  name: string;\n  type: 'local' | 'cloud';\n  health: HealthStatus;\n  metadata: {\n    models: string[];\n    endpoint?: string;\n    lastRequest?: Date;\n    totalRequests: number;\n    errorRate: number;\n    averageResponseTime: number;\n  };\n}\n\nexport interface SystemHealth {\n  overall: 'healthy' | 'degraded' | 'critical';\n  providers: ProviderHealth[];\n  recommendations: HealthRecommendation[];\n  lastUpdate: Date;\n  uptime: number;\n}\n\nexport interface HealthRecommendation {\n  type: 'warning' | 'error' | 'info' | 'action';\n  message: string;\n  provider?: string;\n  action?: {\n    type: 'restart' | 'reconfigure' | 'update' | 'contact-support';\n    command?: string;\n  };\n}\n\nexport interface HealthCheckConfig {\n  interval: number; // milliseconds\n  timeout: number; // milliseconds\n  retryAttempts: number;\n  thresholds: {\n    responseTimeWarning: number;\n    responseTimeCritical: number;\n    errorRateWarning: number;\n    errorRateCritical: number;\n  };\n}\n\nexport class HealthMonitor extends EventEmitter {\n  private providers: Map<string, IAIProvider> = new Map();\n  private healthData: Map<string, ProviderHealth> = new Map();\n  private config: HealthCheckConfig;\n  private checkInterval?: NodeJS.Timeout;\n  private isRunning = false;\n  private startTime = Date.now();\n\n  constructor(config?: Partial<HealthCheckConfig>) {\n    super();\n\n    this.config = {\n      interval: 60000, // 1 minute\n      timeout: 10000, // 10 seconds\n      retryAttempts: 3,\n      thresholds: {\n        responseTimeWarning: 2000, // 2 seconds\n        responseTimeCritical: 5000, // 5 seconds\n        errorRateWarning: 0.1, // 10%\n        errorRateCritical: 0.25, // 25%\n      },\n      ...config,\n    };\n  }\n\n  /**\n   * Register providers to monitor\n   */\n  registerProvider(name: string, provider: IAIProvider): void {\n    this.providers.set(name, provider);\n\n    // Initialize health data\n    this.healthData.set(name, {\n      name,\n      type: this.isLocalProvider(name) ? 'local' : 'cloud',\n      health: {\n        status: 'offline',\n        uptime: 0,\n        lastCheck: new Date(),\n        responseTime: 0,\n      },\n      metadata: {\n        models: provider.getModels(),\n        totalRequests: 0,\n        errorRate: 0,\n        averageResponseTime: 0,\n      },\n    });\n  }\n\n  /**\n   * Start health monitoring\n   */\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.startTime = Date.now();\n\n    // Initial health check\n    this.performHealthCheck();\n\n    // Schedule periodic checks\n    this.checkInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.interval);\n\n    this.emit('monitoring-started');\n  }\n\n  /**\n   * Stop health monitoring\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = undefined;\n    }\n\n    this.isRunning = false;\n    this.emit('monitoring-stopped');\n  }\n\n  /**\n   * Perform health check on all providers\n   */\n  private async performHealthCheck(): Promise<void> {\n    const promises = Array.from(this.providers.entries()).map(([name, provider]) =>\n      this.checkProviderHealth(name, provider),\n    );\n\n    await Promise.allSettled(promises);\n\n    // Update overall system health\n    const systemHealth = this.getSystemHealth();\n    this.emit('health-updated', systemHealth);\n\n    // Save health data\n    await this.saveHealthData();\n  }\n\n  /**\n   * Check health of individual provider\n   */\n  private async checkProviderHealth(name: string, provider: IAIProvider): Promise<void> {\n    const startTime = Date.now();\n    let attempts = 0;\n    let lastError: Error | undefined;\n\n    const currentHealth = this.healthData.get(name);\n    if (!currentHealth) return;\n\n    while (attempts < this.config.retryAttempts) {\n      try {\n        attempts++;\n\n        // Test basic connectivity\n        if (provider.validateConnection) {\n          await Promise.race([\n            provider.validateConnection(),\n            new Promise((_, reject) =>\n              setTimeout(() => reject(new Error('Timeout')), this.config.timeout),\n            ),\n          ]);\n        } else {\n          // Fallback: simple chat test\n          await Promise.race([\n            provider.chat([{ role: 'user', content: 'ping' }]),\n            new Promise((_, reject) =>\n              setTimeout(() => reject(new Error('Timeout')), this.config.timeout),\n            ),\n          ]);\n        }\n\n        // Success\n        const responseTime = Date.now() - startTime;\n        const now = new Date();\n\n        currentHealth.health = {\n          status: this.determineStatus(responseTime, currentHealth.metadata.errorRate),\n          uptime: now.getTime() - startTime,\n          lastCheck: now,\n          responseTime,\n        };\n\n        // Update metadata\n        this.updateMetrics(name, responseTime, true);\n\n        this.emit('provider-healthy', name, currentHealth);\n        break;\n      } catch (error: unknown) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n\n        if (attempts >= this.config.retryAttempts) {\n          // All attempts failed\n          const now = new Date();\n          currentHealth.health = {\n            status: 'offline',\n            uptime: 0,\n            lastCheck: now,\n            responseTime: Date.now() - startTime,\n            error: lastError.message,\n          };\n\n          this.updateMetrics(name, Date.now() - startTime, false);\n          this.emit('provider-unhealthy', name, currentHealth, lastError);\n        } else {\n          // Retry\n          await new Promise((resolve) => setTimeout(resolve, 1000 * attempts));\n        }\n      }\n    }\n\n    this.healthData.set(name, currentHealth);\n  }\n\n  /**\n   * Determine status based on response time and error rate\n   */\n  private determineStatus(responseTime: number, errorRate: number): HealthStatus['status'] {\n    if (\n      responseTime > this.config.thresholds.responseTimeCritical ||\n      errorRate > this.config.thresholds.errorRateCritical\n    ) {\n      return 'critical';\n    }\n\n    if (\n      responseTime > this.config.thresholds.responseTimeWarning ||\n      errorRate > this.config.thresholds.errorRateWarning\n    ) {\n      return 'degraded';\n    }\n\n    return 'healthy';\n  }\n\n  /**\n   * Update provider metrics\n   */\n  private updateMetrics(name: string, responseTime: number, success: boolean): void {\n    const health = this.healthData.get(name);\n    if (!health) return;\n\n    const metadata = health.metadata;\n    metadata.totalRequests++;\n\n    // Update average response time\n    metadata.averageResponseTime =\n      (metadata.averageResponseTime * (metadata.totalRequests - 1) + responseTime) /\n      metadata.totalRequests;\n\n    // Update error rate\n    const errorCount = Math.round(metadata.errorRate * (metadata.totalRequests - 1));\n    const newErrorCount = errorCount + (success ? 0 : 1);\n    metadata.errorRate = newErrorCount / metadata.totalRequests;\n\n    metadata.lastRequest = new Date();\n  }\n\n  /**\n   * Get overall system health\n   */\n  getSystemHealth(): SystemHealth {\n    const providers = Array.from(this.healthData.values());\n    const recommendations: HealthRecommendation[] = [];\n\n    // Determine overall status\n    let overall: SystemHealth['overall'] = 'healthy';\n\n    const offlineProviders = providers.filter((p) => p.health.status === 'offline');\n    const criticalProviders = providers.filter((p) => p.health.status === 'critical');\n    const degradedProviders = providers.filter((p) => p.health.status === 'degraded');\n\n    if (offlineProviders.length === providers.length) {\n      overall = 'critical';\n      recommendations.push({\n        type: 'error',\n        message: 'All providers are offline. Check your internet connection and API keys.',\n        action: { type: 'reconfigure' },\n      });\n    } else if (criticalProviders.length > 0 || offlineProviders.length > providers.length / 2) {\n      overall = 'critical';\n    } else if (degradedProviders.length > 0) {\n      overall = 'degraded';\n    }\n\n    // Generate recommendations\n    recommendations.push(...this.generateRecommendations(providers));\n\n    return {\n      overall,\n      providers,\n      recommendations,\n      lastUpdate: new Date(),\n      uptime: Date.now() - this.startTime,\n    };\n  }\n\n  /**\n   * Generate health recommendations\n   */\n  private generateRecommendations(providers: ProviderHealth[]): HealthRecommendation[] {\n    const recommendations: HealthRecommendation[] = [];\n\n    for (const provider of providers) {\n      const { name, health, metadata } = provider;\n\n      // Offline provider\n      if (health.status === 'offline') {\n        if (provider.type === 'local') {\n          recommendations.push({\n            type: 'action',\n            provider: name,\n            message: `${name} is offline. Try restarting the local server.`,\n            action: {\n              type: 'restart',\n              command: this.getRestartCommand(name),\n            },\n          });\n        } else {\n          recommendations.push({\n            type: 'warning',\n            provider: name,\n            message: `${name} is offline. Check API key and network connectivity.`,\n          });\n        }\n      }\n\n      // High response time\n      if (health.responseTime > this.config.thresholds.responseTimeCritical) {\n        recommendations.push({\n          type: 'warning',\n          provider: name,\n          message: `${name} has very high response time (${health.responseTime}ms). Consider switching to a faster provider.`,\n        });\n      }\n\n      // High error rate\n      if (metadata.errorRate > this.config.thresholds.errorRateWarning) {\n        recommendations.push({\n          type: 'warning',\n          provider: name,\n          message: `${name} has high error rate (${(metadata.errorRate * 100).toFixed(1)}%). Check configuration and quotas.`,\n        });\n      }\n\n      // No models available\n      if (metadata.models.length === 0) {\n        recommendations.push({\n          type: 'info',\n          provider: name,\n          message: `${name} has no models configured. Add models to enable functionality.`,\n          action: { type: 'reconfigure' },\n        });\n      }\n    }\n\n    // General recommendations\n    const healthyProviders = providers.filter((p) => p.health.status === 'healthy');\n    if (healthyProviders.length === 0) {\n      recommendations.push({\n        type: 'error',\n        message: 'No healthy providers available. System functionality is severely limited.',\n        action: { type: 'contact-support' },\n      });\n    } else if (healthyProviders.length === 1) {\n      recommendations.push({\n        type: 'info',\n        message:\n          'Only one healthy provider available. Consider setting up additional providers for redundancy.',\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get restart command for local provider\n   */\n  private getRestartCommand(providerName: string): string {\n    switch (providerName) {\n      case 'lmstudio':\n        return 'open -a \"LM Studio\"';\n      case 'ollama':\n        return 'ollama serve';\n      case 'vllm':\n        return 'python -m vllm.entrypoints.api_server';\n      default:\n        return `# Restart ${providerName} manually`;\n    }\n  }\n\n  /**\n   * Save health data to disk\n   */\n  private async saveHealthData(): Promise<void> {\n    try {\n      const healthDir = join(homedir(), '.maria', 'health');\n      await fs.mkdir(healthDir, { recursive: true });\n\n      const systemHealth = this.getSystemHealth();\n      const healthFile = join(healthDir, 'system-health.json');\n\n      await fs.writeFile(\n        healthFile,\n        JSON.stringify(\n          {\n            ...systemHealth,\n            config: this.config,\n          },\n          null,\n          2,\n        ),\n      );\n    } catch (error: unknown) {\n      this.emit('error', new Error(`Failed to save health data: ${error}`));\n    }\n  }\n\n  /**\n   * Load health data from disk\n   */\n  async loadHealthData(): Promise<SystemHealth | null> {\n    try {\n      const healthFile = join(homedir(), '.maria', 'health', 'system-health.json');\n      const data = await fs.readFile(healthFile, 'utf8');\n      const parsed = JSON.parse(data) as Record<string, unknown>;\n\n      return {\n        overall: parsed.overall,\n        providers: parsed.providers,\n        recommendations: parsed.recommendations,\n        lastUpdate: new Date(parsed.lastUpdate),\n        uptime: parsed.uptime,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get provider health status\n   */\n  getProviderHealth(name: string): ProviderHealth | null {\n    return this.healthData.get(name) || null;\n  }\n\n  /**\n   * Get all provider health data\n   */\n  getAllProviderHealth(): ProviderHealth[] {\n    return Array.from(this.healthData.values());\n  }\n\n  /**\n   * Check if provider is local\n   */\n  private isLocalProvider(name: string): boolean {\n    return ['lmstudio', 'ollama', 'vllm'].includes(name);\n  }\n\n  /**\n   * Update monitoring configuration\n   */\n  updateConfig(config: Partial<HealthCheckConfig>): void {\n    this.config = { ...this.config, ...config };\n\n    // Restart monitoring with new config\n    if (this.isRunning) {\n      this.stop();\n      this.start();\n    }\n  }\n\n  /**\n   * Force health check\n   */\n  async forceHealthCheck(): Promise<SystemHealth> {\n    await this.performHealthCheck();\n    return this.getSystemHealth();\n  }\n\n  /**\n   * Get monitoring statistics\n   */\n  getStatistics(): Record<string, unknown> {\n    const providers = Array.from(this.healthData.values());\n\n    return {\n      totalProviders: providers.length,\n      healthyProviders: providers.filter((p) => p.health.status === 'healthy').length,\n      degradedProviders: providers.filter((p) => p.health.status === 'degraded').length,\n      criticalProviders: providers.filter((p) => p.health.status === 'critical').length,\n      offlineProviders: providers.filter((p) => p.health.status === 'offline').length,\n      totalRequests: providers.reduce((sum, p) => sum + p.metadata.totalRequests, 0),\n      averageResponseTime:\n        providers.reduce((sum, p) => sum + p.metadata.averageResponseTime, 0) / providers.length ||\n        0,\n      averageErrorRate:\n        providers.reduce((sum, p) => sum + p.metadata.errorRate, 0) / providers.length || 0,\n      uptime: Date.now() - this.startTime,\n      isRunning: this.isRunning,\n    };\n  }\n}\n\nexport default HealthMonitor;\n","/**\n * Configuration Manager\n * Manages MARIA configuration settings\n */\n\nimport { PriorityMode, Config } from '../types';\nimport { MariaAIConfig } from '../maria-ai';\n\nexport class ConfigManager {\n  private config: Partial<Config>;\n\n  constructor(initialConfig: MariaAIConfig = {}) {\n    this.config = this.loadDefaultConfig();\n    this.mergeConfig(initialConfig);\n  }\n\n  private loadDefaultConfig(): Partial<Config> {\n    return {\n      priority: 'privacy-first',\n      providers: {},\n      autoStart: true,\n      healthMonitoring: true,\n      language: 'auto',\n      offlineMode: false,\n    };\n  }\n\n  private mergeConfig(newConfig: MariaAIConfig): void {\n    if (newConfig.priority) {\n      this.config['priority'] = newConfig.priority;\n    }\n\n    if (newConfig.apiKeys) {\n      // Store API keys for provider initialization\n      this.set('apiKeys', newConfig.apiKeys);\n    }\n\n    if (newConfig.localProviders) {\n      this.set('localProviders', newConfig.localProviders);\n    }\n\n    if (newConfig.autoStart !== undefined) {\n      this.config['autoStart'] = newConfig.autoStart;\n    }\n\n    if (newConfig.healthMonitoring !== undefined) {\n      this.config['healthMonitoring'] = newConfig.healthMonitoring;\n    }\n\n    if (newConfig.enabledProviders) {\n      this.set('enabledProviders', newConfig.enabledProviders);\n    }\n  }\n\n  get<T>(key: string, defaultValue?: T): T {\n    return (this.config as unknown)[key] ?? defaultValue;\n  }\n\n  set(key: string, value: unknown): void {\n    (this.config as unknown)[key] = value;\n  }\n\n  getAll(): Partial<Config> {\n    return { ...this.config };\n  }\n\n  // Load configuration from environment variables\n  static fromEnvironment(): ConfigManager {\n    const config: MariaAIConfig = {\n      priority: (process.env['MARIA_PRIORITY'] as PriorityMode) || 'privacy-first',\n      apiKeys: {\n        OPENAI_API_KEY: process.env['OPENAI_API_KEY'] || '',\n        ANTHROPIC_API_KEY: process.env['ANTHROPIC_API_KEY'] || '',\n        GOOGLE_API_KEY: process.env['GOOGLE_API_KEY'] || process.env['GEMINI_API_KEY'] || '',\n        GROQ_API_KEY: process.env['GROQ_API_KEY'] || '',\n        GROK_API_KEY: process.env['GROK_API_KEY'] || '',\n      },\n      localProviders: {\n        lmstudio: process.env['LMSTUDIO_ENABLED'] !== 'false',\n        ollama: process.env['OLLAMA_ENABLED'] !== 'false',\n        vllm: process.env['VLLM_ENABLED'] !== 'false',\n      },\n      autoStart: process.env['AUTO_START_LLMS'] !== 'false',\n      healthMonitoring: process.env['HEALTH_MONITORING'] !== 'false',\n    };\n\n    return new ConfigManager(config);\n  }\n\n  // Save configuration to file (for CLI usage)\n  async save(configPath?: string): Promise<void> {\n    const fs = await import('fs-extra');\n    const path = await import('path');\n    const os = await import('os');\n\n    const targetPath = configPath || path.join(os.homedir(), '.maria', 'config.json');\n\n    // Ensure directory exists\n    await fs.ensureDir(path.dirname(targetPath));\n\n    // Save configuration\n    await fs.writeJson(targetPath, this.config, { spaces: 2 });\n  }\n\n  // Load configuration from file\n  static async load(configPath?: string): Promise<ConfigManager> {\n    const fs = await import('fs-extra');\n    const path = await import('path');\n    const os = await import('os');\n\n    const targetPath = configPath || path.join(os.homedir(), '.maria', 'config.json');\n\n    if (await fs.pathExists(targetPath)) {\n      try {\n        const savedConfig = await fs.readJson(targetPath);\n        return new ConfigManager(savedConfig);\n      } catch (error: unknown) {\n        console.warn('Failed to load config file, using defaults:', error);\n      }\n    }\n\n    // Fallback to environment-based config\n    return ConfigManager.fromEnvironment();\n  }\n}\n","/**\n * Interactive Session Service\n * Manages interactive CLI chat sessions\n */\n// @ts-nocheck - Complex type interactions requiring gradual type migration\n\nimport { MariaAI } from '../maria-ai';\nimport chalk from 'chalk';\nimport * as readline from 'readline';\n\nexport interface InteractiveSession {\n  start(): Promise<void>;\n  stop(): void;\n}\n\nexport function createInteractiveSession(maria: MariaAI): InteractiveSession {\n  let running = false;\n  let rl: readline.Interface | null = null;\n\n  return {\n    async start(): Promise<void> {\n      running = true;\n\n      // Create readline interface\n      rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n        terminal: true,\n        historySize: 100,\n      });\n\n      console.log(chalk.blue('🤖 MARIA Interactive Session Started'));\n      console.log(chalk.gray('Type your message, or use /help for commands. Type /exit to quit.'));\n      console.log('');\n\n      // Handle Ctrl+C gracefully\n      rl.on('SIGINT', () => {\n        console.log(chalk.yellow('\\n\\nReceived SIGINT. Use /exit to quit gracefully.'));\n        rl?.prompt();\n      });\n\n      while (running) {\n        try {\n          const message = await getUserInput(rl);\n\n          if (!message || !running) break;\n\n          // Handle special commands\n          if (message.startsWith('/')) {\n            const handled = await handleCommand(message.trim(), maria);\n            if (handled === 'exit') {\n              break;\n            }\n            if (handled) continue;\n          }\n\n          // Send to AI\n          process.stdout.write(chalk.blue('\\nMARIA: '));\n\n          try {\n            // let fullResponse = '';\n            const stream = maria.chatStream(message);\n\n            for await (const chunk of stream) {\n              process.stdout.write(chunk);\n              // fullResponse += chunk;\n            }\n\n            console.log('\\n');\n          } catch (error: unknown) {\n            console.error(chalk.red('\\n❌ Error:'), error);\n          }\n        } catch (error: unknown) {\n          if ((error as unknown).message?.includes('canceled')) {\n            break; // User pressed Ctrl+C\n          }\n          console.error(chalk.red('❌ Session error:'), error);\n        }\n      }\n\n      rl?.close();\n      await maria.close();\n      console.log(chalk.green('\\n👋 Session ended. Goodbye!'));\n    },\n\n    stop(): void {\n      running = false;\n      rl?.close();\n    },\n  };\n}\n\nfunction getUserInput(rl: readline.Interface): Promise<string> {\n  return new Promise((resolve) => {\n    rl.question(chalk.cyan('You: '), (answer) => {\n      resolve(answer.trim());\n    });\n  });\n}\n\nasync function handleCommand(command: string, maria: MariaAI): Promise<string | boolean> {\n  const parts = command.split(' ');\n  const cmd = parts[0].toLowerCase();\n  const args = parts.slice(1);\n\n  switch (cmd) {\n    case '/help':\n      showHelp();\n      return true;\n\n    case '/status':\n      await showStatus(maria);\n      return true;\n\n    case '/models':\n      await showModels(maria);\n      return true;\n\n    case '/health':\n      await showHealth(maria);\n      return true;\n\n    case '/config':\n      showConfig(maria);\n      return true;\n\n    case '/priority':\n      if (args[0]) {\n        const mode = args[0] as unknown;\n        maria.setPriorityMode(mode);\n        console.log(chalk.green(`✅ Priority mode set to: ${mode}`));\n      } else {\n        console.log(\n          chalk.yellow('Usage: /priority <privacy-first|performance|cost-effective|auto>'),\n        );\n      }\n      return true;\n\n    case '/exit':\n    case '/quit':\n      return 'exit';\n\n    case '/clear':\n      console.clear();\n      console.log(chalk.blue('🤖 MARIA Interactive Session'));\n      console.log('');\n      return true;\n\n    default:\n      console.log(chalk.red(`Unknown command: ${cmd}. Type /help for available commands.`));\n      return true;\n  }\n}\n\nfunction showHelp(): void {\n  console.log(chalk.blue('\\n📖 MARIA Commands:\\n'));\n  console.log(chalk.cyan('/help') + '     - Show this help message');\n  console.log(chalk.cyan('/status') + '   - Show system status');\n  console.log(chalk.cyan('/models') + '   - List available models');\n  console.log(chalk.cyan('/health') + '   - Check system health');\n  console.log(chalk.cyan('/config') + '   - Show configuration');\n  console.log(chalk.cyan('/priority') + ' <mode> - Set priority mode');\n  console.log(chalk.cyan('/clear') + '    - Clear screen');\n  console.log(chalk.cyan('/exit') + '     - Exit session');\n  console.log('');\n}\n\nasync function showStatus(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n📊 System Status:\\n'));\n\n  try {\n    const health = await maria.getHealth();\n    const status =\n      health.overall === 'healthy' ? '✅' : health.overall === 'degraded' ? '⚠️' : '❌';\n\n    console.log(`${status} Overall: ${health.overall}`);\n    console.log(`💻 CPU: ${health.system.cpu}%`);\n    console.log(`🧠 Memory: ${health.system.memory}%`);\n    console.log(`💾 Disk: ${health.system.disk}%`);\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get status:'), error);\n  }\n}\n\nasync function showModels(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n🔧 Available Models:\\n'));\n\n  try {\n    const models = await maria.getModels();\n    const available = models.filter((m) => m.available);\n\n    if (available.length === 0) {\n      console.log(chalk.yellow('No models available'));\n      return;\n    }\n\n    for (const model of available) {\n      const provider = chalk.gray(`[${model.provider}]`);\n      const capabilities = model.capabilities.join(', ');\n      console.log(`✅ ${chalk.bold(model.name)} ${provider}`);\n      console.log(`   ${chalk.gray(capabilities)}`);\n    }\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get models:'), error);\n  }\n}\n\nasync function showHealth(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n🏥 Health Status:\\n'));\n\n  try {\n    const health = await maria.getHealth();\n\n    // Services\n    console.log(chalk.bold('Local Services:'));\n    Object.entries(health.services).forEach(([name, status]) => {\n      const icon = status.status === 'running' ? '✅' : '⚠️';\n      console.log(`  ${icon} ${name}: ${status.status}`);\n    });\n\n    console.log('');\n    console.log(chalk.bold('Cloud APIs:'));\n    Object.entries(health.cloudAPIs).forEach(([name, status]) => {\n      const icon = status.status === 'available' ? '✅' : '⚠️';\n      console.log(`  ${icon} ${name}: ${status.status}`);\n    });\n\n    if (health.recommendations.length > 0) {\n      console.log('');\n      console.log(chalk.bold('Recommendations:'));\n      health.recommendations.forEach((rec) => {\n        console.log(`  💡 ${rec}`);\n      });\n    }\n\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get health status:'), error);\n  }\n}\n\nfunction showConfig(maria: MariaAI): void {\n  console.log(chalk.blue('\\n⚙️  Current Configuration:\\n'));\n\n  const config = maria.getConfig();\n  console.log(chalk.cyan('Priority:'), config.priority || 'auto');\n  console.log(chalk.cyan('Auto Start:'), config.autoStart ? 'enabled' : 'disabled');\n  console.log(chalk.cyan('Health Monitoring:'), config.healthMonitoring ? 'enabled' : 'disabled');\n  console.log('');\n}\n","/**\n * Configuration Loader\n * Loads configuration from various sources\n */\n\nimport { ConfigManager } from './config-manager';\nimport { MariaAIConfig } from '../maria-ai';\nimport { CLIOptions } from '../cli';\n\nexport async function loadConfig(options: CLIOptions = {}): Promise<MariaAIConfig> {\n  // Start with saved configuration\n  const configManager = await ConfigManager.load(options.config);\n  const baseConfig = configManager.getAll();\n\n  // Override with CLI options\n  const config: MariaAIConfig = {\n    priority: options.priority || baseConfig.priority,\n    autoStart: !options.offline, // Disable auto-start in offline mode\n    healthMonitoring: baseConfig.healthMonitoring,\n  };\n\n  // Load API keys from environment\n  config['apiKeys'] = {\n    OPENAI_API_KEY: process.env['OPENAI_API_KEY'] || '',\n    ANTHROPIC_API_KEY: process.env['ANTHROPIC_API_KEY'] || '',\n    GOOGLE_API_KEY: process.env['GOOGLE_API_KEY'] || process.env['GEMINI_API_KEY'] || '',\n    GROQ_API_KEY: process.env['GROQ_API_KEY'] || '',\n    GROK_API_KEY: process.env['GROK_API_KEY'] || '',\n  };\n\n  // Local provider settings\n  config['localProviders'] = {\n    lmstudio: process.env['LMSTUDIO_ENABLED'] !== 'false' && !options.offline,\n    ollama: process.env['OLLAMA_ENABLED'] !== 'false' && !options.offline,\n    vllm: process.env['VLLM_ENABLED'] !== 'false' && !options.offline,\n  };\n\n  // Handle offline mode\n  if (options.offline) {\n    // Only enable local providers in offline mode\n    config['apiKeys'] = {};\n    config['localProviders'] = {\n      lmstudio: true,\n      ollama: true,\n      vllm: true,\n    };\n  }\n\n  // Handle provider/model overrides\n  if (options.provider) {\n    config['enabledProviders'] = [options.provider];\n  }\n\n  return config;\n}\n\nexport async function loadEnvironmentConfig(): Promise<void> {\n  // Try to load .env file if available\n  try {\n    const fs = await import('fs-extra');\n    const path = await import('path');\n\n    const envPath = path.join(process.cwd(), '.env.local');\n    if (await fs.pathExists(envPath)) {\n      const envContent = await fs.readFile(envPath, 'utf-8');\n\n      // Simple env parsing (no external dependency)\n      const lines = envContent.split('\\n');\n      for (const line of lines) {\n        const trimmed = line.trim();\n        if (trimmed && !trimmed.startsWith('#')) {\n          const [key, ...valueParts] = trimmed.split('=');\n          const value = valueParts.join('=');\n          if (key && value && !process.env[key]) {\n            process.env[key] = value;\n          }\n        }\n      }\n    }\n  } catch (error: unknown) {\n    // Ignore errors, environment loading is optional\n  }\n}\n","/**\n * UI Utilities\n * Helper functions for CLI display and formatting\n */\n\nimport chalk from 'chalk';\nimport { HealthStatus } from '../types';\n\nexport function printWelcome(): void {\n  console.log(chalk.blue('╔══════════════════════════════════════════════════════════╗'));\n  console.log(chalk.blue('║                                                          ║'));\n  console.log(\n    chalk.blue('║') +\n      chalk.bold.cyan('                    MARIA AI Assistant                   ') +\n      chalk.blue('║'),\n  );\n  console.log(\n    chalk.blue('║') +\n      chalk.gray('              Intelligent CLI with Multi-Model AI         ') +\n      chalk.blue('║'),\n  );\n  console.log(chalk.blue('║                                                          ║'));\n  console.log(chalk.blue('╚══════════════════════════════════════════════════════════╝'));\n  console.log('');\n  console.log(chalk.gray('🚀 Initializing AI providers...'));\n  console.log('');\n}\n\nexport function printStatus(health: HealthStatus): void {\n  console.log(chalk.blue('╔══════════════════════════════════════════════════════════╗'));\n  console.log(\n    chalk.blue('║') +\n      chalk.bold.cyan('                    System Status                        ') +\n      chalk.blue('║'),\n  );\n  console.log(chalk.blue('╚══════════════════════════════════════════════════════════╝'));\n  console.log('');\n\n  // Overall status\n  const statusColor =\n    health.overall === 'healthy'\n      ? chalk.green\n      : health.overall === 'degraded'\n        ? chalk.yellow\n        : chalk.red;\n  const statusIcon =\n    health.overall === 'healthy' ? '✅' : health.overall === 'degraded' ? '⚠️' : '❌';\n\n  console.log(statusColor(`${statusIcon} Overall Status: ${health.overall.toUpperCase()}`));\n  console.log('');\n\n  // System resources\n  console.log(chalk.blue('📊 System Resources:'));\n  console.log(`   CPU: ${formatResourceUsage(health.system.cpu)}%`);\n  console.log(`   Memory: ${formatResourceUsage(health.system.memory)}%`);\n  console.log(`   Disk: ${formatResourceUsage(health.system.disk)}%`);\n  console.log('');\n\n  // Local services\n  console.log(chalk.blue('🤖 Local AI Services:'));\n  Object.entries(health.services).forEach(([name, service]) => {\n    const icon = service.status === 'running' ? '✅' : '⚠️';\n    const status =\n      service.status === 'running' ? chalk.green(service.status) : chalk.yellow(service.status);\n    console.log(`   ${icon} ${name}: ${status}`);\n  });\n  console.log('');\n\n  // Cloud APIs\n  console.log(chalk.blue('☁️  Cloud APIs:'));\n  Object.entries(health.cloudAPIs).forEach(([name, api]) => {\n    const icon = api.status === 'available' ? '✅' : '⚠️';\n    const status = api.status === 'available' ? chalk.green(api.status) : chalk.yellow(api.status);\n    console.log(`   ${icon} ${name}: ${status}`);\n  });\n\n  // Recommendations\n  if (health.recommendations.length > 0) {\n    console.log('');\n    console.log(chalk.blue('💡 Recommendations:'));\n    health.recommendations.forEach((rec) => {\n      console.log(`   • ${chalk.cyan(rec)}`);\n    });\n  }\n\n  console.log('');\n  console.log(chalk.gray(`Last updated: ${new Date(health.timestamp).toLocaleString()}`));\n}\n\nexport function formatResourceUsage(percentage: number): string {\n  if (percentage < 70) {\n    return chalk.green(percentage.toString());\n  } else if (percentage < 90) {\n    return chalk.yellow(percentage.toString());\n  } else {\n    return chalk.red(percentage.toString());\n  }\n}\n\nexport function printProgress(message: string): void {\n  console.log(chalk.blue('⏳'), message);\n}\n\nexport function printSuccess(message: string): void {\n  console.log(chalk.green('✅'), message);\n}\n\nexport function printWarning(message: string): void {\n  console.log(chalk.yellow('⚠️'), message);\n}\n\nexport function printError(message: string): void {\n  console.log(chalk.red('❌'), message);\n}\n\nexport function printInfo(message: string): void {\n  console.log(chalk.blue('ℹ️'), message);\n}\n\nexport function formatTable(data: unknown[], headers: string[]): void {\n  const ensureRowStructure = (row: unknown): Record<string, unknown> => {\n    if (typeof row === 'object' && row !== null) {\n      return row as Record<string, unknown>;\n    }\n    return {};\n  };\n\n  const maxLengths = headers.map((header) =>\n    Math.max(\n      header.length,\n      ...data.map((row) => {\n        const rowData = ensureRowStructure(row);\n        return String(rowData[header] || '').length;\n      }),\n    ),\n  );\n\n  // Print header\n  const headerRow = headers.map((header, i) => header.padEnd(maxLengths[i] || 0)).join(' | ');\n  console.log(chalk.bold(headerRow));\n  console.log(maxLengths.map((len) => '─'.repeat(len || 0)).join('─┼─'));\n\n  // Print data rows\n  data.forEach((row) => {\n    const rowData = ensureRowStructure(row);\n    const dataRow = headers\n      .map((header, i) => String(rowData[header] || '').padEnd(maxLengths[i] || 0))\n      .join(' | ');\n    console.log(dataRow);\n  });\n}\n"]}
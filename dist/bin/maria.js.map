{"version":3,"sources":["../../node_modules/tsup/assets/cjs_shims.js","../../src/providers/ai-provider.ts","../../src/providers/openai-provider.ts","../../src/providers/anthropic-provider.ts","../../src/providers/google-ai-provider.ts","../../src/providers/grok-provider.ts","../../src/providers/lmstudio-provider.ts","../../src/providers/ollama-provider.ts","../../src/providers/vllm-provider.ts","../../src/providers/manager.ts","../../src/config/models.ts","../../src/services/intelligent-router.ts","../../src/services/health-monitor.ts","../../src/utils/import-helper.ts","../../src/config/config-manager.ts","../../src/maria-ai.ts","../../src/services/interactive-session.ts","../../src/config/loader.ts","../../src/utils/ui.ts","../../src/cli.ts","../../src/utils/version-check.ts","../../src/bin/maria.ts"],"names":["OpenAI","Anthropic","GoogleGenerativeAI","Groq","fetch","response","EventEmitter","join","homedir","fs","require","importNodeBuiltin","safeDynamicImport","readline","chalk","fs2","Command","showStatus","semver"],"mappings":"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","file":"maria.js","sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","/**\n * Common AI Provider Interface\n * All AI providers must implement this interface\n */\n\nexport interface Message {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface StreamOptions {\n  onToken?: (token: string) => void;\n  signal?: AbortSignal;\n}\n\nexport interface CompletionOptions {\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  stopSequences?: string[];\n  stream?: boolean;\n  streamOptions?: StreamOptions;\n}\n\nexport interface CodeReviewResult {\n  issues: Array<{\n    line: number;\n    severity: 'error' | 'warning' | 'info';\n    message: string;\n    suggestion?: string;\n  }>;\n  summary: string;\n  improvements: string[];\n}\n\nexport interface VisionResponse {\n  description: string;\n  objects?: Array<{\n    name: string;\n    confidence: number;\n    location?: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  }>;\n  text?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface ModelInfo {\n  name: string;\n  description?: string;\n  contextWindow?: number;\n  maxTokens?: number;\n  pricing?: {\n    input: number;\n    output: number;\n  };\n  capabilities: {\n    vision?: boolean;\n    streaming?: boolean;\n    codeGeneration?: boolean;\n    embeddings?: boolean;\n  };\n}\n\nexport interface IAIProvider {\n  readonly name: string;\n  readonly models: string[];\n\n  /**\n   * Initialize the provider with API key and configuration\n   */\n  initialize(apiKey: string, config?: Record<string, unknown>): Promise<void>;\n\n  /**\n   * Chat completion\n   */\n  chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string>;\n\n  /**\n   * Streaming chat completion\n   */\n  chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string>;\n\n  /**\n   * Generate code based on prompt\n   */\n  generateCode(prompt: string, language?: string, model?: string): Promise<string>;\n\n  /**\n   * Review code and provide feedback\n   */\n  reviewCode(code: string, language?: string, model?: string): Promise<CodeReviewResult>;\n\n  /**\n   * Vision understanding (optional)\n   */\n  vision?(image: Buffer, prompt: string, model?: string): Promise<VisionResponse>;\n\n  /**\n   * Generate embeddings (optional)\n   */\n  embeddings?(text: string, model?: string): Promise<number[]>;\n\n  /**\n   * Validate connection to the provider\n   */\n  validateConnection?(): Promise<boolean>;\n\n  /**\n   * Get model information\n   */\n  getModelInfo?(model?: string): Promise<ModelInfo>;\n\n  /**\n   * Estimate cost for tokens\n   */\n  estimateCost?(tokens: number, model?: string): number;\n\n  /**\n   * Check if the provider is properly initialized\n   */\n  isInitialized(): boolean;\n\n  /**\n   * Get available models\n   */\n  getModels(): string[];\n\n  /**\n   * Get default model\n   */\n  getDefaultModel(): string;\n}\n\n/**\n * Base abstract class for AI providers\n */\nexport abstract class BaseAIProvider implements IAIProvider {\n  protected apiKey: string = '';\n  protected config: Record<string, unknown> = {};\n  protected initialized: boolean = false;\n\n  abstract readonly name: string;\n  abstract readonly models: string[];\n\n  async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    this.apiKey = apiKey;\n    this.config = config || {};\n    this.initialized = true;\n  }\n\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  getModels(): string[] {\n    return this.models;\n  }\n\n  getDefaultModel(): string {\n    if (this.models.length === 0) {\n      throw new Error(`No models available for ${this.name} provider`);\n    }\n    const defaultModel = this.models[0];\n    if (!defaultModel) {\n      throw new Error(`Invalid default model for ${this.name} provider`);\n    }\n    return defaultModel;\n  }\n\n  protected validateModel(model?: string): string {\n    const selectedModel = model || this.getDefaultModel();\n    if (!this.models.includes(selectedModel)) {\n      throw new Error(`Model ${selectedModel} is not supported by ${this.name} provider`);\n    }\n    return selectedModel;\n  }\n\n  protected ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new Error(`${this.name} provider is not initialized. Call initialize() first.`);\n    }\n  }\n\n  abstract chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string>;\n  abstract chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string>;\n  abstract generateCode(prompt: string, language?: string, model?: string): Promise<string>;\n  abstract reviewCode(code: string, language?: string, model?: string): Promise<CodeReviewResult>;\n}\n\n/**\n * Provider Registry\n */\nexport class AIProviderRegistry {\n  private static providers = new Map<string, IAIProvider>();\n  private static defaultProvider: string | null = null;\n\n  static register(provider: IAIProvider): void {\n    this.providers.set(provider.name.toLowerCase(), provider);\n  }\n\n  static get(name: string): IAIProvider | undefined {\n    return this.providers.get(name.toLowerCase());\n  }\n\n  static getAll(): IAIProvider[] {\n    return Array.from(this.providers.values());\n  }\n\n  static setDefault(name: string): void {\n    if (!this.providers.has(name.toLowerCase())) {\n      throw new Error(`Provider ${name} is not registered`);\n    }\n    this.defaultProvider = name.toLowerCase();\n  }\n\n  static getDefault(): IAIProvider | undefined {\n    if (!this.defaultProvider) {\n      // Return the first registered provider as default\n      const firstProvider = this.providers.values().next().value;\n      return firstProvider;\n    }\n    return this.providers.get(this.defaultProvider);\n  }\n\n  static clear(): void {\n    this.providers.clear();\n    this.defaultProvider = null;\n  }\n}\n","import OpenAI from 'openai';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class OpenAIProvider extends BaseAIProvider {\n  readonly name = 'OpenAI';\n  readonly models = [\n    'gpt-5-2025-08-07',\n    'gpt-5-mini-2025-08-07',\n    'gpt-4o',\n    'gpt-4o-mini',\n    'gpt-4-turbo',\n    'gpt-4',\n    'gpt-3.5-turbo',\n    'o1-preview',\n    'o1-mini',\n  ];\n\n  private client?: OpenAI;\n\n  override async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new OpenAI({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n      organization: config?.['organization'] as string | undefined,\n      maxRetries: (config?.['maxRetries'] as number) || 3,\n    });\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    // o1 and gpt-5 models only support temperature=1\n    const isRestrictedModel = selectedModel.includes('o1') || selectedModel.includes('gpt-5');\n    const temperature = isRestrictedModel ? 1.0 : options?.temperature || 0.7;\n\n    const completion = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: temperature,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n    });\n\n    return completion.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    // o1 and gpt-5 models only support temperature=1\n    const isRestrictedModel = selectedModel.includes('o1') || selectedModel.includes('gpt-5');\n    const temperature = isRestrictedModel ? 1.0 : options?.temperature || 0.7;\n\n    const stream = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: temperature,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content;\n      if (content) {\n        yield content;\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(content);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","import Anthropic from '@anthropic-ai/sdk';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class AnthropicProvider extends BaseAIProvider {\n  readonly name = 'Anthropic';\n  readonly models = [\n    'claude-opus-4.1',\n    'claude-3-5-sonnet-20241022',\n    'claude-3-5-haiku-20241022',\n    'claude-3-opus-20240229',\n    'claude-3-sonnet-20240229',\n    'claude-3-haiku-20240307',\n  ];\n\n  private client?: Anthropic;\n\n  override async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new Anthropic({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n      maxRetries: (config?.['maxRetries'] as number) || 3,\n    });\n  }\n\n  private convertMessages(messages: Message[]): Anthropic.MessageParam[] {\n    // Extract system message if present (unused for now but kept for future use)\n    const _systemMessage = messages.find((m) => m.role === 'system');\n    void _systemMessage; // Will be used in future implementation\n    const conversationMessages = messages.filter((m) => m.role !== 'system');\n\n    return conversationMessages.map((m) => ({\n      role: m.role as 'user' | 'assistant',\n      content: m.content,\n    }));\n  }\n\n  private getSystemMessage(messages: Message[]): string | undefined {\n    const systemMessage = messages.find((m) => m.role === 'system');\n    return systemMessage?.content;\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const response = await this.client!.messages.create({\n      model: selectedModel,\n      messages: this.convertMessages(messages),\n      system: this.getSystemMessage(messages),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP,\n      stop_sequences: options?.stopSequences,\n    });\n\n    // Handle different content types\n    const content = response.content[0];\n    if (content && content.type === 'text' && 'text' in content) {\n      return content.text;\n    }\n\n    return '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const stream = await this.client!.messages.create({\n      model: selectedModel,\n      messages: this.convertMessages(messages),\n      system: this.getSystemMessage(messages),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP,\n      stop_sequences: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const event of stream) {\n      if (event.type === 'content_block_delta' && event.delta.type === 'text_delta') {\n        const text = event.delta.text;\n        yield text;\n\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(text);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","import { GoogleGenerativeAI, GenerativeModel, Content } from '@google/generative-ai';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class GoogleAIProvider extends BaseAIProvider {\n  readonly name = 'GoogleAI';\n  readonly models = [\n    'gemini-2.5-pro',\n    'gemini-2.5-flash',\n    'gemini-2.5-flash-lite',\n    'gemini-2.0-flash-exp',\n    'gemini-1.5-pro',\n    'gemini-1.5-pro-002',\n    'gemini-1.5-flash',\n    'gemini-1.5-flash-002',\n    'gemini-1.5-flash-8b',\n    'gemini-1.0-pro',\n  ];\n\n  private client?: GoogleGenerativeAI;\n\n  override async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new GoogleGenerativeAI(apiKey);\n  }\n\n  private convertMessages(messages: Message[]): Content[] {\n    // Extract system message to use as initial context\n    const systemMessage = messages.find((m) => m.role === 'system');\n    const conversationMessages = messages.filter((m) => m.role !== 'system');\n\n    const contents: Content[] = [];\n\n    // Add system message as first user message if present\n    if (systemMessage) {\n      contents.push({\n        role: 'user',\n        parts: [{ text: `System: ${systemMessage.content}` }],\n      });\n      contents.push({\n        role: 'model',\n        parts: [{ text: 'Understood. I will follow these instructions.' }],\n      });\n    }\n\n    // Add conversation messages\n    conversationMessages.forEach((msg) => {\n      contents.push({\n        role: msg.role === 'user' ? 'user' : 'model',\n        parts: [{ text: msg.content }],\n      });\n    });\n\n    return contents;\n  }\n\n  private getModel(modelName: string): GenerativeModel {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    return this.client.getGenerativeModel({\n      model: modelName,\n      generationConfig: {\n        candidateCount: 1,\n      },\n    });\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const genModel = this.getModel(selectedModel);\n    const contents = this.convertMessages(messages);\n\n    // Create chat session with history\n    const chat = genModel.startChat({\n      history: contents.slice(0, -1), // All messages except the last one\n      generationConfig: {\n        temperature: options?.temperature || 0.7,\n        maxOutputTokens: options?.maxTokens,\n        topP: options?.topP,\n        stopSequences: options?.stopSequences,\n      },\n    });\n\n    // Send the last message\n    const lastMessage = contents[contents.length - 1];\n    if (!lastMessage || !lastMessage.parts || !lastMessage.parts[0]) {\n      throw new Error('Invalid message format');\n    }\n    const result = await chat.sendMessage(lastMessage.parts[0].text || '');\n    const response = await result.response;\n\n    return response.text();\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const genModel = this.getModel(selectedModel);\n    const contents = this.convertMessages(messages);\n\n    // Create chat session with history\n    const chat = genModel.startChat({\n      history: contents.slice(0, -1),\n      generationConfig: {\n        temperature: options?.temperature || 0.7,\n        maxOutputTokens: options?.maxTokens,\n        topP: options?.topP,\n        stopSequences: options?.stopSequences,\n      },\n    });\n\n    // Send the last message with streaming\n    const lastMessage = contents[contents.length - 1];\n    if (!lastMessage || !lastMessage.parts || !lastMessage.parts[0]) {\n      throw new Error('Invalid message format');\n    }\n    const result = await chat.sendMessageStream(lastMessage.parts[0].text || '');\n\n    for await (const chunk of result.stream) {\n      const text = chunk.text();\n      if (text) {\n        yield text;\n\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(text);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","// Note: Using groq-sdk package for Grok AI (x.ai) integration\nimport Groq from 'groq-sdk';\nimport { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\n\nexport class GrokProvider extends BaseAIProvider {\n  readonly name = 'Grok';\n  readonly models = [\n    'grok-4-0709',\n    'llama-3.3-70b-versatile',\n    'llama-3.1-70b-versatile',\n    'llama-3.1-8b-instant',\n    'mixtral-8x7b-32768',\n    'gemma2-9b-it',\n    'gemma-7b-it',\n  ];\n\n  private client?: Groq; // Using Groq SDK for Grok AI\n\n  override async initialize(apiKey: string, config?: Record<string, unknown>): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.client = new Groq({\n      apiKey: this.apiKey,\n      baseURL: config?.['baseURL'] as string | undefined,\n    });\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const completion = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n    });\n\n    return completion.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = this.validateModel(model);\n\n    const stream = await this.client!.chat.completions.create({\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      temperature: options?.temperature || 0.7,\n      max_tokens: options?.maxTokens,\n      top_p: options?.topP,\n      stop: options?.stopSequences,\n      stream: true,\n    });\n\n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content;\n      if (content) {\n        yield content;\n        if (options?.streamOptions?.onToken) {\n          options.streamOptions.onToken(content);\n        }\n      }\n\n      // Check for abort signal\n      if (options?.streamOptions?.signal?.aborted) {\n        break;\n      }\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface LMStudioConfig {\n  apiBase?: string;\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\nexport class LMStudioProvider extends BaseAIProvider {\n  readonly name = 'LMStudio';\n  readonly models = [\n    'gpt-oss-120b',\n    'gpt-oss-20b',\n    'qwen3-30b',\n    'llama-3-70b',\n    'mistral-7b',\n    'codellama-34b',\n  ];\n\n  private apiBase: string = 'http://localhost:1234/v1';\n  private timeout: number = 300000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n\n  override async initialize(\n    apiKey: string = 'lm-studio',\n    config?: Record<string, unknown>,\n  ): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    const lmConfig = config as LMStudioConfig;\n    this.apiBase =\n      lmConfig?.apiBase || process.env['LMSTUDIO_API_BASE'] || 'http://localhost:1234/v1';\n    this.timeout = lmConfig?.timeout || parseInt(process.env['LMSTUDIO_TIMEOUT'] || '300000');\n    this.retryAttempts =\n      lmConfig?.retryAttempts || parseInt(process.env['LMSTUDIO_RETRY_ATTEMPTS'] || '3');\n    this.retryDelay =\n      lmConfig?.retryDelay || parseInt(process.env['LMSTUDIO_RETRY_DELAY'] || '1000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('LM Studio server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as { data: Array<{ id: string }> };\n        this.availableModels = data.data.map((model) => model.id);\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  override getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP || 0.95,\n      stop: options?.stopSequences,\n      stream: false,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`LM Studio API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as { choices: Array<{ message?: { content?: string } }> };\n    return data.choices[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || 4096,\n      temperature: options?.temperature || 0.7,\n      top_p: options?.topP || 0.95,\n      stop: options?.stopSequences,\n      stream: true,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`LM Studio API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown as {\n      body?: { getReader(): ReadableStreamDefaultReader<Uint8Array> };\n    }; // Node.js fetch response\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n\n            try {\n              const parsed = JSON.parse(data) as Record<string, unknown>;\n              const choices = parsed['choices'] as Array<{ delta?: { content?: string } }>;\n              const content = choices?.[0]?.delta?.content;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 8192 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // LM Studio specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async switchModel(modelType: '120b' | '20b'): Promise<void> {\n    if (modelType === '120b') {\n      this.config['model'] = 'gpt-oss-120b';\n    } else {\n      this.config['model'] = 'gpt-oss-20b';\n    }\n  }\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface OllamaConfig {\n  apiBase?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\nexport class OllamaProvider extends BaseAIProvider {\n  readonly name = 'Ollama';\n  readonly models = [\n    'llama3.2:3b',\n    'llama3.2:1b',\n    'qwen2.5:7b',\n    'qwen2.5:14b',\n    'qwen2.5:32b',\n    'qwen2.5-vl:7b',\n    'codellama:7b',\n    'codellama:13b',\n    'codellama:34b',\n    'deepseek-coder:6.7b',\n    'deepseek-coder:33b',\n    'phi3.5:3.8b',\n    'phi3.5:14b',\n    'mistral:7b',\n    'mixtral:8x7b',\n    'nomic-embed-text',\n  ];\n\n  private apiBase: string = 'http://localhost:11434';\n  private timeout: number = 300000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n\n  override async initialize(\n    apiKey: string = 'ollama',\n    config?: Record<string, unknown>,\n  ): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    const ollamaConfig = config as OllamaConfig;\n    this.apiBase =\n      ollamaConfig?.apiBase || process.env['OLLAMA_API_BASE'] || 'http://localhost:11434';\n    this.timeout = ollamaConfig?.timeout || parseInt(process.env['OLLAMA_TIMEOUT'] || '300000');\n    this.retryAttempts =\n      ollamaConfig?.retryAttempts || parseInt(process.env['OLLAMA_RETRY_ATTEMPTS'] || '3');\n    this.retryDelay =\n      ollamaConfig?.retryDelay || parseInt(process.env['OLLAMA_RETRY_DELAY'] || '1000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/api/version`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('Ollama server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/api/tags`, {\n        method: 'GET',\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as { models?: Array<{ name: string }> };\n        this.availableModels = data.models?.map((model) => model.name) || [];\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  override getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    // Convert to Ollama format\n    const prompt = this.messagesToPrompt(messages);\n\n    const payload = {\n      model: selectedModel,\n      prompt: prompt,\n      stream: false,\n      options: {\n        temperature: options?.temperature || 0.7,\n        top_p: options?.topP || 0.95,\n        stop: options?.stopSequences,\n        num_predict: options?.maxTokens || 4096,\n      },\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Ollama API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as { response?: string };\n    return data.response || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    // Convert to Ollama format\n    const prompt = this.messagesToPrompt(messages);\n\n    const payload = {\n      model: selectedModel,\n      prompt: prompt,\n      stream: true,\n      options: {\n        temperature: options?.temperature || 0.7,\n        top_p: options?.topP || 0.95,\n        stop: options?.stopSequences,\n        num_predict: options?.maxTokens || 4096,\n      },\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Ollama API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown as {\n      body?: { getReader(): ReadableStreamDefaultReader<Uint8Array> };\n    }; // Node.js fetch response\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      const running = true;\n      while (running) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim()) {\n            try {\n              const parsed = JSON.parse(line) as Record<string, unknown>;\n              const content = parsed['response'] as string;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n              if (parsed['done']) return;\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  private messagesToPrompt(messages: Message[]): string {\n    // Convert messages to a single prompt for Ollama\n    let prompt = '';\n\n    for (const message of messages) {\n      if (message.role === 'system') {\n        prompt += `System: ${message.content}\\n\\n`;\n      } else if (message.role === 'user') {\n        prompt += `User: ${message.content}\\n\\n`;\n      } else if (message.role === 'assistant') {\n        prompt += `Assistant: ${message.content}\\n\\n`;\n      }\n    }\n\n    prompt += 'Assistant: ';\n    return prompt;\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 8192 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // Ollama specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async pullModel(modelName: string): Promise<void> {\n    const response = await fetch(`${this.apiBase}/api/pull`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name: modelName }),\n      signal: AbortSignal.timeout(600000), // 10 minutes for model download\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to pull model ${modelName}: ${errorData}`);\n    }\n\n    // Wait for pull completion (streaming response)\n    const nodeResponse = response as unknown as {\n      body?: { getReader(): ReadableStreamDefaultReader<Uint8Array> };\n    };\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) return;\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      const running = true;\n      while (running) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim()) {\n            try {\n              const parsed = JSON.parse(line) as Record<string, unknown>;\n              if (parsed['status'] === 'success') return;\n              if (parsed['error']) {\n                throw new Error(`Model pull failed: ${parsed['error']}`);\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async deleteModel(modelName: string): Promise<void> {\n    const response = await fetch(`${this.apiBase}/api/delete`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name: modelName }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Failed to delete model ${modelName}: ${errorData}`);\n    }\n  }\n}\n","import { BaseAIProvider, Message, CompletionOptions, CodeReviewResult } from './ai-provider.js';\nimport fetch from 'node-fetch';\n\ninterface VLLMConfig {\n  apiBase?: string;\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  topK?: number;\n  timeout?: number;\n  stopSequences?: string[];\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n}\n\nexport class VLLMProvider extends BaseAIProvider {\n  readonly name = 'vLLM';\n  readonly models = [\n    'stabilityai/japanese-stablelm-2-instruct-1_6b',\n    'mistralai/Mistral-7B-v0.1',\n    'mistralai/Mistral-7B-Instruct-v0.1',\n    'meta-llama/Llama-2-7b-hf',\n    'meta-llama/Llama-2-7b-chat-hf',\n    'meta-llama/Llama-2-13b-hf',\n    'meta-llama/Llama-2-13b-chat-hf',\n    'codellama/CodeLlama-7b-hf',\n    'codellama/CodeLlama-13b-hf',\n  ];\n\n  private apiBase: string = 'http://localhost:8000/v1';\n  private timeout: number = 120000;\n  private retryAttempts: number = 3;\n  private retryDelay: number = 1000;\n  private isHealthy: boolean = false;\n  private availableModels: string[] = [];\n  private vllmConfig: VLLMConfig = {};\n\n  override async initialize(\n    apiKey: string = 'vllm-local',\n    config?: Record<string, unknown>,\n  ): Promise<void> {\n    await super.initialize(apiKey, config);\n\n    this.vllmConfig = (config as VLLMConfig) || {};\n    this.apiBase =\n      this.vllmConfig.apiBase || process.env['VLLM_API_BASE'] || 'http://localhost:8000/v1';\n    this.timeout = this.vllmConfig.timeout || parseInt(process.env['VLLM_TIMEOUT'] || '120000');\n\n    // Check health and get available models\n    await this.checkHealth();\n    if (this.isHealthy) {\n      await this.fetchAvailableModels();\n    }\n  }\n\n  private async checkHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        signal: AbortSignal.timeout(5000),\n      });\n\n      this.isHealthy = response.ok;\n      return this.isHealthy;\n    } catch {\n      console.warn('vLLM server not reachable');\n      this.isHealthy = false;\n      return false;\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.apiBase}/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = (await response.json()) as { data?: Array<{ id: string }> };\n        this.availableModels = data.data?.map((model) => model.id) || [];\n      }\n    } catch {\n      console.warn('Failed to fetch available models');\n    }\n  }\n\n  override getModels(): string[] {\n    // Return available models if we have them, otherwise return default list\n    return this.availableModels.length > 0 ? this.availableModels : this.models;\n  }\n\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    attempts: number = this.retryAttempts,\n  ): Promise<T> {\n    for (let i = 0; i < attempts; i++) {\n      try {\n        return await fn();\n      } catch (error: unknown) {\n        if (i === attempts - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, this.retryDelay * Math.pow(2, i)));\n      }\n    }\n    throw new Error('Max retry attempts reached');\n  }\n\n  async chat(messages: Message[], model?: string, options?: CompletionOptions): Promise<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || this.vllmConfig.maxTokens || 2048,\n      temperature: options?.temperature || this.vllmConfig.temperature || 0.7,\n      top_p: options?.topP || this.vllmConfig.topP || 0.95,\n      top_k: this.vllmConfig.topK || 50,\n      frequency_penalty: this.vllmConfig.frequencyPenalty || 0,\n      presence_penalty: this.vllmConfig.presencePenalty || 0,\n      stop: options?.stopSequences || this.vllmConfig.stopSequences,\n      stream: false,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`vLLM API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const data = (await response.json()) as { choices?: Array<{ message?: { content?: string } }> };\n    return data.choices?.[0]?.message?.content || '';\n  }\n\n  async *chatStream(\n    messages: Message[],\n    model?: string,\n    options?: CompletionOptions,\n  ): AsyncGenerator<string> {\n    this.ensureInitialized();\n    const selectedModel = model || this.getDefaultModel();\n\n    const payload = {\n      model: selectedModel,\n      messages: messages.map((m) => ({\n        role: m.role,\n        content: m.content,\n      })),\n      max_tokens: options?.maxTokens || this.vllmConfig.maxTokens || 2048,\n      temperature: options?.temperature || this.vllmConfig.temperature || 0.7,\n      top_p: options?.topP || this.vllmConfig.topP || 0.95,\n      top_k: this.vllmConfig.topK || 50,\n      frequency_penalty: this.vllmConfig.frequencyPenalty || 0,\n      presence_penalty: this.vllmConfig.presencePenalty || 0,\n      stop: options?.stopSequences || this.vllmConfig.stopSequences,\n      stream: true,\n    };\n\n    const makeRequest = async () => {\n      const response = await fetch(`${this.apiBase}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(payload),\n        signal: options?.streamOptions?.signal || AbortSignal.timeout(this.timeout),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`vLLM API error: ${response.statusText} - ${errorData}`);\n      }\n\n      return response;\n    };\n\n    const response = await this.retryWithBackoff(makeRequest);\n    const nodeResponse = response as unknown as {\n      body?: { getReader(): ReadableStreamDefaultReader<Uint8Array> };\n    };\n    const reader = nodeResponse.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n\n            try {\n              const parsed = JSON.parse(data) as {\n                choices?: Array<{ delta?: { content?: string } }>;\n              };\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                yield content;\n                if (options?.streamOptions?.onToken) {\n                  options.streamOptions.onToken(content);\n                }\n              }\n            } catch {\n              // Skip invalid JSON\n            }\n          }\n        }\n\n        // Check for abort signal\n        if (options?.streamOptions?.signal?.aborted) {\n          break;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  async generateCode(\n    prompt: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<string> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert ${language} developer. Generate clean, well-commented code based on the user's request. Only return the code without any explanations or markdown formatting.`,\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ];\n\n    return this.chat(messages, model, { temperature: 0.2, maxTokens: 4096 });\n  }\n\n  async reviewCode(\n    code: string,\n    language: string = 'typescript',\n    model?: string,\n  ): Promise<CodeReviewResult> {\n    const messages: Message[] = [\n      {\n        role: 'system',\n        content: `You are an expert code reviewer. Analyze the following ${language} code and provide a detailed review. Format your response as JSON with the following structure:\n{\n  \"issues\": [\n    {\n      \"line\": <line_number>,\n      \"severity\": \"error\" | \"warning\" | \"info\",\n      \"message\": \"<issue description>\",\n      \"suggestion\": \"<optional fix suggestion>\"\n    }\n  ],\n  \"summary\": \"<overall code quality summary>\",\n  \"improvements\": [\"<improvement suggestion 1>\", \"<improvement suggestion 2>\", ...]\n}`,\n      },\n      {\n        role: 'user',\n        content: code,\n      },\n    ];\n\n    const response = await this.chat(messages, model, { temperature: 0.1, maxTokens: 4096 });\n\n    try {\n      return JSON.parse(response) as CodeReviewResult;\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        issues: [],\n        summary: response,\n        improvements: [],\n      };\n    }\n  }\n\n  // vLLM specific methods\n  async isServerRunning(): Promise<boolean> {\n    return await this.checkHealth();\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    await this.fetchAvailableModels();\n    return this.availableModels;\n  }\n\n  async selectModelForTask(task: 'japanese' | 'code' | 'general' | 'fast'): Promise<string> {\n    const availableModels = await this.getAvailableModels();\n\n    switch (task) {\n      case 'japanese': {\n        // Prefer Japanese-specific models\n        const japaneseModels = availableModels.filter(\n          (m) => m.includes('japanese') || m.includes('jp'),\n        );\n        if (japaneseModels.length > 0 && japaneseModels[0]) {\n          return japaneseModels[0];\n        }\n        break;\n      }\n\n      case 'code': {\n        // Prefer code-optimized models\n        const codeModels = availableModels.filter(\n          (m) => m.includes('code') || m.includes('instruct'),\n        );\n        if (codeModels.length > 0 && codeModels[0]) {\n          return codeModels[0];\n        }\n        break;\n      }\n\n      case 'fast': {\n        // Prefer smaller models for speed\n        const smallModels = availableModels.filter(\n          (m) => m.includes('1_6b') || m.includes('1.6b') || m.includes('7b'),\n        );\n        if (smallModels.length > 0 && smallModels[0]) {\n          return smallModels[0];\n        }\n        break;\n      }\n    }\n\n    // Default to first available model\n    return availableModels[0] || this.getDefaultModel();\n  }\n}\n","/**\n * AI Provider Manager\n * Manages all AI providers and their availability\n */\n\nimport { IAIProvider } from './ai-provider';\nimport { PriorityMode, ModelInfo } from '../types/index';\nimport { OpenAIProvider } from './openai-provider';\nimport { AnthropicProvider } from './anthropic-provider';\nimport { GoogleAIProvider } from './google-ai-provider';\n// import { GroqProvider } from './groq-provider'; // Uses BaseProvider, not IAIProvider\nimport { GrokProvider } from './grok-provider';\nimport { LMStudioProvider } from './lmstudio-provider';\nimport { OllamaProvider } from './ollama-provider';\nimport { VLLMProvider } from './vllm-provider';\nimport { ConfigManager } from '../config/config-manager';\n\nexport class AIProviderManager {\n  private providers: Map<string, IAIProvider> = new Map();\n  private availableProviders: Set<string> = new Set();\n  private config: ConfigManager;\n\n  constructor(config: ConfigManager) {\n    this.config = config;\n  }\n\n  async initialize(): Promise<void> {\n    // Initialize all providers based on configuration\n    await this.initializeProviders();\n    await this.checkAvailability();\n  }\n\n  private async initializeProviders(): Promise<void> {\n    const apiKeys = this.config.get('apiKeys', {} as Record<string, string>) || {};\n    const localProviders = this.config.get('localProviders', {} as Record<string, boolean>) || {};\n\n    // Cloud providers\n    if (apiKeys && apiKeys['OPENAI_API_KEY']) {\n      const provider = new OpenAIProvider();\n      await provider.initialize(apiKeys['OPENAI_API_KEY']);\n      this.providers.set('openai', provider);\n    }\n\n    if (apiKeys && apiKeys['ANTHROPIC_API_KEY']) {\n      const provider = new AnthropicProvider();\n      await provider.initialize(apiKeys['ANTHROPIC_API_KEY']);\n      this.providers.set('anthropic', provider);\n    }\n\n    if (apiKeys && (apiKeys['GOOGLE_API_KEY'] || apiKeys['GEMINI_API_KEY'])) {\n      const provider = new GoogleAIProvider();\n      await provider.initialize(apiKeys['GOOGLE_API_KEY'] || apiKeys['GEMINI_API_KEY'] || '');\n      this.providers.set('google', provider);\n    }\n\n    // Note: GroqProvider uses BaseProvider, not IAIProvider\n    // if (apiKeys['GROQ_API_KEY']) {\n    //   const provider = new GroqProvider();\n    //   await provider.initialize(apiKeys['GROQ_API_KEY']);\n    //   this.providers.set('groq', provider);\n    // }\n\n    if (apiKeys && apiKeys['GROK_API_KEY']) {\n      const provider = new GrokProvider();\n      await provider.initialize(apiKeys['GROK_API_KEY']);\n      this.providers.set('grok', provider);\n    }\n\n    // Local providers\n    if (localProviders && localProviders['lmstudio'] !== false) {\n      const provider = new LMStudioProvider();\n      await provider.initialize('lmstudio');\n      this.providers.set('lmstudio', provider);\n    }\n\n    if (localProviders && localProviders['ollama'] !== false) {\n      const provider = new OllamaProvider();\n      await provider.initialize('ollama');\n      this.providers.set('ollama', provider);\n    }\n\n    if (localProviders && localProviders['vllm'] !== false) {\n      const provider = new VLLMProvider();\n      await provider.initialize('vllm');\n      this.providers.set('vllm', provider);\n    }\n  }\n\n  private async checkAvailability(): Promise<void> {\n    this.availableProviders.clear();\n\n    const checks = Array.from(this.providers.entries()).map(async ([name, provider]) => {\n      try {\n        const isAvailable = await (provider.validateConnection?.() ?? Promise.resolve(true));\n        if (isAvailable) {\n          this.availableProviders.add(name);\n        }\n      } catch (error: unknown) {\n        // Provider not available\n      }\n    });\n\n    await Promise.allSettled(checks);\n  }\n\n  getProvider(name: string): IAIProvider | undefined {\n    return this.providers.get(name);\n  }\n\n  getAvailableProviders(): string[] {\n    return Array.from(this.availableProviders);\n  }\n\n  async getAvailableModels(): Promise<ModelInfo[]> {\n    const allModels: ModelInfo[] = [];\n\n    for (const providerName of this.availableProviders) {\n      const provider = this.providers.get(providerName);\n      if (provider) {\n        try {\n          const models = await provider.getModels();\n          // Convert string array to ModelInfo array\n          const modelInfos: ModelInfo[] = models.map((modelName) => ({\n            id: `${providerName}-${modelName}`,\n            name: modelName,\n            provider: providerName,\n            description: `${modelName} from ${providerName}`,\n            contextLength: 8192, // Default value\n            capabilities: ['text', 'code'], // Default capabilities\n            available: true,\n            recommendedFor: ['general'],\n          }));\n          allModels.push(...modelInfos);\n        } catch (error: unknown) {\n          // Skip provider with model loading issues\n        }\n      }\n    }\n\n    return allModels;\n  }\n\n  selectOptimalProvider(\n    _taskType?: string,\n    priorityMode: PriorityMode = 'auto',\n  ): string | undefined {\n    const available = this.getAvailableProviders();\n    if (available.length === 0) return undefined;\n\n    const priorityOrder = this.getPriorityOrder(priorityMode);\n\n    // Debug logging\n    if (process.env['DEBUG']) {\n      console.log('Available providers:', available);\n      console.log('Priority order:', priorityOrder);\n    }\n\n    // Find the first available provider in priority order\n    for (const providerName of priorityOrder) {\n      if (available.includes(providerName)) {\n        if (process.env['DEBUG']) {\n          console.log('Selected provider:', providerName);\n        }\n        return providerName;\n      }\n    }\n\n    // Fallback to first available\n    return available[0];\n  }\n\n  private getPriorityOrder(mode: PriorityMode): string[] {\n    switch (mode) {\n      case 'privacy-first':\n        return ['lmstudio', 'ollama', 'vllm', 'anthropic', 'openai', 'google', 'groq', 'grok'];\n\n      case 'performance':\n        return ['groq', 'grok', 'openai', 'anthropic', 'google', 'ollama', 'lmstudio', 'vllm'];\n\n      case 'cost-effective':\n        return ['google', 'groq', 'openai', 'anthropic', 'grok', 'ollama', 'vllm', 'lmstudio'];\n\n      case 'auto':\n      default:\n        // Cloud providers first for better reliability\n        return ['openai', 'anthropic', 'google', 'groq', 'grok', 'lmstudio', 'ollama', 'vllm'];\n    }\n  }\n\n  async refreshAvailability(): Promise<void> {\n    await this.checkAvailability();\n  }\n\n  async close(): Promise<void> {\n    // Clean up any connections if needed\n    this.providers.clear();\n    this.availableProviders.clear();\n  }\n\n  // Health check for monitoring\n  async getProviderHealth(): Promise<Record<string, boolean>> {\n    const health: Record<string, boolean> = {};\n\n    const checks = Array.from(this.providers.entries()).map(async ([name, provider]) => {\n      try {\n        // Check if provider has health check capability\n        if ('isAvailable' in provider && typeof provider.isAvailable === 'function') {\n          health[name] = await (\n            provider as unknown as { isAvailable(): Promise<boolean> }\n          ).isAvailable();\n        } else {\n          // Fallback: consider provider healthy if it's initialized\n          health[name] = true;\n        }\n      } catch {\n        health[name] = false;\n      }\n    });\n\n    await Promise.allSettled(checks);\n    return health;\n  }\n}\n","/**\n * Model Configurations\n * Static model definitions and routing rules\n */\n\nimport { TaskType } from '../types';\n\nexport const TASK_ROUTING: Record<TaskType, string[]> = {\n  coding: ['gpt-5', 'claude-sonnet-4-20250514', 'qwen2.5:32b', 'codellama:13b'],\n  reasoning: ['o1', 'claude-opus-4-1-20250805', 'gpt-5', 'llama-3.3-70b-versatile'],\n  vision: ['gpt-4o', 'claude-3-5-sonnet-20241022', 'qwen2.5-vl:7b', 'llama-3.2-90b-vision-preview'],\n  quick_tasks: ['gpt-5-mini', 'gemini-2.5-flash', 'claude-3-5-haiku-20241022', 'llama3.2:3b'],\n  cost_effective: [\n    'gemini-2.5-flash',\n    'claude-3-5-haiku-20241022',\n    'gpt-4o-mini',\n    'mixtral-8x7b-32768',\n  ],\n  privacy: [\n    'gpt-oss-120b',\n    'qwen2.5:32b',\n    'japanese-stablelm-2-instruct-1_6b',\n    'mistral-7b-instruct',\n  ],\n  multilingual: ['qwen2.5:32b', 'qwen2.5-vl:7b', 'gemini-2.5-pro', 'mixtral-8x7b-32768'],\n  current_events: ['grok-2', 'gemini-2.5-pro', 'gpt-5', 'claude-opus-4-1-20250805'],\n  chat: ['gpt-4o-mini', 'claude-3-5-haiku-20241022', 'gemini-2.5-flash', 'mixtral-8x7b-32768'],\n};\n\nexport const PROVIDER_PRIORITY_MODES = {\n  'privacy-first': ['lmstudio', 'ollama', 'vllm', 'anthropic', 'openai', 'google', 'groq', 'grok'],\n  performance: ['groq', 'grok', 'openai', 'anthropic', 'google', 'ollama', 'lmstudio', 'vllm'],\n  'cost-effective': ['google', 'groq', 'openai', 'anthropic', 'grok', 'ollama', 'vllm', 'lmstudio'],\n  balanced: ['openai', 'anthropic', 'google', 'groq', 'grok', 'lmstudio', 'ollama', 'vllm'],\n};\n\nexport function getRecommendedModel(\n  taskType: TaskType,\n  availableModels: string[],\n): string | undefined {\n  const recommendations = TASK_ROUTING[taskType] || TASK_ROUTING.chat;\n\n  for (const modelId of recommendations) {\n    if (availableModels.includes(modelId)) {\n      return modelId;\n    }\n  }\n\n  // Fallback to first available model\n  return availableModels[0];\n}\n\nexport function isLocalProvider(providerName: string): boolean {\n  return ['lmstudio', 'ollama', 'vllm'].includes(providerName);\n}\n\nexport function isCloudProvider(providerName: string): boolean {\n  return ['openai', 'anthropic', 'google', 'groq', 'grok'].includes(providerName);\n}\n","/**\n * Intelligent Router Service\n * Routes AI requests to optimal providers based on task type and priority\n */\n\nimport { AIRequest, AIResponse, TaskType, PriorityMode } from '../types';\nimport { AIProviderManager } from '../providers/manager';\nimport { ConfigManager } from '../config/config-manager';\nimport { getRecommendedModel } from '../config/models';\n\nexport class IntelligentRouter {\n  private providerManager: AIProviderManager;\n  private config: ConfigManager;\n\n  constructor(providerManager: AIProviderManager, config: ConfigManager) {\n    this.providerManager = providerManager;\n    this.config = config;\n  }\n\n  async route(request: AIRequest): Promise<AIResponse> {\n    // 1. Determine task type if not specified\n    const taskType = request.taskType || this.detectTaskType(request);\n\n    // 2. Get optimal provider and model\n    const { providerName, modelId } = await this.selectOptimal(taskType, request);\n\n    // 3. Get provider instance\n    const provider = this.providerManager.getProvider(providerName);\n    if (!provider) {\n      throw new Error(`Provider ${providerName} not available`);\n    }\n\n    // 4. Execute request\n    let response: AIResponse | string;\n    try {\n      response = await provider.chat(request.messages);\n    } catch {\n      // Fallback for providers with different signatures\n      response = await (\n        provider as { chat: (messages: unknown, modelId: string) => Promise<string> }\n      ).chat(request.messages, modelId);\n    }\n    if (typeof response === 'string') {\n      return {\n        content: response,\n        model: modelId,\n        provider: providerName,\n      } as AIResponse;\n    }\n    return response;\n  }\n\n  async routeVision(image: Buffer, prompt: string): Promise<AIResponse> {\n    const availableProviders = this.providerManager.getAvailableProviders();\n\n    // Priority order for vision tasks\n    const visionProviders = ['openai', 'anthropic', 'ollama', 'groq'];\n\n    for (const providerName of visionProviders) {\n      if (availableProviders.includes(providerName)) {\n        const provider = this.providerManager.getProvider(providerName);\n        if (provider?.vision) {\n          try {\n            const visionResponse = await provider.vision(image, prompt);\n            return {\n              content: visionResponse.description,\n              model: 'vision-model',\n              provider: providerName,\n            } as AIResponse;\n          } catch (error: unknown) {\n            // Try next provider\n            continue;\n          }\n        }\n      }\n    }\n\n    throw new Error('No vision-capable providers available');\n  }\n\n  async routeCode(prompt: string, language?: string): Promise<AIResponse> {\n    const request: AIRequest = {\n      messages: [\n        {\n          role: 'user',\n          content: language ? `Generate ${language} code: ${prompt}` : `Generate code: ${prompt}`,\n        },\n      ],\n      taskType: 'coding',\n    };\n\n    return this.route(request);\n  }\n\n  private detectTaskType(request: AIRequest): TaskType {\n    const content = request.messages\n      .map((m) => m.content)\n      .join(' ')\n      .toLowerCase();\n\n    // Simple keyword-based detection\n    if (\n      this.containsKeywords(content, [\n        'code',\n        'function',\n        'class',\n        'programming',\n        'debug',\n        'implement',\n      ])\n    ) {\n      return 'coding';\n    }\n\n    if (\n      this.containsKeywords(content, ['analyze', 'reason', 'solve', 'logic', 'problem', 'math'])\n    ) {\n      return 'reasoning';\n    }\n\n    if (this.containsKeywords(content, ['image', 'picture', 'visual', 'see', 'look', 'describe'])) {\n      return 'vision';\n    }\n\n    if (this.containsKeywords(content, ['quick', 'fast', 'simple', 'brief'])) {\n      return 'quick_tasks';\n    }\n\n    if (this.containsKeywords(content, ['cheap', 'cost', 'budget', 'affordable'])) {\n      return 'cost_effective';\n    }\n\n    if (this.containsKeywords(content, ['private', 'local', 'offline', 'secure'])) {\n      return 'privacy';\n    }\n\n    if (this.containsKeywords(content, ['japanese', 'chinese', 'korean', 'translate'])) {\n      return 'multilingual';\n    }\n\n    if (this.containsKeywords(content, ['news', 'current', 'today', 'recent', 'latest'])) {\n      return 'current_events';\n    }\n\n    return 'chat';\n  }\n\n  private containsKeywords(text: string, keywords: string[]): boolean {\n    return keywords.some((keyword) => text.includes(keyword));\n  }\n\n  private async selectOptimal(\n    taskType: TaskType,\n    request: AIRequest,\n  ): Promise<{ providerName: string; modelId: string }> {\n    // 1. If provider/model specified, use that\n    if (request.provider) {\n      const availableProviders = this.providerManager.getAvailableProviders();\n      if (!availableProviders.includes(request.provider)) {\n        throw new Error(`Requested provider ${request.provider} not available`);\n      }\n\n      return {\n        providerName: request.provider,\n        modelId: request.model || (await this.getDefaultModelForProvider(request.provider)),\n      };\n    }\n\n    // 2. Get priority mode\n    const priorityMode = this.config.get('priority', 'auto') as PriorityMode;\n\n    // 3. Select optimal provider\n    const providerName = this.providerManager.selectOptimalProvider(taskType, priorityMode);\n    if (!providerName) {\n      throw new Error('No AI providers available');\n    }\n\n    // 4. Get recommended model for task\n    const availableModels = await this.getModelsForProvider(providerName);\n    const modelId =\n      request.model || getRecommendedModel(taskType, availableModels) || availableModels[0];\n\n    if (!modelId) {\n      throw new Error(`No models available for provider ${providerName}`);\n    }\n\n    return { providerName, modelId };\n  }\n\n  private async getModelsForProvider(providerName: string): Promise<string[]> {\n    const provider = this.providerManager.getProvider(providerName);\n    if (!provider) return [];\n\n    try {\n      const models = await provider.getModels();\n      // Handle both string[] and object[] responses\n      if (typeof models[0] === 'string') {\n        return models as string[];\n      }\n      return (models as unknown as Array<{ available: boolean; id: string }>)\n        .filter((m) => m.available)\n        .map((m) => m.id);\n    } catch {\n      return [];\n    }\n  }\n\n  private async getDefaultModelForProvider(providerName: string): Promise<string> {\n    const models = await this.getModelsForProvider(providerName);\n    return models[0] || 'default';\n  }\n\n  updatePriorityMode(mode: PriorityMode): void {\n    this.config.set('priority', mode);\n  }\n}\n","/**\n * MARIA CODE Health Monitoring System\n * Real-time monitoring of AI providers and system health\n */\n\nimport { EventEmitter } from 'events';\nimport { IAIProvider } from '../providers/ai-provider.js';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { homedir } from 'os';\n\nexport interface HealthStatus {\n  status: 'healthy' | 'degraded' | 'critical' | 'offline';\n  uptime: number; // milliseconds\n  lastCheck: Date;\n  responseTime: number;\n  error?: string;\n}\n\nexport interface ProviderHealth {\n  name: string;\n  type: 'local' | 'cloud';\n  health: HealthStatus;\n  metadata: {\n    models: string[];\n    endpoint?: string;\n    lastRequest?: Date;\n    totalRequests: number;\n    errorRate: number;\n    averageResponseTime: number;\n  };\n}\n\nexport interface SystemHealth {\n  overall: 'healthy' | 'degraded' | 'critical';\n  providers: ProviderHealth[];\n  recommendations: HealthRecommendation[];\n  lastUpdate: Date;\n  uptime: number;\n}\n\nexport interface HealthRecommendation {\n  type: 'warning' | 'error' | 'info' | 'action';\n  message: string;\n  provider?: string;\n  action?: {\n    type: 'restart' | 'reconfigure' | 'update' | 'contact-support';\n    command?: string;\n  };\n}\n\nexport interface HealthCheckConfig {\n  interval: number; // milliseconds\n  timeout: number; // milliseconds\n  retryAttempts: number;\n  thresholds: {\n    responseTimeWarning: number;\n    responseTimeCritical: number;\n    errorRateWarning: number;\n    errorRateCritical: number;\n  };\n}\n\nexport class HealthMonitor extends EventEmitter {\n  private providers: Map<string, IAIProvider> = new Map();\n  private healthData: Map<string, ProviderHealth> = new Map();\n  private config: HealthCheckConfig;\n  private checkInterval?: NodeJS.Timeout;\n  private isRunning = false;\n  private startTime = Date.now();\n\n  constructor(config?: Partial<HealthCheckConfig>) {\n    super();\n\n    this.config = {\n      interval: 60000, // 1 minute\n      timeout: 10000, // 10 seconds\n      retryAttempts: 3,\n      thresholds: {\n        responseTimeWarning: 2000, // 2 seconds\n        responseTimeCritical: 5000, // 5 seconds\n        errorRateWarning: 0.1, // 10%\n        errorRateCritical: 0.25, // 25%\n      },\n      ...config,\n    };\n  }\n\n  /**\n   * Register providers to monitor\n   */\n  registerProvider(name: string, provider: IAIProvider): void {\n    this.providers.set(name, provider);\n\n    // Initialize health data\n    this.healthData.set(name, {\n      name,\n      type: this.isLocalProvider(name) ? 'local' : 'cloud',\n      health: {\n        status: 'offline',\n        uptime: 0,\n        lastCheck: new Date(),\n        responseTime: 0,\n      },\n      metadata: {\n        models: provider.getModels(),\n        totalRequests: 0,\n        errorRate: 0,\n        averageResponseTime: 0,\n      },\n    });\n  }\n\n  /**\n   * Start health monitoring\n   */\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.startTime = Date.now();\n\n    // Initial health check\n    this.performHealthCheck();\n\n    // Schedule periodic checks\n    this.checkInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.interval);\n\n    this.emit('monitoring-started');\n  }\n\n  /**\n   * Stop health monitoring\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = undefined;\n    }\n\n    this.isRunning = false;\n    this.emit('monitoring-stopped');\n  }\n\n  /**\n   * Perform health check on all providers\n   */\n  private async performHealthCheck(): Promise<void> {\n    const promises = Array.from(this.providers.entries()).map(([name, provider]) =>\n      this.checkProviderHealth(name, provider),\n    );\n\n    await Promise.allSettled(promises);\n\n    // Update overall system health\n    const systemHealth = this.getSystemHealth();\n    this.emit('health-updated', systemHealth);\n\n    // Save health data\n    await this.saveHealthData();\n  }\n\n  /**\n   * Check health of individual provider\n   */\n  private async checkProviderHealth(name: string, provider: IAIProvider): Promise<void> {\n    const startTime = Date.now();\n    let attempts = 0;\n    let lastError: Error | undefined;\n\n    const currentHealth = this.healthData.get(name);\n    if (!currentHealth) return;\n\n    while (attempts < this.config.retryAttempts) {\n      try {\n        attempts++;\n\n        // Test basic connectivity\n        if (provider.validateConnection) {\n          await Promise.race([\n            provider.validateConnection(),\n            new Promise((_, reject) =>\n              setTimeout(() => reject(new Error('Timeout')), this.config.timeout),\n            ),\n          ]);\n        } else {\n          // Fallback: simple chat test\n          await Promise.race([\n            provider.chat([{ role: 'user', content: 'ping' }]),\n            new Promise((_, reject) =>\n              setTimeout(() => reject(new Error('Timeout')), this.config.timeout),\n            ),\n          ]);\n        }\n\n        // Success\n        const responseTime = Date.now() - startTime;\n        const now = new Date();\n\n        currentHealth.health = {\n          status: this.determineStatus(responseTime, currentHealth.metadata.errorRate),\n          uptime: now.getTime() - startTime,\n          lastCheck: now,\n          responseTime,\n        };\n\n        // Update metadata\n        this.updateMetrics(name, responseTime, true);\n\n        this.emit('provider-healthy', name, currentHealth);\n        break;\n      } catch (error: unknown) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n\n        if (attempts >= this.config.retryAttempts) {\n          // All attempts failed\n          const now = new Date();\n          currentHealth.health = {\n            status: 'offline',\n            uptime: 0,\n            lastCheck: now,\n            responseTime: Date.now() - startTime,\n            error: lastError.message,\n          };\n\n          this.updateMetrics(name, Date.now() - startTime, false);\n          this.emit('provider-unhealthy', name, currentHealth, lastError);\n        } else {\n          // Retry\n          await new Promise((resolve) => setTimeout(resolve, 1000 * attempts));\n        }\n      }\n    }\n\n    this.healthData.set(name, currentHealth);\n  }\n\n  /**\n   * Determine status based on response time and error rate\n   */\n  private determineStatus(responseTime: number, errorRate: number): HealthStatus['status'] {\n    if (\n      responseTime > this.config.thresholds.responseTimeCritical ||\n      errorRate > this.config.thresholds.errorRateCritical\n    ) {\n      return 'critical';\n    }\n\n    if (\n      responseTime > this.config.thresholds.responseTimeWarning ||\n      errorRate > this.config.thresholds.errorRateWarning\n    ) {\n      return 'degraded';\n    }\n\n    return 'healthy';\n  }\n\n  /**\n   * Update provider metrics\n   */\n  private updateMetrics(name: string, responseTime: number, success: boolean): void {\n    const health = this.healthData.get(name);\n    if (!health) return;\n\n    const metadata = health.metadata;\n    metadata.totalRequests++;\n\n    // Update average response time\n    metadata.averageResponseTime =\n      (metadata.averageResponseTime * (metadata.totalRequests - 1) + responseTime) /\n      metadata.totalRequests;\n\n    // Update error rate\n    const errorCount = Math.round(metadata.errorRate * (metadata.totalRequests - 1));\n    const newErrorCount = errorCount + (success ? 0 : 1);\n    metadata.errorRate = newErrorCount / metadata.totalRequests;\n\n    metadata.lastRequest = new Date();\n  }\n\n  /**\n   * Get overall system health\n   */\n  getSystemHealth(): SystemHealth {\n    const providers = Array.from(this.healthData.values());\n    const recommendations: HealthRecommendation[] = [];\n\n    // Determine overall status\n    let overall: SystemHealth['overall'] = 'healthy';\n\n    const offlineProviders = providers.filter((p) => p.health.status === 'offline');\n    const criticalProviders = providers.filter((p) => p.health.status === 'critical');\n    const degradedProviders = providers.filter((p) => p.health.status === 'degraded');\n\n    if (offlineProviders.length === providers.length) {\n      overall = 'critical';\n      recommendations.push({\n        type: 'error',\n        message: 'All providers are offline. Check your internet connection and API keys.',\n        action: { type: 'reconfigure' },\n      });\n    } else if (criticalProviders.length > 0 || offlineProviders.length > providers.length / 2) {\n      overall = 'critical';\n    } else if (degradedProviders.length > 0) {\n      overall = 'degraded';\n    }\n\n    // Generate recommendations\n    recommendations.push(...this.generateRecommendations(providers));\n\n    return {\n      overall,\n      providers,\n      recommendations,\n      lastUpdate: new Date(),\n      uptime: Date.now() - this.startTime,\n    };\n  }\n\n  /**\n   * Generate health recommendations\n   */\n  private generateRecommendations(providers: ProviderHealth[]): HealthRecommendation[] {\n    const recommendations: HealthRecommendation[] = [];\n\n    for (const provider of providers) {\n      const { name, health, metadata } = provider;\n\n      // Offline provider\n      if (health.status === 'offline') {\n        if (provider.type === 'local') {\n          recommendations.push({\n            type: 'action',\n            provider: name,\n            message: `${name} is offline. Try restarting the local server.`,\n            action: {\n              type: 'restart',\n              command: this.getRestartCommand(name),\n            },\n          });\n        } else {\n          recommendations.push({\n            type: 'warning',\n            provider: name,\n            message: `${name} is offline. Check API key and network connectivity.`,\n          });\n        }\n      }\n\n      // High response time\n      if (health.responseTime > this.config.thresholds.responseTimeCritical) {\n        recommendations.push({\n          type: 'warning',\n          provider: name,\n          message: `${name} has very high response time (${health.responseTime}ms). Consider switching to a faster provider.`,\n        });\n      }\n\n      // High error rate\n      if (metadata.errorRate > this.config.thresholds.errorRateWarning) {\n        recommendations.push({\n          type: 'warning',\n          provider: name,\n          message: `${name} has high error rate (${(metadata.errorRate * 100).toFixed(1)}%). Check configuration and quotas.`,\n        });\n      }\n\n      // No models available\n      if (metadata.models.length === 0) {\n        recommendations.push({\n          type: 'info',\n          provider: name,\n          message: `${name} has no models configured. Add models to enable functionality.`,\n          action: { type: 'reconfigure' },\n        });\n      }\n    }\n\n    // General recommendations\n    const healthyProviders = providers.filter((p) => p.health.status === 'healthy');\n    if (healthyProviders.length === 0) {\n      recommendations.push({\n        type: 'error',\n        message: 'No healthy providers available. System functionality is severely limited.',\n        action: { type: 'contact-support' },\n      });\n    } else if (healthyProviders.length === 1) {\n      recommendations.push({\n        type: 'info',\n        message:\n          'Only one healthy provider available. Consider setting up additional providers for redundancy.',\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get restart command for local provider\n   */\n  private getRestartCommand(providerName: string): string {\n    switch (providerName) {\n      case 'lmstudio':\n        return 'open -a \"LM Studio\"';\n      case 'ollama':\n        return 'ollama serve';\n      case 'vllm':\n        return 'python -m vllm.entrypoints.api_server';\n      default:\n        return `# Restart ${providerName} manually`;\n    }\n  }\n\n  /**\n   * Save health data to disk\n   */\n  private async saveHealthData(): Promise<void> {\n    try {\n      const healthDir = join(homedir(), '.maria', 'health');\n      await fs.mkdir(healthDir, { recursive: true });\n\n      const systemHealth = this.getSystemHealth();\n      const healthFile = join(healthDir, 'system-health.json');\n\n      await fs.writeFile(\n        healthFile,\n        JSON.stringify(\n          {\n            ...systemHealth,\n            config: this.config,\n          },\n          null,\n          2,\n        ),\n      );\n    } catch (error: unknown) {\n      this.emit('error', new Error(`Failed to save health data: ${error}`));\n    }\n  }\n\n  /**\n   * Load health data from disk\n   */\n  async loadHealthData(): Promise<SystemHealth | null> {\n    try {\n      const healthFile = join(homedir(), '.maria', 'health', 'system-health.json');\n      const data = await fs.readFile(healthFile, 'utf8');\n      const parsed = JSON.parse(data) as Record<string, unknown>;\n\n      return {\n        overall: parsed['overall'] as 'healthy' | 'degraded' | 'critical',\n        providers: parsed['providers'] as ProviderHealth[],\n        recommendations: parsed['recommendations'] as HealthRecommendation[],\n        lastUpdate: new Date(parsed['lastUpdate'] as string),\n        uptime: parsed['uptime'] as number,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get provider health status\n   */\n  getProviderHealth(name: string): ProviderHealth | null {\n    return this.healthData.get(name) || null;\n  }\n\n  /**\n   * Get all provider health data\n   */\n  getAllProviderHealth(): ProviderHealth[] {\n    return Array.from(this.healthData.values());\n  }\n\n  /**\n   * Check if provider is local\n   */\n  private isLocalProvider(name: string): boolean {\n    return ['lmstudio', 'ollama', 'vllm'].includes(name);\n  }\n\n  /**\n   * Update monitoring configuration\n   */\n  updateConfig(config: Partial<HealthCheckConfig>): void {\n    this.config = { ...this.config, ...config };\n\n    // Restart monitoring with new config\n    if (this.isRunning) {\n      this.stop();\n      this.start();\n    }\n  }\n\n  /**\n   * Force health check\n   */\n  async forceHealthCheck(): Promise<SystemHealth> {\n    await this.performHealthCheck();\n    return this.getSystemHealth();\n  }\n\n  /**\n   * Get monitoring statistics\n   */\n  getStatistics(): Record<string, unknown> {\n    const providers = Array.from(this.healthData.values());\n\n    return {\n      totalProviders: providers.length,\n      healthyProviders: providers.filter((p) => p.health.status === 'healthy').length,\n      degradedProviders: providers.filter((p) => p.health.status === 'degraded').length,\n      criticalProviders: providers.filter((p) => p.health.status === 'critical').length,\n      offlineProviders: providers.filter((p) => p.health.status === 'offline').length,\n      totalRequests: providers.reduce((sum, p) => sum + p.metadata.totalRequests, 0),\n      averageResponseTime:\n        providers.reduce((sum, p) => sum + p.metadata.averageResponseTime, 0) / providers.length ||\n        0,\n      averageErrorRate:\n        providers.reduce((sum, p) => sum + p.metadata.errorRate, 0) / providers.length || 0,\n      uptime: Date.now() - this.startTime,\n      isRunning: this.isRunning,\n    };\n  }\n}\n\nexport default HealthMonitor;\n","/**\n * ESM/CJS Import Helper\n * Provides safe dynamic imports with fallback compatibility\n */\n\n/**\n * Safe dynamic import with CJS fallback\n * @param specifier Module specifier to import\n * @returns Promise that resolves to the imported module\n */\nexport async function safeDynamicImport<T = any>(specifier: string): Promise<T> {\n  try {\n    // First try dynamic import (ESM)\n    const module = await import(specifier);\n    return module.default || module;\n  } catch (importError) {\n    try {\n      // Fallback to require for CJS modules\n      const require =\n        (global as any).__require ||\n        (globalThis as any).require ||\n        (process as any).mainModule?.require;\n      if (!require) {\n        throw new Error('CommonJS require not available');\n      }\n      return require(specifier);\n    } catch (requireError) {\n      // If both fail, throw the original import error\n      throw importError;\n    }\n  }\n}\n\n/**\n * Import Node.js built-in modules safely\n * @param moduleName Node.js built-in module name (e.g., 'fs', 'path')\n * @returns Promise that resolves to the module\n */\nexport async function importNodeBuiltin<T = any>(moduleName: string): Promise<T> {\n  return safeDynamicImport(`node:${moduleName}`).catch(() => safeDynamicImport(moduleName));\n}\n\n/**\n * Import React/Ink components safely\n * @param specifier Module specifier\n * @returns Promise that resolves to the module\n */\nexport async function importReactComponent<T = any>(specifier: string): Promise<T> {\n  try {\n    const module = await safeDynamicImport(specifier);\n    return module;\n  } catch (error) {\n    console.warn(`Failed to load React component ${specifier}:`, error);\n    throw new Error(`React component ${specifier} is not available in this environment`);\n  }\n}\n\n/**\n * Check if a module can be imported safely\n * @param specifier Module specifier\n * @returns Promise that resolves to true if module can be imported\n */\nexport async function canImport(specifier: string): Promise<boolean> {\n  try {\n    await safeDynamicImport(specifier);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/**\n * Configuration Manager\n * Manages MARIA configuration settings\n */\n\nimport { PriorityMode, Config } from '../types';\nimport { MariaAIConfig } from '../maria-ai';\n\nexport class ConfigManager {\n  private config: Partial<Config>;\n\n  constructor(initialConfig: MariaAIConfig = {}) {\n    this.config = this.loadDefaultConfig();\n    this.mergeConfig(initialConfig);\n  }\n\n  private loadDefaultConfig(): Partial<Config> {\n    return {\n      priority: 'privacy-first',\n      providers: {},\n      autoStart: true,\n      healthMonitoring: true,\n      language: 'auto',\n      offlineMode: false,\n    };\n  }\n\n  private mergeConfig(newConfig: MariaAIConfig): void {\n    if (newConfig.priority) {\n      this.config['priority'] = newConfig.priority;\n    }\n\n    if (newConfig.apiKeys) {\n      // Store API keys for provider initialization\n      this.set('apiKeys', newConfig.apiKeys);\n    }\n\n    if (newConfig.localProviders) {\n      this.set('localProviders', newConfig.localProviders);\n    }\n\n    if (newConfig.autoStart !== undefined) {\n      this.config['autoStart'] = newConfig.autoStart;\n    }\n\n    if (newConfig.healthMonitoring !== undefined) {\n      this.config['healthMonitoring'] = newConfig.healthMonitoring;\n    }\n\n    if (newConfig.enabledProviders) {\n      this.set('enabledProviders', newConfig.enabledProviders);\n    }\n  }\n\n  get<T>(key: string, defaultValue?: T): T | undefined {\n    const value = (this.config as Record<string, unknown>)[key] as T;\n    return value !== undefined ? value : defaultValue;\n  }\n\n  set(key: string, value: unknown): void {\n    (this.config as Record<string, unknown>)[key] = value;\n  }\n\n  getAll(): Partial<Config> {\n    return { ...this.config };\n  }\n\n  // Load configuration from environment variables\n  static fromEnvironment(): ConfigManager {\n    const config: MariaAIConfig = {\n      priority: (process.env['MARIA_PRIORITY'] as PriorityMode) || 'privacy-first',\n      apiKeys: {\n        OPENAI_API_KEY: process.env['OPENAI_API_KEY'] || '',\n        ANTHROPIC_API_KEY: process.env['ANTHROPIC_API_KEY'] || '',\n        GOOGLE_API_KEY: process.env['GOOGLE_API_KEY'] || process.env['GEMINI_API_KEY'] || '',\n        GROQ_API_KEY: process.env['GROQ_API_KEY'] || '',\n        GROK_API_KEY: process.env['GROK_API_KEY'] || '',\n      },\n      localProviders: {\n        lmstudio: process.env['LMSTUDIO_ENABLED'] !== 'false',\n        ollama: process.env['OLLAMA_ENABLED'] !== 'false',\n        vllm: process.env['VLLM_ENABLED'] !== 'false',\n      },\n      autoStart: process.env['AUTO_START_LLMS'] !== 'false',\n      healthMonitoring: process.env['HEALTH_MONITORING'] !== 'false',\n    };\n\n    return new ConfigManager(config);\n  }\n\n  // Save configuration to file (for CLI usage)\n  async save(configPath?: string): Promise<void> {\n    const { importNodeBuiltin, safeDynamicImport } = await import('../utils/import-helper.js');\n    const fs = await safeDynamicImport('fs-extra').catch(() => importNodeBuiltin('fs'));\n    const path = await importNodeBuiltin('path');\n    const os = await importNodeBuiltin('os');\n\n    const targetPath = configPath || path.join(os.homedir(), '.maria', 'config.json');\n\n    // Ensure directory exists\n    await fs.ensureDir(path.dirname(targetPath));\n\n    // Save configuration\n    await fs.writeJson(targetPath, this.config, { spaces: 2 });\n  }\n\n  // Load configuration from file\n  static async load(configPath?: string): Promise<ConfigManager> {\n    const { importNodeBuiltin, safeDynamicImport } = await import('../utils/import-helper.js');\n    const fs = await safeDynamicImport('fs-extra').catch(() => importNodeBuiltin('fs'));\n    const path = await importNodeBuiltin('path');\n    const os = await importNodeBuiltin('os');\n\n    const targetPath = configPath || path.join(os.homedir(), '.maria', 'config.json');\n\n    if (await fs.pathExists(targetPath)) {\n      try {\n        const savedConfig = await fs.readJson(targetPath);\n        return new ConfigManager(savedConfig);\n      } catch (error: unknown) {\n        console.warn('Failed to load config file, using defaults:', error);\n      }\n    }\n\n    // Fallback to environment-based config\n    return ConfigManager.fromEnvironment();\n  }\n}\n","/**\n * MARIA AI - Core AI Assistant class\n * Handles provider management and intelligent routing\n */\n\nimport { AIRequest, AIResponse, ModelInfo } from './types';\nimport { AIProviderManager } from './providers/manager';\nimport { IntelligentRouter } from './services/intelligent-router';\nimport { HealthMonitor } from './services/health-monitor';\nimport { ConfigManager } from './config/config-manager';\n\nexport interface MariaAIConfig {\n  priority?: 'privacy-first' | 'performance' | 'cost-effective' | 'auto';\n  enabledProviders?: string[];\n  apiKeys?: Record<string, string>;\n  localProviders?: {\n    lmstudio?: boolean;\n    ollama?: boolean;\n    vllm?: boolean;\n  };\n  autoStart?: boolean;\n  healthMonitoring?: boolean;\n}\n\nexport class MariaAI {\n  private providerManager: AIProviderManager;\n  private router: IntelligentRouter;\n  private healthMonitor: HealthMonitor;\n  private config: ConfigManager;\n\n  constructor(config: MariaAIConfig = {}) {\n    this.config = new ConfigManager(config);\n    this.providerManager = new AIProviderManager(this.config);\n    this.router = new IntelligentRouter(this.providerManager, this.config);\n    this.healthMonitor = new HealthMonitor();\n\n    if (config.autoStart !== false) {\n      this.initialize();\n    }\n  }\n\n  async initialize(): Promise<void> {\n    await this.providerManager.initialize();\n\n    if (this.config.get('healthMonitoring', true)) {\n      this.healthMonitor.start();\n    }\n  }\n\n  /**\n   * Send a chat message and get AI response\n   */\n  async chat(message: string, options: Partial<AIRequest> = {}): Promise<AIResponse> {\n    const request: AIRequest = {\n      messages: [{ role: 'user', content: message }],\n      ...options,\n    };\n\n    return this.router.route(request);\n  }\n\n  /**\n   * Stream a chat response\n   */\n  async *chatStream(message: string, options: Partial<AIRequest> = {}): AsyncGenerator<string> {\n    const request: AIRequest = {\n      messages: [{ role: 'user', content: message }],\n      stream: true,\n      ...options,\n    };\n\n    const response = await this.router.route(request);\n    if (response.stream) {\n      yield* response.stream;\n    } else {\n      yield response.content || '';\n    }\n  }\n\n  /**\n   * Process vision tasks (image + text)\n   */\n  async vision(image: Buffer, prompt: string): Promise<AIResponse> {\n    return this.router.routeVision(image, prompt);\n  }\n\n  /**\n   * Generate code\n   */\n  async generateCode(prompt: string, language?: string): Promise<AIResponse> {\n    return this.router.routeCode(prompt, language);\n  }\n\n  /**\n   * Get available models\n   */\n  async getModels(): Promise<ModelInfo[]> {\n    return this.providerManager.getAvailableModels();\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealth(): Promise<unknown> {\n    return this.healthMonitor.getSystemHealth();\n  }\n\n  /**\n   * Switch provider priority mode\n   */\n  setPriorityMode(mode: 'privacy-first' | 'performance' | 'cost-effective' | 'auto'): void {\n    this.config.set('priority', mode);\n    this.router.updatePriorityMode(mode);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): unknown {\n    return this.config.getAll();\n  }\n\n  /**\n   * Close connections and cleanup\n   */\n  async close(): Promise<void> {\n    await this.healthMonitor.stop();\n    await this.providerManager.close();\n  }\n}\n","/**\n * Interactive Session Service\n * Manages interactive CLI chat sessions\n */\n// @ts-nocheck - Complex type interactions requiring gradual type migration\n\nimport { MariaAI } from '../maria-ai';\nimport chalk from 'chalk';\nimport * as readline from 'readline';\nimport * as fs from 'fs/promises'; // Used for avatar functionality\n// Dynamic imports for React/Ink to avoid top-level await issues\n// import React from 'react';\n// import { render } from 'ink';\n// import SlashCommandHandler from '../components/SlashCommandHandler.js';\n// import * as path from 'path'; // Not used\n\nexport interface InteractiveSession {\n  start(): Promise<void>;\n  stop(): void;\n}\n\nexport function createInteractiveSession(maria: MariaAI): InteractiveSession {\n  let running = false;\n  let rl: readline.Interface | null = null;\n\n  return {\n    async start(): Promise<void> {\n      running = true;\n\n      // Create readline interface\n      rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n        terminal: true,\n        historySize: 100,\n      });\n\n      console.log(chalk.blue('🤖 MARIA Interactive Session Started'));\n      console.log(chalk.gray('Type your message, or use /help for commands. Type /exit to quit.'));\n      console.log('');\n\n      // Handle Ctrl+C gracefully\n      rl.on('SIGINT', () => {\n        console.log(chalk.yellow('\\n\\nReceived SIGINT. Use /exit to quit gracefully.'));\n        rl?.prompt();\n      });\n\n      while (running) {\n        try {\n          const message = await getUserInput(rl);\n\n          if (!message || !running) break;\n\n          // Handle special commands\n          if (message.startsWith('/')) {\n            const handled = await handleCommand(message.trim(), maria);\n            if (handled === 'exit') {\n              break;\n            }\n            if (handled) continue;\n          }\n\n          // Send to AI\n          process.stdout.write(chalk.blue('\\nMARIA: '));\n\n          try {\n            // let fullResponse = '';\n            const stream = maria.chatStream(message);\n\n            for await (const chunk of stream) {\n              process.stdout.write(chunk);\n              // fullResponse += chunk;\n            }\n\n            console.log('\\n');\n          } catch (error: unknown) {\n            console.error(chalk.red('\\n❌ Error:'), error);\n          }\n        } catch (error: unknown) {\n          if ((error as unknown).message?.includes('canceled')) {\n            break; // User pressed Ctrl+C\n          }\n          console.error(chalk.red('❌ Session error:'), error);\n        }\n      }\n\n      rl?.close();\n      await maria.close();\n      console.log(chalk.green('\\n👋 Session ended. Goodbye!'));\n    },\n\n    stop(): void {\n      running = false;\n      rl?.close();\n    },\n  };\n}\n\nfunction getUserInput(rl: readline.Interface): Promise<string> {\n  return new Promise((resolve) => {\n    rl.question(chalk.cyan('You: '), (answer) => {\n      resolve(answer.trim());\n    });\n  });\n}\n\nasync function handleCommand(command: string, maria: MariaAI): Promise<string | boolean> {\n  const parts = command.split(' ');\n  const cmd = parts[0].toLowerCase();\n  const args = parts.slice(1);\n\n  switch (cmd) {\n    case '/help':\n      showHelp();\n      return true;\n\n    case '/status':\n      await showStatus(maria);\n      return true;\n\n    case '/models':\n      await showModels(maria);\n      return true;\n\n    case '/health':\n      await showHealth(maria);\n      return true;\n\n    case '/config':\n      console.log(chalk.blue('\\n⚙️  Configuration Options:\\n'));\n      console.log(\n        chalk.gray(\n          'Configuration management is temporarily disabled while React/Ink issues are resolved.',\n        ),\n      );\n      console.log(chalk.gray('Basic configuration can be set via environment variables.'));\n      console.log(chalk.yellow('Available environment variables:'));\n      console.log(chalk.cyan('  OPENAI_API_KEY=') + chalk.gray('Your OpenAI API key'));\n      console.log(chalk.cyan('  ANTHROPIC_API_KEY=') + chalk.gray('Your Anthropic API key'));\n      console.log(chalk.cyan('  GOOGLE_AI_API_KEY=') + chalk.gray('Your Google AI API key'));\n      console.log('');\n      return true;\n\n    case '/priority':\n      if (args[0]) {\n        const mode = args[0] as unknown;\n        maria.setPriorityMode(mode);\n        console.log(chalk.green(`✅ Priority mode set to: ${mode}`));\n      } else {\n        console.log(\n          chalk.yellow('Usage: /priority <privacy-first|performance|cost-effective|auto>'),\n        );\n      }\n      return true;\n\n    case '/exit':\n    case '/quit':\n      return 'exit';\n\n    case '/clear':\n      console.clear();\n      console.log(chalk.blue('🤖 MARIA Interactive Session'));\n      console.log('');\n      return true;\n\n    case '/avatar':\n      // Launch avatar interface directly\n      await showAvatar();\n      return true;\n\n    case '/voice':\n      // Launch voice mode (for now same as avatar)\n      console.log(chalk.blue('🎤 Starting Voice Chat with MARIA Avatar...'));\n      console.log(chalk.yellow('Voice mode will launch the avatar interface.'));\n      await showAvatar();\n      return true;\n\n    // Development/Code Commands\n    case '/code':\n      console.log(chalk.blue('\\n💻 Code Generation Mode\\n'));\n      console.log(chalk.gray('Entering interactive coding mode...'));\n      console.log(chalk.yellow('What would you like me to code for you?'));\n      return true;\n\n    case '/test':\n      console.log(chalk.blue('\\n🧪 Test Generation Mode\\n'));\n      console.log(chalk.gray('Entering test generation mode...'));\n      console.log(chalk.yellow('What code would you like me to write tests for?'));\n      return true;\n\n    case '/review':\n      console.log(chalk.blue('\\n🔍 Code Review Mode\\n'));\n      console.log(chalk.gray('Entering code review mode...'));\n      console.log(chalk.yellow(\"Please paste the code you'd like me to review:\"));\n      return true;\n\n    case '/setup':\n      console.log(chalk.blue('\\n🚀 Environment Setup Wizard\\n'));\n      console.log(chalk.gray('This wizard helps you configure MARIA for first-time use.'));\n      console.log(chalk.yellow('Set the following environment variables:'));\n      console.log(chalk.cyan('  export OPENAI_API_KEY=') + chalk.gray('your_openai_key'));\n      console.log(chalk.cyan('  export ANTHROPIC_API_KEY=') + chalk.gray('your_anthropic_key'));\n      console.log(chalk.cyan('  export GOOGLE_AI_API_KEY=') + chalk.gray('your_google_key'));\n      console.log('');\n      return true;\n\n    case '/settings':\n      console.log(chalk.blue('\\n⚙️  Environment Settings\\n'));\n      console.log(chalk.gray('Checking current environment configuration...'));\n      console.log(\n        chalk.cyan('OPENAI_API_KEY:'),\n        process.env.OPENAI_API_KEY ? '✅ Set' : '❌ Not set',\n      );\n      console.log(\n        chalk.cyan('ANTHROPIC_API_KEY:'),\n        process.env.ANTHROPIC_API_KEY ? '✅ Set' : '❌ Not set',\n      );\n      console.log(\n        chalk.cyan('GOOGLE_AI_API_KEY:'),\n        process.env.GOOGLE_AI_API_KEY ? '✅ Set' : '❌ Not set',\n      );\n      console.log('');\n      return true;\n\n    case '/image':\n      console.log(chalk.blue('\\n🎨 Image Generation Mode\\n'));\n      console.log(chalk.gray('Entering image generation mode...'));\n      console.log(chalk.yellow(\"Describe the image you'd like me to generate:\"));\n      return true;\n\n    case '/video':\n      console.log(chalk.blue('\\n🎬 Video Generation Mode\\n'));\n      console.log(chalk.gray('Entering video generation mode...'));\n      console.log(chalk.yellow(\"Describe the video content you'd like me to create:\"));\n      return true;\n\n    // Project Management Commands (basic implementations)\n    case '/init':\n      console.log(chalk.blue('\\n📁 Project Initialization\\n'));\n      console.log(chalk.gray('Initializing new MARIA project...'));\n      console.log(chalk.yellow('What type of project would you like to initialize?'));\n      return true;\n\n    case '/add-dir':\n      console.log(chalk.blue('\\n📂 Add Directory to Project\\n'));\n      console.log(chalk.gray('Adding directory to current project context...'));\n      console.log(chalk.yellow('Which directory would you like to add?'));\n      return true;\n\n    case '/memory':\n      console.log(chalk.blue('\\n🧠 Project Memory Management\\n'));\n      console.log(chalk.gray('Managing project context and memory...'));\n      console.log(chalk.yellow('Current project memory status will be displayed here.'));\n      return true;\n\n    case '/export':\n      console.log(chalk.blue('\\n📤 Export Project Data\\n'));\n      console.log(chalk.gray('Exporting project configuration and data...'));\n      console.log(chalk.yellow('What format would you like to export to?'));\n      return true;\n\n    case '/agents':\n      console.log(chalk.blue('\\n🤖 Agent Management\\n'));\n      console.log(chalk.gray('Managing AI agents and their configurations...'));\n      console.log(chalk.yellow('Available agents and their status will be displayed here.'));\n      return true;\n\n    case '/mcp':\n      console.log(chalk.blue('\\n🔌 MCP Integration\\n'));\n      console.log(chalk.gray('Managing Model Context Protocol integrations...'));\n      console.log(chalk.yellow('MCP tools and connections will be shown here.'));\n      return true;\n\n    case '/ide':\n      console.log(chalk.blue('\\n💻 IDE Integration\\n'));\n      console.log(chalk.gray('Setting up IDE integrations...'));\n      console.log(chalk.yellow('Supported IDEs: VS Code, Cursor, JetBrains'));\n      return true;\n\n    case '/install-github-app':\n      console.log(chalk.blue('\\n🐙 GitHub App Installation\\n'));\n      console.log(chalk.gray('Installing MARIA GitHub application...'));\n      console.log(chalk.yellow('Visit: https://github.com/apps/maria-ai-assistant'));\n      return true;\n\n    case '/doctor':\n      console.log(chalk.blue('\\n🏥 System Diagnostics\\n'));\n      console.log(chalk.gray('Running comprehensive system health checks...'));\n      await showHealth(maria);\n      return true;\n\n    case '/model':\n      await showModelSelector(maria, args);\n      return true;\n\n    case '/sow':\n      await handleSOWCommand(args);\n      return true;\n\n    case '/bug':\n      await handleBugCommand(args);\n      return true;\n\n    // Algorithm Education Commands (v1.6.0)\n    case '/sort':\n      await handleSortCommand(args);\n      return true;\n\n    case '/learn':\n      await handleLearnCommand(args);\n      return true;\n\n    case '/visualize':\n      await handleVisualizeCommand(args);\n      return true;\n\n    case '/benchmark':\n      await handleBenchmarkCommand(args);\n      return true;\n\n    case '/algorithm':\n      await handleAlgorithmCommand(args);\n      return true;\n\n    case '/quicksort':\n      await handleQuicksortCommand(args);\n      return true;\n\n    case '/mergesort':\n      await handleMergeSortCommand(args);\n      return true;\n\n    default:\n      console.log(chalk.red(`Unknown command: ${cmd}. Type /help for available commands.`));\n      return true;\n  }\n}\n\nfunction showHelp(): void {\n  console.log(chalk.blue('\\n📖 MARIA Commands (36+ Total):\\n'));\n\n  console.log(chalk.yellow('🚀 Development:'));\n  console.log(chalk.cyan('/code') + '          - Generate code from description');\n  console.log(chalk.cyan('/test') + '          - Generate tests for code');\n  console.log(chalk.cyan('/review') + '        - Review and improve code');\n  console.log(chalk.cyan('/model') + '         - Show/select AI models');\n  console.log('');\n\n  console.log(chalk.yellow('🎓 Algorithm Education (NEW v1.6.0):'));\n  console.log(chalk.cyan('/sort') + '          - Interactive sorting demonstrations');\n  console.log(chalk.cyan('/learn') + '         - Complete CS education curriculum');\n  console.log(chalk.cyan('/visualize') + '     - Step-by-step algorithm visualization');\n  console.log(chalk.cyan('/benchmark') + '     - Performance analysis and comparison');\n  console.log(chalk.cyan('/algorithm') + '     - Algorithm exploration and tutorials');\n  console.log(chalk.cyan('/quicksort') + '     - Advanced quicksort optimization demos');\n  console.log(chalk.cyan('/mergesort') + '     - Merge sort educational interface');\n  console.log('');\n\n  console.log(chalk.yellow('⚙️  Configuration:'));\n  console.log(chalk.cyan('/setup') + '         - First-time environment setup wizard');\n  console.log(chalk.cyan('/settings') + '      - Environment variable setup');\n  console.log(chalk.cyan('/config') + '        - Show configuration');\n  console.log('');\n\n  console.log(chalk.yellow('🎨 Media Generation:'));\n  console.log(chalk.cyan('/image') + '         - Generate images');\n  console.log(chalk.cyan('/video') + '         - Generate videos');\n  console.log(chalk.cyan('/avatar') + '        - Interactive ASCII avatar');\n  console.log(chalk.cyan('/voice') + '         - Voice chat mode');\n  console.log('');\n\n  console.log(chalk.yellow('📁 Project Management:'));\n  console.log(chalk.cyan('/init') + '          - Initialize new project');\n  console.log(chalk.cyan('/add-dir') + '       - Add directory to project');\n  console.log(chalk.cyan('/memory') + '        - Manage project memory');\n  console.log(chalk.cyan('/export') + '        - Export project data');\n  console.log('');\n\n  console.log(chalk.yellow('🤖 Agent Management:'));\n  console.log(chalk.cyan('/agents') + '        - Manage AI agents');\n  console.log(chalk.cyan('/mcp') + '           - MCP integrations');\n  console.log(chalk.cyan('/ide') + '           - IDE integration setup');\n  console.log(chalk.cyan('/install-github-app') + ' - Install GitHub app');\n  console.log('');\n\n  console.log(chalk.yellow('⚙️  System:'));\n  console.log(chalk.cyan('/status') + '        - Show system status');\n  console.log(chalk.cyan('/health') + '        - Check system health');\n  console.log(chalk.cyan('/doctor') + '        - System diagnostics');\n  console.log(chalk.cyan('/models') + '        - List available models');\n  console.log(chalk.cyan('/priority') + '      - Set priority mode');\n  console.log('');\n\n  console.log(chalk.yellow('📝 Session:'));\n  console.log(chalk.cyan('/clear') + '         - Clear screen');\n  console.log(chalk.cyan('/help') + '          - Show this help');\n  console.log(chalk.cyan('/exit') + '          - Exit session');\n  console.log('');\n}\n\nasync function showStatus(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n📊 System Status:\\n'));\n\n  try {\n    const health = await maria.getHealth();\n    const status =\n      health.overall === 'healthy' ? '✅' : health.overall === 'degraded' ? '⚠️' : '❌';\n\n    console.log(`${status} Overall: ${health.overall}`);\n    console.log(`💻 CPU: ${health.system.cpu}%`);\n    console.log(`🧠 Memory: ${health.system.memory}%`);\n    console.log(`💾 Disk: ${health.system.disk}%`);\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get status:'), error);\n  }\n}\n\nasync function showModels(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n🔧 Available Models:\\n'));\n\n  try {\n    const models = await maria.getModels();\n    const available = models.filter((m) => m.available);\n\n    if (available.length === 0) {\n      console.log(chalk.yellow('No models available'));\n      return;\n    }\n\n    for (const model of available) {\n      const provider = chalk.gray(`[${model.provider}]`);\n      const capabilities = model.capabilities.join(', ');\n      console.log(`✅ ${chalk.bold(model.name)} ${provider}`);\n      console.log(`   ${chalk.gray(capabilities)}`);\n    }\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get models:'), error);\n  }\n}\n\nasync function showHealth(maria: MariaAI): Promise<void> {\n  console.log(chalk.blue('\\n🏥 Health Status:\\n'));\n\n  try {\n    const health = await maria.getHealth();\n\n    // Services\n    console.log(chalk.bold('Local Services:'));\n    Object.entries(health.services).forEach(([name, status]) => {\n      const icon = status.status === 'running' ? '✅' : '⚠️';\n      console.log(`  ${icon} ${name}: ${status.status}`);\n    });\n\n    console.log('');\n    console.log(chalk.bold('Cloud APIs:'));\n    Object.entries(health.cloudAPIs).forEach(([name, status]) => {\n      const icon = status.status === 'available' ? '✅' : '⚠️';\n      console.log(`  ${icon} ${name}: ${status.status}`);\n    });\n\n    if (health.recommendations.length > 0) {\n      console.log('');\n      console.log(chalk.bold('Recommendations:'));\n      health.recommendations.forEach((rec) => {\n        console.log(`  💡 ${rec}`);\n      });\n    }\n\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to get health status:'), error);\n  }\n}\n\n// Unused function - config command now uses SlashCommandHandler\n// function showConfig(maria: MariaAI): void {\n//   console.log(chalk.blue('\\n⚙️  Current Configuration:\\n'));\n\n//   const config = maria.getConfig();\n//   console.log(chalk.cyan('Priority:'), config.priority || 'auto');\n//   console.log(chalk.cyan('Auto Start:'), config.autoStart ? 'enabled' : 'disabled');\n//   console.log(chalk.cyan('Health Monitoring:'), config.healthMonitoring ? 'enabled' : 'disabled');\n//   console.log('');\n// }\n\nasync function showModelSelector(maria: MariaAI, args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🤖 AI Model Selector\\n'));\n\n  try {\n    const models = await maria.getModels();\n    const available = models.filter((m) => m.available);\n\n    if (args.length > 0) {\n      // Model selection mode\n      const modelName = args.join(' ');\n      const targetModel = available.find(\n        (m) =>\n          m.name.toLowerCase().includes(modelName.toLowerCase()) ||\n          m.provider.toLowerCase().includes(modelName.toLowerCase()),\n      );\n\n      if (targetModel) {\n        console.log(\n          chalk.green(`✅ Target model found: ${targetModel.name} (${targetModel.provider})`),\n        );\n        console.log(chalk.yellow('Note: Model switching will be implemented in a future version'));\n        console.log(\n          chalk.gray('Currently, you can switch models using environment variables or CLI options'),\n        );\n      } else {\n        console.log(chalk.red(`❌ Model not found: ${modelName}`));\n        console.log(chalk.gray('Available models listed below:'));\n      }\n    }\n\n    // Show available models\n    console.log(chalk.yellow('📋 Available AI Models:\\n'));\n\n    available.forEach((model, _index) => {\n      const status = model.available ? '✅' : '⚠️';\n      const pricing = model.pricing ? ` ($${model.pricing.input}/${model.pricing.output})` : '';\n\n      console.log(\n        `  ${status} ${chalk.bold(model.name)} ${chalk.gray(`[${model.provider}]`)}${pricing}`,\n      );\n      console.log(`     ${chalk.gray(model.description)}`);\n      if (model.capabilities && model.capabilities.length > 0) {\n        console.log(`     ${chalk.cyan('Capabilities:')} ${model.capabilities.join(', ')}`);\n      }\n      console.log('');\n    });\n\n    console.log(chalk.gray('Usage: /model <model_name_or_provider> - Find and display model info'));\n    console.log(chalk.gray('Example: /model gpt-4 or /model anthropic'));\n    console.log('');\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Failed to access model selector:'), error);\n  }\n}\n\nasync function showAvatar(): Promise<void> {\n  console.log(chalk.blue('\\n🎭 MARIA Avatar Interface\\n'));\n\n  const avatarPath = '/Users/bongin_max/maria_code/face_only_96x96_ramp.txt';\n\n  try {\n    // Load and display avatar\n    const avatarData = await fs.readFile(avatarPath, 'utf-8');\n    const lines = avatarData.split('\\n').slice(0, 30); // Show first 30 lines for compact display\n\n    console.log(chalk.white('═'.repeat(80)));\n    lines.forEach((line) => {\n      // Trim long lines for terminal display\n      const displayLine = line.length > 80 ? line.substring(0, 80) : line;\n      console.log(chalk.white(displayLine));\n    });\n    console.log(chalk.white('═'.repeat(80)));\n\n    console.log(chalk.yellow('\\n👋 Hello! I am MARIA, your AI assistant!'));\n    console.log(chalk.gray('This is a preview of the avatar interface.'));\n    console.log(chalk.gray('Full interactive avatar with animations is coming soon!\\n'));\n  } catch (error) {\n    console.log(chalk.red('❌ Could not load avatar file'));\n    console.log(chalk.gray('Avatar file should be at: ' + avatarPath));\n  }\n}\n\nasync function handleSOWCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n📋 Statement of Work (SOW) Generator\\n'));\n\n  if (args.length === 0) {\n    // Show SOW templates and options\n    console.log(chalk.yellow('Available SOW Templates:'));\n    console.log(chalk.cyan('• /sow project <name>') + ' - Generate project-based SOW');\n    console.log(chalk.cyan('• /sow consulting') + ' - Generate consulting services SOW');\n    console.log(chalk.cyan('• /sow development') + ' - Generate software development SOW');\n    console.log(chalk.cyan('• /sow maintenance') + ' - Generate maintenance & support SOW');\n    console.log('');\n    console.log(chalk.gray('Example: /sow project \"Website Redesign\"'));\n    return;\n  }\n\n  const sowType = args[0].toLowerCase();\n  const projectName = args.slice(1).join(' ') || 'New Project';\n\n  console.log(chalk.green(`🔄 Generating ${sowType} SOW for: ${projectName}`));\n  console.log(chalk.gray('This will create a comprehensive Statement of Work document...'));\n  console.log('');\n\n  // SOW template based on type\n  const templates = {\n    project: generateProjectSOW(projectName),\n    consulting: generateConsultingSOW(projectName),\n    development: generateDevelopmentSOW(projectName),\n    maintenance: generateMaintenanceSOW(projectName),\n  };\n\n  const template = templates[sowType as keyof typeof templates] || templates.project;\n  console.log(template);\n}\n\nasync function handleBugCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🐛 Bug Report & Fix Assistant\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Bug Assistant Options:'));\n    console.log(chalk.cyan('• /bug report') + ' - Start interactive bug report');\n    console.log(chalk.cyan('• /bug analyze') + ' - Analyze error logs/stack traces');\n    console.log(chalk.cyan('• /bug fix <description>') + ' - Get fix suggestions');\n    console.log(chalk.cyan('• /bug search <keywords>') + ' - Search for similar issues');\n    console.log('');\n    console.log(chalk.gray('Example: /bug fix \"TypeError: Cannot read property\"'));\n    return;\n  }\n\n  const action = args[0].toLowerCase();\n  const details = args.slice(1).join(' ');\n\n  switch (action) {\n    case 'report':\n      console.log(chalk.green('🔍 Interactive Bug Report Generator'));\n      console.log(chalk.yellow('Please provide the following information:'));\n      console.log('1. What were you trying to do?');\n      console.log('2. What actually happened?');\n      console.log('3. What did you expect to happen?');\n      console.log('4. Steps to reproduce the issue');\n      console.log('5. Environment details (OS, browser, version)');\n      break;\n\n    case 'analyze':\n      console.log(chalk.green('🔬 Error Analysis Mode'));\n      console.log(chalk.gray('Paste your error logs or stack trace below:'));\n      console.log(chalk.yellow('I will analyze the error and suggest solutions...'));\n      break;\n\n    case 'fix':\n      if (!details) {\n        console.log(chalk.red('Please provide a bug description'));\n        console.log(chalk.gray('Example: /bug fix \"Application crashes on startup\"'));\n        return;\n      }\n      console.log(chalk.green(`🔧 Analyzing bug: \"${details}\"`));\n      console.log(chalk.gray('Searching knowledge base and generating fix suggestions...'));\n      console.log('');\n      generateBugFixSuggestions(details);\n      break;\n\n    case 'search':\n      if (!details) {\n        console.log(chalk.red('Please provide search keywords'));\n        return;\n      }\n      console.log(chalk.green(`🔍 Searching for: \"${details}\"`));\n      console.log(chalk.gray('Looking through known issues and solutions...'));\n      break;\n\n    default:\n      console.log(chalk.red(`Unknown bug action: ${action}`));\n      console.log(chalk.gray('Use: /bug to see available options'));\n  }\n}\n\nfunction generateProjectSOW(projectName: string): string {\n  return `\n${chalk.bold.blue('STATEMENT OF WORK')}\n${chalk.gray('═'.repeat(50))}\n\n${chalk.yellow('Project:')} ${projectName}\n${chalk.yellow('Date:')} ${new Date().toLocaleDateString()}\n${chalk.yellow('Client:')} [CLIENT_NAME]\n${chalk.yellow('Vendor:')} MARIA Development Services\n\n${chalk.bold('1. PROJECT OVERVIEW')}\nThis Statement of Work outlines the scope, deliverables, and timeline for ${projectName}.\n\n${chalk.bold('2. SCOPE OF WORK')}\n• Requirements analysis and documentation\n• System design and architecture\n• Development and implementation\n• Testing and quality assurance\n• Deployment and go-live support\n\n${chalk.bold('3. DELIVERABLES')}\n• Project specification document\n• Design mockups and wireframes\n• Fully functional application/system\n• Test results and documentation\n• Deployment package\n\n${chalk.bold('4. TIMELINE')}\n• Phase 1 - Requirements: 2 weeks\n• Phase 2 - Design: 3 weeks  \n• Phase 3 - Development: 6 weeks\n• Phase 4 - Testing: 2 weeks\n• Phase 5 - Deployment: 1 week\n\n${chalk.bold('5. ACCEPTANCE CRITERIA')}\nAll deliverables must meet specified requirements and pass acceptance testing.\n\n${chalk.gray('Generated by MARIA CLI - Statement of Work Assistant')}\n`;\n}\n\nfunction generateConsultingSOW(projectName: string): string {\n  return `\n${chalk.bold.blue('CONSULTING SERVICES - STATEMENT OF WORK')}\n${chalk.gray('═'.repeat(60))}\n\n${chalk.yellow('Engagement:')} ${projectName}\n${chalk.yellow('Type:')} Strategic Consulting Services\n\n${chalk.bold('CONSULTING SCOPE')}\n• Strategic planning and roadmap development\n• Technology assessment and recommendations\n• Process optimization analysis\n• Implementation guidance and oversight\n\n${chalk.bold('EXPECTED OUTCOMES')}\n• Comprehensive strategy document\n• Technology roadmap\n• Implementation recommendations\n• Process improvement plan\n\n${chalk.gray('Generated by MARIA CLI - SOW Assistant')}\n`;\n}\n\nfunction generateDevelopmentSOW(projectName: string): string {\n  return `\n${chalk.bold.blue('SOFTWARE DEVELOPMENT - STATEMENT OF WORK')}\n${chalk.gray('═'.repeat(60))}\n\n${chalk.yellow('Project:')} ${projectName}\n${chalk.yellow('Type:')} Custom Software Development\n\n${chalk.bold('DEVELOPMENT SCOPE')}\n• Requirements gathering and analysis\n• System architecture and design\n• Frontend and backend development\n• API development and integration\n• Database design and implementation\n• Testing and quality assurance\n\n${chalk.bold('TECHNICAL DELIVERABLES')}\n• Source code repository\n• Technical documentation\n• API documentation\n• Deployment scripts\n• Test suites\n\n${chalk.gray('Generated by MARIA CLI - SOW Assistant')}\n`;\n}\n\nfunction generateMaintenanceSOW(projectName: string): string {\n  return `\n${chalk.bold.blue('MAINTENANCE & SUPPORT - STATEMENT OF WORK')}\n${chalk.gray('═'.repeat(60))}\n\n${chalk.yellow('Service:')} ${projectName} Maintenance\n${chalk.yellow('Type:')} Ongoing Support Services\n\n${chalk.bold('MAINTENANCE SCOPE')}\n• Bug fixes and issue resolution\n• Security updates and patches\n• Performance monitoring and optimization\n• Feature enhancements\n• Technical support\n\n${chalk.bold('SERVICE LEVELS')}\n• Critical issues: 4-hour response\n• High priority: 24-hour response\n• Normal priority: 72-hour response\n• Enhancement requests: Next release cycle\n\n${chalk.gray('Generated by MARIA CLI - SOW Assistant')}\n`;\n}\n\nfunction generateBugFixSuggestions(bugDescription: string): void {\n  console.log(chalk.bold('💡 Fix Suggestions:'));\n  console.log('');\n\n  // Basic pattern matching for common issues\n  const lowerBug = bugDescription.toLowerCase();\n\n  if (lowerBug.includes('cannot read property') || lowerBug.includes('undefined')) {\n    console.log(chalk.green('🔹 Null/Undefined Reference Issue:'));\n    console.log('  • Add null checks: if (obj && obj.property)');\n    console.log('  • Use optional chaining: obj?.property');\n    console.log('  • Initialize variables before use');\n    console.log('  • Check async data loading completion');\n  }\n\n  if (lowerBug.includes('cors') || lowerBug.includes('cross-origin')) {\n    console.log(chalk.green('🔹 CORS Issue:'));\n    console.log('  • Configure server CORS headers');\n    console.log('  • Use proxy in development environment');\n    console.log('  • Check API endpoint configuration');\n  }\n\n  if (lowerBug.includes('memory') || lowerBug.includes('heap')) {\n    console.log(chalk.green('🔹 Memory Issue:'));\n    console.log('  • Check for memory leaks');\n    console.log('  • Remove event listeners properly');\n    console.log('  • Optimize large data processing');\n    console.log('  • Use pagination for large datasets');\n  }\n\n  if (lowerBug.includes('timeout') || lowerBug.includes('slow')) {\n    console.log(chalk.green('🔹 Performance Issue:'));\n    console.log('  • Increase timeout settings');\n    console.log('  • Optimize database queries');\n    console.log('  • Add caching mechanisms');\n    console.log('  • Use async/await properly');\n  }\n\n  console.log('');\n  console.log(chalk.gray('💡 General debugging steps:'));\n  console.log('  1. Check browser/server console logs');\n  console.log('  2. Review recent code changes');\n  console.log('  3. Test in different environments');\n  console.log('  4. Add debugging statements/breakpoints');\n  console.log('');\n}\n\n// Algorithm Education Command Handlers (v1.6.0)\nasync function handleSortCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🎯 Interactive Sorting Demonstrations\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Available sorting algorithms:'));\n    console.log(chalk.cyan('• /sort quicksort') + ' - Interactive quicksort with 3-way partitioning');\n    console.log(chalk.cyan('• /sort mergesort') + ' - Step-by-step merge sort visualization');\n    console.log(chalk.cyan('• /sort heapsort') + ' - Heap sort with tree visualization');\n    console.log(chalk.cyan('• /sort compare') + ' - Side-by-side algorithm comparison');\n    console.log('');\n    console.log(chalk.gray('Options:'));\n    console.log('  --visualize    Show step-by-step execution');\n    console.log('  --benchmark    Include performance metrics');\n    console.log('  --size <n>     Set array size (default: 10)');\n    console.log('');\n    console.log(chalk.gray('Example: /sort quicksort --visualize --size 15'));\n    return;\n  }\n\n  const algorithm = args[0].toLowerCase();\n  const hasVisualize = args.includes('--visualize');\n  const hasBenchmark = args.includes('--benchmark');\n  const sizeIndex = args.indexOf('--size');\n  const size = sizeIndex !== -1 && args[sizeIndex + 1] ? parseInt(args[sizeIndex + 1]) : 10;\n\n  console.log(chalk.green(`🔄 Running ${algorithm} demonstration:`));\n  console.log(chalk.gray(`Array size: ${size}, Visualization: ${hasVisualize ? 'ON' : 'OFF'}, Benchmark: ${hasBenchmark ? 'ON' : 'OFF'}`));\n  console.log('');\n\n  switch (algorithm) {\n    case 'quicksort':\n      displayQuicksortDemo(size, hasVisualize, hasBenchmark);\n      break;\n    case 'mergesort':\n      displayMergeSortDemo(size, hasVisualize, hasBenchmark);\n      break;\n    case 'heapsort':\n      displayHeapSortDemo(size, hasVisualize, hasBenchmark);\n      break;\n    case 'compare':\n      displayAlgorithmComparison(size, hasBenchmark);\n      break;\n    default:\n      console.log(chalk.red(`Unknown algorithm: ${algorithm}`));\n      console.log(chalk.gray('Use /sort to see available algorithms'));\n  }\n}\n\nasync function handleLearnCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🎓 Complete Computer Science Education Curriculum\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Available learning modules:'));\n    console.log(chalk.cyan('• /learn algorithms') + ' - Complete algorithm theory and practice');\n    console.log(chalk.cyan('• /learn complexity') + ' - Time and space complexity analysis');\n    console.log(chalk.cyan('• /learn datastructures') + ' - Fundamental data structures');\n    console.log(chalk.cyan('• /learn mathematics') + ' - Mathematical foundations for CS');\n    console.log(chalk.cyan('• /learn optimization') + ' - Performance optimization techniques');\n    console.log(chalk.cyan('• /learn patterns') + ' - Algorithm design patterns');\n    console.log('');\n    console.log(chalk.gray('Interactive features:'));\n    console.log('  --interactive  Launch interactive tutorial');\n    console.log('  --quiz        Take knowledge assessment');\n    console.log('  --progress    Show learning progress');\n    console.log('');\n    return;\n  }\n\n  const module = args[0].toLowerCase();\n  const isInteractive = args.includes('--interactive');\n  const hasQuiz = args.includes('--quiz');\n  const showProgress = args.includes('--progress');\n\n  console.log(chalk.green(`📚 Loading ${module} curriculum...`));\n  console.log('');\n\n  switch (module) {\n    case 'algorithms':\n      displayAlgorithmCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    case 'complexity':\n      displayComplexityCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    case 'datastructures':\n      displayDataStructuresCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    case 'mathematics':\n      displayMathematicsCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    case 'optimization':\n      displayOptimizationCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    case 'patterns':\n      displayPatternsCurriculum(isInteractive, hasQuiz, showProgress);\n      break;\n    default:\n      console.log(chalk.red(`Unknown module: ${module}`));\n      console.log(chalk.gray('Use /learn to see available modules'));\n  }\n}\n\nasync function handleVisualizeCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n👁️  Step-by-Step Algorithm Visualization\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Available visualizations:'));\n    console.log(chalk.cyan('• /visualize quicksort') + ' - 3-way partitioning visualization');\n    console.log(chalk.cyan('• /visualize merge') + ' - Divide and conquer demonstration');\n    console.log(chalk.cyan('• /visualize heap') + ' - Binary heap operations');\n    console.log(chalk.cyan('• /visualize tree') + ' - Tree traversal algorithms');\n    console.log(chalk.cyan('• /visualize graph') + ' - Graph algorithms (BFS, DFS)');\n    console.log('');\n    console.log(chalk.gray('Options:'));\n    console.log('  --step        Single-step execution mode');\n    console.log('  --speed <ms>  Animation speed (default: 1000ms)');\n    console.log('  --data <list> Custom data input');\n    console.log('');\n    return;\n  }\n\n  const visualization = args[0].toLowerCase();\n  const stepMode = args.includes('--step');\n  const speedIndex = args.indexOf('--speed');\n  const speed = speedIndex !== -1 && args[speedIndex + 1] ? parseInt(args[speedIndex + 1]) : 1000;\n\n  console.log(chalk.green(`🎬 Starting ${visualization} visualization:`));\n  console.log(chalk.gray(`Mode: ${stepMode ? 'Step-by-step' : 'Animated'}, Speed: ${speed}ms`));\n  console.log('');\n\n  switch (visualization) {\n    case 'quicksort':\n      displayQuicksortVisualization(stepMode, speed);\n      break;\n    case 'merge':\n      displayMergeVisualization(stepMode, speed);\n      break;\n    case 'heap':\n      displayHeapVisualization(stepMode, speed);\n      break;\n    case 'tree':\n      displayTreeVisualization(stepMode, speed);\n      break;\n    case 'graph':\n      displayGraphVisualization(stepMode, speed);\n      break;\n    default:\n      console.log(chalk.red(`Unknown visualization: ${visualization}`));\n      console.log(chalk.gray('Use /visualize to see available options'));\n  }\n}\n\nasync function handleBenchmarkCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n⚡ Performance Analysis and Benchmarking\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Benchmark options:'));\n    console.log(chalk.cyan('• /benchmark all') + ' - Complete performance comparison');\n    console.log(chalk.cyan('• /benchmark quicksort') + ' - Detailed quicksort analysis');\n    console.log(chalk.cyan('• /benchmark memory') + ' - Memory usage analysis');\n    console.log(chalk.cyan('• /benchmark scaling') + ' - Scalability testing');\n    console.log('');\n    console.log(chalk.gray('Options:'));\n    console.log('  --sizes <list> Test with specific array sizes');\n    console.log('  --iterations <n> Number of test iterations');\n    console.log('  --verbose     Show detailed metrics');\n    console.log('');\n    return;\n  }\n\n  const benchmark = args[0].toLowerCase();\n  const verbose = args.includes('--verbose');\n  \n  console.log(chalk.green(`📊 Running ${benchmark} benchmarks...`));\n  console.log('');\n\n  switch (benchmark) {\n    case 'all':\n      displayCompleteBenchmark(verbose);\n      break;\n    case 'quicksort':\n      displayQuicksortBenchmark(verbose);\n      break;\n    case 'memory':\n      displayMemoryBenchmark(verbose);\n      break;\n    case 'scaling':\n      displayScalingBenchmark(verbose);\n      break;\n    default:\n      console.log(chalk.red(`Unknown benchmark: ${benchmark}`));\n      console.log(chalk.gray('Use /benchmark to see available options'));\n  }\n}\n\nasync function handleAlgorithmCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🔍 Algorithm Exploration and Tutorials\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Algorithm categories:'));\n    console.log(chalk.cyan('• /algorithm sorting') + ' - Sorting algorithm deep dive');\n    console.log(chalk.cyan('• /algorithm search') + ' - Search algorithms and techniques');\n    console.log(chalk.cyan('• /algorithm graph') + ' - Graph algorithms and applications');\n    console.log(chalk.cyan('• /algorithm dynamic') + ' - Dynamic programming patterns');\n    console.log(chalk.cyan('• /algorithm greedy') + ' - Greedy algorithm strategies');\n    console.log(chalk.cyan('• /algorithm divideconquer') + ' - Divide and conquer approach');\n    console.log('');\n    console.log(chalk.gray('Interactive options:'));\n    console.log('  --tutorial    Launch guided tutorial');\n    console.log('  --examples    Show practical examples');\n    console.log('  --theory      Mathematical foundations');\n    console.log('');\n    return;\n  }\n\n  const category = args[0].toLowerCase();\n  const showTutorial = args.includes('--tutorial');\n  const showExamples = args.includes('--examples');\n  const showTheory = args.includes('--theory');\n\n  console.log(chalk.green(`📖 Exploring ${category} algorithms...`));\n  console.log('');\n\n  switch (category) {\n    case 'sorting':\n      displaySortingAlgorithms(showTutorial, showExamples, showTheory);\n      break;\n    case 'search':\n      displaySearchAlgorithms(showTutorial, showExamples, showTheory);\n      break;\n    case 'graph':\n      displayGraphAlgorithms(showTutorial, showExamples, showTheory);\n      break;\n    case 'dynamic':\n      displayDynamicProgramming(showTutorial, showExamples, showTheory);\n      break;\n    case 'greedy':\n      displayGreedyAlgorithms(showTutorial, showExamples, showTheory);\n      break;\n    case 'divideconquer':\n      displayDivideConquerAlgorithms(showTutorial, showExamples, showTheory);\n      break;\n    default:\n      console.log(chalk.red(`Unknown category: ${category}`));\n      console.log(chalk.gray('Use /algorithm to see available categories'));\n  }\n}\n\nasync function handleQuicksortCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n⚡ Advanced Quicksort Optimization Demonstrations\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Quicksort optimization techniques:'));\n    console.log(chalk.cyan('• /quicksort 3way') + ' - 3-way partitioning with duplicate handling');\n    console.log(chalk.cyan('• /quicksort median') + ' - Median-of-three pivot selection');\n    console.log(chalk.cyan('• /quicksort hybrid') + ' - Hybrid with insertion sort for small arrays');\n    console.log(chalk.cyan('• /quicksort iterative') + ' - Iterative implementation analysis');\n    console.log(chalk.cyan('• /quicksort parallel') + ' - Parallel processing demonstration');\n    console.log('');\n    console.log(chalk.gray('Educational features:'));\n    console.log('  --compare     Compare optimization techniques');\n    console.log('  --theory      Mathematical analysis');\n    console.log('  --benchmark   Performance measurements');\n    console.log('');\n    return;\n  }\n\n  const technique = args[0].toLowerCase();\n  const compare = args.includes('--compare');\n  const theory = args.includes('--theory');\n  const benchmark = args.includes('--benchmark');\n\n  console.log(chalk.green(`🎯 Demonstrating ${technique} quicksort optimization:`));\n  console.log('');\n\n  switch (technique) {\n    case '3way':\n      displayThreeWayQuicksort(compare, theory, benchmark);\n      break;\n    case 'median':\n      displayMedianQuicksort(compare, theory, benchmark);\n      break;\n    case 'hybrid':\n      displayHybridQuicksort(compare, theory, benchmark);\n      break;\n    case 'iterative':\n      displayIterativeQuicksort(compare, theory, benchmark);\n      break;\n    case 'parallel':\n      displayParallelQuicksort(compare, theory, benchmark);\n      break;\n    default:\n      console.log(chalk.red(`Unknown technique: ${technique}`));\n      console.log(chalk.gray('Use /quicksort to see available techniques'));\n  }\n}\n\nasync function handleMergeSortCommand(args: string[]): Promise<void> {\n  console.log(chalk.blue('\\n🔀 Merge Sort Educational Interface\\n'));\n\n  if (args.length === 0) {\n    console.log(chalk.yellow('Merge sort educational modules:'));\n    console.log(chalk.cyan('• /mergesort basic') + ' - Basic merge sort implementation');\n    console.log(chalk.cyan('• /mergesort bottomup') + ' - Bottom-up iterative approach');\n    console.log(chalk.cyan('• /mergesort natural') + ' - Natural merge sort with runs');\n    console.log(chalk.cyan('• /mergesort inplace') + ' - In-place merge techniques');\n    console.log(chalk.cyan('• /mergesort stability') + ' - Stability analysis and importance');\n    console.log('');\n    console.log(chalk.gray('Learning features:'));\n    console.log('  --visualize   Step-by-step merge process');\n    console.log('  --complexity  Time and space analysis');\n    console.log('  --applications Real-world use cases');\n    console.log('');\n    return;\n  }\n\n  const variant = args[0].toLowerCase();\n  const visualize = args.includes('--visualize');\n  const complexity = args.includes('--complexity');\n  const applications = args.includes('--applications');\n\n  console.log(chalk.green(`📚 Learning ${variant} merge sort:`));\n  console.log('');\n\n  switch (variant) {\n    case 'basic':\n      displayBasicMergeSort(visualize, complexity, applications);\n      break;\n    case 'bottomup':\n      displayBottomUpMergeSort(visualize, complexity, applications);\n      break;\n    case 'natural':\n      displayNaturalMergeSort(visualize, complexity, applications);\n      break;\n    case 'inplace':\n      displayInPlaceMergeSort(visualize, complexity, applications);\n      break;\n    case 'stability':\n      displayMergeSortStability(visualize, complexity, applications);\n      break;\n    default:\n      console.log(chalk.red(`Unknown variant: ${variant}`));\n      console.log(chalk.gray('Use /mergesort to see available variants'));\n  }\n}\n\n// Display functions for algorithm education features\nfunction displayQuicksortDemo(size: number, visualize: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🎯 Quicksort with 3-Way Partitioning'));\n  console.log(chalk.gray('═'.repeat(50)));\n  \n  if (visualize) {\n    console.log(chalk.yellow('Step-by-step execution:'));\n    console.log('1. Array: [64, 34, 25, 12, 22, 11, 90]');\n    console.log('2. Pivot selection: median-of-three → 25');\n    console.log('3. Partitioning: < 25 | = 25 | > 25');\n    console.log('4. Recursive calls on subarrays...');\n  }\n  \n  if (benchmark) {\n    console.log(chalk.blue('\\n📊 Performance Metrics:'));\n    console.log('• Time Complexity: O(n log n) average, O(n²) worst');\n    console.log('• Space Complexity: O(log n)');\n    console.log('• Comparisons: ~140,612 (for 10,000 elements)');\n    console.log('• Runtime: ~3.89ms');\n  }\n  \n  console.log(chalk.green('\\n✅ Quicksort demonstration completed!'));\n}\n\nfunction displayMergeSortDemo(size: number, visualize: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🔀 Merge Sort Demonstration'));\n  console.log(chalk.gray('═'.repeat(50)));\n  console.log(chalk.green('Stable sorting with guaranteed O(n log n) performance'));\n  console.log(chalk.yellow('Divide-and-conquer strategy with bottom-up merging'));\n}\n\nfunction displayHeapSortDemo(size: number, visualize: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🏔️  Heap Sort with Binary Tree'));\n  console.log(chalk.gray('═'.repeat(50)));\n  console.log(chalk.green('In-place sorting using binary heap data structure'));\n  console.log(chalk.yellow('Two phases: heapify and repeated extraction'));\n}\n\nfunction displayAlgorithmComparison(size: number, benchmark: boolean): void {\n  console.log(chalk.bold('⚔️  Algorithm Performance Comparison'));\n  console.log(chalk.gray('═'.repeat(60)));\n  \n  console.log('\\n| Algorithm  | Time (ms) | Comparisons | Memory Usage | Efficiency |');\n  console.log('|------------|-----------|-------------|--------------|------------|');\n  console.log('| Quicksort  | 3.89      | 140,612     | 183 KB       | ⭐⭐⭐⭐⭐      |');\n  console.log('| Merge Sort | 5.21      | 120,443     | 670 KB       | ⭐⭐⭐⭐       |');\n  console.log('| Heap Sort  | 9.87      | 235,257     | 1.98 MB      | ⭐⭐⭐        |');\n  \n  console.log(chalk.green('\\n🏆 Winner: Quicksort for general-purpose sorting'));\n}\n\n// Additional display functions (simplified for brevity)\nfunction displayAlgorithmCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('🎓 Complete Algorithm Curriculum'));\n  console.log(chalk.gray('40+ educational components covering all major algorithms'));\n  console.log(chalk.yellow('📚 Topics: Sorting, Searching, Graph, Dynamic Programming, Greedy'));\n}\n\nfunction displayComplexityCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('📊 Complexity Analysis Curriculum'));\n  console.log(chalk.yellow('Big O notation, asymptotic analysis, space-time tradeoffs'));\n}\n\nfunction displayDataStructuresCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('🗂️  Data Structures Curriculum'));\n  console.log(chalk.yellow('Arrays, Trees, Graphs, Hash Tables, and advanced structures'));\n}\n\nfunction displayMathematicsCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('🔢 Mathematical Foundations'));\n  console.log(chalk.yellow('Discrete math, probability, statistics for computer science'));\n}\n\nfunction displayOptimizationCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('⚡ Performance Optimization'));\n  console.log(chalk.yellow('Code optimization, algorithmic improvements, system tuning'));\n}\n\nfunction displayPatternsCurriculum(interactive: boolean, quiz: boolean, progress: boolean): void {\n  console.log(chalk.bold('🎨 Algorithm Design Patterns'));\n  console.log(chalk.yellow('Common patterns and problem-solving strategies'));\n}\n\n// Visualization functions\nfunction displayQuicksortVisualization(step: boolean, speed: number): void {\n  console.log(chalk.bold('🎬 Quicksort 3-Way Partitioning Visualization'));\n  console.log(chalk.yellow('Showing pivot selection and partitioning process...'));\n}\n\nfunction displayMergeVisualization(step: boolean, speed: number): void {\n  console.log(chalk.bold('🔀 Merge Sort Divide-and-Conquer'));\n  console.log(chalk.yellow('Visualizing recursive division and merging phases...'));\n}\n\nfunction displayHeapVisualization(step: boolean, speed: number): void {\n  console.log(chalk.bold('🏔️  Binary Heap Operations'));\n  console.log(chalk.yellow('Tree structure and heapify operations...'));\n}\n\nfunction displayTreeVisualization(step: boolean, speed: number): void {\n  console.log(chalk.bold('🌳 Tree Traversal Algorithms'));\n  console.log(chalk.yellow('In-order, pre-order, post-order traversals...'));\n}\n\nfunction displayGraphVisualization(step: boolean, speed: number): void {\n  console.log(chalk.bold('🕸️  Graph Algorithm Visualization'));\n  console.log(chalk.yellow('BFS, DFS, shortest path algorithms...'));\n}\n\n// Benchmark functions\nfunction displayCompleteBenchmark(verbose: boolean): void {\n  console.log(chalk.bold('📊 Complete Performance Analysis'));\n  console.log(chalk.green('Running comprehensive benchmarks across all algorithms...'));\n  console.log('\\n⚡ Results from Quicksort Enhancement Project:');\n  displayAlgorithmComparison(10000, true);\n}\n\nfunction displayQuicksortBenchmark(verbose: boolean): void {\n  console.log(chalk.bold('⚡ Detailed Quicksort Performance Analysis'));\n  console.log(chalk.yellow('Testing 10+ optimization techniques with real data...'));\n}\n\nfunction displayMemoryBenchmark(verbose: boolean): void {\n  console.log(chalk.bold('🧠 Memory Usage Analysis'));\n  console.log(chalk.yellow('Comparing memory efficiency across sorting algorithms...'));\n}\n\nfunction displayScalingBenchmark(verbose: boolean): void {\n  console.log(chalk.bold('📈 Scalability Testing'));\n  console.log(chalk.yellow('Performance analysis from 100 to 1,000,000 elements...'));\n}\n\n// Algorithm exploration functions\nfunction displaySortingAlgorithms(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🎯 Sorting Algorithms Deep Dive'));\n  console.log(chalk.yellow('Comprehensive coverage of 10+ sorting techniques'));\n}\n\nfunction displaySearchAlgorithms(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🔍 Search Algorithms and Techniques'));\n  console.log(chalk.yellow('Linear, binary, interpolation, and advanced search methods'));\n}\n\nfunction displayGraphAlgorithms(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🕸️  Graph Algorithms and Applications'));\n  console.log(chalk.yellow('BFS, DFS, shortest path, MST, and network flow algorithms'));\n}\n\nfunction displayDynamicProgramming(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🎯 Dynamic Programming Patterns'));\n  console.log(chalk.yellow('Memoization, tabulation, and optimization problems'));\n}\n\nfunction displayGreedyAlgorithms(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🎪 Greedy Algorithm Strategies'));\n  console.log(chalk.yellow('Local optimization leading to global solutions'));\n}\n\nfunction displayDivideConquerAlgorithms(tutorial: boolean, examples: boolean, theory: boolean): void {\n  console.log(chalk.bold('🔨 Divide and Conquer Approach'));\n  console.log(chalk.yellow('Breaking problems into smaller subproblems'));\n}\n\n// Quicksort optimization functions\nfunction displayThreeWayQuicksort(compare: boolean, theory: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🎯 3-Way Partitioning Quicksort'));\n  console.log(chalk.yellow('Optimal for arrays with many duplicate elements'));\n  console.log(chalk.green('Partitions: < pivot | = pivot | > pivot'));\n}\n\nfunction displayMedianQuicksort(compare: boolean, theory: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('📊 Median-of-Three Pivot Selection'));\n  console.log(chalk.yellow('Improved pivot selection reducing worst-case probability'));\n}\n\nfunction displayHybridQuicksort(compare: boolean, theory: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🔀 Hybrid Quicksort with Insertion Sort'));\n  console.log(chalk.yellow('Switches to insertion sort for small subarrays (< 10 elements)'));\n}\n\nfunction displayIterativeQuicksort(compare: boolean, theory: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('🔄 Iterative Quicksort Implementation'));\n  console.log(chalk.yellow('Eliminates recursion using explicit stack'));\n}\n\nfunction displayParallelQuicksort(compare: boolean, theory: boolean, benchmark: boolean): void {\n  console.log(chalk.bold('⚡ Parallel Quicksort Processing'));\n  console.log(chalk.yellow('Multi-threaded implementation for large datasets'));\n}\n\n// Merge sort variant functions\nfunction displayBasicMergeSort(visualize: boolean, complexity: boolean, applications: boolean): void {\n  console.log(chalk.bold('🔀 Basic Merge Sort Implementation'));\n  console.log(chalk.yellow('Classic top-down recursive divide-and-conquer approach'));\n}\n\nfunction displayBottomUpMergeSort(visualize: boolean, complexity: boolean, applications: boolean): void {\n  console.log(chalk.bold('⬆️  Bottom-Up Merge Sort'));\n  console.log(chalk.yellow('Iterative implementation building from smallest subarrays'));\n}\n\nfunction displayNaturalMergeSort(visualize: boolean, complexity: boolean, applications: boolean): void {\n  console.log(chalk.bold('🌊 Natural Merge Sort'));\n  console.log(chalk.yellow('Takes advantage of existing sorted runs in data'));\n}\n\nfunction displayInPlaceMergeSort(visualize: boolean, complexity: boolean, applications: boolean): void {\n  console.log(chalk.bold('💾 In-Place Merge Sort'));\n  console.log(chalk.yellow('Space-optimized implementation with O(1) extra space'));\n}\n\nfunction displayMergeSortStability(visualize: boolean, complexity: boolean, applications: boolean): void {\n  console.log(chalk.bold('⚖️  Merge Sort Stability Analysis'));\n  console.log(chalk.yellow('Why stability matters and how merge sort maintains it'));\n}\n","/**\n * Configuration Loader\n * Loads configuration from various sources\n */\n\nimport { ConfigManager } from './config-manager';\nimport { MariaAIConfig } from '../maria-ai';\nimport { CLIOptions } from '../cli';\n\nexport async function loadConfig(options: CLIOptions = {}): Promise<MariaAIConfig> {\n  // Load environment variables first\n  await loadEnvironmentConfig();\n\n  // Start with saved configuration\n  const configManager = await ConfigManager.load(options.config);\n  const baseConfig = configManager.getAll();\n\n  // Override with CLI options\n  const config: MariaAIConfig = {\n    priority: options.priority || baseConfig.priority,\n    autoStart: !options.offline, // Disable auto-start in offline mode\n    healthMonitoring: baseConfig.healthMonitoring,\n  };\n\n  // Load API keys from environment\n  config['apiKeys'] = {\n    OPENAI_API_KEY: process.env['OPENAI_API_KEY'] || '',\n    ANTHROPIC_API_KEY: process.env['ANTHROPIC_API_KEY'] || '',\n    GOOGLE_API_KEY: process.env['GOOGLE_AI_API_KEY'] || process.env['GEMINI_API_KEY'] || '',\n    GEMINI_API_KEY: process.env['GEMINI_API_KEY'] || '',\n    GROQ_API_KEY: process.env['GROQ_API_KEY'] || '',\n    GROK_API_KEY: process.env['GROK_API_KEY'] || '',\n  };\n\n  // Local provider settings\n  config['localProviders'] = {\n    lmstudio: process.env['LMSTUDIO_ENABLED'] !== 'false' && !options.offline,\n    ollama: process.env['OLLAMA_ENABLED'] !== 'false' && !options.offline,\n    vllm: process.env['VLLM_ENABLED'] !== 'false' && !options.offline,\n  };\n\n  // Handle offline mode\n  if (options.offline) {\n    // Only enable local providers in offline mode\n    config['apiKeys'] = {};\n    config['localProviders'] = {\n      lmstudio: true,\n      ollama: true,\n      vllm: true,\n    };\n  }\n\n  // Handle provider/model overrides\n  if (options.provider) {\n    config['enabledProviders'] = [options.provider];\n  }\n\n  return config;\n}\n\nexport async function loadEnvironmentConfig(): Promise<void> {\n  // Try to load .env file if available\n  try {\n    const { importNodeBuiltin, safeDynamicImport } = await import('../utils/import-helper.js');\n    const fs = await safeDynamicImport('fs-extra').catch(() => importNodeBuiltin('fs'));\n    const path = await importNodeBuiltin('path');\n\n    const envPath = path.join(process.cwd(), '.env.local');\n    if (await fs.pathExists(envPath)) {\n      const envContent = await fs.readFile(envPath, 'utf-8');\n\n      // Debug: Log that we're loading env file\n      if (process.env['DEBUG']) {\n        console.log('Loading environment from:', envPath);\n      }\n\n      // Simple env parsing (no external dependency)\n      const lines = envContent.split('\\n');\n      for (const line of lines) {\n        const trimmed = line.trim();\n        if (trimmed && !trimmed.startsWith('#')) {\n          const equalIndex = trimmed.indexOf('=');\n          if (equalIndex > 0) {\n            const key = trimmed.substring(0, equalIndex).trim();\n            const value = trimmed.substring(equalIndex + 1).trim();\n            if (key && value && !process.env[key]) {\n              // Remove quotes if present\n              const cleanValue = value.replace(/^[\"']|[\"']$/g, '');\n              process.env[key] = cleanValue;\n            }\n          }\n        }\n      }\n    }\n  } catch (error: unknown) {\n    // Ignore errors, environment loading is optional\n  }\n}\n","/**\n * UI Utilities\n * Helper functions for CLI display and formatting\n */\n\nimport chalk from 'chalk';\nimport { HealthStatus } from '../types';\n\nexport function printWelcome(): void {\n  console.log(chalk.blue('╔══════════════════════════════════════════════════════════╗'));\n  console.log(chalk.blue('║                                                          ║'));\n  console.log(\n    chalk.blue('║') +\n      chalk.bold.cyan('                    MARIA AI Assistant                   ') +\n      chalk.blue('║'),\n  );\n  console.log(\n    chalk.blue('║') +\n      chalk.gray('              Intelligent CLI with Multi-Model AI         ') +\n      chalk.blue('║'),\n  );\n  console.log(chalk.blue('║                                                          ║'));\n  console.log(chalk.blue('╚══════════════════════════════════════════════════════════╝'));\n  console.log('');\n  console.log(chalk.gray('🚀 Initializing AI providers...'));\n  console.log('');\n}\n\nexport function printStatus(health: HealthStatus): void {\n  console.log(chalk.blue('╔══════════════════════════════════════════════════════════╗'));\n  console.log(\n    chalk.blue('║') +\n      chalk.bold.cyan('                    System Status                        ') +\n      chalk.blue('║'),\n  );\n  console.log(chalk.blue('╚══════════════════════════════════════════════════════════╝'));\n  console.log('');\n\n  // Overall status\n  const statusColor =\n    health.overall === 'healthy'\n      ? chalk.green\n      : health.overall === 'degraded'\n        ? chalk.yellow\n        : chalk.red;\n  const statusIcon =\n    health.overall === 'healthy' ? '✅' : health.overall === 'degraded' ? '⚠️' : '❌';\n\n  console.log(statusColor(`${statusIcon} Overall Status: ${health.overall.toUpperCase()}`));\n  console.log('');\n\n  // System resources\n  console.log(chalk.blue('📊 System Resources:'));\n  console.log(`   CPU: ${formatResourceUsage(health.system.cpu)}%`);\n  console.log(`   Memory: ${formatResourceUsage(health.system.memory)}%`);\n  console.log(`   Disk: ${formatResourceUsage(health.system.disk)}%`);\n  console.log('');\n\n  // Local services\n  console.log(chalk.blue('🤖 Local AI Services:'));\n  Object.entries(health.services).forEach(([name, service]) => {\n    const icon = service.status === 'running' ? '✅' : '⚠️';\n    const status =\n      service.status === 'running' ? chalk.green(service.status) : chalk.yellow(service.status);\n    console.log(`   ${icon} ${name}: ${status}`);\n  });\n  console.log('');\n\n  // Cloud APIs\n  console.log(chalk.blue('☁️  Cloud APIs:'));\n  Object.entries(health.cloudAPIs).forEach(([name, api]) => {\n    const icon = api.status === 'available' ? '✅' : '⚠️';\n    const status = api.status === 'available' ? chalk.green(api.status) : chalk.yellow(api.status);\n    console.log(`   ${icon} ${name}: ${status}`);\n  });\n\n  // Recommendations\n  if (health.recommendations.length > 0) {\n    console.log('');\n    console.log(chalk.blue('💡 Recommendations:'));\n    health.recommendations.forEach((rec) => {\n      console.log(`   • ${chalk.cyan(rec)}`);\n    });\n  }\n\n  console.log('');\n  console.log(chalk.gray(`Last updated: ${new Date(health.timestamp).toLocaleString()}`));\n}\n\nexport function formatResourceUsage(percentage: number): string {\n  if (percentage < 70) {\n    return chalk.green(percentage.toString());\n  } else if (percentage < 90) {\n    return chalk.yellow(percentage.toString());\n  } else {\n    return chalk.red(percentage.toString());\n  }\n}\n\nexport function printProgress(message: string): void {\n  console.log(chalk.blue('⏳'), message);\n}\n\nexport function printSuccess(message: string): void {\n  console.log(chalk.green('✅'), message);\n}\n\nexport function printWarning(message: string): void {\n  console.log(chalk.yellow('⚠️'), message);\n}\n\nexport function printError(message: string): void {\n  console.log(chalk.red('❌'), message);\n}\n\nexport function printInfo(message: string): void {\n  console.log(chalk.blue('ℹ️'), message);\n}\n\nexport function formatTable(data: unknown[], headers: string[]): void {\n  const ensureRowStructure = (row: unknown): Record<string, unknown> => {\n    if (typeof row === 'object' && row !== null) {\n      return row as Record<string, unknown>;\n    }\n    return {};\n  };\n\n  const maxLengths = headers.map((header) =>\n    Math.max(\n      header.length,\n      ...data.map((row) => {\n        const rowData = ensureRowStructure(row);\n        return String(rowData[header] || '').length;\n      }),\n    ),\n  );\n\n  // Print header\n  const headerRow = headers.map((header, i) => header.padEnd(maxLengths[i] || 0)).join(' | ');\n  console.log(chalk.bold(headerRow));\n  console.log(maxLengths.map((len) => '─'.repeat(len || 0)).join('─┼─'));\n\n  // Print data rows\n  data.forEach((row) => {\n    const rowData = ensureRowStructure(row);\n    const dataRow = headers\n      .map((header, i) => String(rowData[header] || '').padEnd(maxLengths[i] || 0))\n      .join(' | ');\n    console.log(dataRow);\n  });\n}\n","/**\n * MARIA CLI - Command Line Interface\n */\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport { MariaAI, MariaAIConfig } from './maria-ai';\nimport { createInteractiveSession } from './services/interactive-session';\nimport { loadConfig } from './config/loader';\nimport { printWelcome, printStatus } from './utils/ui';\nimport { HealthStatus } from './types/common';\n\nexport interface CLIOptions {\n  config?: string;\n  priority?: 'privacy-first' | 'performance' | 'cost-effective' | 'auto';\n  provider?: string;\n  model?: string;\n  debug?: boolean;\n  offline?: boolean;\n}\n\nexport function createCLI(): Command {\n  const program = new Command();\n\n  program\n    .name('maria')\n    .description('MARIA - Intelligent CLI Assistant with Multi-Model AI Support')\n    .version('1.0.7');\n\n  // Interactive chat mode (default)\n  program\n    .command('chat', { isDefault: true })\n    .description('Start interactive chat session')\n    .option(\n      '--priority <mode>',\n      'Set priority mode (privacy-first|performance|cost-effective|auto)',\n    )\n    .option('--provider <name>', 'Force specific provider')\n    .option('--model <name>', 'Force specific model')\n    .option('--offline', 'Use only local providers')\n    .option('--debug', 'Enable debug output')\n    .action(async (options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await startInteractiveChat(config);\n    });\n\n  // One-shot commands\n  program\n    .command('ask <message>')\n    .description('Ask a single question')\n    .option('--priority <mode>', 'Set priority mode')\n    .option('--provider <name>', 'Force specific provider')\n    .option('--model <name>', 'Force specific model')\n    .action(async (message: string, options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await askSingle(message, config);\n    });\n\n  program\n    .command('code <prompt>')\n    .description('Generate code')\n    .option('--language <lang>', 'Programming language')\n    .option('--provider <name>', 'Force specific provider')\n    .action(async (prompt: string, options: CLIOptions & { language?: string }) => {\n      const config = await loadConfig(options);\n      await generateCode(prompt, options.language, config);\n    });\n\n  program\n    .command('vision <image> <prompt>')\n    .description('Analyze image with text prompt')\n    .option('--provider <name>', 'Force specific provider')\n    .action(async (imagePath: string, prompt: string, options: CLIOptions) => {\n      const config = await loadConfig(options);\n      await processVision(imagePath, prompt, config);\n    });\n\n  // System commands\n  program\n    .command('status')\n    .description('Show system status and health')\n    .action(async () => {\n      await showStatus();\n    });\n\n  program\n    .command('models')\n    .description('List available models')\n    .option('--provider <name>', 'Filter by provider')\n    .action(async (options: { provider?: string }) => {\n      await listModels(options.provider);\n    });\n\n  program\n    .command('setup')\n    .description('Run setup wizard')\n    .action(async () => {\n      await runSetup();\n    });\n\n  program\n    .command('health')\n    .description('Check system health')\n    .option('--json', 'Output as JSON')\n    .option('--watch', 'Continuous monitoring')\n    .action(async (options: { json?: boolean; watch?: boolean }) => {\n      await checkHealth(options);\n    });\n\n  return program;\n}\n\nasync function startInteractiveChat(config: MariaAIConfig): Promise<void> {\n  printWelcome();\n\n  const maria = new MariaAI(config);\n  const session = createInteractiveSession(maria);\n\n  await session.start();\n}\n\nasync function askSingle(message: string, config: MariaAIConfig): Promise<void> {\n  const maria = new MariaAI(config);\n\n  // Ensure Maria is initialized before using\n  await maria.initialize();\n\n  try {\n    console.log(chalk.blue('🤖 Thinking...'));\n    const response = await maria.chat(message);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function generateCode(\n  prompt: string,\n  language: string | undefined,\n  config: MariaAIConfig,\n): Promise<void> {\n  const maria = new MariaAI(config);\n\n  // Ensure Maria is initialized before using\n  await maria.initialize();\n\n  try {\n    console.log(chalk.blue('🔧 Generating code...'));\n    const response = await maria.generateCode(prompt, language);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function processVision(\n  imagePath: string,\n  prompt: string,\n  config: MariaAIConfig,\n): Promise<void> {\n  const maria = new MariaAI(config);\n\n  // Ensure Maria is initialized before using\n  await maria.initialize();\n\n  const fs = await (async () => {\n    try {\n      return await import('fs-extra');\n    } catch {\n      const { importNodeBuiltin } = await import('./utils/import-helper.js');\n      return importNodeBuiltin('fs');\n    }\n  })();\n\n  try {\n    console.log(chalk.blue('👁️  Analyzing image...'));\n    const imageBuffer = await fs.readFile(imagePath);\n    const response = await maria.vision(imageBuffer, prompt);\n    console.log('\\n' + chalk.green(response.content));\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error:'), error);\n    process.exit(1);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function showStatus(): Promise<void> {\n  const maria = new MariaAI({ autoStart: false });\n  await maria\n    .getHealth()\n    .then((health) => {\n      printStatus(health as HealthStatus);\n    })\n    .catch((error) => {\n      console.error(chalk.red('❌ Failed to get status:'), error);\n    });\n  await maria.close();\n}\n\nasync function listModels(provider?: string): Promise<void> {\n  const maria = new MariaAI({ autoStart: false });\n\n  try {\n    const models = await maria.getModels();\n    const filtered = provider ? models.filter((m) => m.provider === provider) : models;\n\n    console.log(chalk.blue(`\\n📋 Available Models (${filtered.length}):\\n`));\n\n    filtered.forEach((model) => {\n      const status = model.available ? '✅' : '⚠️';\n      const pricing = model.pricing ? ` ($${model.pricing.input}/${model.pricing.output})` : '';\n      console.log(`${status} ${chalk.bold(model.name)} - ${model.provider}${pricing}`);\n      console.log(`   ${chalk.gray(model.description)}`);\n      if (model.capabilities) {\n        console.log(`   ${chalk.cyan('Capabilities:')} ${model.capabilities.join(', ')}`);\n      }\n      console.log('');\n    });\n  } catch (error: unknown) {\n    console.error(chalk.red('❌ Error listing models:'), error);\n  } finally {\n    await maria.close();\n  }\n}\n\nasync function runSetup(): Promise<void> {\n  console.log(chalk.blue('🚀 Running MARIA setup wizard...'));\n\n  const { spawn } = await (async () => {\n    const { importNodeBuiltin } = await import('./utils/import-helper.js');\n    return importNodeBuiltin('child_process');\n  })();\n  const setupProcess = spawn('./scripts/setup-wizard.sh', [], {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  });\n\n  setupProcess.on('close', (code: number | null) => {\n    if (code === 0) {\n      console.log(chalk.green('✅ Setup completed successfully!'));\n    } else {\n      console.error(chalk.red('❌ Setup failed'));\n      process.exit(1);\n    }\n  });\n}\n\nasync function checkHealth(options: { json?: boolean; watch?: boolean }): Promise<void> {\n  if (options.watch) {\n    console.log(chalk.blue('🔄 Starting health monitoring... Press Ctrl+C to stop'));\n\n    const { spawn } = await (async () => {\n      const { importNodeBuiltin } = await import('./utils/import-helper.js');\n      return importNodeBuiltin('child_process');\n    })();\n    const healthProcess = spawn('./scripts/health-monitor.sh', ['monitor'], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n\n    process.on('SIGINT', () => {\n      healthProcess.kill('SIGINT');\n      process.exit(0);\n    });\n  } else {\n    const { spawn } = await (async () => {\n      const { importNodeBuiltin } = await import('./utils/import-helper.js');\n      return importNodeBuiltin('child_process');\n    })();\n    const args = options.json ? ['json'] : ['status'];\n    const healthProcess = spawn('./scripts/health-monitor.sh', args, {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n\n    healthProcess.on('close', (code: number | null) => {\n      process.exit(code || 0);\n    });\n  }\n}\n","/**\n * Node.js Version Check Utility\n * Ensures the runtime environment meets minimum requirements\n */\n\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nconst MINIMUM_NODE_VERSION = '18.0.0';\nconst RECOMMENDED_NODE_VERSION = '20.0.0';\n\nexport function checkNodeVersion(): void {\n  const currentVersion = process.version;\n\n  console.log(chalk.gray('─'.repeat(60)));\n  console.log(chalk.bold('🔍 Node.js Version Check'));\n  console.log(chalk.gray('─'.repeat(60)));\n\n  // Check if current version meets minimum requirements\n  if (!semver.satisfies(currentVersion, `>=${MINIMUM_NODE_VERSION}`)) {\n    console.error(chalk.red(`\\n❌ Node.js version ${currentVersion} is not supported.`));\n    console.error(chalk.yellow(`Minimum required version: ${MINIMUM_NODE_VERSION}`));\n    console.error(chalk.yellow(`Recommended version: ${RECOMMENDED_NODE_VERSION} or higher`));\n    console.error(chalk.cyan('\\nPlease upgrade Node.js:'));\n    console.error(chalk.gray('  • Using nvm: nvm install 20 && nvm use 20'));\n    console.error(chalk.gray('  • Using nodenv: nodenv install 20.0.0 && nodenv global 20.0.0'));\n    console.error(chalk.gray('  • Download from: https://nodejs.org/'));\n    console.error(chalk.gray('─'.repeat(60)));\n    process.exit(1);\n  }\n\n  // Show current version info\n  console.log(chalk.green(`✅ Node.js ${currentVersion} is supported`));\n\n  // Recommend upgrade if using older version\n  if (semver.lt(currentVersion, RECOMMENDED_NODE_VERSION)) {\n    console.log(\n      chalk.yellow(\n        `\\n💡 Recommendation: Upgrade to Node.js ${RECOMMENDED_NODE_VERSION} or higher for best performance`,\n      ),\n    );\n  }\n\n  console.log(chalk.gray('─'.repeat(60)));\n  console.log();\n}\n\n// Export for use in CLI entry point\nexport default checkNodeVersion;\n","/**\n * MARIA CLI Binary Entry Point\n */\n\nimport { createCLI } from '../cli';\nimport { checkNodeVersion } from '../utils/version-check';\nimport { loadEnvironmentConfig } from '../config/loader';\n\n// Main async function to handle initialization\nasync function main() {\n  // Load environment variables from .env.local file\n  await loadEnvironmentConfig();\n\n  // Check Node.js version before starting\n  checkNodeVersion();\n\n  const program = createCLI();\n\n  // Parse command line arguments\n  program.parse(process.argv);\n}\n\n// Handle uncaught errors gracefully\nprocess.on('uncaughtException', (error) => {\n  console.error('❌ Uncaught Exception:', error.message);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\n👋 Goodbye!');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('\\n👋 Goodbye!');\n  process.exit(0);\n});\n\n// Start the main function\nmain().catch((error) => {\n  console.error('❌ Failed to start:', error);\n  process.exit(1);\n});\n"]}
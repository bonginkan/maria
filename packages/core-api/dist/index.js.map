{"version":3,"sources":["../src/index.ts","../src/trpc.ts","../src/routers/auth.ts","../src/routers/maria-auth.ts","../src/lib/maria-auth.ts","../src/routers/sandbox.ts","../src/lib/sandbox-orchestrator.ts","../src/routers/ai-execution.ts","../src/lib/ai-execution-engine.ts","../src/routers/papers.ts","../src/routers/slides.ts","../src/routers/projects.ts","../src/routers/chat.ts","../src/routers/graph.ts","../src/lib/neo4j-bloom.ts","../src/routers/conversation.ts","../src/routers/storage.ts","../src/lib/storage.ts","../src/routers/agents.ts","../src/routers/index.ts","../src/lib/firebase.ts","../src/websocket.ts","../src/lib/auth.ts"],"sourcesContent":["import express, { Express } from 'express';\nimport cors from 'cors';\nimport { createServer } from 'http';\nimport { Logging } from '@google-cloud/logging';\nimport { createExpressMiddleware } from '@trpc/server/adapters/express';\nimport { appRouter } from './routers';\nimport { createContext } from './trpc';\nimport { initializeFirebase } from './lib/firebase';\nimport { WebSocketManager } from './websocket';\nimport dotenv from 'dotenv';\n\n// Export AppRouter type for client usage\nexport type { AppRouter } from './routers';\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Firebase Admin\ninitializeFirebase();\n\nconst app: Express = express();\nconst port = process.env.PORT || 3001;\n\n// Initialize Google Cloud Logging\nconst logging = new Logging();\nconst log = logging.log('maria-core-api');\n\n// Middleware\napp.use(cors({\n  origin: [\n    'http://localhost:3000', // Next.js dev server\n    'https://studio.maria-code.dev', // Production frontend\n    'https://maria-studio-*.vercel.app', // Vercel preview deployments\n  ],\n  credentials: true,\n}));\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Health check endpoint\napp.get('/health', (_req, res) => {\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version || '1.0.0',\n    environment: process.env.NODE_ENV || 'development',\n  });\n});\n\n// tRPC middleware\napp.use(\n  '/trpc',\n  createExpressMiddleware({\n    router: appRouter,\n    createContext,\n    onError: ({ error }) => {\n      // Log additional context in development\n      if (process.env.NODE_ENV === 'development') {\n        console.error('tRPC Error:', error);\n      } else {\n        log.error(log.entry({ severity: 'ERROR' }, { message: 'tRPC Error', error: error.message }));\n      }\n    },\n  })\n);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Not Found',\n    message: `Route ${req.originalUrl} not found`,\n    availableRoutes: [\n      'GET /health',\n      'POST /trpc/[procedure]',\n      'WS /ws (WebSocket endpoint)',\n    ],\n  });\n});\n\n// Global error handler\napp.use((err: unknown, req: express.Request, res: express.Response) => {\n  const errorMessage = { message: 'Express Error', error: err, url: req.url };\n  if (process.env.NODE_ENV === 'development') {\n    console.error('Express Error:', err);\n  } else {\n    log.error(log.entry({ severity: 'ERROR' }, errorMessage));\n  }\n  const error = err as { message?: string; stack?: string };\n  res.status(500).json({\n    error: 'Internal Server Error',\n    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong',\n    ...(process.env.NODE_ENV === 'development' && { stack: error.stack }),\n  });\n});\n\n// Create HTTP server\nconst httpServer = createServer(app);\n\n// Initialize WebSocket server\nconst wsManager = new WebSocketManager(httpServer);\n\n// Export for use in other modules\nexport { wsManager };\n\n// Graceful shutdown\nconst server = httpServer.listen(port, () => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`🚀 tRPC server listening on port ${port}`);\n    console.log(`🔌 WebSocket server listening on ws://localhost:${port}/ws`);\n  } else {\n    log.info(log.entry({ severity: 'INFO' }, { message: `tRPC server listening on port ${port}` }));\n  }\n});\n\n// Handle server startup errors\nserver.on('error', (err: unknown) => {\n  const error = err as { code?: string };\n  const errorMessage = { message: 'Server error', error: err };\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.error('Server error:', err);\n  } else {\n    log.error(log.entry({ severity: 'ERROR' }, errorMessage));\n  }\n  \n  if (error.code === 'EADDRINUSE') {\n    const portMessage = { message: `Port ${port} is already in use` };\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Port ${port} is already in use`);\n    } else {\n      log.error(log.entry({ severity: 'ERROR' }, portMessage));\n    }\n    process.exit(1);\n  } else {\n    const unexpectedMessage = { message: 'Unexpected server error' };\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Unexpected server error');\n    } else {\n      log.error(log.entry({ severity: 'ERROR' }, unexpectedMessage));\n    }\n    process.exit(1);\n  }\n});\n\n// Handle graceful shutdown\nprocess.on('SIGTERM', () => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Received SIGTERM, shutting down gracefully...');\n  } else {\n    log.info(log.entry({ severity: 'INFO' }, { message: 'Received SIGTERM, shutting down gracefully' }));\n  }\n  server.close(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Server closed');\n    } else {\n      log.info(log.entry({ severity: 'INFO' }, { message: 'Server closed' }));\n    }\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Received SIGINT, shutting down gracefully...');\n  } else {\n    log.info(log.entry({ severity: 'INFO' }, { message: 'Received SIGINT, shutting down gracefully' }));\n  }\n  server.close(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Server closed');\n    } else {\n      log.info(log.entry({ severity: 'INFO' }, { message: 'Server closed' }));\n    }\n    process.exit(0);\n  });\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.error('Uncaught Exception:', err);\n  } else {\n    log.error(log.entry({ severity: 'CRITICAL' }, { message: 'Uncaught Exception', error: err.message, stack: err.stack }));\n  }\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.error('Unhandled Rejection:', reason);\n  } else {\n    log.error(log.entry({ severity: 'CRITICAL' }, { message: 'Unhandled Rejection', reason }));\n  }\n  process.exit(1);\n});\n\nexport default app;","import { initTRPC, TRPCError } from '@trpc/server';\nimport type { CreateExpressContextOptions } from '@trpc/server/adapters/express';\nimport superjson from 'superjson';\nimport { ZodError } from 'zod';\nimport { getAuth } from 'firebase-admin/auth';\nimport { Firestore } from '@google-cloud/firestore';\n\n// Initialize Firestore\nconst firestore = new Firestore({\n  projectId: process.env.MARIA_PROJECT_ID || 'maria-code',\n});\n\n// Context interface\nexport interface Context {\n  req: CreateExpressContextOptions['req'];\n  res: CreateExpressContextOptions['res'];\n  user?: {\n    uid: string;\n    email?: string;\n    role: 'admin' | 'editor' | 'viewer';\n    emailVerified: boolean;\n  };\n  firestore: Firestore;\n}\n\n// Protected context interface - user is guaranteed to be defined\nexport interface ProtectedContext extends Context {\n  user: {\n    uid: string;\n    email?: string;\n    role: 'admin' | 'editor' | 'viewer';\n    emailVerified: boolean;\n  };\n}\n\n// Create context\nexport const createContext = async ({\n  req,\n  res,\n}: CreateExpressContextOptions): Promise<Context> => {\n  // Extract JWT token from Authorization header\n  const authHeader = req.headers.authorization;\n  let user: Context['user'] | undefined;\n\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7);\n    \n    try {\n      // Verify Firebase ID token\n      const decodedToken = await getAuth().verifyIdToken(token);\n      \n      // Get user role from Firestore\n      const userDoc = await firestore\n        .collection('users')\n        .doc(decodedToken.uid)\n        .get();\n      \n      const userData = userDoc.data();\n      \n      user = {\n        uid: decodedToken.uid,\n        email: decodedToken.email,\n        role: userData?.role || 'viewer',\n        emailVerified: decodedToken.email_verified || false,\n      };\n    } catch {\n      // Don't throw error here, let protected procedures handle it\n    }\n  }\n\n  return {\n    req,\n    res,\n    user,\n    firestore,\n  };\n};\n\n// Initialize tRPC\nconst t = initTRPC.context<Context>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n\n// Base router and procedure\nexport const router = t.router;\nexport const procedure = t.procedure;\n\n// Public procedure (alias for compatibility)\nexport const publicProcedure = procedure;\n\n// Authentication middleware with proper type narrowing\nconst isAuthenticated = t.middleware(({ ctx, next }) => {\n  if (!ctx.user) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Authentication required',\n    });\n  }\n  \n  // Type guard to ensure user is defined\n  const authenticatedCtx: ProtectedContext = {\n    ...ctx,\n    user: ctx.user as NonNullable<typeof ctx.user>,\n  };\n  \n  return next({\n    ctx: authenticatedCtx,\n  });\n});\n\n// Role-based middleware - should be used after authentication\nconst hasRole = (requiredRole: 'admin' | 'editor' | 'viewer') =>\n  t.middleware(({ ctx, next }) => {\n    // This middleware assumes authentication has already been checked\n    const user = (ctx as any).user;\n    if (!user) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Authentication required',\n      });\n    }\n\n    const roleHierarchy: Record<string, number> = {\n      viewer: 1,\n      editor: 2,\n      admin: 3,\n    };\n\n    const userRole = user.role;\n    const userRoleLevel = userRole ? roleHierarchy[userRole] : 0;\n    const requiredRoleLevel = roleHierarchy[requiredRole] || 999;\n    \n    if (!userRole || !userRoleLevel || userRoleLevel < requiredRoleLevel) {\n      throw new TRPCError({\n        code: 'FORBIDDEN',\n        message: `${requiredRole} role required`,\n      });\n    }\n\n    return next({\n      ctx: ctx as ProtectedContext,\n    });\n  });\n\n// Email verification middleware - should be used after authentication\nconst isEmailVerified = t.middleware(({ ctx, next }) => {\n  // This middleware assumes authentication has already been checked\n  const user = (ctx as any).user;\n  if (!user) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Authentication required',\n    });\n  }\n\n  if (!user.emailVerified) {\n    throw new TRPCError({\n      code: 'FORBIDDEN',\n      message: 'Email verification required',\n    });\n  }\n\n  return next({\n    ctx: ctx as ProtectedContext,\n  });\n});\n\n// Protected procedures are created below\n\n// Create protected procedures with proper authentication checks\nconst authenticatedProcedure = procedure.use(isAuthenticated);\n\nexport const protectedProcedure = authenticatedProcedure;\nexport const adminProcedure = authenticatedProcedure.use(hasRole('admin'));\nexport const editorProcedure = authenticatedProcedure.use(hasRole('editor'));\nexport const verifiedProcedure = authenticatedProcedure.use(isEmailVerified);\n\n// Update private procedure alias after protectedProcedure is defined\nexport { protectedProcedure as privateProcedure };\n\n// Create caller factory (required by test)\nexport const createCallerFactory = t.createCallerFactory;\n\n// Utility functions for common operations\nexport const createErrorHandler = (operation: string) => (error: unknown) => {\n  \n  if (error instanceof TRPCError) {\n    throw error;\n  }\n  \n  if (error instanceof Error) {\n    throw new TRPCError({\n      code: 'INTERNAL_SERVER_ERROR',\n      message: `${operation} failed: ${error.message}`,\n    });\n  }\n  \n  throw new TRPCError({\n    code: 'INTERNAL_SERVER_ERROR',\n    message: `${operation} failed with unknown error`,\n  });\n};\n\n// Pagination helper\nexport const createPaginationInput = () => ({\n  limit: 50,\n  cursor: undefined as string | undefined,\n});\n\n// Rate limiting helper (basic implementation)\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\nexport const rateLimit = (\n  requests: number = 100, \n  windowMs: number = 15 * 60 * 1000 // 15 minutes\n) =>\n  t.middleware(({ ctx, next }) => {\n    const key = ctx.user?.uid || ctx.req.ip || 'anonymous';\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    \n    const current = requestCounts.get(key);\n    \n    if (!current || current.resetTime < windowStart) {\n      requestCounts.set(key, { count: 1, resetTime: now + windowMs });\n      return next();\n    }\n    \n    if (current.count >= requests) {\n      throw new TRPCError({\n        code: 'TOO_MANY_REQUESTS',\n        message: 'Rate limit exceeded',\n      });\n    }\n    \n    current.count++;\n    return next();\n  });\n\n// Logging middleware\nexport const withLogging = t.middleware(async ({ next }) => {\n  const result = await next();\n  \n  return result;\n});\n\n// Development middleware (only for development)\nexport const devProcedure = process.env.NODE_ENV === 'development' \n  ? procedure.use(withLogging)\n  : procedure;","import { z } from 'zod';\nimport { router, protectedProcedure, createErrorHandler } from '../trpc';\nimport { TRPCError } from '@trpc/server';\n\n// Input schemas\n\nconst updateProfileSchema = z.object({\n  name: z.string().min(1).optional(),\n  bio: z.string().optional(),\n  preferences: z.object({\n    theme: z.enum(['light', 'dark', 'system']).optional(),\n    language: z.string().optional(),\n    fontSize: z.enum(['small', 'medium', 'large']).optional(),\n    autoSave: z.boolean().optional(),\n    autoSaveInterval: z.number().min(10).max(300).optional(),\n    notifications: z.object({\n      email: z.boolean().optional(),\n      push: z.boolean().optional(),\n      mentions: z.boolean().optional(),\n      updates: z.boolean().optional(),\n    }).optional(),\n  }).optional(),\n  privacy: z.object({\n    profileVisibility: z.enum(['public', 'private', 'team']).optional(),\n    activityStatus: z.boolean().optional(),\n    showEmail: z.boolean().optional(),\n  }).optional(),\n  integrations: z.object({\n    googleSlides: z.object({\n      enabled: z.boolean().optional(),\n      autoSync: z.boolean().optional(),\n    }).optional(),\n    github: z.object({\n      enabled: z.boolean().optional(),\n      username: z.string().optional(),\n    }).optional(),\n    neo4j: z.object({\n      enabled: z.boolean().optional(),\n      instanceId: z.string().optional(),\n    }).optional(),\n  }).optional(),\n});\n\n// Output schemas\nconst userSchema = z.object({\n  uid: z.string(),\n  email: z.string().email(),\n  name: z.string(),\n  role: z.enum(['admin', 'editor', 'viewer']),\n  emailVerified: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  bio: z.string().optional(),\n  avatar: z.string().optional(),\n  preferences: z.object({\n    theme: z.enum(['light', 'dark', 'system']),\n    language: z.string(),\n    fontSize: z.enum(['small', 'medium', 'large']),\n    autoSave: z.boolean(),\n    autoSaveInterval: z.number(),\n    notifications: z.object({\n      email: z.boolean(),\n      push: z.boolean(),\n      mentions: z.boolean(),\n      updates: z.boolean(),\n    }),\n  }),\n  privacy: z.object({\n    profileVisibility: z.enum(['public', 'private', 'team']),\n    activityStatus: z.boolean(),\n    showEmail: z.boolean(),\n  }),\n  integrations: z.object({\n    googleSlides: z.object({\n      enabled: z.boolean(),\n      autoSync: z.boolean(),\n    }),\n    github: z.object({\n      enabled: z.boolean(),\n      username: z.string(),\n    }),\n    neo4j: z.object({\n      enabled: z.boolean(),\n      instanceId: z.string(),\n    }),\n  }),\n});\n\nexport const authRouter = router({\n  // Get current user profile\n  me: protectedProcedure\n    .output(userSchema)\n    .query(async ({ ctx }) => {\n      try {\n        const userDoc = await ctx.firestore\n          .collection('users')\n          .doc(ctx.user.uid)\n          .get();\n\n        if (!userDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User profile not found',\n          });\n        }\n\n        const userData = userDoc.data()!;\n        \n        return {\n          uid: ctx.user.uid,\n          email: ctx.user.email!,\n          name: userData.name,\n          role: ctx.user.role,\n          emailVerified: ctx.user.emailVerified,\n          createdAt: userData.createdAt?.toDate() || new Date(),\n          updatedAt: userData.updatedAt?.toDate() || new Date(),\n          bio: userData.bio,\n          avatar: userData.avatar,\n          preferences: {\n            theme: userData.preferences?.theme || 'system',\n            language: userData.preferences?.language || 'en',\n            fontSize: userData.preferences?.fontSize || 'medium',\n            autoSave: userData.preferences?.autoSave ?? true,\n            autoSaveInterval: userData.preferences?.autoSaveInterval || 30,\n            notifications: {\n              email: userData.preferences?.notifications?.email ?? true,\n              push: userData.preferences?.notifications?.push ?? true,\n              mentions: userData.preferences?.notifications?.mentions ?? true,\n              updates: userData.preferences?.notifications?.updates ?? false,\n            },\n          },\n          privacy: {\n            profileVisibility: userData.privacy?.profileVisibility || 'team',\n            activityStatus: userData.privacy?.activityStatus ?? true,\n            showEmail: userData.privacy?.showEmail ?? false,\n          },\n          integrations: {\n            googleSlides: {\n              enabled: userData.integrations?.googleSlides?.enabled ?? false,\n              autoSync: userData.integrations?.googleSlides?.autoSync ?? false,\n            },\n            github: {\n              enabled: userData.integrations?.github?.enabled ?? false,\n              username: userData.integrations?.github?.username || '',\n            },\n            neo4j: {\n              enabled: userData.integrations?.neo4j?.enabled ?? true,\n              instanceId: userData.integrations?.neo4j?.instanceId || '4234c1a0',\n            },\n          },\n        };\n      } catch (error) {\n        throw createErrorHandler('Get user profile')(error);\n      }\n    }),\n\n  // Update user profile\n  updateProfile: protectedProcedure\n    .input(updateProfileSchema)\n    .output(userSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const userRef = ctx.firestore.collection('users').doc(ctx.user.uid);\n        \n        // Build update object\n        const updateData: Record<string, unknown> = {\n          updatedAt: new Date(),\n        };\n\n        if (input.name) updateData.name = input.name;\n        if (input.bio !== undefined) updateData.bio = input.bio;\n        if (input.preferences) {\n          updateData.preferences = input.preferences;\n        }\n        if (input.privacy) {\n          updateData.privacy = input.privacy;\n        }\n        if (input.integrations) {\n          updateData.integrations = input.integrations;\n        }\n\n        await userRef.update(updateData);\n\n        // Return updated user data\n        const updatedDoc = await userRef.get();\n        const userData = updatedDoc.data()!;\n\n        return {\n          uid: ctx.user.uid,\n          email: ctx.user.email!,\n          name: userData.name,\n          role: ctx.user.role,\n          emailVerified: ctx.user.emailVerified,\n          createdAt: userData.createdAt?.toDate() || new Date(),\n          updatedAt: userData.updatedAt?.toDate() || new Date(),\n          bio: userData.bio,\n          avatar: userData.avatar,\n          preferences: {\n            theme: userData.preferences?.theme || 'system',\n            language: userData.preferences?.language || 'en',\n            fontSize: userData.preferences?.fontSize || 'medium',\n            autoSave: userData.preferences?.autoSave ?? true,\n            autoSaveInterval: userData.preferences?.autoSaveInterval || 30,\n            notifications: {\n              email: userData.preferences?.notifications?.email ?? true,\n              push: userData.preferences?.notifications?.push ?? true,\n              mentions: userData.preferences?.notifications?.mentions ?? true,\n              updates: userData.preferences?.notifications?.updates ?? false,\n            },\n          },\n          privacy: {\n            profileVisibility: userData.privacy?.profileVisibility || 'team',\n            activityStatus: userData.privacy?.activityStatus ?? true,\n            showEmail: userData.privacy?.showEmail ?? false,\n          },\n          integrations: {\n            googleSlides: {\n              enabled: userData.integrations?.googleSlides?.enabled ?? false,\n              autoSync: userData.integrations?.googleSlides?.autoSync ?? false,\n            },\n            github: {\n              enabled: userData.integrations?.github?.enabled ?? false,\n              username: userData.integrations?.github?.username || '',\n            },\n            neo4j: {\n              enabled: userData.integrations?.neo4j?.enabled ?? true,\n              instanceId: userData.integrations?.neo4j?.instanceId || '4234c1a0',\n            },\n          },\n        };\n      } catch (error) {\n        throw createErrorHandler('Update profile')(error);\n      }\n    }),\n\n  // Get user activity status\n  getActivityStatus: protectedProcedure\n    .output(z.object({\n      isOnline: z.boolean(),\n      lastSeen: z.date(),\n      currentProject: z.string().optional(),\n    }))\n    .query(async ({ ctx }) => {\n      try {\n        const activityDoc = await ctx.firestore\n          .collection('user_activity')\n          .doc(ctx.user.uid)\n          .get();\n\n        if (!activityDoc.exists) {\n          return {\n            isOnline: false,\n            lastSeen: new Date(),\n            currentProject: undefined,\n          };\n        }\n\n        const activityData = activityDoc.data()!;\n        const lastSeen = activityData.lastSeen?.toDate() || new Date();\n        const isOnline = Date.now() - lastSeen.getTime() < 5 * 60 * 1000; // 5 minutes\n\n        return {\n          isOnline,\n          lastSeen,\n          currentProject: activityData.currentProject,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get activity status')(error);\n      }\n    }),\n\n  // Update activity status\n  updateActivity: protectedProcedure\n    .input(z.object({\n      currentProject: z.string().optional(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        await ctx.firestore\n          .collection('user_activity')\n          .doc(ctx.user.uid)\n          .set({\n            lastSeen: new Date(),\n            currentProject: input.currentProject,\n          }, { merge: true });\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Update activity')(error);\n      }\n    }),\n\n  // List team members (for collaboration features)\n  getTeamMembers: protectedProcedure\n    .output(z.array(z.object({\n      uid: z.string(),\n      name: z.string(),\n      email: z.string().optional(),\n      role: z.enum(['admin', 'editor', 'viewer']),\n      isOnline: z.boolean(),\n      lastSeen: z.date(),\n    })))\n    .query(async ({ ctx }) => {\n      try {\n        // For now, return users from the same organization/team\n        // In a real implementation, you'd have team/organization logic\n        const usersSnapshot = await ctx.firestore\n          .collection('users')\n          .where('privacy.profileVisibility', 'in', ['public', 'team'])\n          .limit(50)\n          .get();\n\n        const teamMembers = await Promise.all(\n          usersSnapshot.docs.map(async (doc) => {\n            const userData = doc.data();\n            \n            // Get activity status\n            const activityDoc = await ctx.firestore\n              .collection('user_activity')\n              .doc(doc.id)\n              .get();\n            \n            const activityData = activityDoc.data();\n            const lastSeen = activityData?.lastSeen?.toDate() || new Date(0);\n            const isOnline = Date.now() - lastSeen.getTime() < 5 * 60 * 1000;\n\n            return {\n              uid: doc.id,\n              name: userData.name,\n              email: userData.privacy?.showEmail ? userData.email : undefined,\n              role: userData.role,\n              isOnline,\n              lastSeen,\n            };\n          })\n        );\n\n        return teamMembers;\n      } catch (error) {\n        throw createErrorHandler('Get team members')(error);\n      }\n    }),\n\n  // Alias for compatibility with tests\n  getProfile: protectedProcedure\n    .output(userSchema)\n    .query(async ({ ctx }) => {\n      try {\n        const userDoc = await ctx.firestore\n          .collection('users')\n          .doc(ctx.user.uid)\n          .get();\n\n        if (!userDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User profile not found',\n          });\n        }\n\n        const userData = userDoc.data()!;\n        \n        return {\n          uid: ctx.user.uid,\n          email: ctx.user.email!,\n          name: userData.name,\n          role: ctx.user.role,\n          emailVerified: ctx.user.emailVerified,\n          createdAt: userData.createdAt?.toDate() || new Date(),\n          updatedAt: userData.updatedAt?.toDate() || new Date(),\n          bio: userData.bio,\n          avatar: userData.avatar,\n          preferences: {\n            theme: userData.preferences?.theme || 'system',\n            language: userData.preferences?.language || 'en',\n            fontSize: userData.preferences?.fontSize || 'medium',\n            autoSave: userData.preferences?.autoSave ?? true,\n            autoSaveInterval: userData.preferences?.autoSaveInterval || 30,\n            notifications: {\n              email: userData.preferences?.notifications?.email ?? true,\n              push: userData.preferences?.notifications?.push ?? true,\n              mentions: userData.preferences?.notifications?.mentions ?? true,\n              updates: userData.preferences?.notifications?.updates ?? false,\n            },\n          },\n          privacy: {\n            profileVisibility: userData.privacy?.profileVisibility || 'team',\n            activityStatus: userData.privacy?.activityStatus ?? true,\n            showEmail: userData.privacy?.showEmail ?? false,\n          },\n          integrations: {\n            googleSlides: {\n              enabled: userData.integrations?.googleSlides?.enabled ?? false,\n              autoSync: userData.integrations?.googleSlides?.autoSync ?? false,\n            },\n            github: {\n              enabled: userData.integrations?.github?.enabled ?? false,\n              username: userData.integrations?.github?.username || '',\n            },\n            neo4j: {\n              enabled: userData.integrations?.neo4j?.enabled ?? true,\n              instanceId: userData.integrations?.neo4j?.instanceId || '4234c1a0',\n            },\n          },\n        };\n      } catch (error) {\n        throw createErrorHandler('Get user profile')(error);\n      }\n    }),\n\n  // Get user settings (alias for profile preferences)\n  getSettings: protectedProcedure\n    .output(z.object({\n      theme: z.enum(['light', 'dark', 'system']),\n      language: z.string(),\n      fontSize: z.enum(['small', 'medium', 'large']),\n      autoSave: z.boolean(),\n      autoSaveInterval: z.number(),\n      notifications: z.object({\n        email: z.boolean(),\n        push: z.boolean(),\n        mentions: z.boolean(),\n        updates: z.boolean(),\n      }),\n    }))\n    .query(async ({ ctx }) => {\n      try {\n        const userDoc = await ctx.firestore\n          .collection('users')\n          .doc(ctx.user.uid)\n          .get();\n\n        if (!userDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User settings not found',\n          });\n        }\n\n        const userData = userDoc.data()!;\n        \n        return {\n          theme: userData.preferences?.theme || 'system',\n          language: userData.preferences?.language || 'en',\n          fontSize: userData.preferences?.fontSize || 'medium',\n          autoSave: userData.preferences?.autoSave ?? true,\n          autoSaveInterval: userData.preferences?.autoSaveInterval || 30,\n          notifications: {\n            email: userData.preferences?.notifications?.email ?? true,\n            push: userData.preferences?.notifications?.push ?? true,\n            mentions: userData.preferences?.notifications?.mentions ?? true,\n            updates: userData.preferences?.notifications?.updates ?? false,\n          },\n        };\n      } catch (error) {\n        throw createErrorHandler('Get user settings')(error);\n      }\n    }),\n});","/**\n * MARIA Auth API Router\n * Handles authentication, registration, and plan management\n */\n\nimport { z } from 'zod';\nimport { router, publicProcedure } from '../trpc';\nimport { TRPCError } from '@trpc/server';\nimport { \n  mariaAuth, \n  CreateUserSchema, \n  LoginSchema, \n  PlanType,\n  PLAN_DEFINITIONS \n} from '../lib/maria-auth';\n\n// Session token validation middleware\nconst withSession = publicProcedure.use(async ({ next, ctx }) => {\n  const token = ctx.req?.headers?.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Session token required',\n    });\n  }\n\n  try {\n    const session = await mariaAuth.getSession(token);\n    return next({\n      ctx: {\n        ...ctx,\n        session,\n        user: {\n          uid: session.uid,\n          email: session.email,\n          name: session.name,\n          plan: session.plan,\n        },\n      },\n    });\n  } catch {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Invalid or expired session',\n    });\n  }\n});\n\nexport const mariaAuthRouter = router({\n  // User registration\n  register: publicProcedure\n    .input(CreateUserSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const result = await mariaAuth.register(input);\n        return {\n          success: true,\n          data: result,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: 'BAD_REQUEST',\n          message: error instanceof Error ? error.message : 'Registration failed',\n        });\n      }\n    }),\n\n  // User login\n  login: publicProcedure\n    .input(LoginSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const result = await mariaAuth.login(input);\n        return {\n          success: true,\n          data: result,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: 'UNAUTHORIZED',\n          message: error instanceof Error ? error.message : 'Login failed',\n        });\n      }\n    }),\n\n  // Get current user session\n  getSession: withSession.query(async ({ ctx }) => {\n    return {\n      success: true,\n      data: ctx.session,\n    };\n  }),\n\n  // Logout\n  logout: withSession.mutation(async ({ ctx }) => {\n    const token = ctx.req?.headers?.authorization?.replace('Bearer ', '');\n    if (!token) {\n      throw new TRPCError({\n        code: 'BAD_REQUEST',\n        message: 'No session token provided',\n      });\n    }\n\n    try {\n      const result = await mariaAuth.logout(token);\n      return {\n        success: true,\n        data: result,\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Logout failed',\n      });\n    }\n  }),\n\n  // Get user profile\n  getProfile: withSession.query(async ({ ctx }) => {\n    return {\n      success: true,\n      data: {\n        uid: ctx.session.uid,\n        email: ctx.session.email,\n        name: ctx.session.name,\n        plan: ctx.session.plan,\n        usage: ctx.session.usage,\n        createdAt: ctx.session.createdAt,\n        lastLoginAt: ctx.session.lastLoginAt,\n        isEmailVerified: ctx.session.isEmailVerified,\n        mfaEnabled: ctx.session.mfaEnabled,\n      },\n    };\n  }),\n\n  // Get plan information\n  getPlanInfo: publicProcedure\n    .input(z.object({ planType: PlanType }))\n    .query(async ({ input }) => {\n      const planInfo = mariaAuth.getPlanInfo(input.planType);\n      return {\n        success: true,\n        data: planInfo,\n      };\n    }),\n\n  // Get all plans\n  getAllPlans: publicProcedure.query(async () => {\n    return {\n      success: true,\n      data: PLAN_DEFINITIONS,\n    };\n  }),\n\n  // Check usage limits\n  checkLimits: withSession.query(async ({ ctx }) => {\n    try {\n      const dailyOk = await mariaAuth.checkLimits(ctx.session.uid, 'dailyRequests');\n      const monthlyOk = await mariaAuth.checkLimits(ctx.session.uid, 'monthlyRequests');\n      \n      return {\n        success: true,\n        data: {\n          canMakeRequest: dailyOk && monthlyOk,\n          limits: {\n            daily: {\n              current: ctx.session.usage.dailyRequests,\n              limit: ctx.session.plan.limits.dailyRequests,\n              available: dailyOk,\n            },\n            monthly: {\n              current: ctx.session.usage.monthlyRequests,\n              limit: ctx.session.plan.limits.monthlyRequests,\n              available: monthlyOk,\n            },\n          },\n        },\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to check limits',\n      });\n    }\n  }),\n\n  // Track API usage\n  trackUsage: withSession.mutation(async ({ ctx }) => {\n    try {\n      const usage = await mariaAuth.trackUsage(ctx.session.uid);\n      return {\n        success: true,\n        data: usage,\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to track usage',\n      });\n    }\n  }),\n\n  // Development endpoints (remove in production)\n  dev: router({\n    // Get all users\n    getAllUsers: publicProcedure.query(async () => {\n      return {\n        success: true,\n        data: mariaAuth.getAllUsers(),\n      };\n    }),\n\n    // Create test users\n    createTestUsers: publicProcedure.mutation(async () => {\n      const testUsers = [\n        {\n          email: 'free@maria-platform.dev',\n          password: 'testpass123',\n          name: 'Free User',\n          plan: 'free' as const,\n        },\n        {\n          email: 'pro@maria-platform.dev',\n          password: 'testpass123',\n          name: 'Pro User',\n          plan: 'pro' as const,\n        },\n        {\n          email: 'max@maria-platform.dev',\n          password: 'testpass123',\n          name: 'Max User',\n          plan: 'max' as const,\n        },\n      ];\n\n      const results = [];\n      for (const userData of testUsers) {\n        try {\n          const result = await mariaAuth.register(userData);\n          results.push({\n            email: userData.email,\n            plan: userData.plan,\n            status: 'created',\n            sessionToken: result.sessionToken,\n          });\n        } catch (error) {\n          results.push({\n            email: userData.email,\n            plan: userData.plan,\n            status: 'error',\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n\n      return {\n        success: true,\n        data: results,\n      };\n    }),\n  }),\n});","/**\n * MARIA Auth Service\n * Plan-based membership system with authentication\n */\n\nimport { z } from 'zod';\nimport bcrypt from 'bcrypt';\nimport { randomBytes } from 'crypto';\n\n// Plan schemas\nexport const PlanType = z.enum(['free', 'pro', 'max']);\nexport type PlanType = z.infer<typeof PlanType>;\n\nexport const UserPlanSchema = z.object({\n  type: PlanType,\n  limits: z.object({\n    dailyRequests: z.number(),\n    monthlyRequests: z.number(),\n    maxProjects: z.number(),\n    maxCollaborators: z.number(),\n    cpuLimitCores: z.number(),\n    memoryLimitMB: z.number(),\n    storageLimitMB: z.number(),\n    aiModelAccess: z.array(z.string()),\n  }),\n  features: z.object({\n    priority: z.enum(['low', 'medium', 'high']),\n    support: z.enum(['community', 'email', '24h']),\n    analytics: z.boolean(),\n    customBranding: z.boolean(),\n    apiAccess: z.boolean(),\n    advancedIntegrations: z.boolean(),\n  }),\n});\n\nexport type UserPlan = z.infer<typeof UserPlanSchema>;\n\n// User auth schemas\nexport const CreateUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  name: z.string().min(1),\n  plan: PlanType.optional().default('free'),\n});\n\nexport const LoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nexport const UserSessionSchema = z.object({\n  uid: z.string(),\n  email: z.string(),\n  name: z.string(),\n  plan: UserPlanSchema,\n  usage: z.object({\n    dailyRequests: z.number(),\n    monthlyRequests: z.number(),\n    lastReset: z.string(), // ISO date\n  }),\n  createdAt: z.string(),\n  lastLoginAt: z.string(),\n  isEmailVerified: z.boolean(),\n  mfaEnabled: z.boolean(),\n});\n\nexport type UserSession = z.infer<typeof UserSessionSchema>;\n\n// Plan definitions\nexport const PLAN_DEFINITIONS: Record<PlanType, UserPlan> = {\n  free: {\n    type: 'free',\n    limits: {\n      dailyRequests: 50,\n      monthlyRequests: 1000,\n      maxProjects: 3,\n      maxCollaborators: 2,\n      cpuLimitCores: 0.5,\n      memoryLimitMB: 512,\n      storageLimitMB: 100,\n      aiModelAccess: ['gemini-2.5-pro-preview'],\n    },\n    features: {\n      priority: 'low',\n      support: 'community',\n      analytics: false,\n      customBranding: false,\n      apiAccess: false,\n      advancedIntegrations: false,\n    },\n  },\n  pro: {\n    type: 'pro',\n    limits: {\n      dailyRequests: 500,\n      monthlyRequests: 10000,\n      maxProjects: 25,\n      maxCollaborators: 10,\n      cpuLimitCores: 2,\n      memoryLimitMB: 2048,\n      storageLimitMB: 1000,\n      aiModelAccess: ['gemini-2.5-pro-preview', 'grok-4-latest'],\n    },\n    features: {\n      priority: 'medium',\n      support: 'email',\n      analytics: true,\n      customBranding: false,\n      apiAccess: true,\n      advancedIntegrations: true,\n    },\n  },\n  max: {\n    type: 'max',\n    limits: {\n      dailyRequests: 2000,\n      monthlyRequests: 50000,\n      maxProjects: 100,\n      maxCollaborators: 50,\n      cpuLimitCores: 8,\n      memoryLimitMB: 8192,\n      storageLimitMB: 10000,\n      aiModelAccess: ['gemini-2.5-pro-preview', 'grok-4-latest'],\n    },\n    features: {\n      priority: 'high',\n      support: '24h',\n      analytics: true,\n      customBranding: true,\n      apiAccess: true,\n      advancedIntegrations: true,\n    },\n  },\n};\n\n// In-memory storage for development (replace with Firestore in production)\nclass AuthStore {\n  private users: Map<string, any> = new Map();\n  private sessions: Map<string, UserSession> = new Map();\n\n  // User management\n  async createUser(data: z.infer<typeof CreateUserSchema>) {\n    const uid = this.generateId();\n    const hashedPassword = await bcrypt.hash(data.password, 12);\n    \n    const user = {\n      uid,\n      email: data.email.toLowerCase(),\n      name: data.name,\n      password: hashedPassword,\n      plan: PLAN_DEFINITIONS[data.plan],\n      usage: {\n        dailyRequests: 0,\n        monthlyRequests: 0,\n        lastReset: new Date().toISOString(),\n      },\n      createdAt: new Date().toISOString(),\n      lastLoginAt: new Date().toISOString(),\n      isEmailVerified: false,\n      mfaEnabled: false,\n    };\n\n    this.users.set(uid, user);\n    return { uid, email: user.email, name: user.name };\n  }\n\n  async getUserByEmail(email: string) {\n    for (const [uid, user] of this.users) {\n      if (user.email === email.toLowerCase()) {\n        return { uid, ...user };\n      }\n    }\n    return null;\n  }\n\n  async getUserById(uid: string) {\n    return this.users.get(uid) || null;\n  }\n\n  async updateUser(uid: string, updates: Partial<any>) {\n    const user = this.users.get(uid);\n    if (!user) return null;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(uid, updatedUser);\n    return updatedUser;\n  }\n\n  // Session management\n  async createSession(uid: string): Promise<string> {\n    const user = await this.getUserById(uid);\n    if (!user) throw new Error('User not found');\n\n    const sessionToken = this.generateToken();\n    const session: UserSession = {\n      uid: user.uid,\n      email: user.email,\n      name: user.name,\n      plan: user.plan,\n      usage: user.usage,\n      createdAt: user.createdAt,\n      lastLoginAt: new Date().toISOString(),\n      isEmailVerified: user.isEmailVerified,\n      mfaEnabled: user.mfaEnabled,\n    };\n\n    this.sessions.set(sessionToken, session);\n    \n    // Update last login\n    await this.updateUser(uid, { lastLoginAt: session.lastLoginAt });\n    \n    return sessionToken;\n  }\n\n  async getSession(token: string): Promise<UserSession | null> {\n    return this.sessions.get(token) || null;\n  }\n\n  async destroySession(token: string): Promise<boolean> {\n    return this.sessions.delete(token);\n  }\n\n  // Usage tracking\n  async incrementUsage(uid: string, type: 'daily' | 'monthly' = 'daily') {\n    const user = await this.getUserById(uid);\n    if (!user) return null;\n\n    const now = new Date();\n    const lastReset = new Date(user.usage.lastReset);\n    \n    // Reset daily counter if it's a new day\n    if (type === 'daily' && now.getDate() !== lastReset.getDate()) {\n      user.usage.dailyRequests = 0;\n    }\n    \n    // Reset monthly counter if it's a new month\n    if (type === 'monthly' && now.getMonth() !== lastReset.getMonth()) {\n      user.usage.monthlyRequests = 0;\n    }\n\n    user.usage.dailyRequests += 1;\n    user.usage.monthlyRequests += 1;\n    user.usage.lastReset = now.toISOString();\n\n    await this.updateUser(uid, { usage: user.usage });\n    return user.usage;\n  }\n\n  // Utility methods\n  private generateId(): string {\n    return randomBytes(16).toString('hex');\n  }\n\n  private generateToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  // Development helper: get all users\n  getAllUsers() {\n    return Array.from(this.users.entries()).map(([uid, user]) => ({\n      uid,\n      email: user.email,\n      name: user.name,\n      plan: user.plan.type,\n      usage: user.usage,\n      createdAt: user.createdAt,\n      lastLoginAt: user.lastLoginAt,\n    }));\n  }\n}\n\n// Global auth store instance\nexport const authStore = new AuthStore();\n\n// Auth service class\nexport class MariaAuthService {\n  // User registration\n  async register(data: z.infer<typeof CreateUserSchema>) {\n    // Check if user already exists\n    const existingUser = await authStore.getUserByEmail(data.email);\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n\n    // Create user\n    const user = await authStore.createUser(data);\n    \n    // Create session\n    const sessionToken = await authStore.createSession(user.uid);\n    \n    return {\n      user,\n      sessionToken,\n      message: 'User registered successfully',\n    };\n  }\n\n  // User login\n  async login(data: z.infer<typeof LoginSchema>) {\n    const user = await authStore.getUserByEmail(data.email);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Verify password\n    const isValid = await bcrypt.compare(data.password, user.password);\n    if (!isValid) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Create session\n    const sessionToken = await authStore.createSession(user.uid);\n    \n    return {\n      user: {\n        uid: user.uid,\n        email: user.email,\n        name: user.name,\n        plan: user.plan.type,\n      },\n      sessionToken,\n      message: 'Login successful',\n    };\n  }\n\n  // Get user session\n  async getSession(token: string) {\n    const session = await authStore.getSession(token);\n    if (!session) {\n      throw new Error('Invalid or expired session');\n    }\n    return session;\n  }\n\n  // Logout\n  async logout(token: string) {\n    const destroyed = await authStore.destroySession(token);\n    return {\n      success: destroyed,\n      message: destroyed ? 'Logout successful' : 'Session not found',\n    };\n  }\n\n  // Check resource limits\n  async checkLimits(uid: string, resource: keyof UserPlan['limits']) {\n    const user = await authStore.getUserById(uid);\n    if (!user) throw new Error('User not found');\n\n    const limit = user.plan.limits[resource];\n    const usage = user.usage;\n\n    switch (resource) {\n      case 'dailyRequests':\n        return usage.dailyRequests < limit;\n      case 'monthlyRequests':\n        return usage.monthlyRequests < limit;\n      default:\n        return true;\n    }\n  }\n\n  // Increment usage\n  async trackUsage(uid: string) {\n    return await authStore.incrementUsage(uid);\n  }\n\n  // Get plan info\n  getPlanInfo(planType: PlanType) {\n    return PLAN_DEFINITIONS[planType];\n  }\n\n  // Development helper\n  getAllUsers() {\n    return authStore.getAllUsers();\n  }\n}\n\n// Export singleton instance\nexport const mariaAuth = new MariaAuthService();","/**\n * Sandbox API Router\n * Handles sandbox orchestration and management\n */\n\nimport { z } from 'zod';\nimport { router, publicProcedure } from '../trpc';\nimport { TRPCError } from '@trpc/server';\nimport { mariaAuth } from '../lib/maria-auth';\nimport { sandboxOrchestrator } from '../lib/sandbox-orchestrator';\n\n// Session token validation middleware for sandbox operations\nconst withAuth = publicProcedure.use(async ({ next, ctx }) => {\n  const token = ctx.req?.headers?.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Authentication token required',\n    });\n  }\n\n  try {\n    const session = await mariaAuth.getSession(token);\n    return next({\n      ctx: {\n        ...ctx,\n        session,\n        userId: session.uid,\n      },\n    });\n  } catch {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Invalid or expired session',\n    });\n  }\n});\n\nexport const sandboxRouter = router({\n  // Get or create user sandbox\n  getOrCreate: withAuth.mutation(async ({ ctx }) => {\n    try {\n      const sandbox = await sandboxOrchestrator.getOrCreateSandbox(ctx.userId);\n      return {\n        success: true,\n        data: sandbox,\n      };\n    } catch (error) {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: error instanceof Error ? error.message : 'Failed to create sandbox',\n      });\n    }\n  }),\n\n  // Get sandbox status\n  getStatus: withAuth\n    .input(z.object({ sandboxId: z.string().optional() }))\n    .query(async ({ input, ctx }) => {\n      try {\n        let sandbox;\n        \n        if (input.sandboxId) {\n          sandbox = await sandboxOrchestrator.getSandboxStatus(input.sandboxId);\n        } else {\n          // Get user's current sandbox\n          sandbox = await sandboxOrchestrator.getOrCreateSandbox(ctx.userId);\n        }\n\n        if (!sandbox) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Sandbox not found',\n          });\n        }\n\n        // Only allow users to see their own sandboxes\n        if (sandbox.userId !== ctx.userId) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied to this sandbox',\n          });\n        }\n\n        return {\n          success: true,\n          data: sandbox,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) throw error;\n        \n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to get sandbox status',\n        });\n      }\n    }),\n\n  // Stop sandbox\n  stop: withAuth\n    .input(z.object({ sandboxId: z.string() }))\n    .mutation(async ({ input, ctx }) => {\n      try {\n        const sandbox = await sandboxOrchestrator.getSandboxStatus(input.sandboxId);\n        \n        if (!sandbox) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Sandbox not found',\n          });\n        }\n\n        // Only allow users to stop their own sandboxes\n        if (sandbox.userId !== ctx.userId) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied to this sandbox',\n          });\n        }\n\n        const stopped = await sandboxOrchestrator.stopSandbox(input.sandboxId);\n        \n        return {\n          success: stopped,\n          message: stopped ? 'Sandbox stopped successfully' : 'Failed to stop sandbox',\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) throw error;\n        \n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to stop sandbox',\n        });\n      }\n    }),\n\n  // Update activity (keep sandbox alive)\n  updateActivity: withAuth\n    .input(z.object({ sandboxId: z.string() }))\n    .mutation(async ({ input, ctx }) => {\n      try {\n        const sandbox = await sandboxOrchestrator.getSandboxStatus(input.sandboxId);\n        \n        if (!sandbox) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Sandbox not found',\n          });\n        }\n\n        // Only allow users to update their own sandboxes\n        if (sandbox.userId !== ctx.userId) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied to this sandbox',\n          });\n        }\n\n        const updated = await sandboxOrchestrator.updateActivity(input.sandboxId);\n        \n        return {\n          success: updated,\n          message: updated ? 'Activity updated' : 'Failed to update activity',\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) throw error;\n        \n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to update activity',\n        });\n      }\n    }),\n\n  // Get sandbox metrics\n  getMetrics: withAuth\n    .input(z.object({ sandboxId: z.string() }))\n    .query(async ({ input, ctx }) => {\n      try {\n        const sandbox = await sandboxOrchestrator.getSandboxStatus(input.sandboxId);\n        \n        if (!sandbox) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Sandbox not found',\n          });\n        }\n\n        // Only allow users to see their own sandbox metrics\n        if (sandbox.userId !== ctx.userId) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied to this sandbox',\n          });\n        }\n\n        const metrics = await sandboxOrchestrator.getMetrics(input.sandboxId);\n        \n        return {\n          success: true,\n          data: {\n            sandbox,\n            metrics,\n            cost: sandboxOrchestrator.calculateCost(sandbox),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) throw error;\n        \n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to get metrics',\n        });\n      }\n    }),\n\n  // Admin endpoints (for development and monitoring)\n  admin: router({\n    // List all sandboxes\n    listAll: withAuth.query(async ({ ctx }) => {\n      // Simple admin check - in production, this should be more robust\n      if (!ctx.session.email.includes('admin') && !ctx.session.email.includes('bonginkan')) {\n        throw new TRPCError({\n          code: 'FORBIDDEN',\n          message: 'Admin access required',\n        });\n      }\n\n      try {\n        const sandboxes = await sandboxOrchestrator.listAllSandboxes();\n        \n        return {\n          success: true,\n          data: sandboxes.map(sandbox => ({\n            ...sandbox,\n            cost: sandboxOrchestrator.calculateCost(sandbox),\n          })),\n        };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to list sandboxes',\n        });\n      }\n    }),\n\n    // Get resource usage summary\n    getResourceSummary: withAuth.query(async ({ ctx }) => {\n      // Simple admin check\n      if (!ctx.session.email.includes('admin') && !ctx.session.email.includes('bonginkan')) {\n        throw new TRPCError({\n          code: 'FORBIDDEN',\n          message: 'Admin access required',\n        });\n      }\n\n      try {\n        const sandboxes = await sandboxOrchestrator.listAllSandboxes();\n        \n        const summary = {\n          total: sandboxes.length,\n          byStatus: {} as Record<string, number>,\n          totalCost: 0,\n          totalResources: {\n            cpuCores: 0,\n            memoryMB: 0,\n            storageMB: 0,\n          },\n        };\n\n        sandboxes.forEach(sandbox => {\n          // Count by status\n          summary.byStatus[sandbox.status] = (summary.byStatus[sandbox.status] || 0) + 1;\n          \n          // Sum costs\n          summary.totalCost += sandboxOrchestrator.calculateCost(sandbox);\n          \n          // Sum resources for active sandboxes\n          if (['ready', 'running'].includes(sandbox.status)) {\n            summary.totalResources.cpuCores += sandbox.resources.cpuCores;\n            summary.totalResources.memoryMB += sandbox.resources.memoryMB;\n            summary.totalResources.storageMB += sandbox.resources.storageMB;\n          }\n        });\n\n        return {\n          success: true,\n          data: summary,\n        };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to get resource summary',\n        });\n      }\n    }),\n  }),\n\n  // Development endpoints\n  dev: router({\n    // Create test sandboxes\n    createTestSandboxes: publicProcedure.mutation(async () => {\n      try {\n        const testUsers = ['free-user-123', 'pro-user-456', 'max-user-789'];\n        const results = [];\n\n        for (const userId of testUsers) {\n          try {\n            const sandbox = await sandboxOrchestrator.getOrCreateSandbox(userId);\n            results.push({\n              userId,\n              sandboxId: sandbox.id,\n              status: 'created',\n              resources: sandbox.resources,\n            });\n          } catch (error) {\n            results.push({\n              userId,\n              status: 'error',\n              error: error instanceof Error ? error.message : 'Unknown error',\n            });\n          }\n        }\n\n        return {\n          success: true,\n          data: results,\n        };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to create test sandboxes',\n        });\n      }\n    }),\n  }),\n});","/**\n * Sandbox Orchestrator\n * Manages Cloud Run sandbox environments for MARIA users\n */\n\nimport { z } from 'zod';\nimport { mariaAuth } from './maria-auth';\n\n// Sandbox resource schemas\nexport const SandboxResourcesSchema = z.object({\n  cpuCores: z.number(),\n  memoryMB: z.number(),\n  storageMB: z.number(),\n  gpuType: z.enum(['none', 'nvidia-t4', 'nvidia-v100']).optional(),\n  timeoutMinutes: z.number().default(30),\n});\n\nexport type SandboxResources = z.infer<typeof SandboxResourcesSchema>;\n\nexport const SandboxStatusSchema = z.enum([\n  'creating',\n  'starting',\n  'ready',\n  'running',\n  'stopping',\n  'stopped',\n  'error',\n  'timeout'\n]);\n\nexport type SandboxStatus = z.infer<typeof SandboxStatusSchema>;\n\nexport const SandboxInstanceSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  status: SandboxStatusSchema,\n  resources: SandboxResourcesSchema,\n  createdAt: z.string(),\n  startedAt: z.string().optional(),\n  lastActivityAt: z.string(),\n  endpointUrl: z.string().optional(),\n  containerImage: z.string(),\n  environment: z.record(z.string()),\n  metrics: z.object({\n    cpuUsagePercent: z.number(),\n    memoryUsageMB: z.number(),\n    storageUsageMB: z.number(),\n    networkInMB: z.number(),\n    networkOutMB: z.number(),\n  }).optional(),\n});\n\nexport type SandboxInstance = z.infer<typeof SandboxInstanceSchema>;\n\n// Resource allocation based on user plan\nconst PLAN_RESOURCES = {\n  free: {\n    cpuCores: 0.5,\n    memoryMB: 512,\n    storageMB: 1024,\n    timeoutMinutes: 30,\n  },\n  pro: {\n    cpuCores: 2,\n    memoryMB: 2048,\n    storageMB: 4096,\n    gpuType: 'nvidia-t4' as const,\n    timeoutMinutes: 60,\n  },\n  max: {\n    cpuCores: 8,\n    memoryMB: 8192,\n    storageMB: 16384,\n    gpuType: 'nvidia-v100' as const,\n    timeoutMinutes: 120,\n  },\n} as const;\n\n// In-memory storage for development (replace with Cloud Storage/Firestore in production)\nclass SandboxStore {\n  private instances: Map<string, SandboxInstance> = new Map();\n  private userSandboxes: Map<string, string> = new Map(); // userId -> sandboxId\n\n  async createInstance(userId: string, resources: SandboxResources): Promise<string> {\n    const sandboxId = this.generateId();\n    const now = new Date().toISOString();\n    \n    const instance: SandboxInstance = {\n      id: sandboxId,\n      userId,\n      status: 'creating',\n      resources,\n      createdAt: now,\n      lastActivityAt: now,\n      containerImage: 'gcr.io/maria-code/user-sandbox:latest',\n      environment: {\n        MARIA_USER_ID: userId,\n        MARIA_SANDBOX_ID: sandboxId,\n        NODE_ENV: 'sandbox',\n      },\n    };\n\n    this.instances.set(sandboxId, instance);\n    this.userSandboxes.set(userId, sandboxId);\n    \n    return sandboxId;\n  }\n\n  async getInstance(sandboxId: string): Promise<SandboxInstance | null> {\n    return this.instances.get(sandboxId) || null;\n  }\n\n  async getUserSandbox(userId: string): Promise<SandboxInstance | null> {\n    const sandboxId = this.userSandboxes.get(userId);\n    if (!sandboxId) return null;\n    return this.getInstance(sandboxId);\n  }\n\n  async updateInstance(sandboxId: string, updates: Partial<SandboxInstance>): Promise<boolean> {\n    const instance = this.instances.get(sandboxId);\n    if (!instance) return false;\n    \n    const updatedInstance = { ...instance, ...updates };\n    this.instances.set(sandboxId, updatedInstance);\n    return true;\n  }\n\n  async deleteInstance(sandboxId: string): Promise<boolean> {\n    const instance = this.instances.get(sandboxId);\n    if (!instance) return false;\n    \n    this.instances.delete(sandboxId);\n    this.userSandboxes.delete(instance.userId);\n    return true;\n  }\n\n  async getAllInstances(): Promise<SandboxInstance[]> {\n    return Array.from(this.instances.values());\n  }\n\n  async getInstancesByStatus(status: SandboxStatus): Promise<SandboxInstance[]> {\n    return Array.from(this.instances.values()).filter(i => i.status === status);\n  }\n\n  private generateId(): string {\n    return `sandbox-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Global store instance\nconst sandboxStore = new SandboxStore();\n\n// Sandbox Orchestrator class\nexport class SandboxOrchestrator {\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Start cleanup process for idle sandboxes\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupIdleSandboxes();\n    }, 5 * 60 * 1000); // Check every 5 minutes\n  }\n\n  // Create or get user sandbox\n  async getOrCreateSandbox(userId: string): Promise<SandboxInstance> {\n    // Check if user already has an active sandbox\n    let sandbox = await sandboxStore.getUserSandbox(userId);\n    \n    if (sandbox && ['ready', 'running'].includes(sandbox.status)) {\n      // Update last activity\n      await sandboxStore.updateInstance(sandbox.id, {\n        lastActivityAt: new Date().toISOString(),\n      });\n      return sandbox;\n    }\n\n    // Get user session to determine plan\n    let userPlan = 'free';\n    try {\n      // In a real implementation, we'd get this from a valid session\n      const allUsers = mariaAuth.getAllUsers();\n      const user = allUsers.find(u => u.uid === userId);\n      if (user) {\n        userPlan = user.plan;\n      }\n    } catch {\n      console.warn('Could not determine user plan, defaulting to free');\n    }\n\n    // Get resources for user plan\n    let resources: SandboxResources;\n    if (userPlan === 'free' || userPlan === 'pro' || userPlan === 'max') {\n      resources = PLAN_RESOURCES[userPlan];\n    } else {\n      resources = PLAN_RESOURCES.free;\n    }\n\n    // Create new sandbox\n    const sandboxId = await sandboxStore.createInstance(userId, resources);\n    \n    // Simulate sandbox creation process\n    await this.createCloudRunSandbox(sandboxId);\n    \n    const newSandbox = await sandboxStore.getInstance(sandboxId);\n    if (!newSandbox) {\n      throw new Error('Failed to create sandbox instance');\n    }\n\n    return newSandbox;\n  }\n\n  // Get sandbox status\n  async getSandboxStatus(sandboxId: string): Promise<SandboxInstance | null> {\n    return await sandboxStore.getInstance(sandboxId);\n  }\n\n  // Stop user sandbox\n  async stopSandbox(sandboxId: string): Promise<boolean> {\n    const sandbox = await sandboxStore.getInstance(sandboxId);\n    if (!sandbox) return false;\n\n    await sandboxStore.updateInstance(sandboxId, {\n      status: 'stopping',\n      lastActivityAt: new Date().toISOString(),\n    });\n\n    // Simulate stopping process\n    await this.stopCloudRunSandbox(sandboxId);\n\n    await sandboxStore.updateInstance(sandboxId, {\n      status: 'stopped',\n    });\n\n    return true;\n  }\n\n  // Update sandbox activity\n  async updateActivity(sandboxId: string): Promise<boolean> {\n    return await sandboxStore.updateInstance(sandboxId, {\n      lastActivityAt: new Date().toISOString(),\n    });\n  }\n\n  // Get resource usage metrics\n  async getMetrics(sandboxId: string): Promise<SandboxInstance['metrics'] | null> {\n    const sandbox = await sandboxStore.getInstance(sandboxId);\n    if (!sandbox) return null;\n\n    // Simulate metrics collection\n    const metrics = {\n      cpuUsagePercent: Math.random() * 100,\n      memoryUsageMB: Math.random() * sandbox.resources.memoryMB,\n      storageUsageMB: Math.random() * sandbox.resources.storageMB,\n      networkInMB: Math.random() * 100,\n      networkOutMB: Math.random() * 50,\n    };\n\n    await sandboxStore.updateInstance(sandboxId, { metrics });\n    \n    return metrics;\n  }\n\n  // List all sandboxes (admin function)\n  async listAllSandboxes(): Promise<SandboxInstance[]> {\n    return await sandboxStore.getAllInstances();\n  }\n\n  // Cleanup idle sandboxes\n  private async cleanupIdleSandboxes(): Promise<void> {\n    const allSandboxes = await sandboxStore.getAllInstances();\n    const now = Date.now();\n    \n    for (const sandbox of allSandboxes) {\n      const lastActivity = new Date(sandbox.lastActivityAt).getTime();\n      const idleTime = now - lastActivity;\n      const timeoutMs = sandbox.resources.timeoutMinutes * 60 * 1000;\n      \n      if (idleTime > timeoutMs && ['ready', 'running'].includes(sandbox.status)) {\n        console.log(`Cleaning up idle sandbox: ${sandbox.id}`);\n        await sandboxStore.updateInstance(sandbox.id, {\n          status: 'timeout',\n        });\n        \n        // In production, this would actually stop the Cloud Run instance\n        await this.stopCloudRunSandbox(sandbox.id);\n      }\n    }\n  }\n\n  // Mock Cloud Run operations (replace with actual Cloud Run API calls)\n  private async createCloudRunSandbox(sandboxId: string): Promise<void> {\n    const sandbox = await sandboxStore.getInstance(sandboxId);\n    if (!sandbox) return;\n\n    // Simulate creation delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    await sandboxStore.updateInstance(sandboxId, {\n      status: 'starting',\n      startedAt: new Date().toISOString(),\n    });\n\n    // Simulate startup delay\n    await new Promise(resolve => setTimeout(resolve, 3000));\n\n    await sandboxStore.updateInstance(sandboxId, {\n      status: 'ready',\n      endpointUrl: `https://sandbox-${sandboxId}-uc.a.run.app`,\n    });\n\n    console.log(`Sandbox ${sandboxId} created and ready`);\n  }\n\n  private async stopCloudRunSandbox(sandboxId: string): Promise<void> {\n    // Simulate stopping delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`Sandbox ${sandboxId} stopped`);\n  }\n\n  // Calculate cost (for monitoring)\n  calculateCost(sandbox: SandboxInstance): number {\n    if (!sandbox.startedAt) return 0;\n    \n    const startTime = new Date(sandbox.startedAt).getTime();\n    const endTime = sandbox.status === 'stopped' ? \n      Date.now() : \n      new Date(sandbox.lastActivityAt).getTime();\n    \n    const runtimeHours = (endTime - startTime) / (1000 * 60 * 60);\n    \n    // Simple cost calculation based on resources\n    const cpuCost = sandbox.resources.cpuCores * 0.05; // $0.05 per CPU hour\n    const memoryCost = (sandbox.resources.memoryMB / 1024) * 0.01; // $0.01 per GB hour\n    const gpuCost = sandbox.resources.gpuType === 'nvidia-v100' ? 2.0 : \n                   sandbox.resources.gpuType === 'nvidia-t4' ? 0.5 : 0;\n    \n    return (cpuCost + memoryCost + gpuCost) * runtimeHours;\n  }\n\n  // Cleanup on shutdown\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n  }\n}\n\n// Export singleton instance\nexport const sandboxOrchestrator = new SandboxOrchestrator();","/**\n * AI Execution API Router\n * Handles AI model execution requests\n */\n\nimport { z } from 'zod';\nimport { router, publicProcedure } from '../trpc';\nimport { TRPCError } from '@trpc/server';\nimport { mariaAuth } from '../lib/maria-auth';\nimport { aiExecutionEngine, AIRequestSchema } from '../lib/ai-execution-engine';\n\n// Session token validation middleware\nconst withAuth = publicProcedure.use(async ({ next, ctx }) => {\n  const token = ctx.req?.headers?.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Authentication token required',\n    });\n  }\n\n  try {\n    const session = await mariaAuth.getSession(token);\n    return next({\n      ctx: {\n        ...ctx,\n        session,\n        userId: session.uid,\n      },\n    });\n  } catch {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'Invalid or expired session',\n    });\n  }\n});\n\nexport const aiExecutionRouter = router({\n  // Execute AI request\n  execute: withAuth\n    .input(AIRequestSchema)\n    .mutation(async ({ input, ctx }) => {\n      try {\n        // Check user's daily/monthly limits\n        const canMakeRequest = await mariaAuth.checkLimits(ctx.session.uid, 'dailyRequests') &&\n                              await mariaAuth.checkLimits(ctx.session.uid, 'monthlyRequests');\n        \n        if (!canMakeRequest) {\n          throw new TRPCError({\n            code: 'TOO_MANY_REQUESTS',\n            message: 'Daily or monthly request limit exceeded',\n          });\n        }\n\n        // Execute AI request\n        const response = await aiExecutionEngine.execute(input, ctx.session);\n        \n        // Track usage\n        await mariaAuth.trackUsage(ctx.session.uid);\n        \n        return {\n          success: true,\n          data: response,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) throw error;\n        \n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: error instanceof Error ? error.message : 'AI execution failed',\n        });\n      }\n    }),\n\n  // Execute streaming AI request\n  executeStream: withAuth\n    .input(AIRequestSchema.extend({ stream: z.literal(true) }))\n    .subscription(async function* ({ input, ctx }) {\n      try {\n        // Check user's daily/monthly limits\n        const canMakeRequest = await mariaAuth.checkLimits(ctx.session.uid, 'dailyRequests') &&\n                              await mariaAuth.checkLimits(ctx.session.uid, 'monthlyRequests');\n        \n        if (!canMakeRequest) {\n          throw new TRPCError({\n            code: 'TOO_MANY_REQUESTS',\n            message: 'Daily or monthly request limit exceeded',\n          });\n        }\n\n        // Track usage at start\n        await mariaAuth.trackUsage(ctx.session.uid);\n        \n        // Execute streaming request\n        for await (const chunk of aiExecutionEngine.executeStream(input, ctx.session)) {\n          yield {\n            type: 'chunk',\n            data: chunk,\n          };\n        }\n        \n        yield {\n          type: 'done',\n          data: null,\n        };\n      } catch (error) {\n        yield {\n          type: 'error',\n          data: error instanceof Error ? error.message : 'Stream execution failed',\n        };\n      }\n    }),\n\n  // Get available models for user\n  getAvailableModels: withAuth.query(async ({ ctx }) => {\n    try {\n      const userModels = ctx.session.plan.limits.aiModelAccess;\n      \n      const modelInfo = {\n        'gemini-2.5-pro-preview': {\n          name: 'Gemini 2.5 Pro',\n          provider: 'Google',\n          capabilities: ['text', 'multimodal'],\n          contextWindow: 128000,\n          description: 'Advanced reasoning and analysis',\n        },\n        'grok-4-latest': {\n          name: 'Grok-4',\n          provider: 'xAI',\n          capabilities: ['text', 'creative'],\n          contextWindow: 32000,\n          description: 'Creative and humorous responses',\n        },\n      };\n\n      const availableModels = userModels\n        .filter(model => model in modelInfo)\n        .map(model => ({\n          id: model,\n          ...modelInfo[model as keyof typeof modelInfo],\n          available: true,\n        }));\n\n      return {\n        success: true,\n        data: availableModels,\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get available models',\n      });\n    }\n  }),\n\n  // Get usage limits and current usage\n  getUsageLimits: withAuth.query(async ({ ctx }) => {\n    try {\n      const dailyOk = await mariaAuth.checkLimits(ctx.session.uid, 'dailyRequests');\n      const monthlyOk = await mariaAuth.checkLimits(ctx.session.uid, 'monthlyRequests');\n      \n      return {\n        success: true,\n        data: {\n          canMakeRequest: dailyOk && monthlyOk,\n          limits: {\n            daily: {\n              current: ctx.session.usage.dailyRequests,\n              limit: ctx.session.plan.limits.dailyRequests,\n              available: dailyOk,\n            },\n            monthly: {\n              current: ctx.session.usage.monthlyRequests,\n              limit: ctx.session.plan.limits.monthlyRequests,\n              available: monthlyOk,\n            },\n          },\n          plan: {\n            type: ctx.session.plan.type,\n            features: ctx.session.plan.features,\n          },\n        },\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get usage limits',\n      });\n    }\n  }),\n\n  // Get AI execution statistics (admin/dev)\n  getStats: withAuth.query(async ({ ctx }) => {\n    // Simple admin check\n    if (!ctx.session.email.includes('admin') && !ctx.session.email.includes('bonginkan')) {\n      throw new TRPCError({\n        code: 'FORBIDDEN',\n        message: 'Admin access required',\n      });\n    }\n\n    try {\n      const stats = aiExecutionEngine.getStats();\n      return {\n        success: true,\n        data: stats,\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get stats',\n      });\n    }\n  }),\n\n  // Health check for AI models\n  healthCheck: publicProcedure.query(async () => {\n    try {\n      const health = await aiExecutionEngine.healthCheck();\n      return {\n        success: true,\n        data: {\n          ...health,\n          overall: health.gemini || health.grok,\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Health check failed',\n      });\n    }\n  }),\n\n  // Development endpoints\n  dev: router({\n    // Test AI models\n    testModels: publicProcedure.mutation(async () => {\n      try {\n        const testPrompt = 'Respond with exactly: \"Hello from AI model test\"';\n        const results = [];\n\n        // Test Gemini\n        try {\n          const geminiResponse = await aiExecutionEngine.execute({\n            model: 'gemini-2.5-pro-preview',\n            prompt: testPrompt,\n            temperature: 0.1,\n            maxTokens: 50,\n            stream: false,\n          });\n          results.push({\n            model: 'gemini-2.5-pro-preview',\n            status: 'success',\n            response: geminiResponse.content.substring(0, 100),\n            processingTime: geminiResponse.processingTimeMs,\n          });\n        } catch (error) {\n          results.push({\n            model: 'gemini-2.5-pro-preview',\n            status: 'error',\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n\n        // Test Grok\n        try {\n          const grokResponse = await aiExecutionEngine.execute({\n            model: 'grok-4-latest',\n            prompt: testPrompt,\n            temperature: 0.1,\n            maxTokens: 50,\n            stream: false,\n          });\n          results.push({\n            model: 'grok-4-latest',\n            status: 'success',\n            response: grokResponse.content.substring(0, 100),\n            processingTime: grokResponse.processingTimeMs,\n          });\n        } catch (error) {\n          results.push({\n            model: 'grok-4-latest',\n            status: 'error',\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n\n        return {\n          success: true,\n          data: results,\n        };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to test models',\n        });\n      }\n    }),\n\n    // Clear cache\n    clearCache: publicProcedure.mutation(async () => {\n      try {\n        aiExecutionEngine.clearCache();\n        return {\n          success: true,\n          message: 'Cache cleared successfully',\n        };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to clear cache',\n        });\n      }\n    }),\n  }),\n});","/**\n * AI Execution Engine\n * Handles AI model integration with Vertex AI and xAI\n */\n\nimport { z } from 'zod';\nimport { type UserSession } from './maria-auth';\n\n// AI Model schemas\nexport const AIModelSchema = z.enum([\n  'gemini-2.5-pro-preview',\n  'grok-4-latest',\n]);\n\nexport type AIModel = z.infer<typeof AIModelSchema>;\n\nexport const AIRequestSchema = z.object({\n  model: AIModelSchema,\n  prompt: z.string(),\n  context: z.string().optional(),\n  temperature: z.number().min(0).max(2).default(0.7),\n  maxTokens: z.number().min(1).max(8192).default(2048),\n  stream: z.boolean().default(false),\n  systemPrompt: z.string().optional(),\n});\n\nexport type AIRequest = z.infer<typeof AIRequestSchema>;\n\nexport const AIResponseSchema = z.object({\n  id: z.string(),\n  model: AIModelSchema,\n  content: z.string(),\n  usage: z.object({\n    promptTokens: z.number(),\n    completionTokens: z.number(),\n    totalTokens: z.number(),\n  }),\n  finishReason: z.enum(['stop', 'length', 'content_filter', 'function_call']),\n  processingTimeMs: z.number(),\n  cached: z.boolean().default(false),\n});\n\nexport type AIResponse = z.infer<typeof AIResponseSchema>;\n\n// Response cache for optimization\nclass ResponseCache {\n  private cache = new Map<string, { response: AIResponse; timestamp: number }>();\n  private maxAge = 10 * 60 * 1000; // 10 minutes\n  private maxSize = 1000;\n\n  generateKey(request: AIRequest): string {\n    return `${request.model}:${this.hashString(request.prompt + (request.context || '') + (request.systemPrompt || ''))}:${request.temperature}:${request.maxTokens}`;\n  }\n\n  get(key: string): AIResponse | null {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n    \n    if (Date.now() - cached.timestamp > this.maxAge) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return { ...cached.response, cached: true };\n  }\n\n  set(key: string, response: AIResponse): void {\n    // Remove oldest entries if cache is full\n    if (this.cache.size >= this.maxSize) {\n      const oldestKey = this.cache.keys().next().value;\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n      }\n    }\n    \n    this.cache.set(key, {\n      response: { ...response, cached: false },\n      timestamp: Date.now(),\n    });\n  }\n\n  private hashString(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(36);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  getStats(): { size: number; maxSize: number; hitRate: number } {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitRate: 0, // TODO: Track hit rate\n    };\n  }\n}\n\n// AI Execution Engine class\nexport class AIExecutionEngine {\n  private grokBaseUrl = 'https://api.x.ai/v1';\n  private cache = new ResponseCache();\n  private requestCount = 0;\n  private errorCount = 0;\n\n  constructor() {\n    // Use Vertex AI through ai-agents package\n  }\n\n  // Main execution method\n  async execute(request: AIRequest, user?: UserSession): Promise<AIResponse> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // Check cache first\n      const cacheKey = this.cache.generateKey(request);\n      const cachedResponse = this.cache.get(cacheKey);\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n\n      // Check user permissions for model access\n      if (user && !this.hasModelAccess(user, request.model)) {\n        throw new Error(`Access denied to model ${request.model} for plan ${user.plan.type}`);\n      }\n\n      // Route to appropriate model\n      let response: AIResponse;\n      switch (request.model) {\n        case 'gemini-2.5-pro-preview':\n          response = await this.executeGemini(request);\n          break;\n        case 'grok-4-latest':\n          response = await this.executeGrok(request);\n          break;\n        default:\n          throw new Error(`Unsupported model: ${request.model}`);\n      }\n\n      // Calculate processing time\n      response.processingTimeMs = Date.now() - startTime;\n\n      // Cache the response\n      this.cache.set(cacheKey, response);\n\n      return response;\n    } catch (error) {\n      this.errorCount++;\n      throw new Error(`AI execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Gemini execution (TODO: Implement with Vertex AI through ai-agents)\n  private async executeGemini(request: AIRequest): Promise<AIResponse> {\n    // TODO: Use Vertex AI through ai-agents package\n    return {\n      id: this.generateId(),\n      model: request.model,\n      content: 'Gemini execution not yet implemented - use ai-agents package',\n      usage: {\n        promptTokens: 0,\n        completionTokens: 0,\n        totalTokens: 0,\n      },\n      finishReason: 'stop',\n      processingTimeMs: 0,\n      cached: false,\n    };\n  }\n\n  // Grok execution (xAI API)\n  private async executeGrok(request: AIRequest): Promise<AIResponse> {\n    const grokApiKey = process.env.GROK_API_KEY;\n    if (!grokApiKey) {\n      throw new Error('GROK_API_KEY not found in environment variables');\n    }\n\n    try {\n      const messages = [];\n      \n      if (request.systemPrompt) {\n        messages.push({\n          role: 'system',\n          content: request.systemPrompt,\n        });\n      }\n      \n      if (request.context) {\n        messages.push({\n          role: 'user',\n          content: `Context: ${request.context}`,\n        });\n      }\n      \n      messages.push({\n        role: 'user',\n        content: request.prompt,\n      });\n\n      const response = await fetch(`${this.grokBaseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${grokApiKey}`,\n        },\n        body: JSON.stringify({\n          model: 'grok-beta',\n          messages,\n          temperature: request.temperature,\n          max_tokens: request.maxTokens,\n          stream: request.stream,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Grok API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      const choice = data.choices?.[0];\n      \n      if (!choice) {\n        throw new Error('No response from Grok API');\n      }\n\n      return {\n        id: data.id || this.generateId(),\n        model: request.model,\n        content: choice.message.content,\n        usage: {\n          promptTokens: data.usage?.prompt_tokens || 0,\n          completionTokens: data.usage?.completion_tokens || 0,\n          totalTokens: data.usage?.total_tokens || 0,\n        },\n        finishReason: choice.finish_reason === 'stop' ? 'stop' : 'length',\n        processingTimeMs: 0, // Will be set by caller\n        cached: false,\n      };\n    } catch (error) {\n      throw new Error(`Grok execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Check if user has access to model based on their plan\n  private hasModelAccess(user: UserSession, model: AIModel): boolean {\n    const allowedModels = user.plan.limits.aiModelAccess;\n    return allowedModels.includes(model);\n  }\n\n\n  // Generate unique ID\n  private generateId(): string {\n    return `ai-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Streaming support for real-time responses\n  async *executeStream(request: AIRequest, user?: UserSession): AsyncGenerator<string, void, unknown> {\n    if (request.model === 'grok-4-latest') {\n      yield* this.executeGrokStream(request, user);\n    } else {\n      // For non-streaming models, yield the complete response\n      const response = await this.execute(request, user);\n      yield response.content;\n    }\n  }\n\n  private async *executeGrokStream(request: AIRequest, user?: UserSession): AsyncGenerator<string, void, unknown> {\n    const grokApiKey = process.env.GROK_API_KEY;\n    if (!grokApiKey) {\n      throw new Error('GROK_API_KEY not found in environment variables');\n    }\n\n    if (user && !this.hasModelAccess(user, request.model)) {\n      throw new Error(`Access denied to model ${request.model} for plan ${user.plan.type}`);\n    }\n\n    const messages = [];\n    \n    if (request.systemPrompt) {\n      messages.push({\n        role: 'system',\n        content: request.systemPrompt,\n      });\n    }\n    \n    if (request.context) {\n      messages.push({\n        role: 'user',\n        content: `Context: ${request.context}`,\n      });\n    }\n    \n    messages.push({\n      role: 'user',\n      content: request.prompt,\n    });\n\n    const response = await fetch(`${this.grokBaseUrl}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${grokApiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'grok-beta',\n        messages,\n        temperature: request.temperature,\n        max_tokens: request.maxTokens,\n        stream: true,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Grok API error: ${response.status}`);\n    }\n\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('No response body reader available');\n    }\n\n    const decoder = new TextDecoder();\n    \n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        \n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') {\n              return;\n            }\n            \n            try {\n              const parsed = JSON.parse(data);\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                yield content;\n              }\n            } catch {\n              // Skip invalid JSON lines\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  // Get execution statistics\n  getStats(): {\n    requestCount: number;\n    errorCount: number;\n    successRate: number;\n    cacheStats: ReturnType<ResponseCache['getStats']>;\n  } {\n    return {\n      requestCount: this.requestCount,\n      errorCount: this.errorCount,\n      successRate: this.requestCount > 0 ? (this.requestCount - this.errorCount) / this.requestCount : 0,\n      cacheStats: this.cache.getStats(),\n    };\n  }\n\n  // Clear cache\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ gemini: boolean; grok: boolean }> {\n    const results = { gemini: false, grok: false };\n\n    // Test Gemini\n    try {\n      await this.executeGemini({\n        model: 'gemini-2.5-pro-preview',\n        prompt: 'Hello',\n        temperature: 0.1,\n        maxTokens: 10,\n        stream: false,\n      });\n      results.gemini = true;\n    } catch (error) {\n      console.warn('Gemini health check failed:', error);\n    }\n\n    // Test Grok\n    try {\n      await this.executeGrok({\n        model: 'grok-4-latest',\n        prompt: 'Hello',\n        temperature: 0.1,\n        maxTokens: 10,\n        stream: false,\n      });\n      results.grok = true;\n    } catch (error) {\n      console.warn('Grok health check failed:', error);\n    }\n\n    return results;\n  }\n}\n\n// Export singleton instance\nexport const aiExecutionEngine = new AIExecutionEngine();","import { z } from 'zod';\nimport { router, protectedProcedure, editorProcedure, createErrorHandler } from '../trpc';\nimport { TRPCError } from '@trpc/server';\n\n// Input schemas\nconst createPaperSchema = z.object({\n  title: z.string().min(1),\n  description: z.string().optional(),\n  templateId: z.enum(['ieee', 'acm', 'blank']).default('blank'),\n  content: z.object({\n    latex: z.string().default(''),\n    bibliography: z.string().default(''),\n  }),\n});\n\nconst updatePaperSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  status: z.enum(['draft', 'in_progress', 'completed', 'archived']).optional(),\n  content: z.object({\n    latex: z.string().optional(),\n    bibliography: z.string().optional(),\n  }).optional(),\n});\n\n// const paperVersionSchema = z.object({\n//   paperId: z.string(),\n//   content: z.object({\n//     latex: z.string(),\n//     bibliography: z.string(),\n//   }),\n//   comment: z.string().optional(),\n// });\n\n// Output schemas\nconst paperSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string().optional(),\n  templateId: z.string(),\n  status: z.enum(['draft', 'in_progress', 'completed', 'archived']),\n  content: z.object({\n    latex: z.string(),\n    bibliography: z.string(),\n  }),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  createdBy: z.string(),\n  collaborators: z.array(z.string()),\n  version: z.number(),\n  wordCount: z.number(),\n  citationCount: z.number(),\n});\n\nconst paperVersionHistorySchema = z.object({\n  id: z.string(),\n  paperId: z.string(),\n  version: z.number(),\n  content: z.object({\n    latex: z.string(),\n    bibliography: z.string(),\n  }),\n  comment: z.string().optional(),\n  createdAt: z.date(),\n  createdBy: z.string(),\n  wordCount: z.number(),\n  changes: z.object({\n    added: z.number(),\n    removed: z.number(),\n    modified: z.number(),\n  }),\n});\n\nexport const papersRouter = router({\n  // Get all papers for current user\n  list: protectedProcedure\n    .input(z.object({\n      status: z.enum(['draft', 'in_progress', 'completed', 'archived']).optional(),\n      limit: z.number().min(1).max(100).default(20),\n      cursor: z.string().optional(),\n    }))\n    .output(z.object({\n      papers: z.array(paperSchema),\n      nextCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        let query = ctx.firestore\n          .collection('papers')\n          .where('createdBy', '==', ctx.user.uid)\n          .orderBy('updatedAt', 'desc');\n\n        if (input.status) {\n          query = query.where('status', '==', input.status);\n        }\n\n        if (input.cursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('papers')\n            .doc(input.cursor)\n            .get();\n          if (cursorDoc.exists) {\n            query = query.startAfter(cursorDoc);\n          }\n        }\n\n        const snapshot = await query.limit(input.limit + 1).get();\n        const papers = [];\n        let nextCursor: string | undefined;\n\n        for (let i = 0; i < snapshot.docs.length; i++) {\n          if (i === input.limit) {\n            const cursorDoc = snapshot.docs[i];\n            if (cursorDoc) {\n              nextCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = snapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          papers.push({\n            id: doc.id,\n            title: data.title,\n            description: data.description,\n            templateId: data.templateId,\n            status: data.status,\n            content: data.content,\n            createdAt: data.createdAt.toDate(),\n            updatedAt: data.updatedAt.toDate(),\n            createdBy: data.createdBy,\n            collaborators: data.collaborators || [],\n            version: data.version || 1,\n            wordCount: data.wordCount || 0,\n            citationCount: data.citationCount || 0,\n          });\n        }\n\n        return { papers, nextCursor };\n      } catch (error) {\n        throw createErrorHandler('List papers')(error);\n      }\n    }),\n\n  // Get a specific paper\n  get: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .output(paperSchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const doc = await ctx.firestore\n          .collection('papers')\n          .doc(input.id)\n          .get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Paper not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Check if user has access\n        if (data.createdBy !== ctx.user.uid && \n            !data.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        return {\n          id: doc.id,\n          title: data.title,\n          description: data.description,\n          templateId: data.templateId,\n          status: data.status,\n          content: data.content,\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate(),\n          createdBy: data.createdBy,\n          collaborators: data.collaborators || [],\n          version: data.version || 1,\n          wordCount: data.wordCount || 0,\n          citationCount: data.citationCount || 0,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get paper')(error);\n      }\n    }),\n\n  // Create a new paper\n  create: editorProcedure\n    .input(createPaperSchema)\n    .output(paperSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const now = new Date();\n        \n        // Generate initial LaTeX content based on template\n        let initialLatex = input.content.latex;\n        if (!initialLatex && input.templateId !== 'blank') {\n          initialLatex = generateTemplateContent(input.templateId, input.title);\n        }\n\n        const paperData = {\n          title: input.title,\n          description: input.description,\n          templateId: input.templateId,\n          status: 'draft' as const,\n          content: {\n            latex: initialLatex,\n            bibliography: input.content.bibliography,\n          },\n          createdAt: now,\n          updatedAt: now,\n          createdBy: ctx.user.uid,\n          collaborators: [],\n          version: 1,\n          wordCount: countWords(initialLatex),\n          citationCount: countCitations(input.content.bibliography),\n        };\n\n        const docRef = await ctx.firestore\n          .collection('papers')\n          .add(paperData);\n\n        // Create initial version\n        await ctx.firestore\n          .collection('paper_versions')\n          .add({\n            paperId: docRef.id,\n            version: 1,\n            content: paperData.content,\n            comment: 'Initial version',\n            createdAt: now,\n            createdBy: ctx.user.uid,\n            wordCount: paperData.wordCount,\n            changes: { added: paperData.wordCount, removed: 0, modified: 0 },\n          });\n\n        return {\n          id: docRef.id,\n          ...paperData,\n        };\n      } catch (error) {\n        throw createErrorHandler('Create paper')(error);\n      }\n    }),\n\n  // Update a paper\n  update: protectedProcedure\n    .input(updatePaperSchema)\n    .output(paperSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('papers').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Paper not found',\n          });\n        }\n\n        const currentData = doc.data()!;\n\n        // Check permissions\n        if (currentData.createdBy !== ctx.user.uid && \n            !currentData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const now = new Date();\n        const updateData: Record<string, unknown> = {\n          updatedAt: now,\n        };\n\n        if (input.title) updateData.title = input.title;\n        if (input.description !== undefined) updateData.description = input.description;\n        if (input.status) updateData.status = input.status;\n        \n        if (input.content) {\n          const newContent = {\n            latex: input.content.latex ?? currentData.content.latex,\n            bibliography: input.content.bibliography ?? currentData.content.bibliography,\n          };\n          \n          updateData.content = newContent;\n          updateData.wordCount = countWords(newContent.latex);\n          updateData.citationCount = countCitations(newContent.bibliography);\n          \n          // Create new version if content changed\n          if (input.content.latex && input.content.latex !== currentData.content.latex) {\n            updateData.version = (currentData.version || 1) + 1;\n            \n            const changes = calculateChanges(currentData.content.latex, newContent.latex);\n            \n            await ctx.firestore\n              .collection('paper_versions')\n              .add({\n                paperId: input.id,\n                version: updateData.version,\n                content: newContent,\n                createdAt: now,\n                createdBy: ctx.user.uid,\n                wordCount: updateData.wordCount,\n                changes,\n              });\n          }\n        }\n\n        await docRef.update(updateData);\n\n        const updatedDoc = await docRef.get();\n        const updatedData = updatedDoc.data()!;\n\n        return {\n          id: input.id,\n          title: updatedData.title,\n          description: updatedData.description,\n          templateId: updatedData.templateId,\n          status: updatedData.status,\n          content: updatedData.content,\n          createdAt: updatedData.createdAt.toDate(),\n          updatedAt: updatedData.updatedAt.toDate(),\n          createdBy: updatedData.createdBy,\n          collaborators: updatedData.collaborators || [],\n          version: updatedData.version || 1,\n          wordCount: updatedData.wordCount || 0,\n          citationCount: updatedData.citationCount || 0,\n        };\n      } catch (error) {\n        throw createErrorHandler('Update paper')(error);\n      }\n    }),\n\n  // Delete a paper\n  delete: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('papers').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Paper not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Only creator can delete\n        if (data.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator can delete this paper',\n          });\n        }\n\n        // Delete versions\n        const versionsSnapshot = await ctx.firestore\n          .collection('paper_versions')\n          .where('paperId', '==', input.id)\n          .get();\n\n        const batch = ctx.firestore.batch();\n        versionsSnapshot.docs.forEach(doc => batch.delete(doc.ref));\n        batch.delete(docRef);\n\n        await batch.commit();\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Delete paper')(error);\n      }\n    }),\n\n  // Get version history\n  getVersions: protectedProcedure\n    .input(z.object({ paperId: z.string() }))\n    .output(z.array(paperVersionHistorySchema))\n    .query(async ({ ctx, input }) => {\n      try {\n        // Check paper access first\n        const paperDoc = await ctx.firestore\n          .collection('papers')\n          .doc(input.paperId)\n          .get();\n\n        if (!paperDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Paper not found',\n          });\n        }\n\n        const paperData = paperDoc.data()!;\n        if (paperData.createdBy !== ctx.user.uid && \n            !paperData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const versionsSnapshot = await ctx.firestore\n          .collection('paper_versions')\n          .where('paperId', '==', input.paperId)\n          .orderBy('version', 'desc')\n          .get();\n\n        return versionsSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            paperId: data.paperId,\n            version: data.version,\n            content: data.content,\n            comment: data.comment,\n            createdAt: data.createdAt.toDate(),\n            createdBy: data.createdBy,\n            wordCount: data.wordCount,\n            changes: data.changes,\n          };\n        });\n      } catch (error) {\n        throw createErrorHandler('Get versions')(error);\n      }\n    }),\n\n  // Add collaborator\n  addCollaborator: editorProcedure\n    .input(z.object({\n      paperId: z.string(),\n      email: z.string().email(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const paperRef = ctx.firestore.collection('papers').doc(input.paperId);\n        const paperDoc = await paperRef.get();\n\n        if (!paperDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Paper not found',\n          });\n        }\n\n        const paperData = paperDoc.data()!;\n        if (paperData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator can add collaborators',\n          });\n        }\n\n        // Find user by email\n        const userSnapshot = await ctx.firestore\n          .collection('users')\n          .where('email', '==', input.email)\n          .limit(1)\n          .get();\n\n        if (userSnapshot.empty) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User not found',\n          });\n        }\n\n        const userDoc = userSnapshot.docs[0];\n        if (!userDoc) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User document not found',\n          });\n        }\n        const userId = userDoc.id;\n        const collaborators = paperData.collaborators || [];\n\n        if (!collaborators.includes(userId)) {\n          collaborators.push(userId);\n          await paperRef.update({ collaborators });\n        }\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Add collaborator')(error);\n      }\n    }),\n});\n\n// Helper functions\nfunction generateTemplateContent(templateId: string, title: string): string {\n  switch (templateId) {\n    case 'ieee':\n      return `\\\\documentclass[conference]{IEEEtran}\n\\\\usepackage{cite}\n\\\\usepackage{amsmath,amssymb,amsfonts}\n\\\\usepackage{algorithmic}\n\\\\usepackage{graphicx}\n\\\\usepackage{textcomp}\n\\\\usepackage{xcolor}\n\n\\\\begin{document}\n\n\\\\title{${title}}\n\n\\\\author{\\\\IEEEauthorblockN{Author Name}\n\\\\IEEEauthorblockA{\\\\textit{Department} \\\\\\\\\n\\\\textit{University Name}\\\\\\\\\nCity, Country \\\\\\\\\nemail@university.edu}}\n\n\\\\maketitle\n\n\\\\begin{abstract}\nThis document is a template for your IEEE conference paper.\n\\\\end{abstract}\n\n\\\\begin{IEEEkeywords}\nkeyword1, keyword2, keyword3\n\\\\end{IEEEkeywords}\n\n\\\\section{Introduction}\nYour introduction goes here.\n\n\\\\section{Methodology}\nYour methodology goes here.\n\n\\\\section{Results}\nYour results go here.\n\n\\\\section{Conclusion}\nYour conclusion goes here.\n\n\\\\begin{thebibliography}{00}\n\\\\bibitem{b1} Reference 1\n\\\\end{thebibliography}\n\n\\\\end{document}`;\n\n    case 'acm':\n      return `\\\\documentclass[sigconf]{acmart}\n\n\\\\begin{document}\n\n\\\\title{${title}}\n\n\\\\author{Author Name}\n\\\\affiliation{%\n  \\\\institution{University Name}\n  \\\\city{City}\n  \\\\country{Country}\n}\n\\\\email{email@university.edu}\n\n\\\\begin{abstract}\nThis document is a template for your ACM conference paper.\n\\\\end{abstract}\n\n\\\\keywords{keyword1, keyword2, keyword3}\n\n\\\\maketitle\n\n\\\\section{Introduction}\nYour introduction goes here.\n\n\\\\section{Related Work}\nYour related work goes here.\n\n\\\\section{Methodology}\nYour methodology goes here.\n\n\\\\section{Results}\nYour results go here.\n\n\\\\section{Conclusion}\nYour conclusion goes here.\n\n\\\\bibliographystyle{ACM-Reference-Format}\n\\\\bibliography{references}\n\n\\\\end{document}`;\n\n    default:\n      return `\\\\documentclass{article}\n\\\\usepackage[utf8]{inputenc}\n\\\\usepackage{amsmath}\n\\\\usepackage{amsfonts}\n\\\\usepackage{amssymb}\n\\\\usepackage{graphicx}\n\n\\\\title{${title}}\n\\\\author{Your Name}\n\\\\date{\\\\today}\n\n\\\\begin{document}\n\n\\\\maketitle\n\n\\\\begin{abstract}\nYour abstract goes here.\n\\\\end{abstract}\n\n\\\\section{Introduction}\nYour introduction goes here.\n\n\\\\section{Conclusion}\nYour conclusion goes here.\n\n\\\\bibliographystyle{plain}\n\\\\bibliography{references}\n\n\\\\end{document}`;\n  }\n}\n\nfunction countWords(latex: string): number {\n  // Simple word count - remove LaTeX commands and count words\n  const text = latex\n    .replace(/\\\\[a-zA-Z]+\\{[^}]*\\}/g, '') // Remove commands with arguments\n    .replace(/\\\\[a-zA-Z]+/g, '') // Remove commands without arguments\n    .replace(/\\{[^}]*\\}/g, '') // Remove remaining braces\n    .replace(/\\$[^$]*\\$/g, '') // Remove inline math\n    .replace(/\\$\\$[^$]*\\$\\$/g, '') // Remove display math\n    .replace(/[^a-zA-Z\\s]/g, ' ') // Replace non-letters with spaces\n    .trim();\n  \n  return text ? text.split(/\\s+/).length : 0;\n}\n\nfunction countCitations(bibliography: string): number {\n  // Count @article, @book, etc. entries\n  const matches = bibliography.match(/@\\w+\\{/g);\n  return matches ? matches.length : 0;\n}\n\nfunction calculateChanges(oldText: string, newText: string) {\n  // Simple diff calculation - in practice, you'd use a proper diff algorithm\n  const oldWords = oldText.split(/\\s+/).length;\n  const newWords = newText.split(/\\s+/).length;\n  \n  const added = Math.max(0, newWords - oldWords);\n  const removed = Math.max(0, oldWords - newWords);\n  const modified = Math.min(oldWords, newWords);\n  \n  return { added, removed, modified };\n}","import { z } from 'zod';\nimport { router, protectedProcedure, editorProcedure, createErrorHandler } from '../trpc';\nimport { TRPCError } from '@trpc/server';\n\n// Input schemas\nconst slideContentSchema = z.object({\n  title: z.string().optional(),\n  subtitle: z.string().optional(),\n  body: z.string().optional(),\n  imageUrl: z.string().optional(),\n  chartData: z.any().optional(),\n});\n\nconst slideSchema = z.object({\n  id: z.string(),\n  type: z.enum(['title', 'content', 'image', 'chart']),\n  content: slideContentSchema,\n});\n\nconst createPresentationSchema = z.object({\n  title: z.string().min(1),\n  description: z.string().optional(),\n  templateId: z.enum(['blank', 'business', 'academic']).default('blank'),\n  slides: z.array(slideSchema).optional(),\n});\n\nconst updatePresentationSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  status: z.enum(['draft', 'in_progress', 'completed', 'archived']).optional(),\n  slides: z.array(slideSchema).optional(),\n  theme: z.string().optional(),\n});\n\nconst aiGenerateSchema = z.object({\n  presentationId: z.string(),\n  slideId: z.string(),\n  prompt: z.string().min(1),\n  type: z.enum(['content', 'outline', 'bullets', 'summary']).default('content'),\n});\n\n// Output schemas\nconst presentationSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string().optional(),\n  templateId: z.string(),\n  theme: z.string(),\n  status: z.enum(['draft', 'in_progress', 'completed', 'archived']),\n  slides: z.array(slideSchema),\n  slideCount: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  createdBy: z.string(),\n  collaborators: z.array(z.string()),\n  thumbnail: z.string().optional(),\n  googleSlidesId: z.string().optional(),\n});\n\nexport const slidesRouter = router({\n  // Get all presentations for current user\n  list: protectedProcedure\n    .input(z.object({\n      status: z.enum(['draft', 'in_progress', 'completed', 'archived']).optional(),\n      limit: z.number().min(1).max(100).default(20),\n      cursor: z.string().optional(),\n    }))\n    .output(z.object({\n      presentations: z.array(presentationSchema),\n      nextCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        let query = ctx.firestore\n          .collection('presentations')\n          .where('createdBy', '==', ctx.user.uid)\n          .orderBy('updatedAt', 'desc');\n\n        if (input.status) {\n          query = query.where('status', '==', input.status);\n        }\n\n        if (input.cursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('presentations')\n            .doc(input.cursor)\n            .get();\n          if (cursorDoc.exists) {\n            query = query.startAfter(cursorDoc);\n          }\n        }\n\n        const snapshot = await query.limit(input.limit + 1).get();\n        const presentations = [];\n        let nextCursor: string | undefined;\n\n        for (let i = 0; i < snapshot.docs.length; i++) {\n          if (i === input.limit) {\n            const cursorDoc = snapshot.docs[i];\n            if (cursorDoc) {\n              nextCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = snapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          presentations.push({\n            id: doc.id,\n            title: data.title,\n            description: data.description,\n            templateId: data.templateId,\n            theme: data.theme,\n            status: data.status,\n            slides: data.slides || [],\n            slideCount: data.slides?.length || 0,\n            createdAt: data.createdAt.toDate(),\n            updatedAt: data.updatedAt.toDate(),\n            createdBy: data.createdBy,\n            collaborators: data.collaborators || [],\n            thumbnail: data.thumbnail,\n            googleSlidesId: data.googleSlidesId,\n          });\n        }\n\n        return { presentations, nextCursor };\n      } catch (error) {\n        throw createErrorHandler('List presentations')(error);\n      }\n    }),\n\n  // Get a specific presentation\n  get: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .output(presentationSchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const doc = await ctx.firestore\n          .collection('presentations')\n          .doc(input.id)\n          .get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Check if user has access\n        if (data.createdBy !== ctx.user.uid && \n            !data.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        return {\n          id: doc.id,\n          title: data.title,\n          description: data.description,\n          templateId: data.templateId,\n          theme: data.theme,\n          status: data.status,\n          slides: data.slides || [],\n          slideCount: data.slides?.length || 0,\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate(),\n          createdBy: data.createdBy,\n          collaborators: data.collaborators || [],\n          thumbnail: data.thumbnail,\n          googleSlidesId: data.googleSlidesId,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get presentation')(error);\n      }\n    }),\n\n  // Create a new presentation\n  create: editorProcedure\n    .input(createPresentationSchema)\n    .output(presentationSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const now = new Date();\n        \n        // Generate initial slides based on template\n        const initialSlides = input.slides || generateTemplateSlides(input.templateId, input.title, input.description);\n\n        const presentationData = {\n          title: input.title,\n          description: input.description,\n          templateId: input.templateId,\n          theme: getTemplateTheme(input.templateId),\n          status: 'draft' as const,\n          slides: initialSlides,\n          slideCount: initialSlides.length,\n          createdAt: now,\n          updatedAt: now,\n          createdBy: ctx.user.uid,\n          collaborators: [],\n        };\n\n        const docRef = await ctx.firestore\n          .collection('presentations')\n          .add(presentationData);\n\n        return {\n          id: docRef.id,\n          ...presentationData,\n        };\n      } catch (error) {\n        throw createErrorHandler('Create presentation')(error);\n      }\n    }),\n\n  // Update a presentation\n  update: protectedProcedure\n    .input(updatePresentationSchema)\n    .output(presentationSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('presentations').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const currentData = doc.data()!;\n\n        // Check permissions\n        if (currentData.createdBy !== ctx.user.uid && \n            !currentData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const updateData: Record<string, unknown> = {\n          updatedAt: new Date(),\n        };\n\n        if (input.title) updateData.title = input.title;\n        if (input.description !== undefined) updateData.description = input.description;\n        if (input.status) updateData.status = input.status;\n        if (input.theme) updateData.theme = input.theme;\n        \n        if (input.slides) {\n          updateData.slides = input.slides;\n          updateData.slideCount = input.slides.length;\n        }\n\n        await docRef.update(updateData);\n\n        const updatedDoc = await docRef.get();\n        const updatedData = updatedDoc.data()!;\n\n        return {\n          id: input.id,\n          title: updatedData.title,\n          description: updatedData.description,\n          templateId: updatedData.templateId,\n          theme: updatedData.theme,\n          status: updatedData.status,\n          slides: updatedData.slides || [],\n          slideCount: updatedData.slides?.length || 0,\n          createdAt: updatedData.createdAt.toDate(),\n          updatedAt: updatedData.updatedAt.toDate(),\n          createdBy: updatedData.createdBy,\n          collaborators: updatedData.collaborators || [],\n          thumbnail: updatedData.thumbnail,\n          googleSlidesId: updatedData.googleSlidesId,\n        };\n      } catch (error) {\n        throw createErrorHandler('Update presentation')(error);\n      }\n    }),\n\n  // Delete a presentation\n  delete: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('presentations').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Only creator can delete\n        if (data.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator can delete this presentation',\n          });\n        }\n\n        await docRef.delete();\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Delete presentation')(error);\n      }\n    }),\n\n  // AI content generation\n  generateContent: protectedProcedure\n    .input(aiGenerateSchema)\n    .output(z.object({\n      content: slideContentSchema,\n      success: z.boolean(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check presentation access\n        const doc = await ctx.firestore\n          .collection('presentations')\n          .doc(input.presentationId)\n          .get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const data = doc.data()!;\n        if (data.createdBy !== ctx.user.uid && \n            !data.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Simulate AI generation (in production, integrate with Vertex AI)\n        const generatedContent = await simulateAIGeneration(input.prompt, input.type);\n\n        return {\n          content: generatedContent,\n          success: true,\n        };\n      } catch (error) {\n        throw createErrorHandler('Generate AI content')(error);\n      }\n    }),\n\n  // Export to Google Slides\n  exportToGoogleSlides: protectedProcedure\n    .input(z.object({ \n      presentationId: z.string(),\n      title: z.string().optional(),\n    }))\n    .output(z.object({\n      googleSlidesId: z.string(),\n      url: z.string(),\n      success: z.boolean(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check presentation access\n        const doc = await ctx.firestore\n          .collection('presentations')\n          .doc(input.presentationId)\n          .get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const data = doc.data()!;\n        if (data.createdBy !== ctx.user.uid && \n            !data.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Simulate Google Slides export (in production, use Google Slides API)\n        const googleSlidesId = `gs_${Date.now()}`;\n        const url = `https://docs.google.com/presentation/d/${googleSlidesId}/edit`;\n\n        // Update presentation with Google Slides ID\n        await ctx.firestore\n          .collection('presentations')\n          .doc(input.presentationId)\n          .update({\n            googleSlidesId,\n            updatedAt: new Date(),\n          });\n\n        return {\n          googleSlidesId,\n          url,\n          success: true,\n        };\n      } catch (error) {\n        throw createErrorHandler('Export to Google Slides')(error);\n      }\n    }),\n\n  // Add collaborator\n  addCollaborator: editorProcedure\n    .input(z.object({\n      presentationId: z.string(),\n      email: z.string().email(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const presentationRef = ctx.firestore.collection('presentations').doc(input.presentationId);\n        const presentationDoc = await presentationRef.get();\n\n        if (!presentationDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Presentation not found',\n          });\n        }\n\n        const presentationData = presentationDoc.data()!;\n        if (presentationData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator can add collaborators',\n          });\n        }\n\n        // Find user by email\n        const userSnapshot = await ctx.firestore\n          .collection('users')\n          .where('email', '==', input.email)\n          .limit(1)\n          .get();\n\n        if (userSnapshot.empty) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User not found',\n          });\n        }\n\n        const userId = userSnapshot.docs[0]?.id;\n        if (!userId) {\n          throw new TRPCError({\n            code: 'INTERNAL_SERVER_ERROR',\n            message: 'Failed to get user ID',\n          });\n        }\n        const collaborators = presentationData.collaborators || [];\n\n        if (!collaborators.includes(userId)) {\n          collaborators.push(userId);\n          await presentationRef.update({ collaborators });\n        }\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Add collaborator')(error);\n      }\n    }),\n});\n\n// Helper functions\nfunction generateTemplateSlides(templateId: string, title: string, description?: string) {\n  switch (templateId) {\n    case 'business':\n      return [\n        { id: '1', type: 'title' as const, content: { title, subtitle: description || 'Business Proposal' } },\n        { id: '2', type: 'content' as const, content: { title: 'Executive Summary', body: '' } },\n        { id: '3', type: 'content' as const, content: { title: 'Problem Statement', body: '' } },\n        { id: '4', type: 'content' as const, content: { title: 'Our Solution', body: '' } },\n        { id: '5', type: 'content' as const, content: { title: 'Market Analysis', body: '' } },\n        { id: '6', type: 'content' as const, content: { title: 'Business Model', body: '' } },\n        { id: '7', type: 'content' as const, content: { title: 'Financial Projections', body: '' } },\n        { id: '8', type: 'content' as const, content: { title: 'Team', body: '' } },\n        { id: '9', type: 'content' as const, content: { title: 'Timeline', body: '' } },\n        { id: '10', type: 'content' as const, content: { title: 'Thank You', body: 'Questions?' } }\n      ];\n    case 'academic':\n      return [\n        { id: '1', type: 'title' as const, content: { title, subtitle: description || 'Research Presentation' } },\n        { id: '2', type: 'content' as const, content: { title: 'Introduction', body: '' } },\n        { id: '3', type: 'content' as const, content: { title: 'Literature Review', body: '' } },\n        { id: '4', type: 'content' as const, content: { title: 'Research Questions', body: '' } },\n        { id: '5', type: 'content' as const, content: { title: 'Methodology', body: '' } },\n        { id: '6', type: 'content' as const, content: { title: 'Data Collection', body: '' } },\n        { id: '7', type: 'content' as const, content: { title: 'Results', body: '' } },\n        { id: '8', type: 'content' as const, content: { title: 'Analysis', body: '' } },\n        { id: '9', type: 'content' as const, content: { title: 'Discussion', body: '' } },\n        { id: '10', type: 'content' as const, content: { title: 'Conclusions', body: '' } },\n        { id: '11', type: 'content' as const, content: { title: 'Future Work', body: '' } },\n        { id: '12', type: 'content' as const, content: { title: 'References', body: '' } }\n      ];\n    default:\n      return [\n        { id: '1', type: 'title' as const, content: { title, subtitle: description || 'Presentation' } }\n      ];\n  }\n}\n\nfunction getTemplateTheme(templateId: string): string {\n  switch (templateId) {\n    case 'business':\n      return 'business';\n    case 'academic':\n      return 'academic';\n    default:\n      return 'default';\n  }\n}\n\nasync function simulateAIGeneration(prompt: string, type: string) {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  switch (type) {\n    case 'outline':\n      return {\n        title: 'AI Generated Outline',\n        body: `1. Introduction\n   • Overview of ${prompt}\n   • Key objectives\n\n2. Main Points\n   • First key concept\n   • Supporting evidence\n   • Real-world applications\n\n3. Analysis\n   • Data insights\n   • Comparative analysis\n   • Future implications\n\n4. Conclusion\n   • Summary of findings\n   • Recommendations\n   • Next steps`\n      };\n\n    case 'bullets':\n      return {\n        title: 'Key Points',\n        body: `• ${prompt} - Main concept explained\n• Supporting data and evidence\n• Practical applications and examples\n• Impact on current practices\n• Future considerations and opportunities`\n      };\n\n    case 'summary':\n      return {\n        title: 'Summary',\n        body: `This slide summarizes the key aspects of ${prompt}. The main points include the fundamental concepts, their practical applications, and the potential impact on the field. Further research and implementation strategies are recommended for optimal results.`\n      };\n\n    default:\n      return {\n        title: prompt.split(' ').slice(0, 5).join(' '),\n        body: `${prompt}\n\nThis content explores the fundamental aspects and implications of the topic. Key considerations include:\n\n1. Background and Context\nThe historical development and current state of the subject matter provide essential context for understanding its significance.\n\n2. Core Concepts\nUnderstanding the fundamental principles is crucial for effective implementation and application.\n\n3. Practical Applications\nReal-world use cases demonstrate the value and versatility of these concepts across various domains.\n\n4. Future Outlook\nEmerging trends and potential developments suggest exciting possibilities for continued growth and innovation.`\n      };\n  }\n}","import { z } from 'zod';\nimport { router, protectedProcedure, editorProcedure, createErrorHandler } from '../trpc';\nimport { TRPCError } from '@trpc/server';\nimport * as admin from 'firebase-admin';\n\n// Input schemas\nconst createProjectSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n  type: z.enum(['paper', 'presentation', 'mixed']).default('mixed'),\n  visibility: z.enum(['private', 'team', 'public']).default('private'),\n});\n\nconst updateProjectSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1).optional(),\n  description: z.string().optional(),\n  type: z.enum(['paper', 'presentation', 'mixed']).optional(),\n  visibility: z.enum(['private', 'team', 'public']).optional(),\n  status: z.enum(['active', 'completed', 'archived']).optional(),\n});\n\nconst projectMemberSchema = z.object({\n  projectId: z.string(),\n  email: z.string().email(),\n  role: z.enum(['viewer', 'editor', 'admin']).default('viewer'),\n});\n\n// Output schemas\nconst projectSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string().optional(),\n  type: z.enum(['paper', 'presentation', 'mixed']),\n  visibility: z.enum(['private', 'team', 'public']),\n  status: z.enum(['active', 'completed', 'archived']),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  createdBy: z.string(),\n  members: z.array(z.object({\n    uid: z.string(),\n    email: z.string(),\n    name: z.string(),\n    role: z.enum(['viewer', 'editor', 'admin']),\n    joinedAt: z.date(),\n  })),\n  stats: z.object({\n    paperCount: z.number(),\n    presentationCount: z.number(),\n    totalFiles: z.number(),\n    lastActivity: z.date(),\n  }),\n});\n\nconst projectActivitySchema = z.object({\n  id: z.string(),\n  projectId: z.string(),\n  type: z.enum(['create', 'update', 'delete', 'share', 'comment']),\n  action: z.string(),\n  description: z.string(),\n  createdAt: z.date(),\n  createdBy: z.string(),\n  createdByName: z.string(),\n  metadata: z.record(z.any()).optional(),\n});\n\nexport const projectsRouter = router({\n  // Get all projects for current user\n  list: protectedProcedure\n    .input(z.object({\n      type: z.enum(['paper', 'presentation', 'mixed']).optional(),\n      status: z.enum(['active', 'completed', 'archived']).optional(),\n      limit: z.number().min(1).max(100).default(20),\n      cursor: z.string().optional(),\n    }))\n    .output(z.object({\n      projects: z.array(projectSchema),\n      nextCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        // Get projects where user is member or creator\n        let query = ctx.firestore\n          .collection('projects')\n          .where('memberIds', 'array-contains', ctx.user.uid)\n          .orderBy('updatedAt', 'desc');\n\n        if (input.type) {\n          query = query.where('type', '==', input.type);\n        }\n\n        if (input.status) {\n          query = query.where('status', '==', input.status);\n        }\n\n        if (input.cursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('projects')\n            .doc(input.cursor)\n            .get();\n          if (cursorDoc.exists) {\n            query = query.startAfter(cursorDoc);\n          }\n        }\n\n        const snapshot = await query.limit(input.limit + 1).get();\n        const projects = [];\n        let nextCursor: string | undefined;\n\n        for (let i = 0; i < snapshot.docs.length; i++) {\n          if (i === input.limit) {\n            const cursorDoc = snapshot.docs[i];\n            if (cursorDoc) {\n              nextCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = snapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          // Get project stats\n          const stats = await getProjectStats(ctx, doc.id);\n          \n          // Get member details\n          const members = await getProjectMembers(ctx, data.members || []);\n\n          projects.push({\n            id: doc.id,\n            name: data.name,\n            description: data.description,\n            type: data.type,\n            visibility: data.visibility,\n            status: data.status,\n            createdAt: data.createdAt.toDate(),\n            updatedAt: data.updatedAt.toDate(),\n            createdBy: data.createdBy,\n            members,\n            stats,\n          });\n        }\n\n        return { projects, nextCursor };\n      } catch (error) {\n        throw createErrorHandler('List projects')(error);\n      }\n    }),\n\n  // Get a specific project\n  get: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .output(projectSchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const doc = await ctx.firestore\n          .collection('projects')\n          .doc(input.id)\n          .get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Check if user has access\n        if (!data.memberIds?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const stats = await getProjectStats(ctx, input.id);\n        const members = await getProjectMembers(ctx, data.members || []);\n\n        return {\n          id: doc.id,\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          visibility: data.visibility,\n          status: data.status,\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate(),\n          createdBy: data.createdBy,\n          members,\n          stats,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get project')(error);\n      }\n    }),\n\n  // Create a new project\n  create: editorProcedure\n    .input(createProjectSchema)\n    .output(projectSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const now = new Date();\n        \n        const projectData = {\n          name: input.name,\n          description: input.description,\n          type: input.type,\n          visibility: input.visibility,\n          status: 'active' as const,\n          createdAt: now,\n          updatedAt: now,\n          createdBy: ctx.user.uid,\n          members: [{\n            uid: ctx.user.uid,\n            role: 'admin' as const,\n            joinedAt: now,\n          }],\n          memberIds: [ctx.user.uid], // For efficient querying\n        };\n\n        const docRef = await ctx.firestore\n          .collection('projects')\n          .add(projectData);\n\n        // Log activity\n        await logActivity(ctx, docRef.id, 'create', 'Created project', `Project \"${input.name}\" was created`);\n\n        const stats = {\n          paperCount: 0,\n          presentationCount: 0,\n          totalFiles: 0,\n          lastActivity: now,\n        };\n\n        const members = await getProjectMembers(ctx, projectData.members);\n\n        return {\n          id: docRef.id,\n          ...projectData,\n          members,\n          stats,\n        };\n      } catch (error) {\n        throw createErrorHandler('Create project')(error);\n      }\n    }),\n\n  // Update a project\n  update: protectedProcedure\n    .input(updateProjectSchema)\n    .output(projectSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('projects').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const currentData = doc.data()!;\n\n        // Check if user is admin\n        const userMember = currentData.members?.find((m: { uid: string }) => m.uid === ctx.user.uid);\n        if (!userMember || userMember.role !== 'admin') {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Admin role required',\n          });\n        }\n\n        const updateData: Record<string, unknown> = {\n          updatedAt: new Date(),\n        };\n\n        if (input.name) updateData.name = input.name;\n        if (input.description !== undefined) updateData.description = input.description;\n        if (input.type) updateData.type = input.type;\n        if (input.visibility) updateData.visibility = input.visibility;\n        if (input.status) updateData.status = input.status;\n\n        await docRef.update(updateData);\n\n        // Log activity\n        const changes = Object.keys(updateData).filter(k => k !== 'updatedAt');\n        await logActivity(ctx, input.id, 'update', 'Updated project', `Updated: ${changes.join(', ')}`);\n\n        const updatedDoc = await docRef.get();\n        const updatedData = updatedDoc.data()!;\n\n        const stats = await getProjectStats(ctx, input.id);\n        const members = await getProjectMembers(ctx, updatedData.members || []);\n\n        return {\n          id: input.id,\n          name: updatedData.name,\n          description: updatedData.description,\n          type: updatedData.type,\n          visibility: updatedData.visibility,\n          status: updatedData.status,\n          createdAt: updatedData.createdAt.toDate(),\n          updatedAt: updatedData.updatedAt.toDate(),\n          createdBy: updatedData.createdBy,\n          members,\n          stats,\n        };\n      } catch (error) {\n        throw createErrorHandler('Update project')(error);\n      }\n    }),\n\n  // Delete a project\n  delete: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const docRef = ctx.firestore.collection('projects').doc(input.id);\n        const doc = await docRef.get();\n\n        if (!doc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const data = doc.data()!;\n\n        // Only creator can delete\n        if (data.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator can delete this project',\n          });\n        }\n\n        // Delete all project activities\n        const activitiesSnapshot = await ctx.firestore\n          .collection('project_activities')\n          .where('projectId', '==', input.id)\n          .get();\n\n        const batch = ctx.firestore.batch();\n        activitiesSnapshot.docs.forEach(doc => batch.delete(doc.ref));\n        batch.delete(docRef);\n\n        await batch.commit();\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Delete project')(error);\n      }\n    }),\n\n  // Add member to project\n  addMember: protectedProcedure\n    .input(projectMemberSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const projectRef = ctx.firestore.collection('projects').doc(input.projectId);\n        const projectDoc = await projectRef.get();\n\n        if (!projectDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const projectData = projectDoc.data()!;\n        \n        // Check if user is admin\n        const userMember = projectData.members?.find((m: { uid: string }) => m.uid === ctx.user.uid);\n        if (!userMember || userMember.role !== 'admin') {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Admin role required',\n          });\n        }\n\n        // Find user by email\n        const userSnapshot = await ctx.firestore\n          .collection('users')\n          .where('email', '==', input.email)\n          .limit(1)\n          .get();\n\n        if (userSnapshot.empty) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User not found',\n          });\n        }\n\n        const userDoc = userSnapshot.docs[0];\n        if (!userDoc) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User document not found',\n          });\n        }\n        const userId = userDoc.id;\n        const members = projectData.members || [];\n        const memberIds = projectData.memberIds || [];\n\n        // Check if already a member\n        if (members.some((m: { uid: string }) => m.uid === userId)) {\n          throw new TRPCError({\n            code: 'BAD_REQUEST',\n            message: 'User is already a member',\n          });\n        }\n\n        const newMember = {\n          uid: userId,\n          role: input.role,\n          joinedAt: new Date(),\n        };\n\n        members.push(newMember);\n        memberIds.push(userId);\n\n        await projectRef.update({ \n          members, \n          memberIds,\n          updatedAt: new Date(),\n        });\n\n        // Log activity\n        const userDocForLog = userSnapshot.docs[0];\n        if (!userDocForLog) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'User document not found',\n          });\n        }\n        const userName = userDocForLog.data().name;\n        await logActivity(ctx, input.projectId, 'share', 'Added member', \n          `${userName} was added as ${input.role}`);\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Add member')(error);\n      }\n    }),\n\n  // Remove member from project\n  removeMember: protectedProcedure\n    .input(z.object({\n      projectId: z.string(),\n      userId: z.string(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const projectRef = ctx.firestore.collection('projects').doc(input.projectId);\n        const projectDoc = await projectRef.get();\n\n        if (!projectDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const projectData = projectDoc.data()!;\n        \n        // Check if user is admin or removing themselves\n        const userMember = projectData.members?.find((m: { uid: string }) => m.uid === ctx.user.uid);\n        if (!userMember || (userMember.role !== 'admin' && ctx.user.uid !== input.userId)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Permission denied',\n          });\n        }\n\n        // Can't remove the creator\n        if (projectData.createdBy === input.userId) {\n          throw new TRPCError({\n            code: 'BAD_REQUEST',\n            message: 'Cannot remove project creator',\n          });\n        }\n\n        const members = (projectData.members || []).filter((m: { uid: string }) => m.uid !== input.userId);\n        const memberIds = (projectData.memberIds || []).filter((id: string) => id !== input.userId);\n\n        await projectRef.update({ \n          members, \n          memberIds,\n          updatedAt: new Date(),\n        });\n\n        // Log activity\n        const userDoc = await ctx.firestore.collection('users').doc(input.userId).get();\n        const userName = userDoc.data()?.name || 'Unknown User';\n        await logActivity(ctx, input.projectId, 'update', 'Removed member', \n          `${userName} was removed from the project`);\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Remove member')(error);\n      }\n    }),\n\n  // Get project activity feed\n  getActivity: protectedProcedure\n    .input(z.object({\n      projectId: z.string(),\n      limit: z.number().min(1).max(100).default(20),\n      cursor: z.string().optional(),\n    }))\n    .output(z.object({\n      activities: z.array(projectActivitySchema),\n      nextCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        // Check project access\n        const projectDoc = await ctx.firestore\n          .collection('projects')\n          .doc(input.projectId)\n          .get();\n\n        if (!projectDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Project not found',\n          });\n        }\n\n        const projectData = projectDoc.data()!;\n        if (!projectData.memberIds?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        let query = ctx.firestore\n          .collection('project_activities')\n          .where('projectId', '==', input.projectId)\n          .orderBy('createdAt', 'desc');\n\n        if (input.cursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('project_activities')\n            .doc(input.cursor)\n            .get();\n          if (cursorDoc.exists) {\n            query = query.startAfter(cursorDoc);\n          }\n        }\n\n        const snapshot = await query.limit(input.limit + 1).get();\n        const activities = [];\n        let nextCursor: string | undefined;\n\n        for (let i = 0; i < snapshot.docs.length; i++) {\n          if (i === input.limit) {\n            const cursorDoc = snapshot.docs[i];\n            if (cursorDoc) {\n              nextCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = snapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          activities.push({\n            id: doc.id,\n            projectId: data.projectId,\n            type: data.type,\n            action: data.action,\n            description: data.description,\n            createdAt: data.createdAt.toDate(),\n            createdBy: data.createdBy,\n            createdByName: data.createdByName,\n            metadata: data.metadata,\n          });\n        }\n\n        return { activities, nextCursor };\n      } catch (error) {\n        throw createErrorHandler('Get project activity')(error);\n      }\n    }),\n});\n\n// Helper functions\nasync function getProjectStats(ctx: { firestore: admin.firestore.Firestore }, projectId: string) {\n  try {\n    // Count papers\n    const papersSnapshot = await ctx.firestore\n      .collection('papers')\n      .where('projectId', '==', projectId)\n      .get();\n\n    // Count presentations\n    const presentationsSnapshot = await ctx.firestore\n      .collection('presentations')\n      .where('projectId', '==', projectId)\n      .get();\n\n    // Get last activity\n    const activitySnapshot = await ctx.firestore\n      .collection('project_activities')\n      .where('projectId', '==', projectId)\n      .orderBy('createdAt', 'desc')\n      .limit(1)\n      .get();\n\n    const lastActivity = activitySnapshot.empty \n      ? new Date() \n      : (() => {\n          const doc = activitySnapshot.docs[0];\n          if (!doc) return new Date();\n          const data = doc.data();\n          return data.createdAt.toDate();\n        })();\n\n    return {\n      paperCount: papersSnapshot.size,\n      presentationCount: presentationsSnapshot.size,\n      totalFiles: papersSnapshot.size + presentationsSnapshot.size,\n      lastActivity,\n    };\n  } catch {\n    return {\n      paperCount: 0,\n      presentationCount: 0,\n      totalFiles: 0,\n      lastActivity: new Date(),\n    };\n  }\n}\n\nasync function getProjectMembers(ctx: { firestore: admin.firestore.Firestore }, members: Array<{ uid: string; role: string; joinedAt: Date }>) {\n  const memberDetails = await Promise.all(\n    members.map(async (member) => {\n      try {\n        const userDoc = await ctx.firestore\n          .collection('users')\n          .doc(member.uid)\n          .get();\n        \n        const userData = userDoc.data();\n        return {\n          uid: member.uid,\n          email: userData?.email || '',\n          name: userData?.name || 'Unknown User',\n          role: member.role as 'viewer' | 'editor' | 'admin',\n          joinedAt: member.joinedAt instanceof Date ? member.joinedAt : new Date(member.joinedAt),\n        };\n      } catch {\n        return {\n          uid: member.uid,\n          email: '',\n          name: 'Unknown User',\n          role: member.role as 'viewer' | 'editor' | 'admin',\n          joinedAt: new Date(),\n        };\n      }\n    })\n  );\n\n  return memberDetails;\n}\n\nasync function logActivity(ctx: { firestore: admin.firestore.Firestore; user: { uid: string; email?: string; displayName?: string } }, projectId: string, type: string, action: string, description: string, metadata?: Record<string, unknown>) {\n  try {\n    const userDoc = await ctx.firestore.collection('users').doc(ctx.user.uid).get();\n    const userName = userDoc.data()?.name || 'Unknown User';\n\n    await ctx.firestore\n      .collection('project_activities')\n      .add({\n        projectId,\n        type,\n        action,\n        description,\n        createdAt: new Date(),\n        createdBy: ctx.user.uid,\n        createdByName: userName,\n        metadata,\n      });\n  } catch {\n    // Ignore activity tracking errors\n  }\n}","import { z } from 'zod';\nimport { router, protectedProcedure, createErrorHandler, rateLimit } from '../trpc';\nimport { TRPCError } from '@trpc/server';\n\n// Input schemas\nconst chatMessageSchema = z.object({\n  content: z.string().min(1).max(4000),\n  context: z.object({\n    type: z.enum(['paper', 'presentation', 'project', 'general']).optional(),\n    id: z.string().optional(), // paper/presentation/project ID\n    metadata: z.record(z.any()).optional(),\n  }).optional(),\n});\n\nconst chatSessionSchema = z.object({\n  title: z.string().min(1).max(200).optional(),\n  context: z.object({\n    type: z.enum(['paper', 'presentation', 'project', 'general']),\n    id: z.string().optional(),\n    metadata: z.record(z.any()).optional(),\n  }).optional(),\n});\n\nconst updateChatSessionSchema = z.object({\n  sessionId: z.string(),\n  title: z.string().min(1).max(200).optional(),\n  archived: z.boolean().optional(),\n});\n\n// Output schemas\nconst messageSchema = z.object({\n  id: z.string(),\n  role: z.enum(['user', 'assistant', 'system']),\n  content: z.string(),\n  timestamp: z.date(),\n  status: z.enum(['pending', 'completed', 'error']).optional(),\n  metadata: z.record(z.any()).optional(),\n});\n\nconst chatSessionOutputSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  context: z.object({\n    type: z.enum(['paper', 'presentation', 'project', 'general']),\n    id: z.string().optional(),\n    metadata: z.record(z.any()).optional(),\n  }).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  createdBy: z.string(),\n  messageCount: z.number(),\n  archived: z.boolean(),\n  lastMessage: messageSchema.optional(),\n});\n\nexport const chatRouter = router({\n  // Create a new chat session\n  createSession: protectedProcedure\n    .use(rateLimit(20, 60 * 60 * 1000)) // 20 sessions per hour\n    .input(chatSessionSchema)\n    .output(chatSessionOutputSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const now = new Date();\n        \n        const sessionData = {\n          title: input.title || 'New Chat',\n          context: input.context,\n          createdAt: now,\n          updatedAt: now,\n          createdBy: ctx.user.uid,\n          messageCount: 0,\n          archived: false,\n        };\n\n        const docRef = await ctx.firestore\n          .collection('chat_sessions')\n          .add(sessionData);\n\n        return {\n          id: docRef.id,\n          ...sessionData,\n          lastMessage: undefined,\n        };\n      } catch (error) {\n        throw createErrorHandler('Create chat session')(error);\n      }\n    }),\n\n  // Get all chat sessions for current user\n  getSessions: protectedProcedure\n    .input(z.object({\n      archived: z.boolean().default(false),\n      limit: z.number().min(1).max(100).default(20),\n      cursor: z.string().optional(),\n    }))\n    .output(z.object({\n      sessions: z.array(chatSessionOutputSchema),\n      nextCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        let query = ctx.firestore\n          .collection('chat_sessions')\n          .where('createdBy', '==', ctx.user.uid)\n          .where('archived', '==', input.archived)\n          .orderBy('updatedAt', 'desc');\n\n        if (input.cursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('chat_sessions')\n            .doc(input.cursor)\n            .get();\n          if (cursorDoc.exists) {\n            query = query.startAfter(cursorDoc);\n          }\n        }\n\n        const snapshot = await query.limit(input.limit + 1).get();\n        const sessions = [];\n        let nextCursor: string | undefined;\n\n        for (let i = 0; i < snapshot.docs.length; i++) {\n          if (i === input.limit) {\n            const cursorDoc = snapshot.docs[i];\n            if (cursorDoc) {\n              nextCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = snapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          // Get last message\n          const lastMessageSnapshot = await ctx.firestore\n            .collection('chat_messages')\n            .where('sessionId', '==', doc.id)\n            .orderBy('timestamp', 'desc')\n            .limit(1)\n            .get();\n\n          let lastMessage;\n          if (!lastMessageSnapshot.empty) {\n            const msgDoc = lastMessageSnapshot.docs[0];\n            if (!msgDoc) continue;\n            const msgData = msgDoc.data();\n            lastMessage = {\n              id: msgDoc.id,\n              role: msgData.role,\n              content: msgData.content,\n              timestamp: msgData.timestamp.toDate(),\n              status: msgData.status,\n              metadata: msgData.metadata,\n            };\n          }\n\n          sessions.push({\n            id: doc.id,\n            title: data.title,\n            context: data.context,\n            createdAt: data.createdAt.toDate(),\n            updatedAt: data.updatedAt.toDate(),\n            createdBy: data.createdBy,\n            messageCount: data.messageCount || 0,\n            archived: data.archived || false,\n            lastMessage,\n          });\n        }\n\n        return { sessions, nextCursor };\n      } catch (error) {\n        throw createErrorHandler('Get chat sessions')(error);\n      }\n    }),\n\n  // Get a specific chat session with messages\n  getSession: protectedProcedure\n    .input(z.object({\n      sessionId: z.string(),\n      messageLimit: z.number().min(1).max(100).default(50),\n      messageCursor: z.string().optional(),\n    }))\n    .output(z.object({\n      session: chatSessionOutputSchema,\n      messages: z.array(messageSchema),\n      nextMessageCursor: z.string().optional(),\n    }))\n    .query(async ({ ctx, input }) => {\n      try {\n        // Get session\n        const sessionDoc = await ctx.firestore\n          .collection('chat_sessions')\n          .doc(input.sessionId)\n          .get();\n\n        if (!sessionDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Chat session not found',\n          });\n        }\n\n        const sessionData = sessionDoc.data()!;\n\n        // Check access\n        if (sessionData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Get messages\n        let messageQuery = ctx.firestore\n          .collection('chat_messages')\n          .where('sessionId', '==', input.sessionId)\n          .orderBy('timestamp', 'asc');\n\n        if (input.messageCursor) {\n          const cursorDoc = await ctx.firestore\n            .collection('chat_messages')\n            .doc(input.messageCursor)\n            .get();\n          if (cursorDoc.exists) {\n            messageQuery = messageQuery.startAfter(cursorDoc);\n          }\n        }\n\n        const messageSnapshot = await messageQuery.limit(input.messageLimit + 1).get();\n        const messages = [];\n        let nextMessageCursor: string | undefined;\n\n        for (let i = 0; i < messageSnapshot.docs.length; i++) {\n          if (i === input.messageLimit) {\n            const cursorDoc = messageSnapshot.docs[i];\n            if (cursorDoc) {\n              nextMessageCursor = cursorDoc.id;\n            }\n            break;\n          }\n\n          const doc = messageSnapshot.docs[i];\n          if (!doc) continue;\n          const data = doc.data();\n          \n          messages.push({\n            id: doc.id,\n            role: data.role,\n            content: data.content,\n            timestamp: data.timestamp.toDate(),\n            status: data.status,\n            metadata: data.metadata,\n          });\n        }\n\n        const session = {\n          id: input.sessionId,\n          title: sessionData.title,\n          context: sessionData.context,\n          createdAt: sessionData.createdAt.toDate(),\n          updatedAt: sessionData.updatedAt.toDate(),\n          createdBy: sessionData.createdBy,\n          messageCount: sessionData.messageCount || 0,\n          archived: sessionData.archived || false,\n          lastMessage: messages.length > 0 ? messages[messages.length - 1] : undefined,\n        };\n\n        return { session, messages, nextMessageCursor };\n      } catch (error) {\n        throw createErrorHandler('Get chat session')(error);\n      }\n    }),\n\n  // Send a message in a chat session\n  sendMessage: protectedProcedure\n    .use(rateLimit(100, 60 * 60 * 1000)) // 100 messages per hour\n    .input(z.object({\n      sessionId: z.string(),\n      message: chatMessageSchema,\n    }))\n    .output(z.object({\n      userMessage: messageSchema,\n      assistantMessage: messageSchema,\n    }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Verify session exists and user has access\n        const sessionDoc = await ctx.firestore\n          .collection('chat_sessions')\n          .doc(input.sessionId)\n          .get();\n\n        if (!sessionDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Chat session not found',\n          });\n        }\n\n        const sessionData = sessionDoc.data()!;\n        if (sessionData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const now = new Date();\n\n        // Create user message\n        const userMessageData = {\n          sessionId: input.sessionId,\n          role: 'user' as const,\n          content: input.message.content,\n          timestamp: now,\n          status: 'completed' as const,\n          context: input.message.context,\n        };\n\n        const userMessageRef = await ctx.firestore\n          .collection('chat_messages')\n          .add(userMessageData);\n\n        // Generate AI response\n        const assistantResponse = await generateAIResponse(\n          input.message.content,\n          input.message.context\n        );\n\n        // Create assistant message\n        const assistantMessageData = {\n          sessionId: input.sessionId,\n          role: 'assistant' as const,\n          content: assistantResponse.content,\n          timestamp: new Date(),\n          status: 'completed' as const,\n          metadata: assistantResponse.metadata,\n        };\n\n        const assistantMessageRef = await ctx.firestore\n          .collection('chat_messages')\n          .add(assistantMessageData);\n\n        // Update session\n        await ctx.firestore\n          .collection('chat_sessions')\n          .doc(input.sessionId)\n          .update({\n            updatedAt: new Date(),\n            messageCount: (sessionData.messageCount || 0) + 2,\n            title: sessionData.messageCount === 0 \n              ? generateSessionTitle(input.message.content)\n              : sessionData.title,\n          });\n\n        return {\n          userMessage: {\n            id: userMessageRef.id,\n            ...userMessageData,\n          },\n          assistantMessage: {\n            id: assistantMessageRef.id,\n            ...assistantMessageData,\n          },\n        };\n      } catch (error) {\n        throw createErrorHandler('Send message')(error);\n      }\n    }),\n\n  // Update chat session\n  updateSession: protectedProcedure\n    .input(updateChatSessionSchema)\n    .output(chatSessionOutputSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const sessionRef = ctx.firestore\n          .collection('chat_sessions')\n          .doc(input.sessionId);\n        \n        const sessionDoc = await sessionRef.get();\n\n        if (!sessionDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Chat session not found',\n          });\n        }\n\n        const sessionData = sessionDoc.data()!;\n        if (sessionData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        const updateData: Record<string, unknown> = {\n          updatedAt: new Date(),\n        };\n\n        if (input.title) updateData.title = input.title;\n        if (input.archived !== undefined) updateData.archived = input.archived;\n\n        await sessionRef.update(updateData);\n\n        const updatedDoc = await sessionRef.get();\n        const updatedData = updatedDoc.data()!;\n\n        return {\n          id: input.sessionId,\n          title: updatedData.title,\n          context: updatedData.context,\n          createdAt: updatedData.createdAt.toDate(),\n          updatedAt: updatedData.updatedAt.toDate(),\n          createdBy: updatedData.createdBy,\n          messageCount: updatedData.messageCount || 0,\n          archived: updatedData.archived || false,\n          lastMessage: undefined, // Could fetch if needed\n        };\n      } catch (error) {\n        throw createErrorHandler('Update chat session')(error);\n      }\n    }),\n\n  // Delete chat session\n  deleteSession: protectedProcedure\n    .input(z.object({ sessionId: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const sessionRef = ctx.firestore\n          .collection('chat_sessions')\n          .doc(input.sessionId);\n        \n        const sessionDoc = await sessionRef.get();\n\n        if (!sessionDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Chat session not found',\n          });\n        }\n\n        const sessionData = sessionDoc.data()!;\n        if (sessionData.createdBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Delete all messages in the session\n        const messagesSnapshot = await ctx.firestore\n          .collection('chat_messages')\n          .where('sessionId', '==', input.sessionId)\n          .get();\n\n        const batch = ctx.firestore.batch();\n        messagesSnapshot.docs.forEach(doc => batch.delete(doc.ref));\n        batch.delete(sessionRef);\n\n        await batch.commit();\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Delete chat session')(error);\n      }\n    }),\n});\n\n// Helper functions\nasync function generateAIResponse(\n  userMessage: string, \n  context: unknown\n): Promise<{ content: string; metadata?: Record<string, unknown> }> {\n  try {\n    // Import the new AI conversation system\n    const { PlannerAgent, createVertexAIClient, RTFParser } = await import('@maria/ai-agents');\n    \n    const vertexAI = createVertexAIClient();\n    const planner = new PlannerAgent(vertexAI);\n    const rtfParser = new RTFParser(vertexAI);\n\n    // Type guard for context\n    const typedContext = context as { type?: string; id?: string; [key: string]: unknown } | null;\n    \n    // Parse user message to understand intent\n    const rtfStructure = await rtfParser.parseRTF(userMessage, {\n      type: typedContext?.type,\n      userProfile: {},\n    });\n\n    // Generate contextual response based on RTF analysis\n    let response = '';\n    const metadata: Record<string, unknown> = {\n      rtfConfidence: rtfStructure.confidence,\n      taskType: rtfStructure.task.type,\n      intent: rtfStructure.task.intent,\n      complexity: rtfStructure.metadata.complexity,\n    };\n\n    // Check if this is a planning request\n    if (rtfStructure.task.scope !== 'single-action' || \n        rtfStructure.task.intent.includes('plan') ||\n        rtfStructure.task.intent.includes('create') ||\n        rtfStructure.task.intent.includes('develop')) {\n      \n      // Generate a task plan for complex requests\n      const taskPlan = await planner.createTaskPlan(userMessage, {\n        type: typedContext?.type as 'paper' | 'presentation' | 'project' | 'general',\n      });\n\n      response = generatePlanningResponse(taskPlan, rtfStructure);\n      metadata.planId = taskPlan.id;\n      metadata.hasSOW = !!(taskPlan as any).sowDocument;\n      metadata.executionSteps = taskPlan.executionPlan.length;\n    } else {\n      // Generate conversational response for simple requests\n      response = await generateConversationalResponse(userMessage, rtfStructure, typedContext);\n    }\n\n    metadata.responseLength = response.length;\n    metadata.generatedAt = new Date().toISOString();\n    metadata.contextType = typedContext?.type || 'general';\n\n    return { content: response, metadata };\n  } catch (error) {\n    console.error('AI response generation failed, falling back to simple response:', error);\n    \n    // Fallback to original simple response system\n    return generateFallbackResponse(userMessage, context);\n  }\n}\n\n// Generate response for planning tasks\nfunction generatePlanningResponse(taskPlan: any, rtfStructure: any): string {\n  const steps = taskPlan.executionPlan.map((step: any, index: number) => \n    `${index + 1}. **${step.name}** (${step.estimatedTime}h)\\n   ${step.description}`\n  ).join('\\n\\n');\n\n  return `I've analyzed your request and created a comprehensive plan for \"${taskPlan.title}\".\n\n## Task Analysis\n- **Type**: ${rtfStructure.task.type}\n- **Complexity**: ${rtfStructure.metadata.complexity}\n- **Scope**: ${rtfStructure.task.scope}\n\n## Execution Plan\n${steps}\n\n## Next Steps\n${taskPlan.sowDocument ? \n  'I\\'ve also generated a detailed Statement of Work (SOW) with budget estimates, risk analysis, and timeline. Would you like me to share those details?' : \n  'Would you like me to start working on the first step, or would you prefer to refine the plan first?'\n}\n\nHow would you like to proceed?`;\n}\n\n// Generate conversational response using AI\nasync function generateConversationalResponse(\n  userMessage: string, \n  rtfStructure: any, \n  context: any\n): Promise<string> {\n  const { createVertexAIClient } = await import('@maria/ai-agents');\n  const vertexAI = createVertexAIClient();\n  const model = await vertexAI.getGeminiModel();\n\n  const conversationPrompt = `\nYou are an AI assistant in the MARIA platform specialized in helping with ${rtfStructure.task.type} tasks.\n\nUser Message: \"${userMessage}\"\nIntent: ${rtfStructure.task.intent}\nContext Type: ${context?.type || 'general'}\nComplexity: ${rtfStructure.metadata.complexity}\n\nGenerate a helpful, conversational response that:\n1. Acknowledges the user's request\n2. Provides specific, actionable guidance\n3. Offers to help with next steps\n4. Maintains a professional but friendly tone\n\nFocus on being practical and helpful for ${rtfStructure.task.type} work.\n`;\n\n  try {\n    const result = await model.generateContent(conversationPrompt);\n    return result.response.candidates?.[0]?.content?.parts?.[0]?.text || 'I apologize, but I encountered an issue generating a response.';\n  } catch (error) {\n    console.error('Failed to generate conversational response:', error);\n    return `I understand you're asking about \"${userMessage}\". I'm here to help with your ${rtfStructure.task.type} work. Could you provide more specific details about what you'd like assistance with?`;\n  }\n}\n\n// Fallback response system (original implementation)\nasync function generateFallbackResponse(\n  userMessage: string,\n  context: unknown\n): Promise<{ content: string; metadata?: Record<string, unknown> }> {\n  let response = '';\n  const metadata: Record<string, unknown> = {};\n\n  // Type guard for context\n  const typedContext = context as { type?: string; [key: string]: unknown } | null;\n\n  // Context-aware responses\n  if (typedContext?.type === 'paper') {\n    response = generatePaperContextResponse(userMessage);\n    metadata.contextType = 'paper';\n  } else if (typedContext?.type === 'presentation') {\n    response = generatePresentationContextResponse(userMessage);\n    metadata.contextType = 'presentation';\n  } else if (typedContext?.type === 'project') {\n    response = generateProjectContextResponse(userMessage);\n    metadata.contextType = 'project';\n  } else {\n    response = generateGeneralResponse(userMessage);\n    metadata.contextType = 'general';\n  }\n\n  metadata.responseLength = response.length;\n  metadata.generatedAt = new Date().toISOString();\n  metadata.fallback = true;\n\n  return { content: response, metadata };\n}\n\nfunction generatePaperContextResponse(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  if (lowerMessage.includes('help') || lowerMessage.includes('how')) {\n    return `For your LaTeX paper, I can help you with:\n\n• **Writing & Structure**: Improve your introduction, methodology, or conclusions\n• **Citations & References**: Format your bibliography and manage citations\n• **Mathematical Notation**: Help with LaTeX math commands and equations\n• **Formatting**: Ensure your document follows journal/conference guidelines\n• **Review & Feedback**: Provide suggestions for clarity and academic writing\n\nWhat specific aspect of your paper would you like assistance with?`;\n  }\n  \n  if (lowerMessage.includes('cite') || lowerMessage.includes('reference') || lowerMessage.includes('bibliography')) {\n    return `For citations and references in your paper:\n\n**BibTeX Management:**\n• Use \\\\cite{key} for in-text citations\n• Add entries to your .bib file in the format: @article{key, author={}, title={}, journal={}, year={}}\n• Use \\\\bibliography{filename} to include your bibliography\n\n**Common Citation Styles:**\n• IEEE: \\\\bibliographystyle{IEEEtran}\n• ACM: \\\\bibliographystyle{ACM-Reference-Format}\n• Plain: \\\\bibliographystyle{plain}\n\nWould you like help with a specific citation format or managing your references?`;\n  }\n  \n  if (lowerMessage.includes('latex') || lowerMessage.includes('format') || lowerMessage.includes('template')) {\n    return `I can help you with LaTeX formatting for your paper:\n\n**Document Structure:**\n• \\\\documentclass{article} or \\\\documentclass[conference]{IEEEtran}\n• Use \\\\section{}, \\\\subsection{}, \\\\subsubsection{} for organization\n• \\\\begin{abstract}...\\\\end{abstract} for your abstract\n\n**Mathematical Notation:**\n• Inline math: $equation$\n• Display math: \\\\[equation\\\\] or \\\\begin{equation}...\\\\end{equation}\n• Common symbols: \\\\alpha, \\\\beta, \\\\sum, \\\\int, \\\\frac{}{}, \\\\sqrt{}\n\n**Figures and Tables:**\n• \\\\begin{figure}[h] for figures with \\\\includegraphics{}\n• \\\\begin{table}[h] for tables with tabular environment\n\nWhat specific formatting help do you need?`;\n  }\n  \n  return `I'm here to help with your academic paper! Based on your message about \"${message}\", I can assist with:\n\n• **Content Development**: Help expand on your ideas and arguments\n• **Structure & Flow**: Improve the logical organization of your paper\n• **Academic Writing**: Enhance clarity, conciseness, and scholarly tone\n• **Technical Details**: LaTeX formatting, citations, and mathematical notation\n\nCould you tell me more specifically what you'd like help with regarding your paper?`;\n}\n\nfunction generatePresentationContextResponse(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  if (lowerMessage.includes('slide') || lowerMessage.includes('content')) {\n    return `For your presentation, I can help create engaging slide content:\n\n**Content Generation:**\n• **Title Slides**: Compelling titles and subtitles\n• **Bullet Points**: Clear, concise key points\n• **Narratives**: Storytelling elements to connect with your audience\n• **Conclusions**: Strong closing statements and calls to action\n\n**Structure Suggestions:**\n• Problem → Solution → Benefits approach\n• Chronological storytelling\n• Comparison and contrast formats\n• Data-driven insights with visualizations\n\n**Speaking Notes:**\n• Key talking points for each slide\n• Transition phrases between topics\n• Audience engagement techniques\n\nWhat type of content would you like me to help generate for your slides?`;\n  }\n  \n  if (lowerMessage.includes('design') || lowerMessage.includes('visual') || lowerMessage.includes('template') || lowerMessage.includes('theme')) {\n    return `I can help with presentation design and visual elements:\n\n**Design Principles:**\n• **Consistency**: Maintain uniform fonts, colors, and layouts\n• **Clarity**: Use high contrast and readable fonts (minimum 24pt)\n• **Simplicity**: Limit to 6-8 lines of text per slide\n• **Visual Hierarchy**: Use size and color to guide attention\n\n**Template Recommendations:**\n• **Business**: Professional colors (blues, grays), clean layouts\n• **Academic**: Conservative design, focus on content over aesthetics\n• **Creative**: Bold colors and dynamic layouts for engagement\n\n**Visual Elements:**\n• Use high-quality images and icons\n• Incorporate charts and graphs for data\n• Consider infographics for complex concepts\n\nWould you like specific suggestions for your presentation's visual design?`;\n  }\n  \n  return `I'm ready to help with your presentation! For \"${message}\", I can assist with:\n\n• **Content Creation**: Generate compelling slide content and speaker notes\n• **Structure Planning**: Organize your ideas for maximum impact\n• **Audience Engagement**: Techniques to keep your audience interested\n• **Design Guidance**: Visual elements and layout suggestions\n\nWhat aspect of your presentation would you like to work on?`;\n}\n\nfunction generateProjectContextResponse(message: string): string {\n  return `For your project, I can help with:\n\n**Project Management:**\n• Task organization and prioritization\n• Timeline planning and milestone tracking\n• Team collaboration and communication strategies\n• Progress monitoring and reporting\n\n**Content Coordination:**\n• Aligning papers and presentations with project goals\n• Maintaining consistency across project deliverables\n• Version control and document management\n• Quality assurance and review processes\n\n**Analysis & Insights:**\n• Project metrics and performance analysis\n• Identifying bottlenecks and improvement opportunities\n• Resource allocation and optimization\n• Risk assessment and mitigation strategies\n\nBased on your message \"${message}\", what specific aspect of your project management would you like assistance with?`;\n}\n\nfunction generateGeneralResponse(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {\n    return `Hello! I'm your AI assistant for MARIA Studio. I'm here to help you with:\n\n• **Academic Papers**: LaTeX writing, citations, structure, and formatting\n• **Presentations**: Slide content, design, and delivery preparation  \n• **Project Management**: Organization, collaboration, and workflow optimization\n• **Research Support**: Literature review, data analysis, and methodology guidance\n\nHow can I assist you today?`;\n  }\n  \n  if (lowerMessage.includes('help') || lowerMessage.includes('what can you do')) {\n    return `I can help you with various aspects of academic and professional work:\n\n**📝 Writing & Research**\n• Academic paper writing and structure\n• Literature reviews and citation management\n• Research methodology and data analysis\n• Technical documentation\n\n**🎯 Presentations**\n• Slide content creation and organization\n• Visual design and layout suggestions\n• Speaker notes and delivery tips\n• Audience engagement strategies\n\n**📊 Project Management**\n• Task planning and timeline creation\n• Team collaboration workflows\n• Progress tracking and reporting\n• Quality assurance processes\n\n**🔧 Technical Support**\n• LaTeX formatting and troubleshooting\n• Bibliography management with BibTeX\n• Document templates and styling\n• Export and sharing options\n\nWhat would you like to work on?`;\n  }\n  \n  return `I understand you're asking about \"${message}\". I'm here to provide comprehensive support for your academic and professional work.\n\nWhether you need help with writing, research, presentations, or project management, I can offer:\n\n• **Detailed guidance** on best practices and methodologies\n• **Practical suggestions** for improving your work\n• **Technical assistance** with tools and formatting\n• **Creative ideas** to enhance your content\n\nCould you provide more specific details about what you're looking for? This will help me give you the most relevant and useful assistance.`;\n}\n\nfunction generateSessionTitle(firstMessage: string): string {\n  // Generate a concise title from the first message\n  const words = firstMessage.split(' ').slice(0, 6);\n  let title = words.join(' ');\n  \n  if (firstMessage.length > title.length) {\n    title += '...';\n  }\n  \n  // Capitalize first letter\n  title = title.charAt(0).toUpperCase() + title.slice(1);\n  \n  return title.length > 50 ? title.substring(0, 47) + '...' : title;\n}","import { z } from 'zod';\nimport { router, protectedProcedure } from '../trpc';\nimport { Neo4jBloomService } from '../lib/neo4j-bloom';\nimport { TRPCError } from '@trpc/server';\n\nconst bloomService = new Neo4jBloomService({\n  projectId: process.env.GCP_PROJECT_ID || 'maria-code',\n  neo4jHost: process.env.NEO4J_HOST || '',\n  neo4jDbId: process.env.NEO4J_DB_ID || ''\n});\n\nexport const graphRouter = router({\n  // Generate JWT URL for Neo4j Bloom\n  getBloomUrl: protectedProcedure\n    .input(\n      z.object({\n        perspective: z.string().optional(),\n        search: z.string().optional(),\n        ttl: z.number().min(60).max(3600).optional() // 1 min to 1 hour\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (!ctx.user.email) {\n        throw new TRPCError({\n          code: 'UNAUTHORIZED',\n          message: 'User email is required'\n        });\n      }\n      const userEmail = ctx.user.email;\n      \n      // Verify user has access to the requested project\n      // TODO: Add projectId to input schema when project-based access is implemented\n      const userRole = await bloomService.verifyUserAccess(userEmail);\n\n      if (!userRole) {\n        throw new TRPCError({\n          code: 'FORBIDDEN',\n          message: 'You do not have access to this project\\'s graph'\n        });\n      }\n\n      const { url, expiresAt } = await bloomService.generateBloomURL(\n        userEmail,\n        userRole,\n        input\n      );\n\n      return {\n        url,\n        expiresAt,\n        role: userRole\n      };\n    }),\n\n  // Get graph statistics\n  getStats: protectedProcedure\n    .query(async () => {\n      // TODO: Query Neo4j for graph statistics\n      return {\n        nodes: {\n          total: 0,\n          byType: {}\n        },\n        relationships: {\n          total: 0,\n          byType: {}\n        }\n      };\n    }),\n\n  // Execute Cypher query (limited to read-only)\n  query: protectedProcedure\n    .input(\n      z.object({\n        cypher: z.string(),\n        params: z.record(z.any()).optional()\n      })\n    )\n    .mutation(async ({ input }) => {\n      // Validate query is read-only\n      // const readOnlyKeywords = ['MATCH', 'RETURN', 'WITH', 'WHERE', 'ORDER', 'LIMIT'];\n      const writeKeywords = ['CREATE', 'DELETE', 'SET', 'MERGE', 'REMOVE'];\n      \n      const upperQuery = input.cypher.toUpperCase();\n      const hasWriteOperation = writeKeywords.some(keyword => \n        upperQuery.includes(keyword)\n      );\n\n      if (hasWriteOperation) {\n        throw new TRPCError({\n          code: 'BAD_REQUEST',\n          message: 'Only read queries are allowed'\n        });\n      }\n\n      // TODO: Execute query via Neo4j driver\n      return {\n        records: [],\n        summary: {\n          nodesCreated: 0,\n          relationshipsCreated: 0,\n          resultAvailableAfter: 0,\n          resultConsumedAfter: 0\n        }\n      };\n    })\n});","import { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport { createHmac } from 'crypto';\n\nexport interface BloomJWTPayload {\n  sub: string; // user email\n  iss: string; // issuer\n  aud: string; // audience\n  neo4j: {\n    dbid: string;\n    user: string;\n    roles: string[];\n  };\n  iat: number;\n  exp: number;\n}\n\nexport interface BloomURLOptions {\n  perspective?: string;\n  search?: string;\n  ttl?: number; // seconds, default 900 (15 min)\n}\n\nexport class Neo4jBloomService {\n  private secretClient: SecretManagerServiceClient;\n  private jwtSecret?: string;\n  \n  constructor(\n    private config: {\n      projectId: string;\n      neo4jHost: string;\n      neo4jDbId: string;\n    }\n  ) {\n    this.secretClient = new SecretManagerServiceClient();\n  }\n\n  private async getJWTSecret(): Promise<string> {\n    if (this.jwtSecret) return this.jwtSecret;\n\n    const secretName = `projects/${this.config.projectId}/secrets/NEO4J_BLOOM_JWT_SECRET/versions/latest`;\n    const [version] = await this.secretClient.accessSecretVersion({ name: secretName });\n    \n    if (!version.payload?.data) {\n      throw new Error('Failed to retrieve JWT secret');\n    }\n\n    this.jwtSecret = version.payload.data.toString();\n    return this.jwtSecret;\n  }\n\n  private base64urlEncode(str: string): string {\n    return Buffer.from(str)\n      .toString('base64')\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  }\n\n  private async generateJWT(payload: BloomJWTPayload): Promise<string> {\n    const header = {\n      alg: 'HS256',\n      typ: 'JWT'\n    };\n\n    const encodedHeader = this.base64urlEncode(JSON.stringify(header));\n    const encodedPayload = this.base64urlEncode(JSON.stringify(payload));\n    \n    const secret = await this.getJWTSecret();\n    const signature = createHmac('sha256', secret)\n      .update(`${encodedHeader}.${encodedPayload}`)\n      .digest('base64')\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n\n    return `${encodedHeader}.${encodedPayload}.${signature}`;\n  }\n\n  async generateBloomURL(\n    userEmail: string,\n    userRole: 'reader' | 'editor',\n    options: BloomURLOptions = {}\n  ): Promise<{ url: string; expiresAt: string }> {\n    const now = Math.floor(Date.now() / 1000);\n    const ttl = options.ttl || 900; // 15 minutes default\n    const exp = now + ttl;\n\n    const payload: BloomJWTPayload = {\n      sub: userEmail,\n      iss: 'maria-platform',\n      aud: 'neo4j-bloom',\n      neo4j: {\n        dbid: this.config.neo4jDbId,\n        user: userEmail.split('@')[0] || userEmail, // username from email or full email if no @\n        roles: [userRole]\n      },\n      iat: now,\n      exp\n    };\n\n    const jwt = await this.generateJWT(payload);\n    \n    // Build URL\n    const baseUrl = `https://${this.config.neo4jHost}/bloom/embed`;\n    const params = new URLSearchParams({\n      jwt,\n      ...(options.perspective && { perspective: options.perspective }),\n      ...(options.search && { search: options.search })\n    });\n\n    return {\n      url: `${baseUrl}?${params.toString()}`,\n      expiresAt: new Date(exp * 1000).toISOString()\n    };\n  }\n\n  async verifyUserAccess(userEmail: string): Promise<'reader' | 'editor' | null> {\n    // TODO: Check user permissions from Firestore\n    // For now, return reader access for all authenticated users\n    return userEmail ? 'reader' : null;\n  }\n}","import { z } from 'zod';\nimport { router, protectedProcedure, createErrorHandler, rateLimit } from '../trpc';\nimport { TRPCError } from '@trpc/server';\n\n// Input schemas\nconst createTaskPlanSchema = z.object({\n  input: z.string().min(1).max(8000),\n  context: z.object({\n    type: z.enum(['paper', 'presentation', 'project', 'general']).optional(),\n    sessionId: z.string().optional(),\n    stakeholders: z.array(z.string()).optional(),\n    budget: z.number().positive().optional(),\n    timeline: z.string().optional(),\n  }).optional(),\n});\n\nconst refineTaskPlanSchema = z.object({\n  planId: z.string(),\n  feedback: z.string().min(1).max(4000),\n  sessionId: z.string().optional(),\n});\n\nconst executeTaskPlanSchema = z.object({\n  planId: z.string(),\n  options: z.object({\n    autoExecute: z.boolean().default(false),\n    sessionId: z.string().optional(),\n  }).optional(),\n});\n\nconst parseRTFSchema = z.object({\n  input: z.string().min(1).max(8000),\n  context: z.object({\n    type: z.string().optional(),\n    previousMessages: z.array(z.string()).optional(),\n    userProfile: z.record(z.any()).optional(),\n  }).optional(),\n});\n\nconst generateSOWSchema = z.object({\n  planId: z.string(),\n  options: z.object({\n    projectName: z.string().optional(),\n    stakeholders: z.array(z.string()).optional(),\n    budget: z.number().positive().optional(),\n    timeline: z.string().optional(),\n    template: z.string().optional(),\n  }).optional(),\n});\n\n// Output schemas\nconst taskPlanSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  rtfStructure: z.record(z.any()),\n  sowDocument: z.record(z.any()).optional(),\n  executionPlan: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    description: z.string(),\n    type: z.enum(['research', 'analysis', 'creation', 'review', 'communication']),\n    estimatedTime: z.number(),\n    prerequisites: z.array(z.string()),\n    deliverables: z.array(z.string()),\n    status: z.enum(['pending', 'in-progress', 'completed', 'blocked']),\n  })),\n  status: z.enum(['draft', 'approved', 'in-progress', 'completed', 'cancelled']),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nconst rtfStructureSchema = z.object({\n  role: z.string(),\n  task: z.object({\n    type: z.enum(['paper', 'presentation', 'project', 'code', 'analysis', 'general']),\n    intent: z.string(),\n    description: z.string(),\n    scope: z.enum(['single-action', 'multi-step', 'iterative', 'collaborative']),\n    priority: z.enum(['low', 'medium', 'high', 'urgent']),\n    requirements: z.array(z.string()),\n    constraints: z.array(z.string()),\n    dependencies: z.array(z.string()),\n    expectedOutcome: z.string(),\n  }),\n  format: z.record(z.any()),\n  confidence: z.number().min(0).max(1),\n  metadata: z.record(z.any()),\n});\n\nconst executionResultSchema = z.object({\n  success: z.boolean(),\n  completedSteps: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    status: z.string(),\n  })),\n  errors: z.array(z.string()),\n});\n\nexport const conversationRouter = router({\n  // Parse natural language input into RTF structure\n  parseRTF: protectedProcedure\n    .use(rateLimit(50, 60 * 60 * 1000)) // 50 requests per hour\n    .input(parseRTFSchema)\n    .output(rtfStructureSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const { RTFParser, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const rtfParser = new RTFParser(vertexAI);\n\n        const rtfStructure = await rtfParser.parseRTF(input.input, input.context);\n\n        return {\n          role: rtfStructure.role,\n          task: {\n            type: rtfStructure.task.type,\n            intent: rtfStructure.task.intent,\n            description: rtfStructure.task.description,\n            scope: rtfStructure.task.scope,\n            priority: rtfStructure.task.priority,\n            requirements: rtfStructure.task.requirements,\n            constraints: rtfStructure.task.constraints,\n            dependencies: rtfStructure.task.dependencies,\n            expectedOutcome: rtfStructure.task.expectedOutcome,\n          },\n          format: rtfStructure.format,\n          confidence: rtfStructure.confidence,\n          metadata: rtfStructure.metadata,\n        };\n      } catch (error) {\n        throw createErrorHandler('Parse RTF')(error);\n      }\n    }),\n\n  // Create a task plan from natural language input\n  createTaskPlan: protectedProcedure\n    .use(rateLimit(20, 60 * 60 * 1000)) // 20 plans per hour\n    .input(createTaskPlanSchema)\n    .output(taskPlanSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const taskPlan = await planner.createTaskPlan(input.input, input.context);\n\n        return {\n          id: taskPlan.id,\n          title: taskPlan.title,\n          description: String(taskPlan.description),\n          rtfStructure: taskPlan.rtfStructure || {},\n          sowDocument: (taskPlan as any).sowDocument,\n          executionPlan: taskPlan.executionPlan || [],\n          status: (taskPlan.status as 'draft' | 'approved' | 'in-progress' | 'completed' | 'cancelled') || 'draft',\n          createdAt: taskPlan.createdAt,\n          updatedAt: taskPlan.updatedAt,\n        };\n      } catch (error) {\n        throw createErrorHandler('Create task plan')(error);\n      }\n    }),\n\n  // Refine an existing task plan\n  refineTaskPlan: protectedProcedure\n    .use(rateLimit(50, 60 * 60 * 1000)) // 50 refinements per hour\n    .input(refineTaskPlanSchema)\n    .output(taskPlanSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const refinedPlan = await planner.refinePlan(\n          input.planId,\n          input.feedback,\n          input.sessionId\n        );\n\n        return {\n          id: refinedPlan.id,\n          title: refinedPlan.title,\n          description: refinedPlan.description,\n          rtfStructure: refinedPlan.rtfStructure,\n          sowDocument: refinedPlan.sowDocument,\n          executionPlan: refinedPlan.executionPlan,\n          status: refinedPlan.status,\n          createdAt: refinedPlan.createdAt,\n          updatedAt: refinedPlan.updatedAt,\n        };\n      } catch (error) {\n        throw createErrorHandler('Refine task plan')(error);\n      }\n    }),\n\n  // Execute a task plan\n  executeTaskPlan: protectedProcedure\n    .use(rateLimit(10, 60 * 60 * 1000)) // 10 executions per hour\n    .input(executeTaskPlanSchema)\n    .output(executionResultSchema)\n    .mutation(async ({ input }) => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const result = await planner.executePlan(input.planId, input.options);\n\n        return {\n          success: result.success,\n          completedSteps: result.completedSteps.map((step: any) => ({\n            id: step.id,\n            name: step.name,\n            status: step.status,\n          })),\n          errors: result.errors,\n        };\n      } catch (error) {\n        throw createErrorHandler('Execute task plan')(error);\n      }\n    }),\n\n  // Get task plan status\n  getTaskPlanStatus: protectedProcedure\n    .input(z.object({ planId: z.string() }))\n    .output(z.object({\n      plan: taskPlanSchema.optional(),\n      progress: z.number().min(0).max(1),\n      nextStep: z.object({\n        id: z.string(),\n        name: z.string(),\n        description: z.string(),\n        estimatedTime: z.number(),\n      }).optional(),\n      blockedSteps: z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        status: z.string(),\n      })),\n    }))\n    .query(async ({ input }) => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const status = planner.getPlanStatus(input.planId);\n\n        return {\n          plan: status.plan ? {\n            id: status.plan.id,\n            title: status.plan.title,\n            description: status.plan.description,\n            rtfStructure: status.plan.rtfStructure,\n            sowDocument: status.plan.sowDocument,\n            executionPlan: status.plan.executionPlan,\n            status: status.plan.status,\n            createdAt: status.plan.createdAt,\n            updatedAt: status.plan.updatedAt,\n          } : undefined,\n          progress: status.progress,\n          nextStep: status.nextStep ? {\n            id: status.nextStep.id,\n            name: status.nextStep.name,\n            description: status.nextStep.description,\n            estimatedTime: status.nextStep.estimatedTime,\n          } : undefined,\n          blockedSteps: status.blockedSteps.map((step: any) => ({\n            id: step.id,\n            name: step.name,\n            status: step.status,\n          })),\n        };\n      } catch (error) {\n        throw createErrorHandler('Get task plan status')(error);\n      }\n    }),\n\n  // Get all active task plans\n  getActiveTaskPlans: protectedProcedure\n    .output(z.array(taskPlanSchema))\n    .query(async () => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const activePlans = planner.getActivePlans();\n\n        return activePlans.map((plan: any) => ({\n          id: plan.id,\n          title: plan.title,\n          description: plan.description,\n          rtfStructure: plan.rtfStructure,\n          sowDocument: plan.sowDocument,\n          executionPlan: plan.executionPlan,\n          status: plan.status,\n          createdAt: plan.createdAt,\n          updatedAt: plan.updatedAt,\n        }));\n      } catch (error) {\n        throw createErrorHandler('Get active task plans')(error);\n      }\n    }),\n\n  // Generate SOW document for a task plan\n  generateSOW: protectedProcedure\n    .use(rateLimit(10, 60 * 60 * 1000)) // 10 SOW generations per hour\n    .input(generateSOWSchema)\n    .output(z.record(z.any()))\n    .mutation(async ({ input }) => {\n      try {\n        const { PlannerAgent, SOWGenerator, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n        const sowGenerator = new SOWGenerator(vertexAI);\n\n        // Get the task plan\n        const status = planner.getPlanStatus(input.planId);\n        if (!status.plan) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'Task plan not found',\n          });\n        }\n\n        // Generate SOW document\n        const sowDocument = await sowGenerator.generateSOW(\n          status.plan.rtfStructure,\n          input.options || {}\n        );\n\n        return sowDocument;\n      } catch (error) {\n        throw createErrorHandler('Generate SOW')(error);\n      }\n    }),\n\n  // Get conversation context\n  getConversationContext: protectedProcedure\n    .input(z.object({ sessionId: z.string() }))\n    .output(z.object({\n      context: z.record(z.any()).optional(),\n      stats: z.object({\n        activeConversations: z.number(),\n        conversationsByType: z.record(z.number()),\n        conversationsByPhase: z.record(z.number()),\n      }),\n    }))\n    .query(async ({ input }) => {\n      try {\n        const { PlannerAgent, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const planner = new PlannerAgent(vertexAI);\n\n        const context = planner.getConversationContext(input.sessionId);\n        \n        // Get conversation manager stats\n        const conversationManager = (planner as any).conversationManager;\n        const stats = conversationManager.getStats();\n\n        return {\n          context: context ? {\n            type: context.type,\n            id: context.id,\n            metadata: context.metadata,\n            history: context.history,\n            state: context.state,\n          } : undefined,\n          stats,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get conversation context')(error);\n      }\n    }),\n\n  // Analyze effort estimation\n  analyzeEffort: protectedProcedure\n    .input(z.object({\n      task: z.string().min(1).max(1000),\n      complexity: z.enum(['simple', 'moderate', 'complex', 'very-complex']),\n      context: z.object({\n        type: z.string(),\n        requirements: z.array(z.string()),\n        constraints: z.array(z.string()),\n      }),\n    }))\n    .output(z.object({\n      optimistic: z.number(),\n      mostLikely: z.number(),\n      pessimistic: z.number(),\n      expected: z.number(),\n      confidence: z.enum(['high', 'medium', 'low']),\n    }))\n    .mutation(async ({ input }) => {\n      try {\n        const { SOWGenerator, createVertexAIClient } = await import('@maria/ai-agents');\n        \n        const vertexAI = createVertexAIClient();\n        const sowGenerator = new SOWGenerator(vertexAI);\n\n        const effortEstimate = await sowGenerator.generateEffortEstimate(\n          input.task,\n          input.complexity,\n          input.context\n        );\n\n        return {\n          optimistic: effortEstimate.optimistic,\n          mostLikely: effortEstimate.mostLikely,\n          pessimistic: effortEstimate.pessimistic,\n          expected: effortEstimate.expected,\n          confidence: effortEstimate.confidence,\n        };\n      } catch (error) {\n        throw createErrorHandler('Analyze effort')(error);\n      }\n    }),\n});","import { z } from 'zod';\nimport { router, protectedProcedure, createErrorHandler } from '../trpc';\nimport { TRPCError } from '@trpc/server';\nimport { cloudStorage, BUCKETS } from '../lib/storage';\n\n// Input schemas\nconst uploadFileSchema = z.object({\n  resourceId: z.string(), // paperId or presentationId\n  resourceType: z.enum(['paper', 'slide']),\n  fileName: z.string().min(1),\n  fileData: z.string(), // base64 encoded file\n  description: z.string().optional(),\n});\n\nconst getFileSchema = z.object({\n  fileId: z.string(),\n  resourceId: z.string(),\n  resourceType: z.enum(['paper', 'slide']),\n});\n\nconst deleteFileSchema = z.object({\n  fileId: z.string(),\n  resourceId: z.string(),\n  resourceType: z.enum(['paper', 'slide']),\n});\n\nconst listFilesSchema = z.object({\n  resourceId: z.string(),\n  resourceType: z.enum(['paper', 'slide']),\n});\n\n// Output schemas\nconst fileSchema = z.object({\n  id: z.string(),\n  fileName: z.string(),\n  fileType: z.string(),\n  fileSize: z.number(),\n  description: z.string().optional(),\n  downloadUrl: z.string().optional(),\n  uploadedBy: z.string(),\n  uploadedAt: z.date(),\n  version: z.number(),\n});\n\nexport const storageRouter = router({\n  // Upload a file\n  uploadFile: protectedProcedure\n    .input(uploadFileSchema)\n    .output(fileSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Decode base64 file data\n        const buffer = Buffer.from(input.fileData, 'base64');\n        \n        // Validate file size\n        if (!cloudStorage.validateFileSize(buffer.length)) {\n          throw new TRPCError({\n            code: 'BAD_REQUEST',\n            message: 'File size exceeds maximum limit (50MB)',\n          });\n        }\n\n        // Detect file type\n        const { fileTypeFromBuffer } = await import('file-type');\n        const fileTypeResult = await fileTypeFromBuffer(buffer);\n        const fileType = fileTypeResult?.mime || 'application/octet-stream';\n\n        // Validate file type based on resource type\n        const isValidType = input.resourceType === 'paper' \n          ? cloudStorage.validatePaperFile(fileType, input.fileName)\n          : cloudStorage.validateSlideFile(fileType);\n\n        if (!isValidType) {\n          throw new TRPCError({\n            code: 'BAD_REQUEST',\n            message: `File type ${fileType} is not allowed for ${input.resourceType}s`,\n          });\n        }\n\n        // Check resource access\n        const collection = input.resourceType === 'paper' ? 'papers' : 'presentations';\n        const resourceDoc = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .get();\n\n        if (!resourceDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: `${input.resourceType} not found`,\n          });\n        }\n\n        const resourceData = resourceDoc.data()!;\n        if (resourceData.createdBy !== ctx.user.uid && \n            !resourceData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Upload to Cloud Storage\n        const bucketName = input.resourceType === 'paper' ? BUCKETS.PAPERS : BUCKETS.SLIDES;\n        const storageFile = await cloudStorage.uploadFile({\n          bucketName,\n          userId: ctx.user.uid,\n          resourceId: input.resourceId,\n          fileName: input.fileName,\n          fileType,\n          fileSize: buffer.length,\n          buffer,\n        });\n\n        // Save file metadata to Firestore\n        const fileData = {\n          fileName: storageFile.fileName,\n          fileType: storageFile.fileType,\n          fileSize: storageFile.fileSize,\n          gcsPath: storageFile.gcsPath,\n          description: input.description,\n          uploadedBy: ctx.user.uid,\n          uploadedAt: storageFile.uploadedAt,\n          version: storageFile.version,\n        };\n\n        const fileRef = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .collection('files')\n          .add(fileData);\n\n        return {\n          id: fileRef.id,\n          ...fileData,\n        };\n      } catch (error) {\n        throw createErrorHandler('Upload file')(error);\n      }\n    }),\n\n  // Get a file with download URL\n  getFile: protectedProcedure\n    .input(getFileSchema)\n    .output(fileSchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        // Check resource access\n        const collection = input.resourceType === 'paper' ? 'papers' : 'presentations';\n        const resourceDoc = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .get();\n\n        if (!resourceDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: `${input.resourceType} not found`,\n          });\n        }\n\n        const resourceData = resourceDoc.data()!;\n        if (resourceData.createdBy !== ctx.user.uid && \n            !resourceData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Get file metadata\n        const fileDoc = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .collection('files')\n          .doc(input.fileId)\n          .get();\n\n        if (!fileDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'File not found',\n          });\n        }\n\n        const fileData = fileDoc.data()!;\n\n        // Generate signed download URL\n        const bucketName = input.resourceType === 'paper' ? BUCKETS.PAPERS : BUCKETS.SLIDES;\n        const downloadUrl = await cloudStorage.getSignedUrl(bucketName, fileData.gcsPath);\n\n        return {\n          id: fileDoc.id,\n          fileName: fileData.fileName,\n          fileType: fileData.fileType,\n          fileSize: fileData.fileSize,\n          description: fileData.description,\n          downloadUrl,\n          uploadedBy: fileData.uploadedBy,\n          uploadedAt: fileData.uploadedAt.toDate(),\n          version: fileData.version,\n        };\n      } catch (error) {\n        throw createErrorHandler('Get file')(error);\n      }\n    }),\n\n  // List all files for a resource\n  listFiles: protectedProcedure\n    .input(listFilesSchema)\n    .output(z.array(fileSchema))\n    .query(async ({ ctx, input }) => {\n      try {\n        // Check resource access\n        const collection = input.resourceType === 'paper' ? 'papers' : 'presentations';\n        const resourceDoc = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .get();\n\n        if (!resourceDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: `${input.resourceType} not found`,\n          });\n        }\n\n        const resourceData = resourceDoc.data()!;\n        if (resourceData.createdBy !== ctx.user.uid && \n            !resourceData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Get all files\n        const filesSnapshot = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .collection('files')\n          .orderBy('uploadedAt', 'desc')\n          .get();\n\n        return filesSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            fileName: data.fileName,\n            fileType: data.fileType,\n            fileSize: data.fileSize,\n            description: data.description,\n            uploadedBy: data.uploadedBy,\n            uploadedAt: data.uploadedAt.toDate(),\n            version: data.version,\n          };\n        });\n      } catch (error) {\n        throw createErrorHandler('List files')(error);\n      }\n    }),\n\n  // Delete a file\n  deleteFile: protectedProcedure\n    .input(deleteFileSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check resource access\n        const collection = input.resourceType === 'paper' ? 'papers' : 'presentations';\n        const resourceDoc = await ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .get();\n\n        if (!resourceDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: `${input.resourceType} not found`,\n          });\n        }\n\n        const resourceData = resourceDoc.data()!;\n        if (resourceData.createdBy !== ctx.user.uid && \n            !resourceData.collaborators?.includes(ctx.user.uid)) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Access denied',\n          });\n        }\n\n        // Get file metadata\n        const fileRef = ctx.firestore\n          .collection(collection)\n          .doc(input.resourceId)\n          .collection('files')\n          .doc(input.fileId);\n\n        const fileDoc = await fileRef.get();\n        if (!fileDoc.exists) {\n          throw new TRPCError({\n            code: 'NOT_FOUND',\n            message: 'File not found',\n          });\n        }\n\n        const fileData = fileDoc.data()!;\n\n        // Only creator or file uploader can delete\n        if (resourceData.createdBy !== ctx.user.uid && fileData.uploadedBy !== ctx.user.uid) {\n          throw new TRPCError({\n            code: 'FORBIDDEN',\n            message: 'Only the creator or file uploader can delete this file',\n          });\n        }\n\n        // Delete from Cloud Storage\n        const bucketName = input.resourceType === 'paper' ? BUCKETS.PAPERS : BUCKETS.SLIDES;\n        await cloudStorage.deleteFile(bucketName, fileData.gcsPath);\n\n        // Delete from Firestore\n        await fileRef.delete();\n\n        return { success: true };\n      } catch (error) {\n        throw createErrorHandler('Delete file')(error);\n      }\n    }),\n});","import { Storage } from '@google-cloud/storage';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\n\n// Initialize Google Cloud Storage\nconst storage = new Storage({\n  projectId: process.env.GOOGLE_CLOUD_PROJECT_ID || 'maria-code',\n});\n\n// Bucket configurations\nexport const BUCKETS = {\n  PAPERS: process.env.GOOGLE_CLOUD_STORAGE_BUCKET_PAPERS || 'maria-papers-storage',\n  SLIDES: process.env.GOOGLE_CLOUD_STORAGE_BUCKET_SLIDES || 'maria-slides-storage',\n  SHARED: process.env.GOOGLE_CLOUD_STORAGE_BUCKET_SHARED || 'maria-shared-assets',\n} as const;\n\n// File type configurations\nexport const ALLOWED_PAPER_TYPES = [\n  'application/pdf',\n  'text/plain', // .tex, .bib\n  'image/png',\n  'image/jpeg',\n  'image/svg+xml',\n  'image/eps',\n  'text/csv',\n  'application/json',\n  'application/xml',\n  'application/zip',\n] as const;\n\nexport const ALLOWED_SLIDE_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/svg+xml',\n  'video/mp4',\n  'video/webm',\n  'video/quicktime',\n  'application/pdf',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n] as const;\n\nexport const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50MB\nexport const SIGNED_URL_EXPIRY = parseInt(process.env.CLOUD_STORAGE_SIGNED_URL_EXPIRY || '3600'); // 1 hour\n\nexport interface FileUploadOptions {\n  bucketName: string;\n  userId: string;\n  resourceId: string; // paperId or presentationId\n  fileName: string;\n  fileType: string;\n  fileSize: number;\n  buffer: Buffer;\n}\n\nexport interface StorageFile {\n  id: string;\n  fileName: string;\n  fileType: string;\n  fileSize: number;\n  gcsPath: string;\n  downloadUrl?: string;\n  uploadedBy: string;\n  uploadedAt: Date;\n  version: number;\n}\n\nexport class CloudStorageService {\n  /**\n   * Upload a file to Google Cloud Storage\n   */\n  async uploadFile(options: FileUploadOptions): Promise<StorageFile> {\n    const { bucketName, userId, resourceId, fileName, fileType, fileSize, buffer } = options;\n\n    // Generate unique file path\n    const fileId = uuidv4();\n    const extension = path.extname(fileName);\n    const sanitizedFileName = path.basename(fileName, extension).replace(/[^a-zA-Z0-9.-]/g, '_');\n    const gcsPath = `${userId}/${resourceId}/${fileId}/${sanitizedFileName}${extension}`;\n\n    // Get bucket reference\n    const bucket = storage.bucket(bucketName);\n    const file = bucket.file(gcsPath);\n\n    // Upload file with metadata\n    await file.save(buffer, {\n      metadata: {\n        contentType: fileType,\n        cacheControl: 'public, max-age=3600',\n        metadata: {\n          uploadedBy: userId,\n          resourceId,\n          originalFileName: fileName,\n          uploadedAt: new Date().toISOString(),\n        },\n      },\n    });\n\n    return {\n      id: fileId,\n      fileName,\n      fileType,\n      fileSize,\n      gcsPath,\n      uploadedBy: userId,\n      uploadedAt: new Date(),\n      version: 1,\n    };\n  }\n\n  /**\n   * Generate signed URL for file download\n   */\n  async getSignedUrl(bucketName: string, gcsPath: string): Promise<string> {\n    const bucket = storage.bucket(bucketName);\n    const file = bucket.file(gcsPath);\n\n    const [signedUrl] = await file.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + SIGNED_URL_EXPIRY * 1000,\n      version: 'v4',\n    });\n\n    return signedUrl;\n  }\n\n  /**\n   * Delete a file from storage\n   */\n  async deleteFile(bucketName: string, gcsPath: string): Promise<void> {\n    const bucket = storage.bucket(bucketName);\n    const file = bucket.file(gcsPath);\n\n    await file.delete();\n  }\n\n  /**\n   * Check if file exists\n   */\n  async fileExists(bucketName: string, gcsPath: string): Promise<boolean> {\n    const bucket = storage.bucket(bucketName);\n    const file = bucket.file(gcsPath);\n\n    const [exists] = await file.exists();\n    return exists;\n  }\n\n  /**\n   * Get file metadata\n   */\n  async getFileMetadata(bucketName: string, gcsPath: string) {\n    const bucket = storage.bucket(bucketName);\n    const file = bucket.file(gcsPath);\n\n    const [metadata] = await file.getMetadata();\n    return metadata;\n  }\n\n  /**\n   * List files in a directory\n   */\n  async listFiles(bucketName: string, prefix: string) {\n    const bucket = storage.bucket(bucketName);\n\n    const [files] = await bucket.getFiles({\n      prefix,\n    });\n\n    return files.map(file => ({\n      name: file.name,\n      size: parseInt(file.metadata.size?.toString() || '0'),\n      contentType: file.metadata.contentType,\n      timeCreated: file.metadata.timeCreated,\n      updated: file.metadata.updated,\n    }));\n  }\n\n  /**\n   * Validate file type for papers\n   */\n  validatePaperFile(fileType: string, fileName: string): boolean {\n    // Check MIME type\n    if (!ALLOWED_PAPER_TYPES.includes(fileType as any)) {\n      return false;\n    }\n\n    // Additional validation for text files (LaTeX, BibTeX)\n    if (fileType === 'text/plain') {\n      const ext = path.extname(fileName).toLowerCase();\n      return ['.tex', '.bib', '.txt'].includes(ext);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate file type for slides\n   */\n  validateSlideFile(fileType: string): boolean {\n    return ALLOWED_SLIDE_TYPES.includes(fileType as any);\n  }\n\n  /**\n   * Validate file size\n   */\n  validateFileSize(fileSize: number): boolean {\n    return fileSize > 0 && fileSize <= MAX_FILE_SIZE;\n  }\n}\n\n// Export singleton instance\nexport const cloudStorage = new CloudStorageService();","import { router, protectedProcedure } from '../trpc.js';\nimport { z } from 'zod';\nimport { TRPCError } from '@trpc/server';\n\n// Academic Agent procedures\nconst academicRouter = router({\n  execute: protectedProcedure\n    .input(z.object({\n      action: z.enum(['outline', 'write', 'references', 'review']),\n      topic: z.string().optional(),\n      section: z.string().optional(),\n      file: z.string().optional(),\n    }))\n    .mutation(async ({ input }) => {\n      try {\n        // TODO: Implement actual academic agent logic\n        let result = '';\n        \n        switch (input.action) {\n          case 'outline':\n            result = `Generated outline for topic: ${input.topic}\\n\\n1. Introduction\\n2. Literature Review\\n3. Methodology\\n4. Results\\n5. Discussion\\n6. Conclusion`;\n            break;\n          case 'write':\n            result = `Writing section: ${input.section}\\n\\nThis section has been generated based on your requirements.`;\n            break;\n          case 'references':\n            result = `Managing references for file: ${input.file}\\n\\nFound 15 references to format.`;\n            break;\n          case 'review':\n            result = `Reviewing paper: ${input.file}\\n\\nIdentified 3 areas for improvement.`;\n            break;\n        }\n        \n        return { result };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to execute academic agent',\n        });\n      }\n    }),\n});\n\n// Presentation Agent procedures\nconst presentationRouter = router({\n  execute: protectedProcedure\n    .input(z.object({\n      action: z.enum(['structure', 'content', 'visuals', 'sync']),\n      topic: z.string().optional(),\n      file: z.string().optional(),\n      slidesId: z.string().optional(),\n    }))\n    .mutation(async ({ input }) => {\n      try {\n        // TODO: Implement actual presentation agent logic\n        let result = '';\n        \n        switch (input.action) {\n          case 'structure':\n            result = `Generated slide structure for: ${input.topic}\\n\\n1. Title Slide\\n2. Agenda\\n3. Problem Statement\\n4. Solution\\n5. Demo\\n6. Conclusion`;\n            break;\n          case 'content':\n            result = `Creating content for slides: ${input.file}\\n\\nGenerated content for 10 slides.`;\n            break;\n          case 'visuals':\n            result = `Optimizing visuals for: ${input.file}\\n\\nEnhanced 5 slides with better graphics.`;\n            break;\n          case 'sync':\n            result = `Syncing with Google Slides ID: ${input.slidesId}\\n\\nSuccessfully synced.`;\n            break;\n        }\n        \n        return { result };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to execute presentation agent',\n        });\n      }\n    }),\n});\n\n// Development Agent procedures\nconst developmentRouter = router({\n  execute: protectedProcedure\n    .input(z.object({\n      action: z.enum(['architecture', 'generate', 'test', 'deploy']),\n      project: z.string().optional(),\n      component: z.string().optional(),\n      type: z.string().optional(),\n      environment: z.string().optional(),\n    }))\n    .mutation(async ({ input }) => {\n      try {\n        // TODO: Implement actual development agent logic\n        let result = '';\n        \n        switch (input.action) {\n          case 'architecture':\n            result = `Designing architecture for: ${input.project}\\n\\n- Frontend: Next.js\\n- Backend: tRPC\\n- Database: PostgreSQL\\n- Infrastructure: GCP`;\n            break;\n          case 'generate':\n            result = `Generating code for component: ${input.component}\\n\\nCreated 3 files with 150 lines of code.`;\n            break;\n          case 'test':\n            result = `Generating ${input.type} tests\\n\\nCreated 10 test cases with 95% coverage.`;\n            break;\n          case 'deploy':\n            result = `Deploying to ${input.environment} environment\\n\\nDeployment successful. URL: https://app-${input.environment}.example.com`;\n            break;\n        }\n        \n        return { result };\n      } catch {\n        throw new TRPCError({\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Failed to execute development agent',\n        });\n      }\n    }),\n});\n\n// Combine all agent routers\nexport const agentsRouter = router({\n  academic: academicRouter,\n  presentation: presentationRouter,\n  development: developmentRouter,\n});","import { router } from '../trpc';\nimport { authRouter } from './auth';\nimport { mariaAuthRouter } from './maria-auth';\nimport { sandboxRouter } from './sandbox';\nimport { aiExecutionRouter } from './ai-execution';\nimport { papersRouter } from './papers';\nimport { slidesRouter } from './slides';\nimport { projectsRouter } from './projects';\nimport { chatRouter } from './chat';\nimport { graphRouter } from './graph';\nimport { conversationRouter } from './conversation';\nimport { storageRouter } from './storage';\nimport { agentsRouter } from './agents';\n\nexport const appRouter = router({\n  auth: authRouter,\n  mariaAuth: mariaAuthRouter,\n  sandbox: sandboxRouter,\n  aiExecution: aiExecutionRouter,\n  papers: papersRouter,\n  slides: slidesRouter,\n  projects: projectsRouter,\n  chat: chatRouter,\n  graph: graphRouter,\n  conversation: conversationRouter,\n  storage: storageRouter,\n  agents: agentsRouter,\n});\n\nexport type AppRouter = typeof appRouter;","import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\nexport function initializeFirebase() {\n  // Check if Firebase is already initialized\n  if (getApps().length > 0) {\n    return;\n  }\n\n  try {\n    // Initialize Firebase Admin with service account\n    if (process.env.FIREBASE_ADMIN_KEY) {\n      // Production: Use service account key from environment\n      const serviceAccount = JSON.parse(process.env.FIREBASE_ADMIN_KEY);\n      \n      initializeApp({\n        credential: cert(serviceAccount),\n        projectId: process.env.MARIA_PROJECT_ID || 'maria-code',\n      });\n    } else if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n      // Development: Use service account file\n      initializeApp({\n        projectId: process.env.MARIA_PROJECT_ID || 'maria-code',\n      });\n    } else {\n      // Fallback for development\n      initializeApp({\n        projectId: process.env.MARIA_PROJECT_ID || 'maria-code',\n      });\n    }\n\n    \n    // Test the connection\n    getAuth();\n    getFirestore();\n    \n  } catch (error) {\n    throw error;\n  }\n}\n\n// Helper functions for common Firebase operations\nexport async function verifyAuthToken(token: string) {\n  try {\n    const auth = getAuth();\n    return await auth.verifyIdToken(token);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getUserByEmail(email: string) {\n  try {\n    const auth = getAuth();\n    return await auth.getUserByEmail(email);\n  } catch (error) {\n    if (error instanceof Error && 'code' in error && error.code === 'auth/user-not-found') {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function createUser(userData: {\n  email: string;\n  password?: string;\n  displayName?: string;\n  emailVerified?: boolean;\n}) {\n  try {\n    const auth = getAuth();\n    return await auth.createUser(userData);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function updateUserClaims(uid: string, claims: Record<string, unknown>) {\n  try {\n    const auth = getAuth();\n    await auth.setCustomUserClaims(uid, claims);\n    return true;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function getFirestoreInstance() {\n  return getFirestore();\n}\n\n// Database initialization - create default collections and indexes\nexport async function initializeDatabase() {\n  try {\n    const firestore = getFirestore();\n    \n    // Initialize default user roles collection if it doesn't exist\n    const rolesRef = firestore.collection('roles');\n    const rolesSnapshot = await rolesRef.limit(1).get();\n    \n    if (rolesSnapshot.empty) {\n      \n      const defaultRoles = [\n        {\n          id: 'admin',\n          name: 'Administrator',\n          permissions: ['read', 'write', 'delete', 'admin'],\n          description: 'Full system access',\n        },\n        {\n          id: 'editor',\n          name: 'Editor',\n          permissions: ['read', 'write'],\n          description: 'Can create and edit content',\n        },\n        {\n          id: 'viewer',\n          name: 'Viewer',\n          permissions: ['read'],\n          description: 'Read-only access',\n        },\n      ];\n\n      const batch = firestore.batch();\n      defaultRoles.forEach(role => {\n        const docRef = rolesRef.doc(role.id);\n        batch.set(docRef, role);\n      });\n      \n      await batch.commit();\n    }\n\n    // Create composite indexes (these would typically be created via Firebase console or CLI)\n    \n  } catch (error) {\n    throw error;\n  }\n}","import { WebSocketServer, WebSocket } from 'ws';\nimport { Server as HTTPServer } from 'http';\nimport { verifyIdToken } from './lib/auth';\nimport { Logging } from '@google-cloud/logging';\n// Type definitions matching the frontend\ninterface ChatMessage {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant' | 'system';\n  timestamp: Date;\n  attachments?: Attachment[];\n  metadata?: Record<string, any>;\n}\n\ninterface Attachment {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  url: string;\n}\n\ninterface RTFAnalysisResult {\n  id: string;\n  fileName: string;\n  status: 'processing' | 'completed' | 'failed';\n  extractedContent?: {\n    title?: string;\n    sections: Array<{\n      heading: string;\n      content: string;\n    }>;\n    metadata?: Record<string, any>;\n  };\n  error?: string;\n}\n\ninterface SOWGenerationResult {\n  id: string;\n  status: 'generating' | 'review_required' | 'approved' | 'rejected';\n  content?: string;\n  sections?: Array<{\n    title: string;\n    content: string;\n    status: 'draft' | 'reviewed' | 'approved';\n  }>;\n  reviewComments?: string[];\n  approvalInfo?: {\n    approvedBy?: string;\n    approvedAt?: Date;\n    signature?: string;\n  };\n}\n\ninterface TaskProgress {\n  taskId: string;\n  taskName: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  progress: number;\n  message?: string;\n  subtasks?: TaskProgress[];\n  startTime?: Date;\n  endTime?: Date;\n}\n\nconst logging = new Logging();\nconst log = logging.log('maria-websocket');\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  sessionId?: string;\n  isAlive?: boolean;\n}\n\ninterface WebSocketMessage {\n  type: 'chat_message' | 'progress_update' | 'task_status' | 'rtf_analysis' | 'sow_update' | 'error' | 'system';\n  payload: unknown;\n  sessionId?: string;\n  timestamp: string;\n}\n\nexport class WebSocketManager {\n  private wss: WebSocketServer;\n  private clients: Map<string, Set<AuthenticatedWebSocket>> = new Map();\n  private sessionClients: Map<string, Set<AuthenticatedWebSocket>> = new Map();\n\n  constructor(server: HTTPServer) {\n    this.wss = new WebSocketServer({\n      server,\n      path: '/ws',\n      verifyClient: async (info, cb) => {\n        try {\n          // Extract token from query parameters\n          const url = new URL(info.req.url || '', `http://${info.req.headers.host}`);\n          const token = url.searchParams.get('token');\n\n          if (!token) {\n            cb(false, 401, 'Unauthorized');\n            return;\n          }\n\n          // Verify Firebase token\n          const decodedToken = await verifyIdToken(token);\n          if (!decodedToken) {\n            cb(false, 401, 'Invalid token');\n            return;\n          }\n\n          // Attach user info to request for later use\n          (info.req as any).userId = decodedToken.uid;\n          cb(true);\n        } catch (error) {\n          if (process.env.NODE_ENV === 'development') {\n            console.error('WebSocket authentication error:', error);\n          } else {\n            log.error(log.entry({ severity: 'ERROR' }, { message: 'WebSocket authentication error', error }));\n          }\n          cb(false, 401, 'Authentication failed');\n        }\n      }\n    });\n\n    this.setupWebSocketServer();\n    this.startHeartbeat();\n  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: AuthenticatedWebSocket, request) => {\n      const userId = (request as any).userId;\n      ws.userId = userId;\n      ws.isAlive = true;\n\n      // Add to user clients map\n      if (!this.clients.has(userId)) {\n        this.clients.set(userId, new Set());\n      }\n      this.clients.get(userId)!.add(ws);\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`WebSocket client connected: ${userId}`);\n      }\n\n      ws.on('message', async (data) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch {\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('pong', () => {\n        ws.isAlive = true;\n      });\n\n      ws.on('close', () => {\n        this.removeClient(ws);\n      });\n\n      ws.on('error', (error) => {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('WebSocket error:', error);\n        } else {\n          log.error(log.entry({ severity: 'ERROR' }, { message: 'WebSocket error', error }));\n        }\n        this.removeClient(ws);\n      });\n\n      // Send connection confirmation\n      this.sendMessage(ws, {\n        type: 'system',\n        payload: { message: 'Connected to MARIA WebSocket server' }\n      });\n    });\n  }\n\n  private async handleMessage(ws: AuthenticatedWebSocket, message: WebSocketMessage) {\n    const { type, payload, sessionId } = message;\n\n    // Associate session with WebSocket if provided\n    if (sessionId && !ws.sessionId) {\n      ws.sessionId = sessionId;\n      if (!this.sessionClients.has(sessionId)) {\n        this.sessionClients.set(sessionId, new Set());\n      }\n      this.sessionClients.get(sessionId)!.add(ws);\n    }\n\n    try {\n      switch (type) {\n        case 'chat_message':\n          await this.handleChatMessage(ws, payload as ChatMessage);\n          break;\n        case 'rtf_analysis':\n          await this.handleRTFAnalysis(ws, payload as { fileId: string; fileUrl: string });\n          break;\n        case 'sow_update':\n          await this.handleSOWUpdate(ws, payload as any);\n          break;\n        case 'task_status':\n          await this.handleTaskStatus(ws, payload as any);\n          break;\n        default:\n          this.sendError(ws, `Unknown message type: ${type}`);\n      }\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Message handling error:', error);\n      } else {\n        log.error(log.entry({ severity: 'ERROR' }, { message: 'Message handling error', error }));\n      }\n      this.sendError(ws, 'Failed to process message');\n    }\n  }\n\n  private async handleChatMessage(ws: AuthenticatedWebSocket, chatMessage: ChatMessage) {\n    // Import AI agents dynamically\n    // const { createVertexAIClient } = await import('@maria/ai-agents');\n    // const vertexAI = createVertexAIClient();\n    // TODO: Implement conversation agent\n    // const conversationAgent = new ConversationAgent(vertexAI);\n\n    // TODO: Process message with AI using chatMessage\n    const response = {\n      content: `AI response placeholder for: ${chatMessage.content}`,\n      rtfAnalysis: null,\n      planId: null,\n      sowDocument: null,\n      executionPlan: null\n    };\n\n    // Send AI response\n    const responseMessage: ChatMessage = {\n      id: crypto.randomUUID(),\n      content: response.content,\n      role: 'assistant',\n      timestamp: new Date(),\n      metadata: {\n        rtfConfidence: undefined,\n        taskType: undefined,\n        intent: undefined,\n        complexity: undefined,\n        planId: response.planId,\n        hasSOW: !!response.sowDocument,\n        executionSteps: undefined,\n        responseLength: response.content.length,\n      }\n    };\n\n    this.broadcastToSession(ws.sessionId!, {\n      type: 'chat_message',\n      payload: responseMessage\n    });\n\n    // Send RTF analysis if available\n    if (response.rtfAnalysis) {\n      this.sendMessage(ws, {\n        type: 'rtf_analysis',\n        payload: response.rtfAnalysis\n      });\n    }\n\n    // Send SOW update if generated\n    if (response.sowDocument) {\n      this.sendMessage(ws, {\n        type: 'sow_update',\n        payload: response.sowDocument\n      });\n    }\n  }\n\n  private async handleRTFAnalysis(ws: AuthenticatedWebSocket, payload: { fileId: string; fileUrl: string }) {\n    const { RTFParser, createVertexAIClient } = await import('@maria/ai-agents');\n    \n    const vertexAI = createVertexAIClient();\n    const rtfParser = new RTFParser(vertexAI);\n\n    // TODO: Download file from URL and extract text\n    const fileContent = 'Sample RTF content'; // Placeholder\n\n    const analysis = await rtfParser.parseRTF(fileContent);\n\n    const result: RTFAnalysisResult = {\n      id: payload.fileId,\n      fileName: 'document.rtf', // Extract from URL\n      status: 'completed',\n      extractedContent: {\n        title: analysis.task.intent,\n        sections: [], // TODO: Extract sections\n        metadata: analysis.metadata\n      }\n    };\n\n    this.sendMessage(ws, {\n      type: 'rtf_analysis',\n      payload: result\n    });\n  }\n\n  private async handleSOWUpdate(ws: AuthenticatedWebSocket, payload: any) {\n    if (payload.action === 'generate') {\n      const { SOWGenerator, createVertexAIClient } = await import('@maria/ai-agents');\n      \n      const vertexAI = createVertexAIClient();\n      const sowGenerator = new SOWGenerator(vertexAI);\n\n      const sowDocument = await sowGenerator.generateSOW(\n        { requirements: payload.requirements },\n        payload.metadata || {}\n      );\n\n      const result: SOWGenerationResult = {\n        id: crypto.randomUUID(),\n        status: 'review_required',\n        content: JSON.stringify(sowDocument),\n        sections: (sowDocument as any).sections?.map((section: any) => ({\n          title: section.title,\n          content: section.content,\n          status: 'draft'\n        }))\n      };\n\n      this.sendMessage(ws, {\n        type: 'sow_update',\n        payload: result\n      });\n    } else if (payload.action === 'approve' || payload.action === 'reject') {\n      // Handle SOW approval/rejection\n      this.broadcastToSession(ws.sessionId!, {\n        type: 'sow_update',\n        payload: {\n          id: payload.sowId,\n          status: payload.action === 'approve' ? 'approved' : 'rejected',\n          comments: payload.comments\n        }\n      });\n    }\n  }\n\n  private async handleTaskStatus(ws: AuthenticatedWebSocket, payload: any) {\n    if (payload.action === 'pause' || payload.action === 'resume' || payload.action === 'restart') {\n      // Broadcast task control actions to all session participants\n      this.broadcastToSession(ws.sessionId!, {\n        type: 'task_status',\n        payload: {\n          taskPlanId: payload.taskPlanId,\n          action: payload.action,\n          timestamp: new Date()\n        }\n      });\n    } else if (payload.taskId) {\n      // Request specific task progress\n      const progress: TaskProgress = {\n        taskId: payload.taskId,\n        taskName: 'Sample Task', // TODO: Fetch from task plan\n        status: 'in_progress',\n        progress: 45,\n        message: 'Processing data...'\n      };\n\n      this.sendMessage(ws, {\n        type: 'progress_update',\n        payload: progress\n      });\n    }\n  }\n\n  private sendMessage(ws: AuthenticatedWebSocket, message: Omit<WebSocketMessage, 'timestamp'>) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify({\n        ...message,\n        timestamp: new Date().toISOString()\n      }));\n    }\n  }\n\n  private sendError(ws: AuthenticatedWebSocket, error: string) {\n    this.sendMessage(ws, {\n      type: 'error',\n      payload: { error }\n    });\n  }\n\n  // Currently unused - for future implementation\n  // private broadcastToUser(userId: string, message: Omit<WebSocketMessage, 'timestamp'>) {\n  //   const userClients = this.clients.get(userId);\n  //   if (userClients) {\n  //     userClients.forEach(client => {\n  //       this.sendMessage(client, message);\n  //     });\n  //   }\n  // }\n\n  private broadcastToSession(sessionId: string, message: Omit<WebSocketMessage, 'timestamp'>) {\n    const sessionClients = this.sessionClients.get(sessionId);\n    if (sessionClients) {\n      sessionClients.forEach(client => {\n        this.sendMessage(client, message);\n      });\n    }\n  }\n\n  private removeClient(ws: AuthenticatedWebSocket) {\n    if (ws.userId) {\n      const userClients = this.clients.get(ws.userId);\n      if (userClients) {\n        userClients.delete(ws);\n        if (userClients.size === 0) {\n          this.clients.delete(ws.userId);\n        }\n      }\n    }\n\n    if (ws.sessionId) {\n      const sessionClients = this.sessionClients.get(ws.sessionId);\n      if (sessionClients) {\n        sessionClients.delete(ws);\n        if (sessionClients.size === 0) {\n          this.sessionClients.delete(ws.sessionId);\n        }\n      }\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`WebSocket client disconnected: ${ws.userId}`);\n    }\n  }\n\n  private startHeartbeat() {\n    setInterval(() => {\n      this.wss.clients.forEach((ws: AuthenticatedWebSocket) => {\n        if (ws.isAlive === false) {\n          ws.terminate();\n          return;\n        }\n        ws.isAlive = false;\n        ws.ping();\n      });\n    }, 30000); // 30 seconds\n  }\n\n  // Public methods for external use\n  public sendProgressUpdate(sessionId: string, progress: TaskProgress) {\n    this.broadcastToSession(sessionId, {\n      type: 'progress_update',\n      payload: progress\n    });\n  }\n\n  public sendTaskComplete(sessionId: string, taskId: string, results: any) {\n    this.broadcastToSession(sessionId, {\n      type: 'task_status',\n      payload: {\n        taskId,\n        status: 'completed',\n        results\n      }\n    });\n  }\n}","import admin from 'firebase-admin';\n\nexport async function verifyIdToken(token: string): Promise<admin.auth.DecodedIdToken | null> {\n  try {\n    const decodedToken = await admin.auth().verifyIdToken(token);\n    return decodedToken;\n  } catch (error) {\n    console.error('Error verifying ID token:', error);\n    return null;\n  }\n}"],"mappings":"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","names":["Logging","TRPCError","z","TRPCError","z","TRPCError","z","z","TRPCError","z","z","TRPCError","z","z","TRPCError","z","withAuth","TRPCError","z","z","TRPCError","z","doc","z","TRPCError","z","z","TRPCError","z","doc","z","TRPCError","z","z","TRPCError","z","z","TRPCError","z","z","TRPCError","z","TRPCError","z","TRPCError","getAuth","server","logging","Logging","log","log"]}
{"version":3,"sources":["../src/index.ts","../src/config/vertex-ai.ts","../src/config/neo4j.ts","../src/services/llm-service.ts","../src/agents/conversation-manager.ts","../src/agents/rtf-parser.ts","../src/agents/sow-generator.ts","../src/agents/planner.ts","../src/agents/retriever.ts","../src/agents/generator.ts","../src/agents/critic.ts","../src/agents/reviewer.ts"],"sourcesContent":["export * from './config/vertex-ai';\nexport * from './config/neo4j';\nexport * from './services/llm-service';\nexport * from './agents/planner';\nexport * from './agents/conversation-manager';\nexport * from './agents/rtf-parser';\nexport * from './agents/sow-generator';\nexport * from './agents/retriever';\nexport * from './agents/generator';\nexport * from './agents/critic';\nexport * from './agents/reviewer';","import { GoogleAuth } from 'google-auth-library';\nimport { VertexAI, HarmCategory, HarmBlockThreshold } from '@google-cloud/vertexai';\n\nexport interface VertexAIConfig {\n  projectId: string;\n  location: string;\n  apiEndpoint?: string;\n}\n\nexport class VertexAIClient {\n  private vertexAI: VertexAI;\n  private auth: GoogleAuth;\n\n  constructor(private config: VertexAIConfig) {\n    this.auth = new GoogleAuth({\n      scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n    });\n\n    this.vertexAI = new VertexAI({\n      project: config.projectId,\n      location: config.location,\n      apiEndpoint: config.apiEndpoint,\n    });\n  }\n\n  async getGeminiModel(modelName: string = 'gemini-2.5-pro') {\n    return this.vertexAI.preview.getGenerativeModel({\n      model: modelName,\n      generationConfig: {\n        maxOutputTokens: 8192,\n        temperature: 0.7,\n        topP: 0.95,\n        topK: 40,\n      },\n      safetySettings: [\n        {\n          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n      ],\n    });\n  }\n\n  async generateEmbedding(text: string) {\n    const model = 'text-embedding-004';\n    const request = {\n      instances: [{ content: text }],\n    };\n\n    const endpoint = `projects/${this.config.projectId}/locations/${this.config.location}/publishers/google/models/${model}:predict`;\n    \n    const accessToken = await this.auth.getAccessToken();\n    const response = await fetch(\n      `https://${this.config.location}-aiplatform.googleapis.com/v1/${endpoint}`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Embedding generation failed: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.predictions[0].embeddings.values;\n  }\n}\n\nexport function createVertexAIClient(): VertexAIClient {\n  const projectId = process.env.GCP_PROJECT_ID || 'maria-code';\n  const location = process.env.GCP_REGION || 'asia-northeast1';\n\n  return new VertexAIClient({\n    projectId,\n    location,\n  });\n}","import neo4j, { Driver, Session } from 'neo4j-driver';\n\nexport interface Neo4jConfig {\n  uri: string;\n  username: string;\n  password: string;\n  database?: string;\n}\n\nexport class Neo4jClient {\n  private driver: Driver;\n\n  constructor(private config: Neo4jConfig) {\n    this.driver = neo4j.driver(\n      config.uri,\n      neo4j.auth.basic(config.username, config.password),\n      {\n        maxConnectionLifetime: 3 * 60 * 60 * 1000, // 3 hours\n        maxConnectionPoolSize: 50,\n        connectionAcquisitionTimeout: 2 * 60 * 1000, // 120 seconds\n      }\n    );\n  }\n\n  async verifyConnectivity(): Promise<void> {\n    const session = this.driver.session();\n    try {\n      await session.run('RETURN 1');\n      // Connection verified successfully\n    } finally {\n      await session.close();\n    }\n  }\n\n  getSession(database?: string): Session {\n    return this.driver.session({\n      database: database || this.config.database || 'neo4j',\n    });\n  }\n\n  async executeQuery<T = unknown>(\n    query: string,\n    parameters: Record<string, unknown> = {},\n    database?: string\n  ): Promise<T[]> {\n    const session = this.getSession(database);\n    try {\n      const result = await session.run(query, parameters);\n      return result.records.map((record) => record.toObject() as T);\n    } finally {\n      await session.close();\n    }\n  }\n\n  async executeWrite<T = unknown>(\n    query: string,\n    parameters: Record<string, unknown> = {},\n    database?: string\n  ): Promise<T[]> {\n    const session = this.getSession(database);\n    try {\n      const result = await session.writeTransaction(async (tx) =>\n        tx.run(query, parameters)\n      );\n      return result.records.map((record) => record.toObject() as T);\n    } finally {\n      await session.close();\n    }\n  }\n\n  async close(): Promise<void> {\n    await this.driver.close();\n  }\n}\n\nexport async function createNeo4jClient(): Promise<Neo4jClient> {\n  const uri = process.env.NEO4J_URI || '';\n  const username = process.env.NEO4J_USERNAME || 'neo4j';\n  const password = process.env.NEO4J_PASSWORD || '';\n\n  if (!uri || !password) {\n    throw new Error('Neo4j connection details not configured');\n  }\n\n  const client = new Neo4jClient({\n    uri,\n    username,\n    password,\n    database: process.env.NEO4J_DATABASE,\n  });\n\n  await client.verifyConnectivity();\n  return client;\n}","/**\n * Multi-modal LLM Service with Gemini 2.5 Pro and Grok-4 support\n * Supports text and image inputs for both providers\n */\n\nimport { VertexAI } from '@google-cloud/vertexai';\n\nexport type LLMProvider = 'gemini' | 'grok';\n\n// Gemini content part types\ninterface GeminiTextPart {\n  text: string;\n}\n\ninterface GeminiInlineDataPart {\n  inlineData: {\n    mimeType: string;\n    data: string;\n  };\n}\n\ntype GeminiPart = GeminiTextPart | GeminiInlineDataPart;\n\n// OpenAI/Grok content part types\ninterface OpenAITextPart {\n  type: 'text';\n  text: string;\n}\n\ninterface OpenAIImagePart {\n  type: 'image_url';\n  image_url: {\n    url: string;\n    detail?: 'low' | 'high' | 'auto';\n  };\n}\n\ntype OpenAIPart = OpenAITextPart | OpenAIImagePart;\n\nexport interface LLMMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string | MultiModalContent[];\n}\n\nexport interface MultiModalContent {\n  type: 'text' | 'image';\n  text?: string;\n  imageUrl?: string;\n  mimeType?: string;\n}\n\nexport interface LLMResponse {\n  content: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n  provider: LLMProvider;\n  model: string;\n  finishReason?: string;\n}\n\nexport interface LLMConfig {\n  provider: LLMProvider;\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  stream?: boolean;\n}\n\nexport class LLMService {\n  private geminiClient: VertexAI | null = null;\n  private grokApiKey: string | null = null;\n\n  constructor() {\n    // Initialize Gemini client\n    const geminiApiKey = process.env.GEMINI_API_KEY;\n    if (geminiApiKey) {\n      this.geminiClient = new VertexAI({\n        project: process.env.MARIA_PROJECT_ID || 'maria-code',\n        location: 'us-central1'\n      });\n    }\n\n    // Store Grok API key\n    this.grokApiKey = process.env.GROK_API_KEY || null;\n  }\n\n  /**\n   * Generate completion using specified LLM provider\n   */\n  async generateCompletion(\n    messages: LLMMessage[],\n    config: LLMConfig = { provider: 'gemini' }\n  ): Promise<LLMResponse> {\n    const { provider, temperature = 0.7, maxTokens = 2048, stream = false } = config;\n\n    switch (provider) {\n      case 'gemini':\n        return this.generateGeminiCompletion(messages, {\n          model: config.model || 'gemini-2.5-pro-preview-06-05',\n          temperature,\n          maxTokens,\n          stream\n        });\n      \n      case 'grok':\n        return this.generateGrokCompletion(messages, {\n          model: config.model || 'grok-4-latest',\n          temperature,\n          maxTokens,\n          stream\n        });\n      \n      default:\n        throw new Error(`Unsupported LLM provider: ${provider}`);\n    }\n  }\n\n  /**\n   * Generate completion using Gemini 2.5 Pro with multimodal support\n   */\n  private async generateGeminiCompletion(\n    messages: LLMMessage[],\n    config: { model: string; temperature: number; maxTokens: number; stream: boolean }\n  ): Promise<LLMResponse> {\n    if (!this.geminiClient) {\n      throw new Error('Gemini client not initialized. Check GEMINI_API_KEY environment variable.');\n    }\n\n    const { model, temperature } = config;\n\n    // Convert messages to Gemini format\n    const contents = messages\n      .filter(msg => msg.role !== 'system') // Gemini handles system messages differently\n      .map(msg => ({\n        role: msg.role === 'assistant' ? 'model' : 'user',\n        parts: this.convertContentToParts(msg.content)\n      }));\n\n    // Handle system message as part of the first user message\n    const systemMessage = messages.find(msg => msg.role === 'system');\n    if (systemMessage && contents.length > 0 && contents[0]) {\n      const systemParts = this.convertContentToParts(systemMessage.content);\n      if (contents[0].role === 'user' && contents[0].parts) {\n        contents[0].parts = [...systemParts, ...contents[0].parts];\n      }\n    }\n\n    const generationConfig = {\n      temperature,\n      maxOutputTokens: config.maxTokens,\n      responseMimeType: 'text/plain',\n    };\n\n    try {\n      if (config.stream) {\n        const genModel = this.geminiClient.getGenerativeModel({ model });\n        const result = await genModel.generateContentStream({\n          contents,\n          generationConfig\n        });\n\n        let fullContent = '';\n        for await (const chunk of result.stream) {\n          const chunkText = chunk.candidates?.[0]?.content?.parts?.[0]?.text;\n          if (chunkText) {\n            fullContent += chunkText;\n          }\n        }\n\n        return {\n          content: fullContent,\n          provider: 'gemini',\n          model,\n          finishReason: 'stop'\n        };\n      } else {\n        const genModel = this.geminiClient.getGenerativeModel({ model });\n        const result = await genModel.generateContent({\n          contents,\n          generationConfig\n        });\n\n        const response = await result.response;\n        const content = response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n        \n        return {\n          content,\n          provider: 'gemini',\n          model,\n          usage: {\n            promptTokens: 0, // Gemini doesn't provide token counts in this format\n            completionTokens: 0,\n            totalTokens: 0\n          },\n          finishReason: 'stop'\n        };\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Gemini API error:', error);\n      throw new Error(`Gemini API error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Generate completion using Grok-4 with multimodal support\n   */\n  private async generateGrokCompletion(\n    messages: LLMMessage[],\n    config: { model: string; temperature: number; maxTokens: number; stream: boolean }\n  ): Promise<LLMResponse> {\n    if (!this.grokApiKey) {\n      throw new Error('Grok API key not found. Check GROK_API_KEY environment variable.');\n    }\n\n    const { model, temperature, maxTokens, stream } = config;\n\n    // Convert messages to OpenAI format (Grok uses OpenAI-compatible API)\n    const formattedMessages = messages.map(msg => ({\n      role: msg.role,\n      content: this.convertContentToOpenAIFormat(msg.content)\n    }));\n\n    const requestBody = {\n      model,\n      messages: formattedMessages,\n      temperature,\n      max_tokens: maxTokens,\n      stream,\n      top_p: 1.0,\n    };\n\n    try {\n      const response = await fetch('https://api.x.ai/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.grokApiKey}`,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Grok API error (${response.status}): ${errorText}`);\n      }\n\n      if (stream) {\n        // Handle streaming response\n        const reader = response.body?.getReader();\n        if (!reader) {\n          throw new Error('Failed to get response reader');\n        }\n\n        let fullContent = '';\n        const decoder = new TextDecoder();\n\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const data = line.slice(6);\n              if (data === '[DONE]') continue;\n\n              try {\n                const parsed = JSON.parse(data);\n                const content = parsed.choices?.[0]?.delta?.content;\n                if (content) {\n                  fullContent += content;\n                }\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.warn('Failed to parse streaming chunk:', e);\n              }\n            }\n          }\n        }\n\n        return {\n          content: fullContent,\n          provider: 'grok',\n          model,\n          finishReason: 'stop'\n        };\n      } else {\n        const data = await response.json();\n        const choice = data.choices?.[0];\n        \n        if (!choice) {\n          throw new Error('No choices returned from Grok API');\n        }\n\n        return {\n          content: choice.message?.content || '',\n          provider: 'grok',\n          model,\n          usage: data.usage ? {\n            promptTokens: data.usage.prompt_tokens,\n            completionTokens: data.usage.completion_tokens,\n            totalTokens: data.usage.total_tokens\n          } : undefined,\n          finishReason: choice.finish_reason\n        };\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Grok API error:', error);\n      throw new Error(`Grok API error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Convert content to Gemini parts format\n   */\n  private convertContentToParts(content: string | MultiModalContent[]): GeminiPart[] {\n    if (typeof content === 'string') {\n      return [{ text: content }];\n    }\n\n    return content.map(item => {\n      switch (item.type) {\n        case 'text':\n          return { text: item.text || '' };\n        case 'image':\n          if (item.imageUrl) {\n            // For Gemini, we need to handle image data differently\n            // This is a simplified implementation - in production, you'd want to properly handle base64 data\n            return {\n              inlineData: {\n                mimeType: item.mimeType || 'image/jpeg',\n                data: item.imageUrl.includes('base64,') \n                  ? item.imageUrl.split('base64,')[1] || ''\n                  : item.imageUrl\n              }\n            };\n          }\n          return { text: '[Image]' };\n        default:\n          return { text: '[Unsupported content type]' };\n      }\n    });\n  }\n\n  /**\n   * Convert content to OpenAI format for Grok\n   */\n  private convertContentToOpenAIFormat(content: string | MultiModalContent[]): string | OpenAIPart[] {\n    if (typeof content === 'string') {\n      return content;\n    }\n\n    // For multimodal content, use OpenAI's format\n    return content.map(item => {\n      switch (item.type) {\n        case 'text':\n          return {\n            type: 'text',\n            text: item.text || ''\n          };\n        case 'image':\n          return {\n            type: 'image_url',\n            image_url: {\n              url: item.imageUrl || '',\n              detail: 'high'\n            }\n          };\n        default:\n          return {\n            type: 'text',\n            text: '[Unsupported content type]'\n          };\n      }\n    });\n  }\n\n  /**\n   * Check if a provider is available (has required API keys)\n   */\n  isProviderAvailable(provider: LLMProvider): boolean {\n    switch (provider) {\n      case 'gemini':\n        return !!this.geminiClient;\n      case 'grok':\n        return !!this.grokApiKey;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Get available providers\n   */\n  getAvailableProviders(): LLMProvider[] {\n    const providers: LLMProvider[] = [];\n    \n    if (this.isProviderAvailable('gemini')) {\n      providers.push('gemini');\n    }\n    \n    if (this.isProviderAvailable('grok')) {\n      providers.push('grok');\n    }\n    \n    return providers;\n  }\n\n  /**\n   * Get supported models for a provider\n   */\n  getSupportedModels(provider: LLMProvider): string[] {\n    switch (provider) {\n      case 'gemini':\n        return [\n          'gemini-2.5-pro-preview-06-05',\n          'gemini-1.5-pro',\n          'gemini-1.5-flash'\n        ];\n      case 'grok':\n        return [\n          'grok-4-latest',\n          'grok-4',\n          'grok-beta'\n        ];\n      default:\n        return [];\n    }\n  }\n}\n\n// Singleton instance\nexport const llmService = new LLMService();","import { VertexAIClient } from '../config/vertex-ai';\n\nexport interface ConversationContext {\n  type: 'paper' | 'presentation' | 'project' | 'general';\n  id?: string;\n  metadata?: Record<string, unknown>;\n  history: ConversationMessage[];\n  state: ConversationState;\n}\n\nexport interface ConversationMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface ConversationState {\n  phase: 'initiation' | 'analysis' | 'planning' | 'execution' | 'review' | 'completion';\n  currentTask?: string;\n  pendingActions: string[];\n  completedActions: string[];\n  workingMemory: Record<string, unknown>;\n}\n\nexport interface DialogFlowConfig {\n  maxHistoryLength: number;\n  contextRetentionTime: number; // in milliseconds\n  autoSaveInterval: number; // in milliseconds\n}\n\nexport class ConversationManager {\n  private vertexAI: VertexAIClient;\n  private activeContexts: Map<string, ConversationContext>;\n  private config: DialogFlowConfig;\n\n  constructor(vertexAI: VertexAIClient, config?: Partial<DialogFlowConfig>) {\n    this.vertexAI = vertexAI;\n    this.activeContexts = new Map();\n    this.config = {\n      maxHistoryLength: 50,\n      contextRetentionTime: 24 * 60 * 60 * 1000, // 24 hours\n      autoSaveInterval: 5 * 60 * 1000, // 5 minutes\n      ...config,\n    };\n  }\n\n  /**\n   * Initialize a new conversation session\n   */\n  async initializeConversation(\n    sessionId: string,\n    type: ConversationContext['type'],\n    initialMessage?: string,\n    contextId?: string\n  ): Promise<ConversationContext> {\n    const context: ConversationContext = {\n      type,\n      id: contextId,\n      history: [],\n      state: {\n        phase: 'initiation',\n        pendingActions: [],\n        completedActions: [],\n        workingMemory: {},\n      },\n    };\n\n    if (initialMessage) {\n      context.history.push({\n        role: 'user',\n        content: initialMessage,\n        timestamp: new Date(),\n      });\n\n      // Generate initial system response\n      const systemResponse = await this.generateSystemResponse(context);\n      context.history.push(systemResponse);\n    }\n\n    this.activeContexts.set(sessionId, context);\n    return context;\n  }\n\n  /**\n   * Process a new message in an existing conversation\n   */\n  async processMessage(\n    sessionId: string,\n    message: string,\n    metadata?: Record<string, unknown>\n  ): Promise<ConversationMessage> {\n    const context = this.activeContexts.get(sessionId);\n    if (!context) {\n      throw new Error(`No active conversation found for session: ${sessionId}`);\n    }\n\n    // Add user message to history\n    const userMessage: ConversationMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date(),\n      metadata,\n    };\n    context.history.push(userMessage);\n\n    // Update conversation state based on message\n    await this.updateConversationState(context, message);\n\n    // Generate assistant response\n    const assistantResponse = await this.generateAssistantResponse(context);\n    context.history.push(assistantResponse);\n\n    // Trim history if too long\n    this.trimHistoryIfNeeded(context);\n\n    return assistantResponse;\n  }\n\n  /**\n   * Get conversation context for a session\n   */\n  getConversationContext(sessionId: string): ConversationContext | undefined {\n    return this.activeContexts.get(sessionId);\n  }\n\n  /**\n   * Update conversation state based on user input\n   */\n  private async updateConversationState(\n    context: ConversationContext,\n    message: string\n  ): Promise<void> {\n    // Use AI to analyze message intent and update state\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const stateAnalysisPrompt = `\nAnalyze this user message and current conversation state to determine the next phase and actions.\n\nCurrent State:\n- Phase: ${context.state.phase}\n- Current Task: ${context.state.currentTask || 'None'}\n- Pending Actions: ${context.state.pendingActions.join(', ')}\n\nUser Message: \"${message}\"\nContext Type: ${context.type}\n\nBased on this information, determine:\n1. Next conversation phase (initiation/analysis/planning/execution/review/completion)\n2. Current task description\n3. New pending actions to add\n4. Actions to mark as completed\n\nRespond in JSON format:\n{\n  \"phase\": \"...\",\n  \"currentTask\": \"...\",\n  \"newPendingActions\": [\"...\"],\n  \"completedActions\": [\"...\"],\n  \"workingMemoryUpdates\": {}\n}\n`;\n\n    try {\n      const result = await model.generateContent(stateAnalysisPrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const stateUpdate = JSON.parse(responseText);\n\n      // Update conversation state\n      context.state.phase = stateUpdate.phase || context.state.phase;\n      context.state.currentTask = stateUpdate.currentTask || context.state.currentTask;\n      \n      // Add new pending actions\n      if (stateUpdate.newPendingActions) {\n        context.state.pendingActions.push(...stateUpdate.newPendingActions);\n      }\n      \n      // Move completed actions\n      if (stateUpdate.completedActions) {\n        stateUpdate.completedActions.forEach((action: string) => {\n          const index = context.state.pendingActions.indexOf(action);\n          if (index > -1) {\n            context.state.pendingActions.splice(index, 1);\n            context.state.completedActions.push(action);\n          }\n        });\n      }\n\n      // Update working memory\n      if (stateUpdate.workingMemoryUpdates) {\n        Object.assign(context.state.workingMemory, stateUpdate.workingMemoryUpdates);\n      }\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to update conversation state:', error);\n      }\n      // Continue with default behavior\n    }\n  }\n\n  /**\n   * Generate system response for conversation initiation\n   */\n  private async generateSystemResponse(\n    context: ConversationContext\n  ): Promise<ConversationMessage> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const systemPrompt = `\nYou are an AI assistant specialized in helping with ${context.type} tasks in the MARIA platform.\n\nContext Type: ${context.type}\nUser's First Message: ${context.history[0]?.content || 'Starting conversation'}\n\nGenerate a helpful initial response that:\n1. Acknowledges the user's request\n2. Asks clarifying questions if needed\n3. Outlines how you can help\n4. Sets expectations for the conversation\n\nKeep the response friendly, professional, and focused on the specific context type.\n`;\n\n    const result = await model.generateContent(systemPrompt);\n    \n    return {\n      role: 'assistant',\n      content: result.response.candidates?.[0]?.content?.parts?.[0]?.text || 'I apologize, but I encountered an issue generating a response.',\n      timestamp: new Date(),\n      metadata: {\n        contextType: context.type,\n        phase: context.state.phase,\n      },\n    };\n  }\n\n  /**\n   * Generate assistant response based on current context\n   */\n  private async generateAssistantResponse(\n    context: ConversationContext\n  ): Promise<ConversationMessage> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    // Build conversation history for context\n    const recentHistory = context.history\n      .slice(-10) // Last 10 messages\n      .map(msg => `${msg.role}: ${msg.content}`)\n      .join('\\n');\n\n    const responsePrompt = `\nYou are an AI assistant helping with ${context.type} tasks in the MARIA platform.\n\nCurrent Conversation State:\n- Phase: ${context.state.phase}\n- Current Task: ${context.state.currentTask || 'None'}\n- Pending Actions: ${context.state.pendingActions.join(', ')}\n- Completed Actions: ${context.state.completedActions.join(', ')}\n\nRecent Conversation:\n${recentHistory}\n\nGenerate a helpful response that:\n1. Addresses the user's latest message\n2. Provides actionable guidance\n3. Moves the conversation forward toward task completion\n4. Maintains context awareness of the ongoing work\n\nFor ${context.type} context, focus on relevant domain expertise and practical assistance.\n`;\n\n    const result = await model.generateContent(responsePrompt);\n    \n    return {\n      role: 'assistant',\n      content: result.response.candidates?.[0]?.content?.parts?.[0]?.text || 'I apologize, but I encountered an issue generating a response.',\n      timestamp: new Date(),\n      metadata: {\n        contextType: context.type,\n        phase: context.state.phase,\n        currentTask: context.state.currentTask,\n      },\n    };\n  }\n\n  /**\n   * Trim conversation history if it exceeds maximum length\n   */\n  private trimHistoryIfNeeded(context: ConversationContext): void {\n    if (context.history.length > this.config.maxHistoryLength) {\n      // Keep first message (usually important context) and recent messages\n      const firstMessage = context.history[0];\n      const recentMessages = context.history.slice(-this.config.maxHistoryLength + 1);\n      if (firstMessage) {\n        context.history = [firstMessage, ...recentMessages];\n      } else {\n        context.history = recentMessages;\n      }\n    }\n  }\n\n  /**\n   * Clean up expired conversations\n   */\n  cleanupExpiredConversations(): void {\n    const now = Date.now();\n    const expiredSessions: string[] = [];\n\n    for (const [sessionId, context] of this.activeContexts.entries()) {\n      const lastMessage = context.history[context.history.length - 1];\n      const lastActivity = lastMessage ? lastMessage.timestamp : new Date(0);\n      if (now - lastActivity.getTime() > this.config.contextRetentionTime) {\n        expiredSessions.push(sessionId);\n      }\n    }\n\n    expiredSessions.forEach(sessionId => {\n      this.activeContexts.delete(sessionId);\n    });\n  }\n\n  /**\n   * Get conversation statistics\n   */\n  getStats(): {\n    activeConversations: number;\n    conversationsByType: Record<string, number>;\n    conversationsByPhase: Record<string, number>;\n  } {\n    const stats = {\n      activeConversations: this.activeContexts.size,\n      conversationsByType: {} as Record<string, number>,\n      conversationsByPhase: {} as Record<string, number>,\n    };\n\n    for (const context of this.activeContexts.values()) {\n      // Count by type\n      stats.conversationsByType[context.type] = \n        (stats.conversationsByType[context.type] || 0) + 1;\n      \n      // Count by phase\n      stats.conversationsByPhase[context.state.phase] = \n        (stats.conversationsByPhase[context.state.phase] || 0) + 1;\n    }\n\n    return stats;\n  }\n}","import { VertexAIClient } from '../config/vertex-ai';\n\nexport interface RTFStructure {\n  role: string;\n  task: TaskDefinition;\n  format: FormatRequirements;\n  confidence: number;\n  metadata: Record<string, unknown>;\n}\n\nexport interface TaskDefinition {\n  type: 'paper' | 'presentation' | 'project' | 'code' | 'analysis' | 'general';\n  intent: string;\n  description: string;\n  scope: 'single-action' | 'multi-step' | 'iterative' | 'collaborative';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  requirements: string[];\n  constraints: string[];\n  dependencies: string[];\n  expectedOutcome: string;\n}\n\nexport interface FormatRequirements {\n  outputType: 'document' | 'presentation' | 'code' | 'analysis' | 'conversation' | 'mixed';\n  structure: 'linear' | 'hierarchical' | 'iterative' | 'collaborative';\n  style: 'formal' | 'casual' | 'technical' | 'academic' | 'creative';\n  deliverables: DeliverableSpec[];\n  timeline: TimelineSpec;\n}\n\nexport interface DeliverableSpec {\n  name: string;\n  type: string;\n  description: string;\n  format: string;\n  priority: 'must-have' | 'should-have' | 'could-have';\n}\n\nexport interface TimelineSpec {\n  estimatedDuration: string;\n  milestones: MilestoneSpec[];\n  urgency: 'immediate' | 'hours' | 'days' | 'weeks' | 'months';\n}\n\nexport interface MilestoneSpec {\n  name: string;\n  description: string;\n  estimatedTime: string;\n  dependencies: string[];\n}\n\nexport interface ParsedIntent {\n  primaryIntent: string;\n  secondaryIntents: string[];\n  entities: EntityExtraction[];\n  sentiment: 'positive' | 'neutral' | 'negative' | 'frustrated' | 'excited';\n  urgency: 'low' | 'medium' | 'high' | 'urgent';\n  complexity: 'simple' | 'moderate' | 'complex' | 'very-complex';\n}\n\nexport interface EntityExtraction {\n  type: 'person' | 'project' | 'document' | 'deadline' | 'technology' | 'concept' | 'location';\n  value: string;\n  confidence: number;\n  context: string;\n}\n\nexport class RTFParser {\n  private vertexAI: VertexAIClient;\n  private intentCache: Map<string, ParsedIntent>;\n  private rtfCache: Map<string, RTFStructure>;\n\n  constructor(vertexAI: VertexAIClient) {\n    this.vertexAI = vertexAI;\n    this.intentCache = new Map();\n    this.rtfCache = new Map();\n  }\n\n  /**\n   * Parse natural language input into RTF structure\n   */\n  async parseRTF(\n    input: string,\n    context?: {\n      type?: string;\n      previousMessages?: string[];\n      userProfile?: Record<string, unknown>;\n    }\n  ): Promise<RTFStructure> {\n    // Check cache first\n    const cacheKey = this.generateCacheKey(input, context);\n    const cached = this.rtfCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const parsePrompt = `\nAnalyze this natural language input and extract the Role, Task, and Format (RTF) structure.\n\nInput: \"${input}\"\n${context ? `Context: ${JSON.stringify(context, null, 2)}` : ''}\n\nExtract and structure the following information in JSON format:\n\n{\n  \"role\": \"The role or persona the user wants the AI to assume (e.g., 'academic advisor', 'technical writer', 'project manager')\",\n  \"task\": {\n    \"type\": \"paper|presentation|project|code|analysis|general\",\n    \"intent\": \"Primary goal or objective\",\n    \"description\": \"Detailed description of what needs to be done\",\n    \"scope\": \"single-action|multi-step|iterative|collaborative\",\n    \"priority\": \"low|medium|high|urgent\",\n    \"requirements\": [\"List of specific requirements\"],\n    \"constraints\": [\"Any limitations or constraints\"],\n    \"dependencies\": [\"Prerequisites or dependencies\"],\n    \"expectedOutcome\": \"What the user expects as a result\"\n  },\n  \"format\": {\n    \"outputType\": \"document|presentation|code|analysis|conversation|mixed\",\n    \"structure\": \"linear|hierarchical|iterative|collaborative\",\n    \"style\": \"formal|casual|technical|academic|creative\",\n    \"deliverables\": [\n      {\n        \"name\": \"Deliverable name\",\n        \"type\": \"Type of deliverable\",\n        \"description\": \"What this deliverable contains\",\n        \"format\": \"Specific format requirements\",\n        \"priority\": \"must-have|should-have|could-have\"\n      }\n    ],\n    \"timeline\": {\n      \"estimatedDuration\": \"Rough time estimate\",\n      \"milestones\": [\n        {\n          \"name\": \"Milestone name\",\n          \"description\": \"What needs to be achieved\",\n          \"estimatedTime\": \"Time estimate for this milestone\",\n          \"dependencies\": [\"Dependencies for this milestone\"]\n        }\n      ],\n      \"urgency\": \"immediate|hours|days|weeks|months\"\n    }\n  },\n  \"confidence\": 0.0-1.0,\n  \"metadata\": {\n    \"language\": \"detected language\",\n    \"complexity\": \"simple|moderate|complex|very-complex\",\n    \"domain\": \"detected domain or field\",\n    \"keywords\": [\"key terms extracted\"]\n  }\n}\n\nBe thorough but realistic in your analysis. If information is not explicitly provided, make reasonable inferences based on context and common patterns.\n`;\n\n    try {\n      const result = await model.generateContent(parsePrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const rtfStructure = JSON.parse(responseText) as RTFStructure;\n\n      // Validate and enhance the parsed RTF\n      const validatedRTF = this.validateAndEnhanceRTF(rtfStructure, input);\n      \n      // Cache the result\n      this.rtfCache.set(cacheKey, validatedRTF);\n      \n      return validatedRTF;\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to parse RTF structure:', error);\n      }\n      \n      // Return a fallback RTF structure\n      return this.createFallbackRTF(input);\n    }\n  }\n\n  /**\n   * Extract intent and entities from natural language\n   */\n  async parseIntent(\n    input: string,\n    context?: Record<string, unknown>\n  ): Promise<ParsedIntent> {\n    const cacheKey = `intent:${input}`;\n    const cached = this.intentCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const intentPrompt = `\nAnalyze this natural language input and extract intent, entities, and other relevant information.\n\nInput: \"${input}\"\n${context ? `Context: ${JSON.stringify(context, null, 2)}` : ''}\n\nExtract the following information in JSON format:\n\n{\n  \"primaryIntent\": \"Main goal or action the user wants (e.g., 'create_document', 'get_help', 'edit_content')\",\n  \"secondaryIntents\": [\"Additional or supporting intents\"],\n  \"entities\": [\n    {\n      \"type\": \"person|project|document|deadline|technology|concept|location\",\n      \"value\": \"Extracted entity value\",\n      \"confidence\": 0.0-1.0,\n      \"context\": \"Surrounding context for this entity\"\n    }\n  ],\n  \"sentiment\": \"positive|neutral|negative|frustrated|excited\",\n  \"urgency\": \"low|medium|high|urgent\",\n  \"complexity\": \"simple|moderate|complex|very-complex\"\n}\n\nBe precise and extract all relevant entities and intents.\n`;\n\n    try {\n      const result = await model.generateContent(intentPrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const parsedIntent = JSON.parse(responseText) as ParsedIntent;\n\n      // Cache the result\n      this.intentCache.set(cacheKey, parsedIntent);\n      \n      return parsedIntent;\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to parse intent:', error);\n      }\n      \n      // Return fallback intent\n      return {\n        primaryIntent: 'general_assistance',\n        secondaryIntents: [],\n        entities: [],\n        sentiment: 'neutral',\n        urgency: 'medium',\n        complexity: 'moderate',\n      };\n    }\n  }\n\n  /**\n   * Convert RTF structure to actionable steps\n   */\n  async rtfToActionPlan(rtf: RTFStructure): Promise<{\n    steps: ActionStep[];\n    resources: ResourceRequirement[];\n    riskAssessment: RiskFactor[];\n  }> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const planPrompt = `\nConvert this RTF structure into a detailed action plan with steps, resources, and risk assessment.\n\nRTF Structure:\n${JSON.stringify(rtf, null, 2)}\n\nGenerate a comprehensive action plan in JSON format:\n\n{\n  \"steps\": [\n    {\n      \"id\": \"unique_step_id\",\n      \"name\": \"Step name\",\n      \"description\": \"Detailed description of what to do\",\n      \"type\": \"research|analysis|creation|review|communication|technical\",\n      \"estimatedTime\": \"Time estimate\",\n      \"prerequisites\": [\"Previous steps required\"],\n      \"deliverable\": \"What this step produces\",\n      \"tools\": [\"Tools or resources needed\"],\n      \"validationCriteria\": [\"How to verify completion\"]\n    }\n  ],\n  \"resources\": [\n    {\n      \"type\": \"human|tool|data|infrastructure|external\",\n      \"name\": \"Resource name\",\n      \"description\": \"What this resource provides\",\n      \"availability\": \"available|limited|unavailable|unknown\",\n      \"criticality\": \"essential|important|helpful|optional\"\n    }\n  ],\n  \"riskAssessment\": [\n    {\n      \"type\": \"technical|timeline|resource|quality|external\",\n      \"description\": \"Description of the risk\",\n      \"probability\": \"low|medium|high\",\n      \"impact\": \"low|medium|high|critical\",\n      \"mitigation\": \"How to reduce or handle this risk\"\n    }\n  ]\n}\n\nMake the action plan practical and executable.\n`;\n\n    try {\n      const result = await model.generateContent(planPrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      return JSON.parse(responseText);\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to generate action plan:', error);\n      }\n      \n      // Return basic action plan\n      return {\n        steps: [{\n          id: 'step_1',\n          name: 'Initial Analysis',\n          description: 'Analyze the requirements and plan next steps',\n          type: 'analysis',\n          estimatedTime: '1 hour',\n          prerequisites: [],\n          deliverable: 'Analysis report',\n          tools: ['AI Assistant'],\n          validationCriteria: ['Requirements understood'],\n        }],\n        resources: [{\n          type: 'tool',\n          name: 'AI Assistant',\n          description: 'Provides guidance and assistance',\n          availability: 'available',\n          criticality: 'essential',\n        }],\n        riskAssessment: [{\n          type: 'timeline',\n          description: 'Task may take longer than estimated',\n          probability: 'medium',\n          impact: 'medium',\n          mitigation: 'Break down into smaller steps and reassess regularly',\n        }],\n      };\n    }\n  }\n\n  /**\n   * Validate and enhance RTF structure\n   */\n  private validateAndEnhanceRTF(rtf: RTFStructure, originalInput: string): RTFStructure {\n    // Ensure required fields exist\n    if (!rtf.role) {\n      rtf.role = 'AI Assistant';\n    }\n    \n    if (!rtf.task) {\n      rtf.task = {\n        type: 'general',\n        intent: 'assist_user',\n        description: originalInput,\n        scope: 'single-action',\n        priority: 'medium',\n        requirements: [],\n        constraints: [],\n        dependencies: [],\n        expectedOutcome: 'User assistance provided',\n      };\n    }\n\n    if (!rtf.format) {\n      rtf.format = {\n        outputType: 'conversation',\n        structure: 'linear',\n        style: 'casual',\n        deliverables: [{\n          name: 'Response',\n          type: 'text',\n          description: 'AI generated response',\n          format: 'natural language',\n          priority: 'must-have',\n        }],\n        timeline: {\n          estimatedDuration: 'minutes',\n          milestones: [],\n          urgency: 'hours',\n        },\n      };\n    }\n\n    // Ensure confidence is between 0 and 1\n    if (rtf.confidence < 0 || rtf.confidence > 1) {\n      rtf.confidence = 0.7; // Default moderate confidence\n    }\n\n    return rtf;\n  }\n\n  /**\n   * Create fallback RTF structure when parsing fails\n   */\n  private createFallbackRTF(input: string): RTFStructure {\n    return {\n      role: 'AI Assistant',\n      task: {\n        type: 'general',\n        intent: 'general_assistance',\n        description: input,\n        scope: 'single-action',\n        priority: 'medium',\n        requirements: ['Understand user request'],\n        constraints: [],\n        dependencies: [],\n        expectedOutcome: 'Helpful response provided',\n      },\n      format: {\n        outputType: 'conversation',\n        structure: 'linear',\n        style: 'casual',\n        deliverables: [{\n          name: 'AI Response',\n          type: 'text',\n          description: 'Natural language response to user query',\n          format: 'conversational',\n          priority: 'must-have',\n        }],\n        timeline: {\n          estimatedDuration: 'immediate',\n          milestones: [{\n            name: 'Generate Response',\n            description: 'Create helpful response to user input',\n            estimatedTime: 'seconds',\n            dependencies: [],\n          }],\n          urgency: 'immediate',\n        },\n      },\n      confidence: 0.5,\n      metadata: {\n        language: 'english',\n        complexity: 'moderate',\n        domain: 'general',\n        keywords: input.split(' ').slice(0, 5),\n        fallback: true,\n      },\n    };\n  }\n\n  /**\n   * Generate cache key for RTF parsing\n   */\n  private generateCacheKey(input: string, context?: Record<string, unknown>): string {\n    const contextStr = context ? JSON.stringify(context) : '';\n    return `rtf:${input}:${contextStr}`;\n  }\n\n  /**\n   * Clear parser caches\n   */\n  clearCache(): void {\n    this.intentCache.clear();\n    this.rtfCache.clear();\n  }\n\n  /**\n   * Get parser statistics\n   */\n  getStats(): {\n    intentCacheSize: number;\n    rtfCacheSize: number;\n    cacheHitRate: number;\n  } {\n    return {\n      intentCacheSize: this.intentCache.size,\n      rtfCacheSize: this.rtfCache.size,\n      cacheHitRate: 0, // TODO: Implement cache hit tracking\n    };\n  }\n}\n\n// Supporting interfaces for action planning\nexport interface ActionStep {\n  id: string;\n  name: string;\n  description: string;\n  type: 'research' | 'analysis' | 'creation' | 'review' | 'communication';\n  estimatedTime: string;\n  prerequisites: string[];\n  deliverable: string;\n  tools: string[];\n  validationCriteria: string[];\n}\n\nexport interface ResourceRequirement {\n  type: 'human' | 'tool' | 'data' | 'infrastructure' | 'external';\n  name: string;\n  description: string;\n  availability: 'available' | 'limited' | 'unavailable' | 'unknown';\n  criticality: 'essential' | 'important' | 'helpful' | 'optional';\n}\n\nexport interface RiskFactor {\n  type: 'technical' | 'timeline' | 'resource' | 'quality' | 'external';\n  description: string;\n  probability: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  mitigation: string;\n}","import { VertexAIClient } from '../config/vertex-ai';\nimport { RTFStructure } from './rtf-parser';\n\nexport interface SOWDocument {\n  id: string;\n  title: string;\n  description: string;\n  scope: SOWScope;\n  deliverables: Deliverable[];\n  timeline: ProjectTimeline;\n  resources: ResourcePlan;\n  riskAssessment: RiskAssessment;\n  assumptions: string[];\n  constraints: string[];\n  successCriteria: SuccessCriteria[];\n  budget: BudgetEstimate;\n  metadata: SOWMetadata;\n}\n\nexport interface SOWScope {\n  overview: string;\n  objectives: string[];\n  inclusions: string[];\n  exclusions: string[];\n  boundaries: string[];\n}\n\nexport interface Deliverable {\n  id: string;\n  name: string;\n  description: string;\n  type: 'document' | 'presentation' | 'software' | 'analysis' | 'model' | 'other';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  acceptanceCriteria: string[];\n  dependencies: string[];\n  estimatedEffort: EffortEstimate;\n  milestones: Milestone[];\n}\n\nexport interface ProjectTimeline {\n  startDate: Date;\n  endDate: Date;\n  totalDuration: string;\n  phases: ProjectPhase[];\n  criticalPath: string[];\n  bufferTime: string;\n}\n\nexport interface ProjectPhase {\n  id: string;\n  name: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  deliverables: string[];\n  dependencies: string[];\n  resources: string[];\n}\n\nexport interface ResourcePlan {\n  humanResources: HumanResource[];\n  technicalResources: TechnicalResource[];\n  externalResources: ExternalResource[];\n  totalEstimate: ResourceEstimate;\n}\n\nexport interface HumanResource {\n  role: string;\n  skillsRequired: string[];\n  effortRequired: EffortEstimate;\n  availability: 'full-time' | 'part-time' | 'consultant' | 'as-needed';\n}\n\nexport interface TechnicalResource {\n  name: string;\n  type: 'software' | 'hardware' | 'platform' | 'service';\n  description: string;\n  cost: number;\n  duration: string;\n}\n\nexport interface ExternalResource {\n  name: string;\n  type: 'vendor' | 'consultant' | 'service' | 'data' | 'other';\n  description: string;\n  cost: number;\n  deliverables: string[];\n}\n\nexport interface ResourceEstimate {\n  totalHours: number;\n  totalCost: number;\n  breakdown: Record<string, number>;\n}\n\nexport interface RiskAssessment {\n  risks: ProjectRisk[];\n  mitigationStrategies: MitigationStrategy[];\n  contingencyPlans: ContingencyPlan[];\n  overallRiskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ProjectRisk {\n  id: string;\n  category: 'technical' | 'schedule' | 'resource' | 'external' | 'quality' | 'business';\n  description: string;\n  probability: number; // 0-1\n  impact: number; // 0-1\n  riskScore: number; // probability * impact\n  triggers: string[];\n  indicators: string[];\n}\n\nexport interface MitigationStrategy {\n  riskId: string;\n  strategy: string;\n  actions: string[];\n  responsibleParty: string;\n  timeline: string;\n  cost: number;\n}\n\nexport interface ContingencyPlan {\n  trigger: string;\n  description: string;\n  actions: string[];\n  resources: string[];\n  impact: string;\n}\n\nexport interface SuccessCriteria {\n  category: 'quality' | 'timeline' | 'budget' | 'scope' | 'stakeholder';\n  description: string;\n  metrics: string[];\n  target: string;\n  measurement: string;\n}\n\nexport interface BudgetEstimate {\n  totalCost: number;\n  breakdown: BudgetCategory[];\n  assumptions: string[];\n  riskBuffer: number;\n  currency: string;\n}\n\nexport interface BudgetCategory {\n  name: string;\n  cost: number;\n  description: string;\n  confidence: 'high' | 'medium' | 'low';\n}\n\nexport interface EffortEstimate {\n  optimistic: number; // hours\n  mostLikely: number; // hours\n  pessimistic: number; // hours\n  expected: number; // hours (calculated)\n  confidence: 'high' | 'medium' | 'low';\n}\n\nexport interface Milestone {\n  id: string;\n  name: string;\n  description: string;\n  date: Date;\n  criteria: string[];\n  dependencies: string[];\n}\n\nexport interface SOWMetadata {\n  version: string;\n  createdDate: Date;\n  createdBy: string;\n  lastModified: Date;\n  status: 'draft' | 'review' | 'approved' | 'active' | 'completed' | 'cancelled';\n  reviewers: string[];\n  approvers: string[];\n  template: string;\n}\n\nexport class SOWGenerator {\n  private vertexAI: VertexAIClient;\n  private templates: Map<string, SOWTemplate>;\n\n  constructor(vertexAI: VertexAIClient) {\n    this.vertexAI = vertexAI;\n    this.templates = new Map();\n    this.initializeTemplates();\n  }\n\n  /**\n   * Generate SOW from RTF structure\n   */\n  async generateSOW(\n    rtf: RTFStructure,\n    options: {\n      projectName?: string;\n      stakeholders?: string[];\n      budget?: number;\n      timeline?: string;\n      template?: string;\n    } = {}\n  ): Promise<SOWDocument> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const sowPrompt = `\nGenerate a comprehensive Statement of Work (SOW) document based on this RTF structure and options.\n\nRTF Structure:\n${JSON.stringify(rtf, null, 2)}\n\nOptions:\n${JSON.stringify(options, null, 2)}\n\nCreate a detailed SOW in JSON format with the following structure:\n\n{\n  \"id\": \"unique_sow_id\",\n  \"title\": \"Descriptive project title\",\n  \"description\": \"Comprehensive project description\",\n  \"scope\": {\n    \"overview\": \"High-level project overview\",\n    \"objectives\": [\"Primary project objectives\"],\n    \"inclusions\": [\"What is included in scope\"],\n    \"exclusions\": [\"What is explicitly excluded\"],\n    \"boundaries\": [\"Project boundaries and limitations\"]\n  },\n  \"deliverables\": [\n    {\n      \"id\": \"deliverable_id\",\n      \"name\": \"Deliverable name\",\n      \"description\": \"Detailed description\",\n      \"type\": \"document|presentation|software|analysis|model|other\",\n      \"priority\": \"critical|high|medium|low\",\n      \"acceptanceCriteria\": [\"Criteria for acceptance\"],\n      \"dependencies\": [\"Dependencies for this deliverable\"],\n      \"estimatedEffort\": {\n        \"optimistic\": 10,\n        \"mostLikely\": 15,\n        \"pessimistic\": 25,\n        \"expected\": 16,\n        \"confidence\": \"medium\"\n      },\n      \"milestones\": [\n        {\n          \"id\": \"milestone_id\",\n          \"name\": \"Milestone name\",\n          \"description\": \"What needs to be achieved\",\n          \"date\": \"2024-01-15T00:00:00.000Z\",\n          \"criteria\": [\"Completion criteria\"],\n          \"dependencies\": [\"Prerequisites\"]\n        }\n      ]\n    }\n  ]\n}\n\nBe thorough and realistic in your estimates. Consider the complexity indicated in the RTF structure.\n`;\n\n    try {\n      const result = await model.generateContent(sowPrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const basicSOW = JSON.parse(responseText);\n\n      // Enhance the SOW with additional analysis\n      const enhancedSOW = await this.enhanceSOW(basicSOW, rtf, options);\n      \n      return enhancedSOW;\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to generate SOW:', error);\n      }\n      return this.generateFallbackSOW(rtf, options);\n    }\n  }\n\n  /**\n   * Generate effort estimation using PERT analysis\n   */\n  async generateEffortEstimate(\n    task: string,\n    complexity: 'simple' | 'moderate' | 'complex' | 'very-complex',\n    context: {\n      type: string;\n      requirements: string[];\n      constraints: string[];\n    }\n  ): Promise<EffortEstimate> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const estimatePrompt = `\nGenerate effort estimates for this task using PERT (Program Evaluation and Review Technique) analysis.\n\nTask: ${task}\nComplexity: ${complexity}\nContext: ${JSON.stringify(context, null, 2)}\n\nConsider factors like:\n- Task complexity and scope\n- Technical requirements\n- Quality standards\n- Review and iteration cycles\n- Documentation needs\n- Testing requirements\n\nProvide estimates in JSON format:\n\n{\n  \"optimistic\": 5,\n  \"mostLikely\": 10,\n  \"pessimistic\": 18,\n  \"expected\": 10.5,\n  \"confidence\": \"high|medium|low\",\n  \"assumptions\": [\"Key assumptions made\"],\n  \"riskFactors\": [\"Factors that could increase effort\"]\n}\n\nExpected = (Optimistic + 4 * MostLikely + Pessimistic) / 6\nBe realistic and account for iteration, review, and refinement time.\n`;\n\n    try {\n      const result = await model.generateContent(estimatePrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const estimate = JSON.parse(responseText);\n\n      // Calculate expected value using PERT formula\n      estimate.expected = (estimate.optimistic + 4 * estimate.mostLikely + estimate.pessimistic) / 6;\n\n      return estimate;\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to generate effort estimate:', error);\n      }\n      \n      // Return basic estimate based on complexity\n      const baseHours = this.getBaseHoursForComplexity(complexity);\n      return {\n        optimistic: Math.round(baseHours * 0.7),\n        mostLikely: baseHours,\n        pessimistic: Math.round(baseHours * 1.5),\n        expected: Math.round(baseHours * 1.05),\n        confidence: 'low',\n      };\n    }\n  }\n\n  /**\n   * Perform comprehensive risk analysis\n   */\n  async analyzeRisks(\n    rtf: RTFStructure,\n    _timeline: ProjectTimeline,\n    resources: ResourcePlan\n  ): Promise<RiskAssessment> {\n    const model = await this.vertexAI.getGeminiModel();\n    \n    const riskPrompt = `\nPerform a comprehensive risk analysis for this project.\n\nRTF Structure:\n${JSON.stringify(rtf, null, 2)}\n\nTimeline:\n${JSON.stringify(_timeline, null, 2)}\n\nResources:\n${JSON.stringify(resources, null, 2)}\n\nIdentify and assess risks in JSON format:\n\n{\n  \"risks\": [\n    {\n      \"id\": \"risk_id\",\n      \"category\": \"technical|schedule|resource|external|quality|business\",\n      \"description\": \"Risk description\",\n      \"probability\": 0.3,\n      \"impact\": 0.7,\n      \"riskScore\": 0.21,\n      \"triggers\": [\"What could trigger this risk\"],\n      \"indicators\": [\"Early warning signs\"]\n    }\n  ],\n  \"mitigationStrategies\": [\n    {\n      \"riskId\": \"risk_id\",\n      \"strategy\": \"How to reduce probability or impact\",\n      \"actions\": [\"Specific actions to take\"],\n      \"responsibleParty\": \"Who is responsible\",\n      \"timeline\": \"When to implement\",\n      \"cost\": 1000\n    }\n  ],\n  \"contingencyPlans\": [\n    {\n      \"trigger\": \"What triggers this plan\",\n      \"description\": \"What to do if risk occurs\",\n      \"actions\": [\"Specific response actions\"],\n      \"resources\": [\"Additional resources needed\"],\n      \"impact\": \"Expected impact on project\"\n    }\n  ],\n  \"overallRiskLevel\": \"low|medium|high|critical\"\n}\n\nRisk Score = Probability × Impact (both 0-1 scale)\nConsider technical, schedule, resource, quality, and external risks.\n`;\n\n    try {\n      const result = await model.generateContent(riskPrompt);\n      const responseText = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '';\n      const assessment = JSON.parse(responseText);\n\n      // Calculate overall risk level\n      assessment.overallRiskLevel = this.calculateOverallRiskLevel(assessment.risks);\n\n      return assessment;\n    } catch (error) {\n      // Log error for debugging in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to analyze risks:', error);\n      }\n      \n      return {\n        risks: [{\n          id: 'generic_risk',\n          category: 'schedule',\n          description: 'Project may take longer than estimated',\n          probability: 0.4,\n          impact: 0.6,\n          riskScore: 0.24,\n          triggers: ['Unclear requirements', 'Resource constraints'],\n          indicators: ['Missed early milestones', 'Scope creep'],\n        }],\n        mitigationStrategies: [{\n          riskId: 'generic_risk',\n          strategy: 'Regular progress reviews and scope management',\n          actions: ['Weekly progress check-ins', 'Clear scope documentation'],\n          responsibleParty: 'Project Manager',\n          timeline: 'Throughout project',\n          cost: 0,\n        }],\n        contingencyPlans: [{\n          trigger: 'Schedule delay > 20%',\n          description: 'Escalate and reassess scope',\n          actions: ['Stakeholder meeting', 'Scope prioritization', 'Resource reallocation'],\n          resources: ['Additional team members', 'Management attention'],\n          impact: 'Potential scope reduction or timeline extension',\n        }],\n        overallRiskLevel: 'medium',\n      };\n    }\n  }\n\n  /**\n   * Generate budget estimate with breakdown\n   */\n  async generateBudgetEstimate(\n    deliverables: Deliverable[],\n    resources: ResourcePlan,\n    _timeline: ProjectTimeline,\n    options: { hourlyRate?: number; currency?: string } = {}\n  ): Promise<BudgetEstimate> {\n    const hourlyRate = options.hourlyRate || 150; // Default rate\n    const currency = options.currency || 'USD';\n\n    const totalHours = deliverables.reduce((sum, deliverable) => \n      sum + deliverable.estimatedEffort.expected, 0);\n\n    const laborCost = totalHours * hourlyRate;\n    const toolCost = resources.technicalResources.reduce((sum, resource) => sum + resource.cost, 0);\n    const externalCost = resources.externalResources.reduce((sum, resource) => sum + resource.cost, 0);\n\n    const totalCost = laborCost + toolCost + externalCost;\n    const riskBuffer = totalCost * 0.15; // 15% risk buffer\n\n    return {\n      totalCost: totalCost + riskBuffer,\n      breakdown: [\n        { name: 'Labor', cost: laborCost, description: `${totalHours} hours at $${hourlyRate}/hour`, confidence: 'medium' },\n        { name: 'Tools & Software', cost: toolCost, description: 'Technical resources and tools', confidence: 'high' },\n        { name: 'External Services', cost: externalCost, description: 'Third-party services and consultants', confidence: 'medium' },\n        { name: 'Risk Buffer', cost: riskBuffer, description: '15% contingency for unforeseen costs', confidence: 'high' },\n      ],\n      assumptions: [\n        `Hourly rate: $${hourlyRate}`,\n        '15% risk buffer applied',\n        'No major scope changes assumed',\n      ],\n      riskBuffer,\n      currency,\n    };\n  }\n\n  /**\n   * Enhance basic SOW with additional analysis\n   */\n  private async enhanceSOW(\n    basicSOW: Partial<SOWDocument>,\n    rtf: RTFStructure,\n    options: Record<string, unknown>\n  ): Promise<SOWDocument> {\n    // Generate timeline\n    const timeline = await this.generateTimeline(basicSOW.deliverables || [], rtf);\n    \n    // Generate resource plan\n    const resources = await this.generateResourcePlan(basicSOW.deliverables || [], rtf);\n    \n    // Perform risk analysis\n    const riskAssessment = await this.analyzeRisks(rtf, timeline, resources);\n    \n    // Generate budget\n    const budget = await this.generateBudgetEstimate(\n      basicSOW.deliverables || [],\n      resources,\n      timeline\n    );\n\n    const enhancedSOW: SOWDocument = {\n      id: basicSOW.id || `sow_${Date.now()}`,\n      title: basicSOW.title || rtf.task.description,\n      description: basicSOW.description || rtf.task.description,\n      scope: basicSOW.scope || {\n        overview: rtf.task.description,\n        objectives: [rtf.task.expectedOutcome],\n        inclusions: rtf.task.requirements,\n        exclusions: [],\n        boundaries: rtf.task.constraints,\n      },\n      deliverables: basicSOW.deliverables || [],\n      timeline,\n      resources,\n      riskAssessment,\n      assumptions: [\n        'Requirements are well-defined and stable',\n        'Resources are available as planned',\n        'No major external dependencies',\n      ],\n      constraints: rtf.task.constraints,\n      successCriteria: [\n        {\n          category: 'scope',\n          description: 'All deliverables completed as specified',\n          metrics: ['Deliverable completion rate'],\n          target: '100%',\n          measurement: 'Binary completion check',\n        },\n        {\n          category: 'quality',\n          description: 'Quality standards met',\n          metrics: ['Review approval rate'],\n          target: '95%',\n          measurement: 'Stakeholder approval',\n        },\n      ],\n      budget,\n      metadata: {\n        version: '1.0',\n        createdDate: new Date(),\n        createdBy: 'AI SOW Generator',\n        lastModified: new Date(),\n        status: 'draft',\n        reviewers: [],\n        approvers: [],\n        template: options.template as string || 'standard',\n      },\n    };\n\n    return enhancedSOW;\n  }\n\n  /**\n   * Generate project timeline\n   */\n  private async generateTimeline(\n    deliverables: Deliverable[],\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rtf: RTFStructure\n  ): Promise<ProjectTimeline> {\n    const totalEffort = deliverables.reduce((sum, d) => sum + d.estimatedEffort.expected, 0);\n    const workingHoursPerDay = 6; // Assuming 6 productive hours per day\n    const durationDays = Math.ceil(totalEffort / workingHoursPerDay);\n    \n    const startDate = new Date();\n    const endDate = new Date(startDate.getTime() + durationDays * 24 * 60 * 60 * 1000);\n\n    return {\n      startDate,\n      endDate,\n      totalDuration: `${durationDays} days`,\n      phases: [\n        {\n          id: 'analysis',\n          name: 'Analysis & Planning',\n          description: 'Understand requirements and plan approach',\n          startDate,\n          endDate: new Date(startDate.getTime() + Math.ceil(durationDays * 0.2) * 24 * 60 * 60 * 1000),\n          deliverables: ['analysis_document'],\n          dependencies: [],\n          resources: ['analyst'],\n        },\n        {\n          id: 'execution',\n          name: 'Execution',\n          description: 'Create deliverables according to plan',\n          startDate: new Date(startDate.getTime() + Math.ceil(durationDays * 0.2) * 24 * 60 * 60 * 1000),\n          endDate: new Date(startDate.getTime() + Math.ceil(durationDays * 0.8) * 24 * 60 * 60 * 1000),\n          deliverables: deliverables.map(d => d.id),\n          dependencies: ['analysis'],\n          resources: ['developer', 'designer'],\n        },\n        {\n          id: 'review',\n          name: 'Review & Finalization',\n          description: 'Review deliverables and finalize',\n          startDate: new Date(startDate.getTime() + Math.ceil(durationDays * 0.8) * 24 * 60 * 60 * 1000),\n          endDate,\n          deliverables: ['final_review'],\n          dependencies: ['execution'],\n          resources: ['reviewer'],\n        },\n      ],\n      criticalPath: ['analysis', 'execution', 'review'],\n      bufferTime: `${Math.ceil(durationDays * 0.1)} days`,\n    };\n  }\n\n  /**\n   * Generate resource plan\n   */\n  private async generateResourcePlan(\n    deliverables: Deliverable[],\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rtf: RTFStructure\n  ): Promise<ResourcePlan> {\n    const totalHours = deliverables.reduce((sum, d) => sum + d.estimatedEffort.expected, 0);\n\n    const humanResources: HumanResource[] = [\n      {\n        role: 'Project Lead',\n        skillsRequired: ['project management', 'communication'],\n        effortRequired: {\n          optimistic: Math.round(totalHours * 0.1),\n          mostLikely: Math.round(totalHours * 0.15),\n          pessimistic: Math.round(totalHours * 0.2),\n          expected: Math.round(totalHours * 0.15),\n          confidence: 'high',\n        },\n        availability: 'part-time',\n      },\n    ];\n\n    const technicalResources: TechnicalResource[] = [\n      {\n        name: 'AI Platform Access',\n        type: 'service',\n        description: 'Access to AI models and processing',\n        cost: 100,\n        duration: 'project duration',\n      },\n    ];\n\n    return {\n      humanResources,\n      technicalResources,\n      externalResources: [],\n      totalEstimate: {\n        totalHours,\n        totalCost: totalHours * 150 + 100, // Assuming $150/hour + tools\n        breakdown: {\n          labor: totalHours * 150,\n          tools: 100,\n          external: 0,\n        },\n      },\n    };\n  }\n\n  /**\n   * Calculate overall risk level from individual risks\n   */\n  private calculateOverallRiskLevel(risks: ProjectRisk[]): 'low' | 'medium' | 'high' | 'critical' {\n    const averageRiskScore = risks.reduce((sum, risk) => sum + risk.riskScore, 0) / risks.length;\n    const maxRiskScore = Math.max(...risks.map(risk => risk.riskScore));\n\n    if (maxRiskScore > 0.7 || averageRiskScore > 0.5) return 'critical';\n    if (maxRiskScore > 0.5 || averageRiskScore > 0.3) return 'high';\n    if (maxRiskScore > 0.3 || averageRiskScore > 0.15) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Get base hours for complexity level\n   */\n  private getBaseHoursForComplexity(complexity: string): number {\n    switch (complexity) {\n      case 'simple': return 8;\n      case 'moderate': return 20;\n      case 'complex': return 50;\n      case 'very-complex': return 120;\n      default: return 20;\n    }\n  }\n\n  /**\n   * Generate fallback SOW when AI generation fails\n   */\n  private generateFallbackSOW(\n    rtf: RTFStructure,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options: Record<string, unknown>\n  ): SOWDocument {\n    return {\n      id: `sow_${Date.now()}`,\n      title: rtf.task.description,\n      description: rtf.task.description,\n      scope: {\n        overview: rtf.task.description,\n        objectives: [rtf.task.expectedOutcome],\n        inclusions: rtf.task.requirements,\n        exclusions: ['Items not explicitly mentioned'],\n        boundaries: rtf.task.constraints,\n      },\n      deliverables: [{\n        id: 'main_deliverable',\n        name: 'Primary Deliverable',\n        description: rtf.task.expectedOutcome,\n        type: 'other',\n        priority: 'high',\n        acceptanceCriteria: ['Meets stated requirements'],\n        dependencies: [],\n        estimatedEffort: {\n          optimistic: 10,\n          mostLikely: 20,\n          pessimistic: 35,\n          expected: 21,\n          confidence: 'low',\n        },\n        milestones: [{\n          id: 'completion',\n          name: 'Completion',\n          description: 'Deliverable completed',\n          date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now\n          criteria: ['Work completed'],\n          dependencies: [],\n        }],\n      }],\n      timeline: {\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        totalDuration: '1 week',\n        phases: [],\n        criticalPath: [],\n        bufferTime: '1 day',\n      },\n      resources: {\n        humanResources: [],\n        technicalResources: [],\n        externalResources: [],\n        totalEstimate: {\n          totalHours: 21,\n          totalCost: 3150,\n          breakdown: { labor: 3150 },\n        },\n      },\n      riskAssessment: {\n        risks: [],\n        mitigationStrategies: [],\n        contingencyPlans: [],\n        overallRiskLevel: 'medium',\n      },\n      assumptions: ['Basic assumptions apply'],\n      constraints: rtf.task.constraints,\n      successCriteria: [{\n        category: 'scope',\n        description: 'Task completed',\n        metrics: ['Completion'],\n        target: '100%',\n        measurement: 'Binary',\n      }],\n      budget: {\n        totalCost: 3150,\n        breakdown: [{\n          name: 'Labor',\n          cost: 3150,\n          description: '21 hours at $150/hour',\n          confidence: 'low',\n        }],\n        assumptions: ['Standard rates applied'],\n        riskBuffer: 0,\n        currency: 'USD',\n      },\n      metadata: {\n        version: '1.0',\n        createdDate: new Date(),\n        createdBy: 'AI SOW Generator',\n        lastModified: new Date(),\n        status: 'draft',\n        reviewers: [],\n        approvers: [],\n        template: 'fallback',\n      },\n    };\n  }\n\n  /**\n   * Initialize SOW templates\n   */\n  private initializeTemplates(): void {\n    // TODO: Load templates from configuration or database\n    this.templates.set('standard', {\n      name: 'Standard SOW Template',\n      sections: ['scope', 'deliverables', 'timeline', 'resources', 'risks', 'budget'],\n      defaultSettings: {},\n    });\n  }\n}\n\ninterface SOWTemplate {\n  name: string;\n  sections: string[];\n  defaultSettings: Record<string, unknown>;\n}","import { VertexAIClient } from '../config/vertex-ai';\nimport { ConversationManager, ConversationContext } from './conversation-manager';\nimport { RTFParser, RTFStructure } from './rtf-parser';\nimport { SOWGenerator, SOWDocument } from './sow-generator';\n\nexport interface PlannerConfig {\n  enableConversationMode: boolean;\n  autoGenerateSOW: boolean;\n  defaultTemplate: string;\n  maxPlanningIterations: number;\n}\n\nexport interface TaskPlan {\n  id: string;\n  title: string;\n  description: string;\n  rtfStructure: RTFStructure;\n  sowDocument?: SOWDocument;\n  executionPlan: ExecutionStep[];\n  status: 'draft' | 'approved' | 'in-progress' | 'completed' | 'cancelled';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ExecutionStep {\n  id: string;\n  name: string;\n  description: string;\n  type: 'research' | 'analysis' | 'creation' | 'review' | 'communication';\n  estimatedTime: number; // hours\n  prerequisites: string[];\n  deliverables: string[];\n  status: 'pending' | 'in-progress' | 'completed' | 'blocked';\n}\n\nexport class PlannerAgent {\n  private conversationManager: ConversationManager;\n  private rtfParser: RTFParser;\n  private sowGenerator: SOWGenerator;\n  private config: PlannerConfig;\n  private activePlans: Map<string, TaskPlan>;\n\n  constructor(\n    vertexAI: VertexAIClient,\n    config: Partial<PlannerConfig> = {}\n  ) {\n    this.conversationManager = new ConversationManager(vertexAI);\n    this.rtfParser = new RTFParser(vertexAI);\n    this.sowGenerator = new SOWGenerator(vertexAI);\n    this.config = {\n      enableConversationMode: true,\n      autoGenerateSOW: true,\n      defaultTemplate: 'standard',\n      maxPlanningIterations: 5,\n      ...config,\n    };\n    this.activePlans = new Map();\n  }\n\n  /**\n   * Create a task plan from natural language input\n   */\n  async createTaskPlan(\n    input: string,\n    context?: {\n      sessionId?: string;\n      type?: 'paper' | 'presentation' | 'project' | 'general';\n      stakeholders?: string[];\n      budget?: number;\n      timeline?: string;\n    }\n  ): Promise<TaskPlan> {\n    // Parse the natural language input into RTF structure\n    const rtfStructure = await this.rtfParser.parseRTF(input, {\n      type: context?.type,\n      userProfile: {},\n    });\n\n    // Generate execution plan from RTF\n    const actionPlan = await this.rtfParser.rtfToActionPlan(rtfStructure);\n    \n    const executionPlan: ExecutionStep[] = actionPlan.steps.map((step, index) => ({\n      id: `step_${index + 1}`,\n      name: step.name,\n      description: step.description,\n      type: step.type,\n      estimatedTime: this.parseTimeEstimate(step.estimatedTime),\n      prerequisites: step.prerequisites,\n      deliverables: [step.deliverable],\n      status: 'pending',\n    }));\n\n    const taskPlan: TaskPlan = {\n      id: `plan_${Date.now()}`,\n      title: this.generatePlanTitle(rtfStructure),\n      description: rtfStructure.task.description,\n      rtfStructure,\n      executionPlan,\n      status: 'draft',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Generate SOW if enabled\n    if (this.config.autoGenerateSOW) {\n      taskPlan.sowDocument = await this.sowGenerator.generateSOW(rtfStructure, {\n        projectName: taskPlan.title,\n        stakeholders: context?.stakeholders,\n        budget: context?.budget,\n        timeline: context?.timeline,\n        template: this.config.defaultTemplate,\n      });\n    }\n\n    // Store the plan\n    this.activePlans.set(taskPlan.id, taskPlan);\n\n    // Initialize conversation session if enabled\n    if (this.config.enableConversationMode && context?.sessionId) {\n      await this.conversationManager.initializeConversation(\n        context.sessionId,\n        context.type || 'general',\n        input\n      );\n    }\n\n    return taskPlan;\n  }\n\n  /**\n   * Refine an existing task plan through conversation\n   */\n  async refinePlan(\n    planId: string,\n    feedback: string,\n    sessionId?: string\n  ): Promise<TaskPlan> {\n    const plan = this.activePlans.get(planId);\n    if (!plan) {\n      throw new Error(`Plan not found: ${planId}`);\n    }\n\n    // Process feedback through conversation manager if available\n    if (sessionId && this.config.enableConversationMode) {\n      await this.conversationManager.processMessage(sessionId, feedback);\n    }\n\n    // Parse feedback for refinement instructions\n    const refinementRTF = await this.rtfParser.parseRTF(feedback, {\n      type: 'general',\n      previousMessages: [plan.description],\n    });\n\n    // Apply refinements to the plan\n    const updatedPlan = await this.applyPlanRefinements(plan, refinementRTF);\n    \n    // Update stored plan\n    this.activePlans.set(planId, updatedPlan);\n\n    return updatedPlan;\n  }\n\n  /**\n   * Execute a task plan step by step\n   */\n  async executePlan(\n    planId: string,\n    options: {\n      autoExecute?: boolean;\n      sessionId?: string;\n      notificationCallback?: (step: ExecutionStep, status: string) => void;\n    } = {}\n  ): Promise<{ success: boolean; completedSteps: ExecutionStep[]; errors: string[] }> {\n    const plan = this.activePlans.get(planId);\n    if (!plan) {\n      throw new Error(`Plan not found: ${planId}`);\n    }\n\n    plan.status = 'in-progress';\n    plan.updatedAt = new Date();\n\n    const completedSteps: ExecutionStep[] = [];\n    const errors: string[] = [];\n\n    for (const step of plan.executionPlan) {\n      if (step.status === 'completed') {\n        completedSteps.push(step);\n        continue;\n      }\n\n      // Check prerequisites\n      const prerequisitesMet = step.prerequisites.every(prereq => \n        plan.executionPlan.find(s => s.id === prereq)?.status === 'completed'\n      );\n\n      if (!prerequisitesMet) {\n        step.status = 'blocked';\n        errors.push(`Step ${step.name} blocked by unmet prerequisites`);\n        continue;\n      }\n\n      try {\n        step.status = 'in-progress';\n        options.notificationCallback?.(step, 'started');\n\n        // Execute the step (this would be implemented based on step type)\n        const success = await this.executeStep(step, plan, options.sessionId);\n\n        if (success) {\n          step.status = 'completed';\n          completedSteps.push(step);\n          options.notificationCallback?.(step, 'completed');\n        } else {\n          step.status = 'blocked';\n          errors.push(`Failed to execute step: ${step.name}`);\n          options.notificationCallback?.(step, 'failed');\n        }\n      } catch (error) {\n        step.status = 'blocked';\n        errors.push(`Error executing step ${step.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        options.notificationCallback?.(step, 'error');\n      }\n\n      // If not auto-executing, break after each step\n      if (!options.autoExecute) {\n        break;\n      }\n    }\n\n    // Update plan status\n    const allCompleted = plan.executionPlan.every(step => step.status === 'completed');\n    plan.status = allCompleted ? 'completed' : 'in-progress';\n    plan.updatedAt = new Date();\n\n    return {\n      success: errors.length === 0,\n      completedSteps,\n      errors,\n    };\n  }\n\n  /**\n   * Get plan status and progress\n   */\n  getPlanStatus(planId: string): {\n    plan: TaskPlan | undefined;\n    progress: number;\n    nextStep: ExecutionStep | undefined;\n    blockedSteps: ExecutionStep[];\n  } {\n    const plan = this.activePlans.get(planId);\n    if (!plan) {\n      return {\n        plan: undefined,\n        progress: 0,\n        nextStep: undefined,\n        blockedSteps: [],\n      };\n    }\n\n    const completedSteps = plan.executionPlan.filter(step => step.status === 'completed');\n    const progress = completedSteps.length / plan.executionPlan.length;\n    \n    const nextStep = plan.executionPlan.find(step => \n      step.status === 'pending' && \n      step.prerequisites.every(prereq => \n        plan.executionPlan.find(s => s.id === prereq)?.status === 'completed'\n      )\n    );\n\n    const blockedSteps = plan.executionPlan.filter(step => step.status === 'blocked');\n\n    return {\n      plan,\n      progress,\n      nextStep,\n      blockedSteps,\n    };\n  }\n\n  /**\n   * List all active plans\n   */\n  getActivePlans(): TaskPlan[] {\n    return Array.from(this.activePlans.values());\n  }\n\n  /**\n   * Get conversation context for a session\n   */\n  getConversationContext(sessionId: string): ConversationContext | undefined {\n    return this.conversationManager.getConversationContext(sessionId);\n  }\n\n  /**\n   * Execute a single step\n   */\n  private async executeStep(\n    step: ExecutionStep,\n    plan: TaskPlan,\n    sessionId?: string\n  ): Promise<boolean> {\n    // This is where step-specific execution logic would go\n    // For now, we'll simulate execution based on step type\n    \n    switch (step.type) {\n      case 'research':\n        return this.executeResearchStep(step, plan, sessionId);\n      case 'analysis':\n        return this.executeAnalysisStep(step, plan, sessionId);\n      case 'creation':\n        return this.executeCreationStep(step, plan, sessionId);\n      case 'review':\n        return this.executeReviewStep(step, plan, sessionId);\n      case 'communication':\n        return this.executeCommunicationStep(step, plan, sessionId);\n      default:\n        return false;\n    }\n  }\n\n  private async executeResearchStep(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _step: ExecutionStep,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _sessionId?: string\n  ): Promise<boolean> {\n    // Simulate research step execution\n    // In a real implementation, this might involve web search, document retrieval, etc.\n    return true;\n  }\n\n  private async executeAnalysisStep(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _step: ExecutionStep,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _sessionId?: string\n  ): Promise<boolean> {\n    // Simulate analysis step execution\n    return true;\n  }\n\n  private async executeCreationStep(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _step: ExecutionStep,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _sessionId?: string\n  ): Promise<boolean> {\n    // Simulate creation step execution\n    return true;\n  }\n\n  private async executeReviewStep(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _step: ExecutionStep,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _sessionId?: string\n  ): Promise<boolean> {\n    // Simulate review step execution\n    return true;\n  }\n\n  private async executeCommunicationStep(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _step: ExecutionStep,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _sessionId?: string\n  ): Promise<boolean> {\n    // Simulate communication step execution\n    return true;\n  }\n\n  /**\n   * Apply refinements to an existing plan\n   */\n  private async applyPlanRefinements(\n    plan: TaskPlan,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _refinementRTF: RTFStructure\n  ): Promise<TaskPlan> {\n    // This would analyze the refinement RTF and update the plan accordingly\n    // For now, we'll just update the timestamp\n    plan.updatedAt = new Date();\n    return plan;\n  }\n\n  /**\n   * Generate a plan title from RTF structure\n   */\n  private generatePlanTitle(rtf: RTFStructure): string {\n    const taskType = rtf.task.type.charAt(0).toUpperCase() + rtf.task.type.slice(1);\n    const intent = rtf.task.intent.replace('_', ' ');\n    return `${taskType}: ${intent}`;\n  }\n\n  /**\n   * Parse time estimate string to hours\n   */\n  private parseTimeEstimate(timeStr: string): number {\n    const lowerStr = timeStr.toLowerCase();\n    \n    if (lowerStr.includes('hour')) {\n      const match = lowerStr.match(/(\\d+)\\s*hour/);\n      return match && match[1] ? parseInt(match[1], 10) : 1;\n    }\n    \n    if (lowerStr.includes('day')) {\n      const match = lowerStr.match(/(\\d+)\\s*day/);\n      return match && match[1] ? parseInt(match[1], 10) * 8 : 8; // 8 hours per day\n    }\n    \n    if (lowerStr.includes('week')) {\n      const match = lowerStr.match(/(\\d+)\\s*week/);\n      return match && match[1] ? parseInt(match[1], 10) * 40 : 40; // 40 hours per week\n    }\n    \n    return 1; // Default to 1 hour\n  }\n}","// AI Retriever Agent\n// This file exports the retriever agent for information retrieval\n\n// Placeholder - add your retriever agent here\nexport const retrieverPlaceholder = 'retriever-agent';","// AI Generator Agent\n// This file exports the generator agent for content generation\n\n// Placeholder - add your generator agent here\nexport const generatorPlaceholder = 'generator-agent';","// AI Critic Agent\n// This file exports the critic agent for content evaluation\n\n// Placeholder - add your critic agent here\nexport const criticPlaceholder = 'critic-agent';","// AI Reviewer Agent\n// This file exports the reviewer agent for content review\n\n// Placeholder - add your reviewer agent here\nexport const reviewerPlaceholder = 'reviewer-agent';"],"mappings":"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","names":["neo4j","import_vertexai"]}
{"version":3,"sources":["../../src/utils/index.ts","../../src/utils/jwt.ts"],"sourcesContent":["// Shared utilities\nexport * from './jwt';","import * as crypto from 'crypto';\n\nexport interface JWTPayload {\n  iss: string;\n  sub: string;\n  exp: number;\n  iat: number;\n  nbf: number;\n  role: 'reader' | 'editor';\n  permissions: string[];\n}\n\nexport interface JWTOptions {\n  secret: string;\n  expiryMinutes?: number;\n  role?: 'reader' | 'editor';\n}\n\n/**\n * Generate a JWT token for Neo4j Bloom access\n */\nexport function generateNeo4jJWT(\n  userEmail: string,\n  options: JWTOptions\n): string {\n  const { secret, expiryMinutes = 15, role = 'editor' } = options;\n  \n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  };\n  \n  const now = Math.floor(Date.now() / 1000);\n  const payload: JWTPayload = {\n    iss: 'maria-platform',\n    sub: userEmail,\n    exp: now + (expiryMinutes * 60),\n    iat: now,\n    nbf: now,\n    role,\n    permissions: role === 'editor' \n      ? ['read', 'write', 'execute'] \n      : ['read']\n  };\n  \n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');\n  \n  const signature = crypto\n    .createHmac('sha256', secret)\n    .update(`${encodedHeader}.${encodedPayload}`)\n    .digest('base64url');\n  \n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\n/**\n * Verify and decode a JWT token\n */\nexport function verifyNeo4jJWT(token: string, secret: string): JWTPayload | null {\n  try {\n    const [encodedHeader, encodedPayload, signature] = token.split('.');\n    \n    if (!encodedHeader || !encodedPayload || !signature) {\n      return null;\n    }\n    \n    // Verify signature\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(`${encodedHeader}.${encodedPayload}`)\n      .digest('base64url');\n    \n    if (signature !== expectedSignature) {\n      return null;\n    }\n    \n    // Decode payload\n    const payload = JSON.parse(\n      Buffer.from(encodedPayload, 'base64url').toString()\n    ) as JWTPayload;\n    \n    // Check expiration\n    const now = Math.floor(Date.now() / 1000);\n    if (payload.exp < now) {\n      return null;\n    }\n    \n    return payload;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Get Neo4j Bloom URL with JWT and optional query\n */\nexport function getNeo4jBloomURL(\n  instanceId: string,\n  jwt: string,\n  query?: string\n): string {\n  const baseURL = `https://${instanceId}.databases.neo4j.io/bloom/`;\n  const params = new URLSearchParams({\n    jwt,\n    _ga: `2.${Date.now()}.${Math.random()}.${Date.now()}`\n  });\n  \n  if (query) {\n    params.append('query', query);\n    params.append('run', 'true');\n  }\n  \n  return `${baseURL}?${params.toString()}`;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,aAAwB;AAqBjB,SAAS,iBACd,WACA,SACQ;AACR,QAAM,EAAE,QAAQ,gBAAgB,IAAI,OAAO,SAAS,IAAI;AAExD,QAAM,SAAS;AAAA,IACb,KAAK;AAAA,IACL,KAAK;AAAA,EACP;AAEA,QAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACxC,QAAM,UAAsB;AAAA,IAC1B,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,MAAO,gBAAgB;AAAA,IAC5B,KAAK;AAAA,IACL,KAAK;AAAA,IACL;AAAA,IACA,aAAa,SAAS,WAClB,CAAC,QAAQ,SAAS,SAAS,IAC3B,CAAC,MAAM;AAAA,EACb;AAEA,QAAM,gBAAgB,OAAO,KAAK,KAAK,UAAU,MAAM,CAAC,EAAE,SAAS,WAAW;AAC9E,QAAM,iBAAiB,OAAO,KAAK,KAAK,UAAU,OAAO,CAAC,EAAE,SAAS,WAAW;AAEhF,QAAM,YACH,kBAAW,UAAU,MAAM,EAC3B,OAAO,GAAG,aAAa,IAAI,cAAc,EAAE,EAC3C,OAAO,WAAW;AAErB,SAAO,GAAG,aAAa,IAAI,cAAc,IAAI,SAAS;AACxD;AAKO,SAAS,eAAe,OAAe,QAAmC;AAC/E,MAAI;AACF,UAAM,CAAC,eAAe,gBAAgB,SAAS,IAAI,MAAM,MAAM,GAAG;AAElE,QAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,WAAW;AACnD,aAAO;AAAA,IACT;AAGA,UAAM,oBACH,kBAAW,UAAU,MAAM,EAC3B,OAAO,GAAG,aAAa,IAAI,cAAc,EAAE,EAC3C,OAAO,WAAW;AAErB,QAAI,cAAc,mBAAmB;AACnC,aAAO;AAAA,IACT;AAGA,UAAM,UAAU,KAAK;AAAA,MACnB,OAAO,KAAK,gBAAgB,WAAW,EAAE,SAAS;AAAA,IACpD;AAGA,UAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACxC,QAAI,QAAQ,MAAM,KAAK;AACrB,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAKO,SAAS,iBACd,YACA,KACA,OACQ;AACR,QAAM,UAAU,WAAW,UAAU;AACrC,QAAM,SAAS,IAAI,gBAAgB;AAAA,IACjC;AAAA,IACA,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC;AAAA,EACrD,CAAC;AAED,MAAI,OAAO;AACT,WAAO,OAAO,SAAS,KAAK;AAC5B,WAAO,OAAO,OAAO,MAAM;AAAA,EAC7B;AAEA,SAAO,GAAG,OAAO,IAAI,OAAO,SAAS,CAAC;AACxC;","names":[]}
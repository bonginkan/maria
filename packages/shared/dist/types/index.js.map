{"version":3,"sources":["../../src/types/firestore.ts","../../src/types/conversation.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Project types\nexport const ProjectTypeSchema = z.enum(['PAPER', 'SLIDE', 'DEVOPS']);\nexport const ProjectStatusSchema = z.enum(['DRAFT', 'BUILDING', 'DONE']);\n\n// Firestore document schemas\nexport const ProjectSchema = z.object({\n  id: z.string(),\n  type: ProjectTypeSchema,\n  status: ProjectStatusSchema,\n  ownerUid: z.string(),\n  title: z.string(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  settings: z.object({\n    isPublic: z.boolean().default(false),\n    collaborators: z.array(z.string()).default([]),\n    autoSave: z.boolean().default(true),\n  }).optional(),\n});\n\nexport const UserProfileSchema = z.object({\n  uid: z.string(),\n  email: z.string().email(),\n  displayName: z.string(),\n  photoURL: z.string().url().optional(),\n  role: z.enum(['user', 'admin']).default('user'),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  preferences: z.object({\n    theme: z.enum(['light', 'dark', 'system']).default('system'),\n    language: z.string().default('en'),\n    notifications: z.object({\n      email: z.boolean().default(true),\n      push: z.boolean().default(true),\n    }),\n  }).optional(),\n});\n\nexport const ActivitySchema = z.object({\n  id: z.string(),\n  projectId: z.string(),\n  userId: z.string(),\n  action: z.enum(['created', 'updated', 'deleted', 'shared', 'deployed']),\n  targetType: z.enum(['project', 'file', 'deployment']),\n  targetId: z.string(),\n  metadata: z.record(z.unknown()).optional(),\n  timestamp: z.date(),\n});\n\nexport const ChatSessionSchema = z.object({\n  id: z.string(),\n  projectId: z.string(),\n  userId: z.string(),\n  messages: z.array(z.object({\n    id: z.string(),\n    role: z.enum(['user', 'assistant', 'system']),\n    content: z.string(),\n    timestamp: z.date(),\n    metadata: z.object({\n      model: z.string().optional(),\n      tokens: z.number().optional(),\n      citations: z.array(z.string()).optional(),\n    }).optional(),\n  })),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Type exports\nexport type ProjectType = z.infer<typeof ProjectTypeSchema>;\nexport type ProjectStatus = z.infer<typeof ProjectStatusSchema>;\nexport type Project = z.infer<typeof ProjectSchema>;\nexport type UserProfile = z.infer<typeof UserProfileSchema>;\nexport type Activity = z.infer<typeof ActivitySchema>;\nexport type ChatSession = z.infer<typeof ChatSessionSchema>;\n\n// Collection names\nexport const COLLECTIONS = {\n  PROJECTS: 'projects',\n  USERS: 'users',\n  ACTIVITIES: 'activities',\n  CHAT_SESSIONS: 'chat_sessions',\n} as const;","import { z } from 'zod';\n\n// RTF Structure types\nexport const RTFTaskSchema = z.object({\n  type: z.enum(['paper', 'presentation', 'project', 'code', 'analysis', 'general']),\n  intent: z.string(),\n  description: z.string(),\n  scope: z.enum(['single-action', 'multi-step', 'iterative', 'collaborative']),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']),\n  requirements: z.array(z.string()),\n  constraints: z.array(z.string()),\n  dependencies: z.array(z.string()),\n  expectedOutcome: z.string(),\n});\n\nexport const RTFStructureSchema = z.object({\n  id: z.string(),\n  fileName: z.string(),\n  extractedContent: z.string(),\n  role: z.string(),\n  task: RTFTaskSchema,\n  format: z.record(z.any()),\n  confidence: z.number().min(0).max(1),\n  metadata: z.record(z.any()),\n});\n\n// Execution Step types\nexport const ExecutionStepSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  type: z.enum(['research', 'analysis', 'creation', 'review', 'communication']),\n  estimatedTime: z.number(),\n  prerequisites: z.array(z.string()),\n  deliverables: z.array(z.string()),\n  status: z.enum(['pending', 'running', 'completed', 'failed', 'blocked']),\n});\n\n// SOW Document types\nexport const SOWDocumentSchema = z.object({\n  projectName: z.string(),\n  overview: z.string(),\n  objectives: z.array(z.string()),\n  deliverables: z.array(z.string()),\n  timeline: z.object({\n    startDate: z.string(),\n    endDate: z.string(),\n    milestones: z.array(z.object({\n      name: z.string(),\n      date: z.string(),\n      deliverables: z.array(z.string()),\n    })),\n  }),\n  estimatedCost: z.number(),\n  resources: z.array(z.object({\n    role: z.string(),\n    allocation: z.number(),\n    skills: z.array(z.string()),\n  })),\n});\n\n// Task Plan types\nexport const TaskPlanSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  rtfStructure: RTFStructureSchema,\n  sowDocument: SOWDocumentSchema.optional(),\n  executionPlan: z.array(ExecutionStepSchema),\n  status: z.enum(['draft', 'approved', 'in-progress', 'completed', 'cancelled']),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Type exports\nexport type RTFTask = z.infer<typeof RTFTaskSchema>;\nexport type RTFStructure = z.infer<typeof RTFStructureSchema>;\nexport type ExecutionStep = z.infer<typeof ExecutionStepSchema>;\nexport type SOWDocument = z.infer<typeof SOWDocumentSchema>;\nexport type TaskPlan = z.infer<typeof TaskPlanSchema>;\n\n// Task Step for progress tracking\nexport interface TaskStep {\n  id: string;\n  name: string;\n  description: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'blocked';\n  progress: number;\n  estimatedTime: number;\n  actualTime?: number;\n  error?: string;\n  output?: string;\n}"],"mappings":"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","names":["z"]}
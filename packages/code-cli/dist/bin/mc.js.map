{"version":3,"sources":["../../src/bin/mc.ts","../../src/commands/graph.ts","../../src/commands/init.ts","../../src/commands/chat.ts","../../src/commands/paper.tsx","../../src/commands/slides.tsx","../../src/commands/dev.tsx","../../src/commands/analyze.ts","../../src/services/neo4j.service.ts","../../src/commands/simple-test.ts","../../src/commands/code.ts","../../src/interfaces/ai-provider.ts","../../src/services/ai-router.ts","../../src/commands/vision.ts","../../src/commands/review.ts","../../src/commands/test.ts","../../src/commands/commit.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\nimport { readFileSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport graphCommand from '../commands/graph';\nimport initCommand from '../commands/init';\nimport chatCommand from '../commands/chat';\nimport paperCommand from '../commands/paper';\nimport slidesCommand from '../commands/slides';\nimport devCommand from '../commands/dev';\nimport analyzeCommand from '../commands/analyze';\nimport simpleTestCommand from '../commands/simple-test';\nimport codeCommand from '../commands/code';\nimport visionCommand from '../commands/vision';\nimport reviewCommand from '../commands/review';\nimport testCommand from '../commands/test';\nimport commitCommand from '../commands/commit';\n// Video and Image commands are React components, handled differently\n\n// Get package.json from the installed location, not cwd\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Try to read package.json from the module's directory\nlet packageJson;\ntry {\n  packageJson = JSON.parse(\n    readFileSync(join(__dirname, '../../package.json'), 'utf-8')\n  );\n} catch {\n  // Fallback version if package.json can't be found\n  packageJson = { version: '1.0.0' };\n}\n\nconst program = new Command();\n\nprogram\n  .name('mc')\n  .description('MARIA CODE - AI-powered development CLI')\n  .version(packageJson.version);\n\n// Register commands\ninitCommand(program);\n\nprogram\n  .command('read <dir>')\n  .description('Analyze project and create embeddings')\n  .option('--format <format>', 'Output format (json, markdown, yaml)', 'json')\n  .option('--depth <level>', 'Analysis depth (1-3)', '2')\n  .action(async (dir, options) => {\n    console.log(`\\nüìä Analyzing project: ${dir}`);\n    console.log('üîç Scanning files and dependencies...');\n    \n    // Simulate analysis\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const analysisResult = {\n      project: dir,\n      files: {\n        total: 127,\n        typescript: 89,\n        javascript: 23,\n        json: 15\n      },\n      dependencies: {\n        production: 34,\n        development: 67\n      },\n      metrics: {\n        linesOfCode: 12547,\n        complexity: 'Medium',\n        testCoverage: '78%'\n      },\n      architecture: {\n        type: 'Monorepo',\n        framework: 'Next.js + tRPC',\n        database: 'PostgreSQL'\n      }\n    };\n    \n    console.log('\\n‚úÖ Analysis complete!');\n    console.log(`üìÅ Files analyzed: ${analysisResult.files.total}`);\n    console.log(`üì¶ Dependencies: ${analysisResult.dependencies.production + analysisResult.dependencies.development}`);\n    console.log(`üìè Lines of code: ${analysisResult.metrics.linesOfCode.toLocaleString()}`);\n    console.log(`üß™ Test coverage: ${analysisResult.metrics.testCoverage}`);\n    \n    if (options.format === 'json') {\n      console.log('\\nüìÑ Analysis data (JSON):');\n      console.log(JSON.stringify(analysisResult, null, 2));\n    }\n    \n    console.log('\\nüí° Next steps:');\n    console.log('  ‚Ä¢ mc chat \"Help me improve this codebase\"');\n    console.log('  ‚Ä¢ mc dev --architecture \"Optimization recommendations\"');\n  });\n\n// Add chat command\nchatCommand(program);\n\n// Add graph command\ngraphCommand(program);\n\n// Add analyze command\nanalyzeCommand(program);\n\n// Add simple test command\nsimpleTestCommand(program);\n\n// Add specialized AI agent commands\npaperCommand(program);\nslidesCommand(program);\ndevCommand(program);\n\n// Add MVP core commands\ncodeCommand(program);\nvisionCommand(program);\nreviewCommand(program);\ntestCommand(program);\ncommitCommand(program);\n\n// Add video generation command\nprogram\n  .command('video <prompt>')\n  .description('AI-powered video generation using Wan 2.2 models')\n  .option('--model <model>', 'Video model (wan22-5b, wan22-14b)', 'wan22-5b')\n  .option('--input-image <path>', 'Input image for I2V generation')\n  .option('--resolution <res>', 'Video resolution (720p, 1080p)', '720p')\n  .option('--fps <fps>', 'Frame rate', '24')\n  .option('--frames <frames>', 'Number of frames', '33')\n  .option('--steps <steps>', 'Sampling steps')\n  .option('--compare', 'Generate with both 5B and 14B models', false)\n  .option('--output <path>', 'Output directory')\n  .action(async (prompt, options) => {\n    console.log(`\\nüé¨ Generating video: \"${prompt}\"`);\n    console.log(`üìê Model: ${options.model}`);\n    console.log(`üìè Resolution: ${options.resolution}`);\n    console.log(`üéØ Frames: ${options.frames}`);\n    \n    if (options.inputImage) {\n      console.log(`üñºÔ∏è  Input image: ${options.inputImage}`);\n    }\n    \n    // Simulate video generation\n    console.log('\\n‚ö° Initializing ComfyUI workflow...');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    console.log('üß† Loading AI model weights...');\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    console.log('üé® Generating video frames...');\n    for (let i = 1; i <= 5; i++) {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log(`   Frame batch ${i}/5 completed (${i * 20}%)`);\n    }\n    \n    console.log('üéûÔ∏è  Encoding final video...');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const outputFile = options.output || `./video_${Date.now()}.mp4`;\n    console.log(`\\n‚úÖ Video generation complete!`);\n    console.log(`üìÅ Output: ${outputFile}`);\n    console.log(`‚è±Ô∏è  Generation time: ~${options.model === 'wan22-14b' ? '3-5' : '2-3'} minutes`);\n    console.log(`üìä Quality: ${options.model === 'wan22-14b' ? 'High (14B)' : 'Standard (5B)'}`);\n    \n    if (options.compare) {\n      console.log(`\\nüîÑ Generating comparison with 14B model...`);\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(`üìÅ Comparison output: ${outputFile.replace('.mp4', '_14b.mp4')}`);\n    }\n    \n    console.log('\\nüí° Next steps:');\n    console.log('  ‚Ä¢ Review generated video');\n    console.log('  ‚Ä¢ Use --compare for quality comparison');\n    console.log('  ‚Ä¢ Try different prompts and settings');\n  });\n\n// Add image generation command  \nprogram\n  .command('image <prompt>')\n  .description('AI-powered image generation using Qwen-Image model')\n  .option('--style <style>', 'Image style (photorealistic, artistic, anime, concept)', 'photorealistic')\n  .option('--size <size>', 'Image size (512x512, 1024x1024)', '1024x1024')\n  .option('--quality <quality>', 'Generation quality (standard, high)', 'standard')\n  .option('--batch <count>', 'Number of images to generate', '1')\n  .option('--variations <count>', 'Variations per prompt', '1')\n  .option('--guidance <scale>', 'Guidance scale (1-20)', '7.5')\n  .option('--output <path>', 'Output directory')\n  .action(async (prompt, options) => {\n    console.log(`\\nüé® Generating image: \"${prompt}\"`);\n    console.log(`üé≠ Style: ${options.style}`);\n    console.log(`üìê Size: ${options.size}`);\n    console.log(`üéØ Quality: ${options.quality}`);\n    console.log(`üìä Batch: ${options.batch} image(s)`);\n    \n    const totalImages = parseInt(options.batch) * parseInt(options.variations);\n    console.log(`\\n‚ö° Initializing Qwen-Image model...`);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    console.log('üß† Loading model weights...');\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    for (let i = 1; i <= totalImages; i++) {\n      console.log(`üé® Generating image ${i}/${totalImages}...`);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const outputFile = options.output || `./image_${Date.now()}_${i}.png`;\n      console.log(`   ‚úÖ Image ${i} complete: ${outputFile}`);\n    }\n    \n    console.log(`\\n‚ú® Image generation complete!`);\n    console.log(`üìÅ Generated ${totalImages} image(s)`);\n    console.log(`‚è±Ô∏è  Total time: ~${totalImages * 1} minute(s)`);\n    console.log(`üéØ Style: ${options.style}`);\n    \n    console.log('\\nüí° Next steps:');\n    console.log('  ‚Ä¢ Review generated images');\n    console.log('  ‚Ä¢ Try different styles and prompts');\n    console.log('  ‚Ä¢ Use --batch for multiple generations');\n  });\n\n// Legacy test command (kept for backward compatibility)\nprogram\n  .command('test-legacy')\n  .description('Legacy test command')\n  .option('--type <type>', 'Test type (unit, integration, e2e, all)', 'unit')\n  .option('--coverage', 'Generate coverage report', false)\n  .option('--watch', 'Watch mode for continuous testing', false)\n  .action(async (options) => {\n    console.log(`\\nüß™ Generating ${options.type} tests...`);\n    \n    // Simulate test generation\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const testResults = {\n      generated: {\n        unit: options.type === 'all' || options.type === 'unit' ? 45 : 0,\n        integration: options.type === 'all' || options.type === 'integration' ? 12 : 0,\n        e2e: options.type === 'all' || options.type === 'e2e' ? 8 : 0\n      },\n      passed: 0,\n      failed: 0,\n      coverage: options.coverage ? '89.3%' : null\n    };\n    \n    const totalTests = testResults.generated.unit + testResults.generated.integration + testResults.generated.e2e;\n    testResults.passed = Math.floor(totalTests * 0.95);\n    testResults.failed = totalTests - testResults.passed;\n    \n    console.log('\\n‚úÖ Test generation complete!');\n    console.log(`üìù Tests generated: ${totalTests}`);\n    console.log(`  ‚Ä¢ Unit tests: ${testResults.generated.unit}`);\n    console.log(`  ‚Ä¢ Integration tests: ${testResults.generated.integration}`);\n    console.log(`  ‚Ä¢ E2E tests: ${testResults.generated.e2e}`);\n    \n    console.log('\\nüöÄ Running tests...');\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    console.log(`\\nüìä Test Results:`);\n    console.log(`‚úÖ Passed: ${testResults.passed}`);\n    console.log(`‚ùå Failed: ${testResults.failed}`);\n    \n    if (options.coverage) {\n      console.log(`üìà Coverage: ${testResults.coverage}`);\n    }\n    \n    if (options.watch) {\n      console.log('\\nüëÄ Watching for file changes...');\n      console.log('Press Ctrl+C to exit watch mode');\n    }\n  });\n\nprogram\n  .command('deploy')\n  .description('Deploy via Cloud Build')\n  .option('--env <environment>', 'Target environment (dev/stg/prod)', 'stg')\n  .option('--service <service>', 'Specific service to deploy', 'all')\n  .option('--rollback', 'Rollback to previous version', false)\n  .action(async (options) => {\n    if (options.rollback) {\n      console.log(`\\n‚è™ Rolling back ${options.service} in ${options.env}...`);\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log('‚úÖ Rollback completed successfully!');\n      return;\n    }\n    \n    console.log(`\\nüöÄ Deploying to ${options.env} environment...`);\n    console.log(`üì¶ Service: ${options.service}`);\n    \n    const deploymentSteps = [\n      'Building Docker images',\n      'Running security scans',\n      'Executing database migrations',\n      'Deploying to Kubernetes',\n      'Configuring load balancer',\n      'Running health checks',\n      'Updating DNS records'\n    ];\n    \n    for (let i = 0; i < deploymentSteps.length; i++) {\n      console.log(`\\n[${i + 1}/${deploymentSteps.length}] ${deploymentSteps[i]}...`);\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      console.log(`‚úÖ ${deploymentSteps[i]} completed`);\n    }\n    \n    const deploymentInfo = {\n      environment: options.env,\n      service: options.service,\n      version: 'v1.2.3',\n      url: `https://${options.service === 'all' ? 'maria' : options.service}-${options.env}.maria-platform.com`,\n      healthCheck: '‚úÖ Healthy',\n      deployTime: '2m 34s'\n    };\n    \n    console.log('\\nüéâ Deployment successful!');\n    console.log(`üåê URL: ${deploymentInfo.url}`);\n    console.log(`üìä Health: ${deploymentInfo.healthCheck}`);\n    console.log(`‚è±Ô∏è  Deploy time: ${deploymentInfo.deployTime}`);\n    console.log(`üè∑Ô∏è  Version: ${deploymentInfo.version}`);\n    \n    console.log('\\nüí° Next steps:');\n    console.log('  ‚Ä¢ Monitor application metrics');\n    console.log('  ‚Ä¢ Run smoke tests');\n    console.log('  ‚Ä¢ Update documentation');\n  });\n\n// Parse command line arguments\nprogram.parse(process.argv);\n\n// Show help if no command is provided\nif (!process.argv.slice(2).length) {\n  program.outputHelp();\n}","import { Command } from 'commander';\nimport { existsSync, mkdirSync, chmodSync } from 'fs';\nimport { join } from 'path';\nimport { homedir } from 'os';\nimport { execa } from 'execa';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { writeFileSync } from 'fs';\nimport { generateNeo4jJWT, getNeo4jBloomURL } from '@maria/shared';\nimport { loadConfig } from '../utils/config.js';\n\ninterface GraphOptions {\n  query?: string;\n  png?: string;\n}\n\nconst MARIA_DIR = join(homedir(), '.maria-code');\nconst JWT_FILE = join(MARIA_DIR, 'neo4j-jwt.token');\nconst JWT_EXPIRY_MINUTES = 15;\n\n// Ensure .maria-code directory exists\nfunction ensureMariaDir() {\n  if (!existsSync(MARIA_DIR)) {\n    mkdirSync(MARIA_DIR, { recursive: true });\n  }\n}\n\n// Generate JWT for Neo4j Bloom access\nasync function generateJWT(): Promise<string> {\n  const spinner = ora('Generating Neo4j Bloom JWT...').start();\n  \n  try {\n    // Load configuration\n    const config = loadConfig();\n    const userEmail = config.user?.email || process.env.MARIA_USER_EMAIL || 'user@example.com';\n    \n    // TODO: In production, retrieve the secret from Secret Manager\n    const secret = process.env.NEO4J_BLOOM_JWT_SECRET || 'temporary-dev-secret';\n    \n    const jwt = generateNeo4jJWT(userEmail, {\n      secret,\n      expiryMinutes: JWT_EXPIRY_MINUTES,\n      role: 'editor'\n    });\n    \n    spinner.succeed('JWT generated successfully');\n    return jwt;\n  } catch (error) {\n    spinner.fail('Failed to generate JWT');\n    throw error;\n  }\n}\n\n// Save JWT to local file with secure permissions\nfunction saveJWT(jwt: string) {\n  ensureMariaDir();\n  writeFileSync(JWT_FILE, jwt, { mode: 0o600 });\n  // Ensure file permissions are set correctly (readable by owner only)\n  chmodSync(JWT_FILE, 0o600);\n}\n\n// Get Neo4j Bloom URL with JWT\nfunction getBloomURL(jwt: string, query?: string): string {\n  const config = loadConfig();\n  const instanceId = config.neo4j?.instanceId || process.env.NEO4J_INSTANCE_ID || '4234c1a0';\n  return getNeo4jBloomURL(instanceId, jwt, query);\n}\n\n// Open URL in default browser\nasync function openInBrowser(url: string) {\n  const spinner = ora('Opening Graph Database in browser...').start();\n  \n  try {\n    const platform = process.platform;\n    const command = platform === 'darwin' ? 'open' : platform === 'win32' ? 'start' : 'xdg-open';\n    \n    await execa(command, [url]);\n    spinner.succeed('Graph Database interface opened in browser');\n  } catch {\n    spinner.fail('Failed to open browser');\n  }\n}\n\n// Export graph as PNG\nasync function exportGraphAsPNG(bloomURL: string, outputPath: string) {\n  const spinner = ora(`Exporting graph to ${outputPath}...`).start();\n  \n  try {\n    // In a real implementation, this would use Puppeteer or similar\n    // to capture a screenshot of the Bloom visualization\n    \n    // Create a placeholder file for now\n    const placeholderContent = `# Graph Export Placeholder\n    \nExport URL: ${bloomURL}\nGenerated at: ${new Date().toISOString()}\n\nTo manually export:\n1. Open the URL in your browser\n2. Use Neo4j Bloom's built-in export feature\n3. Save the visualization as PNG\n`;\n    \n    writeFileSync(outputPath, placeholderContent);\n    spinner.succeed(`Export instructions saved to ${outputPath}`);\n  } catch (error) {\n    spinner.fail('Failed to export graph as PNG');\n    throw error;\n  }\n}\n\n// Main graph command handler\nasync function graphHandler(options: GraphOptions) {\n  \n  try {\n    // Generate JWT\n    const jwt = await generateJWT();\n    saveJWT(jwt);\n    \n    // Build Bloom URL\n    const bloomURL = getBloomURL(jwt, options.query);\n    \n    \n    if (options.query) {\n    }\n    \n    // Handle PNG export if requested\n    if (options.png) {\n      await exportGraphAsPNG(bloomURL, options.png);\n    } else {\n      // Open in browser\n      await openInBrowser(bloomURL);\n    }\n    \n    console.log(chalk.bold('\\n‚ú® Graph viewer launched successfully!\\n'));\n    \n    if (!options.png) {\n      console.log(chalk.gray('Tips:'));\n      console.log(chalk.gray('  ‚Ä¢ Use Bloom\\'s search to explore nodes'));\n    }\n  } catch {\n    process.exit(1);\n  }\n}\n\n// Export command registration function\nexport default function registerGraphCommand(program: Command) {\n  program\n    .command('graph')\n    .description('Visualize Graph Database (requires Neo4j setup)')\n    .option('-q, --query <cypher>', 'Deep-link with Cypher query')\n    .option('-p, --png <output>', 'Export graph as PNG')\n    .action(graphHandler);\n}","import { Command } from 'commander';\nimport prompts from 'prompts';\nimport { saveConfig } from '../utils/config.js';\nimport { existsSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nfunction createMariaMdTemplate(config: any): string {\n  const currentDate = new Date().toISOString().split('T')[0];\n  \n  return `# MARIA.md\n\nThis file provides guidance to MARIA CODE (CLI) when working with code in this repository.\n\n## Repository Status\n\n**Project**: ${config.project?.name || 'MARIA Development Project'}\n**Type**: ${config.project?.type || 'TypeScript/Node.js'}\n**Created**: ${currentDate}\n**Last Updated**: ${currentDate}\n\n## Project Overview\n\n### Description\n${config.project?.description || 'AI-powered development project using MARIA CODE CLI for intelligent code generation, analysis, and project management.'}\n\n### Technology Stack\n- **Runtime**: Node.js 20+ LTS\n- **Language**: TypeScript\n- **Package Manager**: ${config.project?.packageManager || 'pnpm'}\n- **AI Integration**: MARIA Platform (Gemini 2.5 Pro, Grok-4)\n- **Development**: MARIA CODE CLI\n\n## Development Workflow\n\n### MARIA CODE CLI Commands\n\n#### Basic Commands\n\\`\\`\\`bash\n# Initialize project\nmc init\n\n# Analyze codebase  \nmc read src\n\n# Interactive development\nmc chat\n\n# Generate code\nmc \"Add REST endpoint for /api/health\" --apply\n\n# Run tests\nmc test\n\n# AI-generated commit\nmc commit -m \"feat: new feature\"\n\n# Deploy\nmc deploy --env stg\n\\`\\`\\`\n\n#### Specialized Commands\n\\`\\`\\`bash\n# Paper development\nmc paper\n\n# Presentation creation\nmc slides  \n\n# DevOps operations\nmc dev\n\\`\\`\\`\n\n### Project Structure\n\n\\`\\`\\`\n${config.project?.name || 'project'}/\n‚îú‚îÄ src/                 # Source code\n‚îú‚îÄ tests/               # Test files\n‚îú‚îÄ docs/                # Documentation\n‚îú‚îÄ .maria-code.toml     # MARIA CODE configuration\n‚îú‚îÄ MARIA.md            # Development guidance (this file)\n‚îî‚îÄ README.md           # Project documentation\n\\`\\`\\`\n\n## AI Model Configuration\n\n### Default Model\n- **Primary**: ${config.ai?.preferredModel || 'gemini-2.5-pro'}\n- **Context**: Extended context for complex analysis\n- **Temperature**: 0.7 (balanced creativity/precision)\n\n### Model Selection Guidelines\n- **Gemini 2.5 Pro**: Complex reasoning, code analysis, architecture decisions\n- **Grok-4**: Creative solutions, alternative approaches, rapid prototyping\n\n## Development Guidelines\n\n### Code Style\n- Follow TypeScript best practices\n- Use meaningful variable/function names\n- Implement proper error handling\n- Write comprehensive tests\n- Document complex logic\n\n### AI Interaction Patterns\n- Provide clear, specific prompts\n- Include relevant context from codebase\n- Use incremental development approach\n- Review and validate AI-generated code\n- Maintain human oversight for critical decisions\n\n### Quality Standards\n- TypeScript: Zero type errors\n- ESLint: Zero violations in production code\n- Tests: Minimum 80% coverage\n- Documentation: All public APIs documented\n\n## Common Tasks\n\n### Development Scripts\n\\`\\`\\`bash\n# Start development server\nnpm run dev\n\n# Run tests\nnpm test\n\n# Build project\nnpm run build\n\n# Type checking\nnpm run typecheck\n\n# Linting\nnpm run lint\n\\`\\`\\`\n\n### MARIA CODE Workflows\n\\`\\`\\`bash\n# Full development cycle\nmc read src                    # Analyze codebase\nmc \"implement user auth\"       # Generate code\nmc test                       # Generate/run tests\nmc commit -m                  # AI commit message\nmc deploy --env stg          # Deploy to staging\n\\`\\`\\`\n\n## Integration Configuration\n\n### Knowledge Graph (optional)\n- **Instance ID**: ${config.neo4j?.instanceId || 'Not configured'}'}\n- **Database**: ${config.neo4j?.database || 'Not configured'}'}\n- **Usage**: Code relationship analysis, dependency mapping\n\n### Environment Variables\n\\`\\`\\`bash\n# Required for AI integration\nMARIA_USER_EMAIL=${config.user?.email || 'your-email@example.com'}\nMARIA_PROJECT_ID=${config.project?.id || 'your-project-id'}\n\n# Optional configuration\nMARIA_AI_MODEL=${config.ai?.preferredModel || 'gemini-2.5-pro'}\nMARIA_LOG_LEVEL=${config.logging?.level || 'info'}\n\\`\\`\\`\n\n## Troubleshooting\n\n### Common Issues\n1. **AI Model Access**: Ensure MARIA account has proper plan access\n2. **Configuration**: Verify .maria-code.toml is properly configured\n3. **Network**: Check internet connection for AI API calls\n4. **Permissions**: Ensure file system write permissions\n\n### Debug Commands\n\\`\\`\\`bash\n# Check configuration\nmc config show\n\n# Test AI connection\nmc chat \"Hello, test connection\"\n\n# Verify project status\nmc status\n\\`\\`\\`\n\n## Important Notes\n\n### Best Practices\n- Always review AI-generated code before committing\n- Use version control for all changes\n- Test thoroughly before deployment\n- Keep MARIA.md updated with project evolution\n- Document custom workflows and patterns\n\n### Security\n- Never commit API keys or sensitive data\n- Use environment variables for secrets\n- Follow principle of least privilege\n- Regular security audits with AI assistance\n\n---\n\n*This file is continuously updated by MARIA CODE CLI to reflect project evolution and development patterns.*\n\nGenerated by MARIA CODE CLI v${process.env.npm_package_version || '1.0.0'} on ${currentDate}\n`;\n}\n\nasync function initHandler() {\n  \n  // Check if config already exists\n  const configPath = join(process.cwd(), '.maria-code.toml');\n  if (existsSync(configPath)) {\n    const { overwrite } = await prompts({\n      type: 'confirm',\n      name: 'overwrite',\n      message: 'Configuration file already exists. Overwrite?',\n      initial: false\n    });\n    \n    if (!overwrite) {\n      return;\n    }\n  }\n  \n  // Collect user information\n  const responses = await prompts([\n    {\n      type: 'text',\n      name: 'email',\n      message: 'Your email address',\n      initial: process.env.USER ? `${process.env.USER}@example.com` : '',\n      validate: (value) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(value) || 'Please enter a valid email address';\n      }\n    },\n    {\n      type: 'text',\n      name: 'projectName',\n      message: 'Project name',\n      initial: process.cwd().split('/').pop() || 'MARIA Development Project',\n      hint: 'Name of your development project'\n    },\n    {\n      type: 'select',\n      name: 'projectType',\n      message: 'Project type',\n      choices: [\n        { title: 'TypeScript/Node.js', value: 'typescript-nodejs' },\n        { title: 'React/Next.js', value: 'react-nextjs' },\n        { title: 'Python/FastAPI', value: 'python-fastapi' },\n        { title: 'Go/Gin', value: 'go-gin' },\n        { title: 'Rust/Actix', value: 'rust-actix' },\n        { title: 'Other', value: 'other' }\n      ],\n      initial: 0\n    },\n    {\n      type: 'text',\n      name: 'projectDescription',\n      message: 'Project description',\n      initial: 'AI-powered development project using MARIA CODE CLI',\n      hint: 'Brief description of what this project does'\n    },\n    {\n      type: 'select',\n      name: 'packageManager',\n      message: 'Package manager',\n      choices: [\n        { title: 'pnpm', value: 'pnpm' },\n        { title: 'npm', value: 'npm' },\n        { title: 'yarn', value: 'yarn' },\n        { title: 'bun', value: 'bun' }\n      ],\n      initial: 0\n    },\n    {\n      type: 'text',\n      name: 'neo4jInstanceId',\n      message: 'Neo4j instance ID',\n      initial: '4234c1a0',\n      hint: 'Found in Neo4j Console URL'\n    },\n    {\n      type: 'select',\n      name: 'aiModel',\n      message: 'Preferred AI model',\n      choices: [\n        { title: 'Gemini 2.5 Pro', value: 'gemini-2.5-pro-preview' },\n        { title: 'Grok-4', value: 'grok-4-latest' }\n      ],\n      initial: 0\n    },\n    {\n      type: 'confirm',\n      name: 'createMariaMd',\n      message: 'Create MARIA.md development guidance file?',\n      initial: true,\n      hint: 'Recommended for AI-assisted development'\n    }\n  ]);\n  \n  // Create configuration\n  const config = {\n    user: {\n      email: responses.email\n    },\n    project: {\n      name: responses.projectName,\n      type: responses.projectType,\n      description: responses.projectDescription,\n      packageManager: responses.packageManager,\n      id: responses.projectName.toLowerCase().replace(/\\s+/g, '-')\n    },\n    neo4j: {\n      instanceId: responses.neo4jInstanceId,\n      database: 'neo4j'\n    },\n    ai: {\n      preferredModel: responses.aiModel\n    },\n    logging: {\n      level: 'info'\n    }\n  };\n  \n  // Save configuration\n  try {\n    saveConfig(config);\n    console.log('‚úÖ Configuration saved to .maria-code.toml');\n  } catch (error) {\n    console.error('‚ùå Failed to save configuration:', error);\n    process.exit(1);\n  }\n\n  // Create MARIA.md file if requested\n  if (responses.createMariaMd) {\n    const mariaMdPath = join(process.cwd(), 'MARIA.md');\n    \n    // Check if MARIA.md already exists\n    if (existsSync(mariaMdPath)) {\n      const { overwriteMariaMd } = await prompts({\n        type: 'confirm',\n        name: 'overwriteMariaMd',\n        message: 'MARIA.md already exists. Overwrite?',\n        initial: false\n      });\n      \n      if (!overwriteMariaMd) {\n        console.log('‚úÖ Initialization complete! MARIA.md was not modified.');\n        return;\n      }\n    }\n    \n    try {\n      const mariaMdContent = createMariaMdTemplate(config);\n      writeFileSync(mariaMdPath, mariaMdContent, 'utf8');\n      console.log('‚úÖ MARIA.md development guidance file created');\n    } catch (error) {\n      console.error('‚ùå Failed to create MARIA.md:', error);\n      process.exit(1);\n    }\n  }\n\n  console.log('\\nüéâ MARIA CODE initialization complete!');\n  console.log('\\nüìñ Next steps:');\n  console.log('  1. Review your .maria-code.toml configuration');\n  if (responses.createMariaMd) {\n    console.log('  2. Check your MARIA.md development guidance');\n    console.log('  3. Start using: mc chat \"Help me understand this project\"');\n  } else {\n    console.log('  2. Start using: mc chat \"Help me understand this project\"');\n  }\n}\n\nexport default function registerInitCommand(program: Command) {\n  program\n    .command('init')\n    .description('Initialize .maria-code.toml configuration and MARIA.md guidance file')\n    .action(initHandler);\n}","import { Command } from 'commander';\n// import { DEFAULT_MODES } from '../types/conversation.js';\nimport { logger, LogLevel } from '../utils/logger.js';\n// import { v4 as uuidv4 } from 'uuid';\n\nexport default function chatCommand(program: Command) {\n  program\n    .command('chat')\n    .description('Start interactive chat mode')\n    .option('-a, --auto', 'Enable Auto Mode (automatic execution until mission complete)', false)\n    .option('-m, --mode <mode>', 'Specify operation mode (chat, command, research, creative)', 'chat')\n    .option('-v, --verbose', 'Show detailed output', false)\n    .option('--no-interactive', 'Non-interactive mode (execute with CLI parameters only)', false)\n    .option('--project <path>', 'Project context path', process.cwd())\n    .option('--source <sources...>', 'Research source specification (research mode only)', [])\n    .option('--depth <level>', 'Research depth level (1-3, default: 2)', '2')\n    .option('--format <format>', 'Output format (markdown, json, plain)', 'markdown')\n    .argument('[prompt]', 'Initial prompt (optional)')\n    .action(async (prompt, options) => {\n      // „É≠„Ç∞„É¨„Éô„É´Ë®≠ÂÆö\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      // Auto Mode initialization would go here if needed\n\n      // „É™„Çµ„Éº„ÉÅ„É¢„Éº„ÉâË®≠ÂÆö„ÅÆÊ§úË®º\n      if (options.mode === 'research') {\n        validateResearchOptions(options);\n      }\n\n      // Context initialization would be here if needed\n      // Example: sessionId and context setup for the conversation\n\n      // Check if raw mode is supported for interactive features\n      const isRawModeSupported = process.stdin.isTTY && typeof process.stdin.setRawMode === 'function';\n      \n      if (!options.interactive && prompt) {\n        // Non-interactive mode - provide simple response\n        await handleSimplePrompt(prompt);\n      } else if (!isRawModeSupported) {\n        // TTY not supported - fallback to non-interactive mode\n        logger.info('Interactive mode not supported in this environment. Falling back to non-interactive mode.');\n        if (prompt) {\n          await handleSimplePrompt(prompt);\n        } else {\n          logger.error('Please provide a prompt when running in non-TTY environment.');\n          logger.info('Example: mc chat \"Create a paper about AI\"');\n          process.exit(1);\n        }\n      } else {\n        // Interactive mode - use enhanced CLI for natural language chat\n        const { EnhancedCLI } = await import('../enhanced-cli.js');\n        // CLI starts automatically in constructor\n        new EnhancedCLI();\n      }\n    });\n}\n\n// Utility functions would be here if needed\n// async function getUserId(): Promise<string> {\n//   return 'user-' + uuidv4();\n// }\n\nasync function handleSimplePrompt(\n  prompt: string\n): Promise<void> {\n  logger.info('Processing prompt:', prompt);\n\n  // Simple pattern matching for common requests\n  const lowerPrompt = prompt.toLowerCase();\n  \n  if (lowerPrompt.includes('auto pilot software') || lowerPrompt.includes('autopilot software')) {\n    console.log('\\nü§ñ MARIA CODE Response:\\n');\n    console.log('I\\'ll help you design an auto pilot software development system. Here\\'s a comprehensive outline:\\n');\n    \n    console.log('## Auto Pilot Software Development System Design\\n');\n    console.log('### System Overview');\n    console.log('An intelligent, autonomous software development system that can:');\n    console.log('- Analyze requirements and generate development plans');\n    console.log('- Write, test, and deploy code automatically');\n    console.log('- Monitor and maintain software systems');\n    console.log('- Learn from development patterns and improve over time\\n');\n    \n    console.log('### Core Components');\n    console.log('1. **Requirements Analysis Engine** - Natural language processing for specs');\n    console.log('2. **Architecture Design Generator** - System design automation');\n    console.log('3. **Code Generation Pipeline** - Multi-language code generation');\n    console.log('4. **Automated Testing Framework** - Unit, integration, and E2E testing');\n    console.log('5. **Deployment Orchestrator** - CI/CD pipeline management');\n    console.log('6. **Monitoring & Maintenance System** - Performance and error tracking\\n');\n    \n    console.log('### Technical Stack');\n    console.log('- **AI/ML**: Large Language Models (GPT-4, Claude, Gemini)');\n    console.log('- **Backend**: Node.js/TypeScript, Python FastAPI');\n    console.log('- **Database**: PostgreSQL, Redis for caching');\n    console.log('- **Infrastructure**: Docker, Kubernetes, AWS/GCP');\n    console.log('- **CI/CD**: GitHub Actions, Jenkins');\n    console.log('- **Monitoring**: Prometheus, Grafana, Sentry\\n');\n    \n    console.log('### Implementation Timeline');\n    console.log('- **Phase 1** (4 weeks): Requirements analysis and system design');\n    console.log('- **Phase 2** (6 weeks): Core AI engine development');\n    console.log('- **Phase 3** (4 weeks): Code generation pipeline');\n    console.log('- **Phase 4** (3 weeks): Testing and deployment automation');\n    console.log('- **Phase 5** (2 weeks): Monitoring and maintenance features\\n');\n    \n    console.log('üí° Would you like me to generate detailed requirements.md and design documents?');\n    console.log('   Use: mc paper --outline \"Auto Pilot Software Development System\"');\n    \n  } else if (lowerPrompt.includes('paper') || lowerPrompt.includes('research')) {\n    console.log('\\nüìÑ I can help you with academic papers and research documents.');\n    console.log('Use: mc paper --outline \"Your Topic\" to get started');\n    \n  } else if (lowerPrompt.includes('slide') || lowerPrompt.includes('presentation')) {\n    console.log('\\nüìä I can help you create presentations and slides.');\n    console.log('Use: mc slides --create \"Your Topic\" to get started');\n    \n  } else {\n    console.log('\\nü§ñ MARIA CODE Chat');\n    console.log(`I understand you're asking about: \"${prompt}\"\\n`);\n    console.log('I can help you with:');\n    console.log('‚Ä¢ System design and architecture planning');\n    console.log('‚Ä¢ Academic paper writing and research');\n    console.log('‚Ä¢ Presentation and slide creation');\n    console.log('‚Ä¢ Software development planning');\n    console.log('‚Ä¢ Technical documentation\\n');\n    console.log('Available commands:');\n    console.log('‚Ä¢ mc paper --outline \"topic\" - Generate paper outline');\n    console.log('‚Ä¢ mc slides --create \"topic\" - Create presentation');\n    console.log('‚Ä¢ mc chat - Interactive mode (if TTY supported)');\n  }\n}\n\n\n// Helper functions for research mode\nfunction validateResearchOptions(options: any): void {\n  const validDepths = ['1', '2', '3'];\n  if (!validDepths.includes(options.depth)) {\n    logger.info(`Invalid depth level: ${options.depth}. Using default: 2`);\n    options.depth = '2';\n  }\n\n  const validFormats = ['markdown', 'json', 'plain'];\n  if (!validFormats.includes(options.format)) {\n    logger.info(`Invalid format: ${options.format}. Using default: markdown`);\n    options.format = 'markdown';\n  }\n\n  if (options.source && options.source.length > 0) {\n    logger.info(`Research sources configured: ${options.source.join(', ')}`);\n  }\n}\n\n// Additional utility functions would be here if needed\n// async function detectProjectType() { ... }\n// async function getCurrentGitBranch() { ... }","import { Command } from 'commander';\nimport { render } from 'ink';\nimport React from 'react';\nimport { Box, Text } from 'ink';\nimport SelectInput from 'ink-select-input';\nimport Spinner from 'ink-spinner';\n\ninterface PaperCommand {\n  action: 'outline' | 'write' | 'references' | 'review';\n  topic?: string;\n  section?: string;\n  file?: string;\n}\n\nconst PaperAgent: React.FC<{ command: PaperCommand; onExit: () => void }> = ({ command, onExit }) => {\n  const [status, setStatus] = React.useState<'processing' | 'done'>('processing');\n  const [result, setResult] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const executeAgent = async () => {\n      try {\n        // Simulate academic agent execution for now\n        // TODO: Implement proper API integration\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        let mockResult = '';\n        switch (command.action) {\n          case 'outline':\n            mockResult = `Generated paper outline for topic: ${command.topic || 'General topic'}\\n\\n1. Introduction\\n2. Literature Review\\n3. Methodology\\n4. Results\\n5. Discussion\\n6. Conclusion\\n7. References`;\n            break;\n          case 'write':\n            mockResult = `Section written: ${command.section || 'Introduction'}\\n\\nThis section has been drafted with proper academic structure and citations.`;\n            break;\n          case 'references':\n            mockResult = `References managed for file: ${command.file || 'paper.tex'}\\n\\nBibTeX entries have been organized and formatted.`;\n            break;\n          case 'review':\n            mockResult = `Paper reviewed: ${command.file || 'paper.tex'}\\n\\nSuggestions for improvement:\\n- Strengthen introduction\\n- Add more recent citations\\n- Improve data visualization`;\n            break;\n          default:\n            mockResult = 'Academic task completed successfully.';\n        }\n        \n        setResult(mockResult);\n\n        setStatus('done');\n      } catch (error) {\n        setResult(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        setStatus('done');\n      }\n    };\n\n    executeAgent();\n  }, [command]);\n\n  React.useEffect(() => {\n    if (status === 'done') {\n      setTimeout(onExit, 2000);\n    }\n  }, [status, onExit]);\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"cyan\">Academic Agent</Text>\n        <Text> - {command.action} action</Text>\n      </Box>\n      \n      {status === 'processing' ? (\n        <Box>\n          <Spinner type=\"dots\" />\n          <Text> Processing your request...</Text>\n        </Box>\n      ) : (\n        <Box flexDirection=\"column\">\n          <Text color=\"green\">‚úì Completed</Text>\n          <Box marginTop={1}>\n            <Text>{result}</Text>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst InteractivePaperMenu: React.FC<{ onSelect: (action: string) => void }> = ({ onSelect }) => {\n  const actions = [\n    { label: 'Generate paper outline', value: 'outline' },\n    { label: 'Write paper section', value: 'write' },\n    { label: 'Manage references', value: 'references' },\n    { label: 'Review and improve', value: 'review' },\n    { label: 'Exit', value: 'exit' },\n  ];\n\n  const handleSelect = (item: { value: string }) => {\n    onSelect(item.value);\n  };\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"cyan\">Academic Agent - Paper Development</Text>\n      </Box>\n      <Box marginBottom={1}>\n        <Text>Select an action:</Text>\n      </Box>\n      <SelectInput items={actions} onSelect={handleSelect} />\n    </Box>\n  );\n};\n\nconst PaperApp: React.FC = () => {\n  const [currentView, setCurrentView] = React.useState<'menu' | 'agent'>('menu');\n  const [selectedCommand, setSelectedCommand] = React.useState<PaperCommand | null>(null);\n\n  const handleMenuSelect = (action: string) => {\n    if (action === 'exit') {\n      process.exit(0);\n    } else {\n      setSelectedCommand({ action: action as PaperCommand['action'] });\n      setCurrentView('agent');\n    }\n  };\n\n  const handleAgentExit = () => {\n    setCurrentView('menu');\n    setSelectedCommand(null);\n  };\n\n  if (currentView === 'agent' && selectedCommand) {\n    return <PaperAgent command={selectedCommand} onExit={handleAgentExit} />;\n  }\n\n  return <InteractivePaperMenu onSelect={handleMenuSelect} />;\n};\n\nexport default function paperCommand(program: Command) {\n  program\n    .command('paper')\n    .description('Academic Agent for paper development')\n    .option('-o, --outline <topic>', 'Generate paper outline for a topic')\n    .option('-w, --write <section>', 'Write a specific section')\n    .option('-r, --references <file>', 'Manage references for a paper')\n    .option('--review <file>', 'Review and improve paper')\n    .action(async (options) => {\n      if (options.outline) {\n        const command: PaperCommand = { action: 'outline', topic: options.outline };\n        const { waitUntilExit } = render(\n          <PaperAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.write) {\n        const command: PaperCommand = { action: 'write', section: options.write };\n        const { waitUntilExit } = render(\n          <PaperAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.references) {\n        const command: PaperCommand = { action: 'references', file: options.references };\n        const { waitUntilExit } = render(\n          <PaperAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.review) {\n        const command: PaperCommand = { action: 'review', file: options.review };\n        const { waitUntilExit } = render(\n          <PaperAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else {\n        // Interactive mode\n        const { waitUntilExit } = render(<PaperApp />);\n        await waitUntilExit();\n      }\n    });\n}","import { Command } from 'commander';\nimport { render } from 'ink';\nimport React from 'react';\nimport { Box, Text } from 'ink';\nimport SelectInput from 'ink-select-input';\nimport Spinner from 'ink-spinner';\n\ninterface SlidesCommand {\n  action: 'structure' | 'content' | 'visuals' | 'sync';\n  topic?: string;\n  file?: string;\n  slidesId?: string;\n}\n\nconst SlidesAgent: React.FC<{ command: SlidesCommand; onExit: () => void }> = ({ command, onExit }) => {\n  const [status, setStatus] = React.useState<'processing' | 'done'>('processing');\n  const [result, setResult] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const executeAgent = async () => {\n      try {\n        // Simulate presentation agent execution\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        let mockResult = '';\n        switch (command.action) {\n          case 'structure':\n            mockResult = `Generated slide structure for: ${command.topic || 'Presentation'}\\n\\n1. Title Slide\\n2. Agenda/Overview\\n3. Introduction\\n4. Main Content (3-5 slides)\\n5. Key Insights\\n6. Conclusion\\n7. Q&A\\n\\nSlide structure optimized for visual flow and audience engagement.`;\n            break;\n          case 'content':\n            mockResult = `Content created for slides: ${command.file || 'presentation.pptx'}\\n\\nSlide content includes:\\n- Compelling headlines\\n- Key bullet points\\n- Supporting data and examples\\n- Visual content suggestions\\n- Speaker notes`;\n            break;\n          case 'visuals':\n            mockResult = `Visual optimization completed for: ${command.file || 'presentation.pptx'}\\n\\nOptimizations applied:\\n- Color scheme alignment\\n- Font consistency\\n- Image placement optimization\\n- Chart and graph enhancements\\n- Layout improvements`;\n            break;\n          case 'sync':\n            mockResult = `Google Slides sync completed: ${command.slidesId || 'presentation-id'}\\n\\nSync results:\\n- Content synchronized successfully\\n- Formatting preserved\\n- Comments and suggestions imported\\n- Share permissions updated`;\n            break;\n          default:\n            mockResult = 'Presentation task completed successfully.';\n        }\n        \n        setResult(mockResult);\n        setStatus('done');\n      } catch (error) {\n        setResult(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        setStatus('done');\n      }\n    };\n\n    executeAgent();\n  }, [command]);\n\n  React.useEffect(() => {\n    if (status === 'done') {\n      setTimeout(onExit, 2000);\n    }\n  }, [status, onExit]);\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"magenta\">Presentation Agent</Text>\n        <Text> - {command.action} action</Text>\n      </Box>\n      \n      {status === 'processing' ? (\n        <Box>\n          <Spinner type=\"dots\" />\n          <Text> Creating your presentation...</Text>\n        </Box>\n      ) : (\n        <Box flexDirection=\"column\">\n          <Text color=\"green\">‚úì Completed</Text>\n          <Box marginTop={1}>\n            <Text>{result}</Text>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst InteractiveSlidesMenu: React.FC<{ onSelect: (action: string) => void }> = ({ onSelect }) => {\n  const actions = [\n    { label: 'Generate slide structure', value: 'structure' },\n    { label: 'Create slide content', value: 'content' },\n    { label: 'Optimize visuals', value: 'visuals' },\n    { label: 'Sync with Google Slides', value: 'sync' },\n    { label: 'Exit', value: 'exit' },\n  ];\n\n  const handleSelect = (item: { value: string }) => {\n    onSelect(item.value);\n  };\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"magenta\">Presentation Agent - Slide Creation</Text>\n      </Box>\n      <Box marginBottom={1}>\n        <Text>Select an action:</Text>\n      </Box>\n      <SelectInput items={actions} onSelect={handleSelect} />\n    </Box>\n  );\n};\n\nconst SlidesApp: React.FC = () => {\n  const [currentView, setCurrentView] = React.useState<'menu' | 'agent'>('menu');\n  const [selectedCommand, setSelectedCommand] = React.useState<SlidesCommand | null>(null);\n\n  const handleMenuSelect = (action: string) => {\n    if (action === 'exit') {\n      process.exit(0);\n    } else {\n      setSelectedCommand({ action: action as SlidesCommand['action'] });\n      setCurrentView('agent');\n    }\n  };\n\n  const handleAgentExit = () => {\n    setCurrentView('menu');\n    setSelectedCommand(null);\n  };\n\n  if (currentView === 'agent' && selectedCommand) {\n    return <SlidesAgent command={selectedCommand} onExit={handleAgentExit} />;\n  }\n\n  return <InteractiveSlidesMenu onSelect={handleMenuSelect} />;\n};\n\nexport default function slidesCommand(program: Command) {\n  program\n    .command('slides')\n    .description('Presentation Agent for slide creation')\n    .option('-s, --structure <topic>', 'Generate slide structure for a topic')\n    .option('-c, --content <file>', 'Create content for slides')\n    .option('-v, --visuals <file>', 'Optimize slide visuals')\n    .option('--sync <slidesId>', 'Sync with Google Slides')\n    .action(async (options) => {\n      if (options.structure) {\n        const command: SlidesCommand = { action: 'structure', topic: options.structure };\n        const { waitUntilExit } = render(\n          <SlidesAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.content) {\n        const command: SlidesCommand = { action: 'content', file: options.content };\n        const { waitUntilExit } = render(\n          <SlidesAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.visuals) {\n        const command: SlidesCommand = { action: 'visuals', file: options.visuals };\n        const { waitUntilExit } = render(\n          <SlidesAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.sync) {\n        const command: SlidesCommand = { action: 'sync', slidesId: options.sync };\n        const { waitUntilExit } = render(\n          <SlidesAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else {\n        // Interactive mode\n        const { waitUntilExit } = render(<SlidesApp />);\n        await waitUntilExit();\n      }\n    });\n}","import { Command } from 'commander';\nimport { render } from 'ink';\nimport React from 'react';\nimport { Box, Text } from 'ink';\nimport SelectInput from 'ink-select-input';\nimport Spinner from 'ink-spinner';\n\ninterface DevCommand {\n  action: 'architecture' | 'generate' | 'test' | 'deploy';\n  project?: string;\n  component?: string;\n  type?: string;\n  environment?: string;\n}\n\nconst DevAgent: React.FC<{ command: DevCommand; onExit: () => void }> = ({ command, onExit }) => {\n  const [status, setStatus] = React.useState<'processing' | 'done'>('processing');\n  const [result, setResult] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const executeAgent = async () => {\n      try {\n        // Simulate development agent execution\n        await new Promise(resolve => setTimeout(resolve, 2500));\n        \n        let mockResult = '';\n        switch (command.action) {\n          case 'architecture':\n            mockResult = `Architecture designed for project: ${command.project || 'MARIA Project'}\\n\\nArchitecture components:\\n- Frontend: React/Next.js with TypeScript\\n- Backend: Node.js/Express with tRPC\\n- Database: PostgreSQL with Prisma ORM\\n- Authentication: Authentication (configurable)\\n- Deployment: Docker + Kubernetes\\n- CI/CD: GitHub Actions\\n\\nArchitecture documentation generated with diagrams and specifications.`;\n            break;\n          case 'generate':\n            mockResult = `Code generated for component: ${command.component || 'UserDashboard'}\\n\\nGenerated files:\\n- Component implementation with TypeScript\\n- Props interface and type definitions\\n- Styled components with responsive design\\n- Unit tests with React Testing Library\\n- Storybook stories for documentation\\n\\nCode follows best practices and project conventions.`;\n            break;\n          case 'test':\n            mockResult = `Tests generated for type: ${command.type || 'unit'}\\n\\nTest suite includes:\\n- Component unit tests (Jest + RTL)\\n- API integration tests (Supertest)\\n- E2E tests (Playwright)\\n- Performance tests (Lighthouse CI)\\n- Code coverage reports\\n\\nAll tests follow AAA pattern and include mocking strategies.`;\n            break;\n          case 'deploy':\n            mockResult = `Deployment completed to: ${command.environment || 'staging'}\\n\\nDeployment summary:\\n- Docker image built and pushed\\n- Kubernetes manifests applied\\n- Database migrations executed\\n- Health checks passed\\n- Load balancer configured\\n- SSL certificates updated\\n\\nüöÄ Application is live and ready for testing!`;\n            break;\n          default:\n            mockResult = 'Development task completed successfully.';\n        }\n        \n        setResult(mockResult);\n        setStatus('done');\n      } catch (error) {\n        setResult(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        setStatus('done');\n      }\n    };\n\n    executeAgent();\n  }, [command]);\n\n  React.useEffect(() => {\n    if (status === 'done') {\n      setTimeout(onExit, 2000);\n    }\n  }, [status, onExit]);\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"yellow\">Development Agent</Text>\n        <Text> - {command.action} action</Text>\n      </Box>\n      \n      {status === 'processing' ? (\n        <Box>\n          <Spinner type=\"dots\" />\n          <Text> Executing development task...</Text>\n        </Box>\n      ) : (\n        <Box flexDirection=\"column\">\n          <Text color=\"green\">‚úì Completed</Text>\n          <Box marginTop={1}>\n            <Text>{result}</Text>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst InteractiveDevMenu: React.FC<{ onSelect: (action: string) => void }> = ({ onSelect }) => {\n  const actions = [\n    { label: 'Design architecture', value: 'architecture' },\n    { label: 'Generate code', value: 'generate' },\n    { label: 'Generate tests', value: 'test' },\n    { label: 'Deploy application', value: 'deploy' },\n    { label: 'Exit', value: 'exit' },\n  ];\n\n  const handleSelect = (item: { value: string }) => {\n    onSelect(item.value);\n  };\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1}>\n        <Text bold color=\"yellow\">Development Agent - Software Development</Text>\n      </Box>\n      <Box marginBottom={1}>\n        <Text>Select an action:</Text>\n      </Box>\n      <SelectInput items={actions} onSelect={handleSelect} />\n    </Box>\n  );\n};\n\nconst DevApp: React.FC = () => {\n  const [currentView, setCurrentView] = React.useState<'menu' | 'agent'>('menu');\n  const [selectedCommand, setSelectedCommand] = React.useState<DevCommand | null>(null);\n\n  const handleMenuSelect = (action: string) => {\n    if (action === 'exit') {\n      process.exit(0);\n    } else {\n      setSelectedCommand({ action: action as DevCommand['action'] });\n      setCurrentView('agent');\n    }\n  };\n\n  const handleAgentExit = () => {\n    setCurrentView('menu');\n    setSelectedCommand(null);\n  };\n\n  if (currentView === 'agent' && selectedCommand) {\n    return <DevAgent command={selectedCommand} onExit={handleAgentExit} />;\n  }\n\n  return <InteractiveDevMenu onSelect={handleMenuSelect} />;\n};\n\nexport default function devCommand(program: Command) {\n  program\n    .command('dev')\n    .description('Development Agent for software development')\n    .option('-a, --architecture <project>', 'Design architecture for a project')\n    .option('-g, --generate <component>', 'Generate code for a component')\n    .option('-t, --test <type>', 'Generate tests (unit/integration/e2e)')\n    .option('-d, --deploy <environment>', 'Deploy to environment (dev/stg/prod)')\n    .action(async (options) => {\n      if (options.architecture) {\n        const command: DevCommand = { action: 'architecture', project: options.architecture };\n        const { waitUntilExit } = render(\n          <DevAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.generate) {\n        const command: DevCommand = { action: 'generate', component: options.generate };\n        const { waitUntilExit } = render(\n          <DevAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.test) {\n        const command: DevCommand = { action: 'test', type: options.test };\n        const { waitUntilExit } = render(\n          <DevAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else if (options.deploy) {\n        const command: DevCommand = { action: 'deploy', environment: options.deploy };\n        const { waitUntilExit } = render(\n          <DevAgent command={command} onExit={() => process.exit(0)} />\n        );\n        await waitUntilExit();\n      } else {\n        // Interactive mode\n        const { waitUntilExit } = render(<DevApp />);\n        await waitUntilExit();\n      }\n    });\n}","import { Command } from 'commander';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { Neo4jService } from '../services/neo4j.service';\nimport { logger } from '../utils/logger';\nimport { Table } from 'console-table-printer';\n\ninterface AnalyzeOptions {\n  format?: 'table' | 'json' | 'graph';\n  limit?: number;\n  depth?: number;\n}\n\nexport default function analyzeCommand(command: Command): void {\n  const analyzeCmd = command\n    .command('analyze')\n    .alias('analyse')\n    .description('Analyze Neo4j graph data and patterns');\n\n  // Subcommand: analyze schema\n  analyzeCmd\n    .command('schema')\n    .description('Analyze graph schema (nodes, relationships, properties)')\n    .action(async () => {\n      const spinner = ora('Analyzing graph schema...').start();\n      try {\n        const neo4j = new Neo4jService();\n        const schema = await neo4j.analyzeSchema();\n        spinner.succeed('Schema analysis complete');\n\n        // Display node types\n        console.log(chalk.bold.cyan('\\nüìä Node Labels:'));\n        const nodeTable = new Table({\n          columns: [\n            { name: 'label', title: 'Label', alignment: 'left' },\n            { name: 'count', title: 'Count', alignment: 'right' },\n            { name: 'properties', title: 'Properties', alignment: 'left' }\n          ]\n        });\n        // TODO: Update when Neo4jService schema format is finalized\n        const nodes = (schema as any).nodes || [];\n        nodes.forEach((node: any) => {\n          nodeTable.addRow({\n            label: node.label,\n            count: node.count,\n            properties: node.properties.join(', ')\n          });\n        });\n        nodeTable.printTable();\n\n        // Display relationship types\n        console.log(chalk.bold.cyan('\\nüîó Relationship Types:'));\n        const relTable = new Table({\n          columns: [\n            { name: 'type', title: 'Type', alignment: 'left' },\n            { name: 'count', title: 'Count', alignment: 'right' },\n            { name: 'fromTo', title: 'From ‚Üí To', alignment: 'left' }\n          ]\n        });\n        // TODO: Update when Neo4jService schema format is finalized\n        const relationships = (schema as any).relationships || [];\n        relationships.forEach((rel: any) => {\n          relTable.addRow({\n            type: rel.type,\n            count: rel.count,\n            fromTo: `${rel.startLabel} ‚Üí ${rel.endLabel}`\n          });\n        });\n        relTable.printTable();\n\n      } catch (error) {\n        spinner.fail('Schema analysis failed');\n        logger.error('Schema analysis error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze patterns\n  analyzeCmd\n    .command('patterns')\n    .description('Find common patterns in the graph')\n    .option('-l, --limit <number>', 'Limit results', '10')\n    .action(async (options) => {\n      const spinner = ora('Analyzing graph patterns...').start();\n      try {\n        const neo4j = new Neo4jService();\n        const patterns = await neo4j.analyzePatterns({ limit: parseInt(options.limit) });\n        spinner.succeed('Pattern analysis complete');\n\n        console.log(chalk.bold.cyan('\\nüîç Common Patterns:'));\n        patterns.forEach((pattern: any, index: number) => {\n          console.log(chalk.yellow(`\\n${index + 1}. ${pattern.name}`));\n          console.log(`   Occurrences: ${pattern.count}`);\n          console.log(`   Pattern: ${pattern.pattern}`);\n          if (pattern.example) {\n            console.log(`   Example: ${JSON.stringify(pattern.example, null, 2)}`);\n          }\n        });\n\n      } catch (error) {\n        spinner.fail('Pattern analysis failed');\n        logger.error('Pattern analysis error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze metrics\n  analyzeCmd\n    .command('metrics')\n    .description('Calculate graph metrics (centrality, clustering, etc.)')\n    .option('-t, --type <type>', 'Metric type (degree|betweenness|pagerank|clustering)', 'degree')\n    .option('-l, --limit <number>', 'Limit results', '20')\n    .action(async (options) => {\n      const spinner = ora(`Calculating ${options.type} metrics...`).start();\n      try {\n        const neo4j = new Neo4jService();\n        const metrics = await neo4j.calculateMetrics({\n          type: options.type,\n          limit: parseInt(options.limit)\n        });\n        spinner.succeed('Metrics calculation complete');\n\n        console.log(chalk.bold.cyan(`\\nüìà ${options.type.charAt(0).toUpperCase() + options.type.slice(1)} Metrics:`));\n        const table = new Table({\n          columns: [\n            { name: 'rank', title: '#', alignment: 'right' },\n            { name: 'node', title: 'Node', alignment: 'left' },\n            { name: 'score', title: 'Score', alignment: 'right' },\n            { name: 'details', title: 'Details', alignment: 'left' }\n          ]\n        });\n\n        (metrics as any[]).forEach((metric: any, index: number) => {\n          table.addRow({\n            rank: index + 1,\n            node: metric.node,\n            score: metric.score.toFixed(4),\n            details: metric.details || '-'\n          });\n        });\n        table.printTable();\n\n      } catch (error) {\n        spinner.fail('Metrics calculation failed');\n        logger.error('Metrics calculation error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze communities\n  analyzeCmd\n    .command('communities')\n    .description('Detect communities in the graph')\n    .option('-a, --algorithm <algorithm>', 'Algorithm (louvain|label-propagation)', 'louvain')\n    .action(async (options) => {\n      const spinner = ora('Detecting communities...').start();\n      try {\n        const neo4j = new Neo4jService();\n        const communities = await neo4j.detectCommunities({\n          algorithm: options.algorithm\n        });\n        spinner.succeed('Community detection complete');\n\n        console.log(chalk.bold.cyan('\\nüë• Communities:'));\n        communities.forEach((community: any, index: number) => {\n          console.log(chalk.yellow(`\\nCommunity ${index + 1}:`));\n          console.log(`  Size: ${community.size} nodes`);\n          console.log(`  Key Members: ${community.keyMembers.slice(0, 5).join(', ')}${community.keyMembers.length > 5 ? '...' : ''}`);\n          console.log(`  Density: ${(community.density * 100).toFixed(1)}%`);\n          if (community.centralNode) {\n            console.log(`  Central Node: ${community.centralNode}`);\n          }\n        });\n\n      } catch (error) {\n        spinner.fail('Community detection failed');\n        logger.error('Community detection error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze query (custom Cypher query)\n  analyzeCmd\n    .command('query <cypher>')\n    .description('Execute custom Cypher query for analysis')\n    .option('-f, --format <format>', 'Output format (table|json|graph)', 'table')\n    .option('-l, --limit <number>', 'Limit results', '50')\n    .action(async (cypher: string, options: AnalyzeOptions) => {\n      const spinner = ora('Executing query...').start();\n      try {\n        const neo4j = new Neo4jService();\n        \n        // Add LIMIT if not present\n        if (!cypher.toLowerCase().includes('limit') && options.limit) {\n          cypher += ` LIMIT ${options.limit}`;\n        }\n\n        const results = await neo4j.runQuery(cypher);\n        spinner.succeed('Query executed successfully');\n\n        if (options.format === 'json') {\n          console.log(JSON.stringify(results, null, 2));\n        } else if (options.format === 'table' && results.length > 0) {\n          const table = new Table();\n          results.forEach((row: any) => {\n            table.addRow(row);\n          });\n          table.printTable();\n        } else if (options.format === 'graph') {\n          // Simple graph visualization in terminal\n          console.log(chalk.bold.cyan('\\nüåê Graph Visualization:'));\n          results.forEach((row: any) => {\n            console.log(chalk.yellow(`Node: ${JSON.stringify(row)}`));\n          });\n        }\n\n        console.log(chalk.dim(`\\n${results.length} results returned`));\n\n      } catch (error) {\n        spinner.fail('Query execution failed');\n        logger.error('Query error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze recommendations\n  analyzeCmd\n    .command('recommend')\n    .description('Generate recommendations based on graph analysis')\n    .option('-t, --type <type>', 'Recommendation type (similar|related|missing)', 'similar')\n    .option('-n, --node <node>', 'Starting node for recommendations')\n    .option('-l, --limit <number>', 'Number of recommendations', '10')\n    .action(async (options) => {\n      const spinner = ora('Generating recommendations...').start();\n      try {\n        const neo4j = new Neo4jService();\n        const recommendations = await neo4j.generateRecommendations({\n          type: options.type,\n          startNode: options.node,\n          limit: parseInt(options.limit)\n        });\n        spinner.succeed('Recommendations generated');\n\n        console.log(chalk.bold.cyan(`\\nüí° ${options.type.charAt(0).toUpperCase() + options.type.slice(1)} Recommendations:`));\n        recommendations.forEach((rec: any, index: number) => {\n          console.log(chalk.yellow(`\\n${index + 1}. ${rec.node}`));\n          console.log(`   Score: ${rec.score.toFixed(3)}`);\n          console.log(`   Reason: ${rec.reason}`);\n          if (rec.connections) {\n            console.log(`   Connections: ${rec.connections.join(' ‚Üí ')}`);\n          }\n        });\n\n      } catch (error) {\n        spinner.fail('Recommendation generation failed');\n        logger.error('Recommendation error:', error);\n        process.exit(1);\n      }\n    });\n\n  // Subcommand: analyze paths\n  analyzeCmd\n    .command('path <from> <to>')\n    .description('Find paths between nodes')\n    .option('-t, --type <type>', 'Path type (shortest|all|weighted)', 'shortest')\n    .option('-m, --max-length <number>', 'Maximum path length', '5')\n    .action(async (from: string, to: string, options) => {\n      const spinner = ora('Finding paths...').start();\n      try {\n        const neo4j = new Neo4jService();\n        const paths = await neo4j.findPaths({\n          from,\n          to,\n          type: options.type,\n          maxLength: parseInt(options.maxLength)\n        });\n        spinner.succeed('Path analysis complete');\n\n        console.log(chalk.bold.cyan(`\\nüõ§Ô∏è  Paths from \"${from}\" to \"${to}\":`));\n        if (paths.length === 0) {\n          console.log(chalk.yellow('No paths found'));\n        } else {\n          paths.forEach((path: any, index: number) => {\n            console.log(chalk.yellow(`\\nPath ${index + 1} (length: ${path.length}):`));\n            console.log(`  ${path.nodes.join(' ‚Üí ')}`);\n            if (path.cost !== undefined) {\n              console.log(`  Cost: ${path.cost}`);\n            }\n          });\n        }\n\n      } catch (error) {\n        spinner.fail('Path finding failed');\n        logger.error('Path finding error:', error);\n        process.exit(1);\n      }\n    });\n}","// Optional Neo4j integration - disabled by default for OSS\n// To enable: npm install neo4j-driver && set NEO4J_ENABLED=true\n\n/**\n * Neo4j Service\n * Neo4j„Éá„Éº„Çø„Éô„Éº„Çπ„Å®„ÅÆÊé•Á∂ö„Å®Êìç‰Ωú„ÇíÁÆ°ÁêÜ\n */\n\nimport { logger } from '../utils/logger';\n\nexport interface Neo4jNode {\n  id: string;\n  labels: string[];\n  properties: Record<string, any>;\n}\n\nexport interface Neo4jRelationship {\n  id: string;\n  type: string;\n  startNode: string;\n  endNode: string;\n  properties: Record<string, any>;\n}\n\nexport interface QueryResult {\n  nodes: Neo4jNode[];\n  relationships: Neo4jRelationship[];\n  records: any[];\n}\n\ninterface Pattern {\n  name: string;\n  pattern: string;\n  count: number;\n  example?: any;\n}\n\ninterface Metric {\n  node: string;\n  score: number;\n  details?: string;\n}\n\ninterface Community {\n  id: number;\n  size: number;\n  keyMembers: string[];\n  density: number;\n  centralNode?: string;\n}\n\ninterface Recommendation {\n  node: string;\n  score: number;\n  reason: string;\n  connections?: string[];\n}\n\ninterface Path {\n  nodes: string[];\n  length: number;\n  cost?: number;\n}\n\nexport class Neo4jService {\n  private connected = false;\n\n  constructor() {\n    // TODO: Initialize Neo4j driver\n  }\n\n  /**\n   * „Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö\n   */\n  async connect(): Promise<void> {\n    logger.info('Connecting to Neo4j...');\n    // TODO: Implement actual connection\n    this.connected = true;\n  }\n\n  /**\n   * „ÇØ„Ç®„É™„ÇíÂÆüË°å\n   */\n  async executeQuery(query: string, params?: Record<string, any>): Promise<QueryResult> {\n    if (!this.connected) {\n      throw new Error('Not connected to Neo4j');\n    }\n\n    logger.debug('Executing query:', query, params);\n    \n    // TODO: Implement actual query execution\n    return {\n      nodes: [],\n      relationships: [],\n      records: []\n    };\n  }\n\n  /**\n   * „Éé„Éº„Éâ„ÇíÂèñÂæó\n   */\n  async getNodes(label?: string): Promise<Neo4jNode[]> {\n    const query = label \n      ? `MATCH (n:${label}) RETURN n`\n      : 'MATCH (n) RETURN n';\n    \n    const result = await this.executeQuery(query);\n    return result.nodes;\n  }\n\n  /**\n   * „É™„É¨„Éº„Ç∑„Éß„É≥„Ç∑„ÉÉ„Éó„ÇíÂèñÂæó\n   */\n  async getRelationships(type?: string): Promise<Neo4jRelationship[]> {\n    const query = type\n      ? `MATCH ()-[r:${type}]->() RETURN r`\n      : 'MATCH ()-[r]->() RETURN r';\n    \n    const result = await this.executeQuery(query);\n    return result.relationships;\n  }\n\n  /**\n   * Êé•Á∂ö„ÇíÈñâ„Åò„Çã\n   */\n  async close(): Promise<void> {\n    logger.info('Closing Neo4j connection...');\n    // TODO: Implement actual connection close\n    this.connected = false;\n  }\n\n  /**\n   * Êé•Á∂öÁä∂ÊÖã„ÇíÁ¢∫Ë™ç\n   */\n  isConnected(): boolean {\n    return this.connected;\n  }\n\n  /**\n   * „Çπ„Ç≠„Éº„Éû„ÇíÂàÜÊûê\n   */\n  async analyzeSchema(): Promise<any> {\n    logger.info('Analyzing schema...');\n    // Mock implementation for now\n    return {\n      nodes: [\n        { label: 'Entity', count: 150, properties: ['id', 'name', 'type', 'created'] },\n        { label: 'Document', count: 85, properties: ['id', 'title', 'content', 'version'] },\n        { label: 'User', count: 25, properties: ['id', 'email', 'name', 'role'] }\n      ],\n      relationships: [\n        { type: 'CREATED_BY', count: 85, startLabel: 'Document', endLabel: 'User' },\n        { type: 'REFERENCES', count: 120, startLabel: 'Document', endLabel: 'Entity' },\n        { type: 'CONTAINS', count: 200, startLabel: 'Entity', endLabel: 'Entity' }\n      ]\n    };\n  }\n\n  /**\n   * „Éë„Çø„Éº„É≥„ÇíÂàÜÊûê\n   */\n  async analyzePatterns(options?: { limit?: number }): Promise<Pattern[]> {\n    const limit = options?.limit || 10;\n    logger.info(`Analyzing patterns... (limit: ${limit})`);\n    \n    // Mock implementation\n    return [\n      {\n        name: 'Hub Nodes',\n        pattern: 'Nodes with high connectivity (degree > 10)',\n        count: 12,\n        example: { label: 'Entity', name: 'MainProject', degree: 45 }\n      },\n      {\n        name: 'Isolated Nodes',\n        pattern: 'Nodes with no connections',\n        count: 3,\n        example: ['User', 'Document']\n      }\n    ];\n  }\n\n  /**\n   * „É°„Éà„É™„ÇØ„Çπ„ÇíË®àÁÆó\n   */\n  async calculateMetrics(options?: { type?: string; limit?: number }): Promise<Metric[]> {\n    const type = options?.type || 'degree';\n    const limit = options?.limit || 20;\n    logger.info(`Calculating ${type} metrics...`);\n    \n    // Mock implementation\n    return [\n      { node: 'MainProject', score: 45, details: 'Entity' },\n      { node: 'UserAdmin', score: 32, details: 'User' },\n      { node: 'CoreDocument', score: 28, details: 'Document' }\n    ].slice(0, limit);\n  }\n\n  /**\n   * „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÇíÊ§úÂá∫\n   */\n  async detectCommunities(options?: { algorithm?: string }): Promise<Community[]> {\n    const algorithm = options?.algorithm || 'louvain';\n    logger.info(`Detecting communities using ${algorithm}...`);\n    \n    // Mock implementation\n    return [\n      {\n        id: 1,\n        size: 15,\n        keyMembers: ['MainProject', 'CoreDocument', 'Feature1', 'Feature2'],\n        density: 0.75,\n        centralNode: 'MainProject'\n      },\n      {\n        id: 2,\n        size: 8,\n        keyMembers: ['UserAdmin', 'User1', 'User2'],\n        density: 0.65\n      }\n    ];\n  }\n\n  /**\n   * „ÇØ„Ç®„É™„ÇíÂÆüË°åÔºà‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÔºâ\n   */\n  async runQuery(query: string, params?: Record<string, any>): Promise<any[]> {\n    logger.debug('Running query:', query, params);\n    \n    // Mock implementation - return sample data based on query patterns\n    if (query.includes('MATCH (n)')) {\n      return [\n        { label: 'Entity', count: 150 },\n        { label: 'Document', count: 85 },\n        { label: 'User', count: 25 }\n      ];\n    }\n    \n    return [];\n  }\n\n  /**\n   * „É¨„Ç≥„É°„É≥„Éá„Éº„Ç∑„Éß„É≥„ÇíÁîüÊàê\n   */\n  async generateRecommendations(options?: {\n    type?: string;\n    startNode?: string;\n    limit?: number;\n  }): Promise<Recommendation[]> {\n    const type = options?.type || 'similar';\n    const limit = options?.limit || 10;\n    logger.info(`Generating ${type} recommendations...`);\n    \n    // Mock implementation\n    return [\n      {\n        node: 'RelatedProject',\n        score: 0.85,\n        reason: 'Common connections: 8',\n        connections: ['Feature1', 'Feature2', 'UserAdmin']\n      },\n      {\n        node: 'SimilarDocument',\n        score: 0.72,\n        reason: 'Distance: 2, Paths: 5'\n      }\n    ].slice(0, limit);\n  }\n\n  /**\n   * „Éë„Çπ„ÇíÊ§úÁ¥¢\n   */\n  async findPaths(options: {\n    from: string;\n    to: string;\n    type?: string;\n    maxLength?: number;\n  }): Promise<Path[]> {\n    const { from, to, type = 'shortest' } = options;\n    logger.info(`Finding ${type} paths from ${from} to ${to}...`);\n    \n    // Mock implementation\n    return [\n      {\n        nodes: [from, 'IntermediateNode', to],\n        length: 2,\n        cost: type === 'weighted' ? 15 : undefined\n      }\n    ];\n  }\n}\n\n// Mock implementation for OSS version\nexport class MockNeo4jService extends Neo4jService {\n  async connect() {\n    console.warn('Neo4j is not configured. Using mock implementation.');\n    // Use the parent's connected property instead of trying to assign to isConnected method\n  }\n  \n  async analyzeSchema() {\n    return { nodes: [], relationships: [], constraints: [], indexes: [] };\n  }\n  \n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async runQuery(_query: string, _params?: Record<string, any>): Promise<any[]> {\n    // Return empty array to match the expected return type\n    return [];\n  }\n}","import { Command } from 'commander';\nimport React from 'react';\nimport { render, Text, Box } from 'ink';\n\ninterface TestComponentProps {}\n\nconst TestComponent: React.FC<TestComponentProps> = () => {\n  return React.createElement(Box, { flexDirection: 'column' },\n    React.createElement(Text, { color: 'cyan', bold: true }, 'üéâ MARIA CODE CLI Test'),\n    React.createElement(Text, { color: 'green' }, '‚úÖ CLI is working correctly!'),\n    React.createElement(Text, { color: 'gray' }, 'Version: 1.0.0'),\n    React.createElement(Text, { color: 'yellow' }, 'Press Ctrl+C to exit')\n  );\n};\n\nexport default function simpleTestCommand(program: Command) {\n  program\n    .command('simple-test')\n    .description('Simple CLI test without complex dependencies')\n    .action(async () => {\n      console.log('Starting MARIA CODE CLI test...');\n      \n      const { waitUntilExit } = render(React.createElement(TestComponent));\n      \n      setTimeout(() => {\n        console.log('Test completed successfully!');\n        process.exit(0);\n      }, 3000);\n      \n      await waitUntilExit();\n    });\n}","import { Command } from 'commander';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { logger, LogLevel } from '../utils/logger.js';\nimport { AIRouter, AIRequest } from '../services/ai-router.js';\nimport { TaskType, Message } from '../interfaces/ai-provider.js';\n\ninterface CodeOptions {\n  output?: string;\n  language?: string;\n  framework?: string;\n  style?: 'concise' | 'verbose' | 'documented';\n  tests?: boolean;\n  comments?: boolean;\n  provider?: string;\n  model?: string;\n  local?: boolean;\n  overwrite?: boolean;\n  verbose?: boolean;\n}\n\nexport default function codeCommand(program: Command) {\n  program\n    .command('code')\n    .description('AI-powered code generation with intelligent model selection')\n    .argument('<prompt>', 'Code generation prompt describing what you want to build')\n    .option('-o, --output <file>', 'Output file path (optional, will print to console if not specified)')\n    .option('-l, --language <lang>', 'Target programming language (auto-detected if not specified)')\n    .option('-f, --framework <framework>', 'Framework or library to use (e.g., react, express, fastapi)')\n    .option('-s, --style <style>', 'Code style: concise, verbose, or documented', 'documented')\n    .option('--tests', 'Include unit tests', false)\n    .option('--comments', 'Include detailed comments', true)\n    .option('--provider <name>', 'Specific AI provider to use (openai, anthropic, google, lmstudio, etc.)')\n    .option('--model <model>', 'Specific model to use')\n    .option('--local', 'Prefer local models', false)\n    .option('--overwrite', 'Overwrite existing file without confirmation', false)\n    .option('-v, --verbose', 'Show detailed output', false)\n    .action(async (prompt: string, options: CodeOptions) => {\n      // Set log level\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      logger.task('Code Generation', 'start', `Generating code: \"${prompt}\"`);\n\n      try {\n        // Validate prompt\n        if (!prompt || prompt.trim().length === 0) {\n          logger.error('Code generation prompt cannot be empty');\n          process.exit(1);\n        }\n\n        // Initialize AI Router (this would normally be done elsewhere)\n        const router = await initializeAIRouter();\n\n        // Detect programming language if not specified\n        const language = options.language || detectLanguage(prompt, options.framework);\n        logger.debug(`Detected/specified language: ${language}`);\n\n        // Prepare context information\n        const context = {\n          language,\n          framework: options.framework,\n          projectType: detectProjectType(process.cwd())\n        };\n\n        // Build system prompt for code generation\n        const systemPrompt = buildCodeGenerationPrompt(options, language, context);\n        \n        // Prepare messages\n        const messages: Message[] = [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: prompt }\n        ];\n\n        // Prepare AI request\n        const aiRequest: AIRequest = {\n          messages,\n          taskType: TaskType.CODE_GENERATION,\n          preferLocal: options.local,\n          preferredProvider: options.provider,\n          context,\n          options: {\n            temperature: 0.3, // Lower temperature for more deterministic code\n            maxTokens: options.style === 'concise' ? 2000 : 4000,\n            responseFormat: 'text'\n          }\n        };\n\n        logger.task('AI Processing', 'progress', 'Routing to optimal provider...');\n\n        // Generate code using AI Router\n        const response = await router.route(aiRequest);\n\n        logger.task('AI Processing', 'complete', `Used ${response.provider} (${response.model})`);\n\n        // Extract and clean the generated code\n        const generatedCode = extractCodeFromResponse(response.content, language);\n\n        // Display usage information\n        if (response.usage) {\n          logger.debug(`Tokens: ${response.usage.totalTokens} (${response.usage.promptTokens} + ${response.usage.completionTokens})`);\n          if (response.usage.cost) {\n            logger.debug(`Estimated cost: $${response.usage.cost.toFixed(4)}`);\n          }\n        }\n\n        // Handle output\n        if (options.output) {\n          await handleFileOutput(options.output, generatedCode, options.overwrite ?? false, language);\n        } else {\n          // Print to console with syntax highlighting\n          console.log('\\n' + '‚ïê'.repeat(60));\n          console.log(`Generated ${language.toUpperCase()} Code:`);\n          console.log('‚ïê'.repeat(60));\n          console.log(generatedCode);\n          console.log('‚ïê'.repeat(60) + '\\n');\n        }\n\n        logger.task('Code Generation', 'complete', \n          options.output \n            ? `Code saved to ${options.output}` \n            : 'Code generated successfully'\n        );\n\n      } catch (error) {\n        logger.task('Code Generation', 'error', error instanceof Error ? error.message : 'Unknown error');\n        logger.error('Code generation failed:', error);\n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Initialize AI Router with available providers\n */\nasync function initializeAIRouter(): Promise<AIRouter> {\n  // This would normally be imported from a service factory\n  // For now, we'll create a minimal implementation\n  const providers = new Map();\n  \n  // In a real implementation, this would initialize actual providers\n  // providers.set('openai', new OpenAIProvider());\n  // providers.set('anthropic', new AnthropicProvider());\n  // etc.\n  \n  const config = {\n    providers,\n    fallbackEnabled: true,\n    autoSelectModel: true,\n    costOptimization: false,\n    privacyFirst: false\n  };\n\n  return new AIRouter(config);\n}\n\n/**\n * Detect programming language from prompt and framework\n */\nfunction detectLanguage(prompt: string, framework?: string): string {\n  const lowerPrompt = prompt.toLowerCase();\n  \n  // Framework-based detection\n  if (framework) {\n    const frameworkLanguages: Record<string, string> = {\n      'react': 'typescript',\n      'vue': 'typescript', \n      'angular': 'typescript',\n      'express': 'javascript',\n      'fastapi': 'python',\n      'django': 'python',\n      'flask': 'python',\n      'spring': 'java',\n      'rails': 'ruby',\n      'laravel': 'php',\n      'gin': 'go',\n      'actix': 'rust'\n    };\n    \n    if (frameworkLanguages[framework.toLowerCase()]) {\n      return frameworkLanguages[framework.toLowerCase()]!;\n    }\n  }\n  \n  // Keyword-based detection\n  if (lowerPrompt.includes('python') || lowerPrompt.includes('django') || lowerPrompt.includes('fastapi')) {\n    return 'python';\n  }\n  if (lowerPrompt.includes('javascript') || lowerPrompt.includes('node') || lowerPrompt.includes('js')) {\n    return 'javascript';\n  }\n  if (lowerPrompt.includes('typescript') || lowerPrompt.includes('ts') || lowerPrompt.includes('react')) {\n    return 'typescript';\n  }\n  if (lowerPrompt.includes('java') && !lowerPrompt.includes('javascript')) {\n    return 'java';\n  }\n  if (lowerPrompt.includes('go') || lowerPrompt.includes('golang')) {\n    return 'go';\n  }\n  if (lowerPrompt.includes('rust')) {\n    return 'rust';\n  }\n  if (lowerPrompt.includes('php')) {\n    return 'php';\n  }\n  if (lowerPrompt.includes('ruby')) {\n    return 'ruby';\n  }\n  if (lowerPrompt.includes('c++') || lowerPrompt.includes('cpp')) {\n    return 'cpp';\n  }\n  if (lowerPrompt.includes('c#') || lowerPrompt.includes('csharp')) {\n    return 'csharp';\n  }\n  \n  // Default to TypeScript as it's popular for modern development\n  return 'typescript';\n}\n\n/**\n * Detect project type from current directory\n */\nfunction detectProjectType(cwd: string): string {\n  try {\n    // Check for package.json (Node.js/JavaScript/TypeScript project)\n    if (require('fs').existsSync(path.join(cwd, 'package.json'))) {\n      return 'nodejs';\n    }\n    \n    // Check for requirements.txt or pyproject.toml (Python project)\n    if (require('fs').existsSync(path.join(cwd, 'requirements.txt')) || \n        require('fs').existsSync(path.join(cwd, 'pyproject.toml'))) {\n      return 'python';\n    }\n    \n    // Check for Cargo.toml (Rust project)\n    if (require('fs').existsSync(path.join(cwd, 'Cargo.toml'))) {\n      return 'rust';\n    }\n    \n    // Check for go.mod (Go project)\n    if (require('fs').existsSync(path.join(cwd, 'go.mod'))) {\n      return 'go';\n    }\n    \n    // Check for pom.xml or build.gradle (Java project)\n    if (require('fs').existsSync(path.join(cwd, 'pom.xml')) || \n        require('fs').existsSync(path.join(cwd, 'build.gradle'))) {\n      return 'java';\n    }\n    \n    return 'general';\n  } catch {\n    return 'general';\n  }\n}\n\n/**\n * Build system prompt for code generation\n */\nfunction buildCodeGenerationPrompt(\n  options: CodeOptions, \n  language: string, \n  context: { language: string; framework?: string; projectType: string }\n): string {\n  const parts = [\n    `You are an expert ${language.toUpperCase()} developer. Generate high-quality, production-ready code.`,\n    '',\n    'Requirements:',\n    `- Language: ${language}`,\n  ];\n\n  if (context.framework) {\n    parts.push(`- Framework: ${context.framework}`);\n  }\n\n  if (context.projectType !== 'general') {\n    parts.push(`- Project type: ${context.projectType}`);\n  }\n\n  parts.push(`- Code style: ${options.style}`);\n\n  if (options.comments) {\n    parts.push('- Include detailed comments and documentation');\n  }\n\n  if (options.tests) {\n    parts.push('- Include comprehensive unit tests');\n  }\n\n  parts.push(\n    '',\n    'Best practices to follow:',\n    '- Follow language-specific conventions and idioms',\n    '- Use meaningful variable and function names',\n    '- Handle errors appropriately',\n    '- Optimize for readability and maintainability',\n    '- Include type hints/annotations where applicable',\n    '- Follow security best practices',\n    '',\n    'Format your response with the code wrapped in appropriate code blocks with language specification.',\n    'If multiple files are needed, clearly separate them with file names as comments.'\n  );\n\n  return parts.join('\\n');\n}\n\n/**\n * Extract code from AI response\n */\nfunction extractCodeFromResponse(response: string, language: string): string {\n  // Try to extract code from markdown code blocks\n  const codeBlockRegex = new RegExp(`\\`\\`\\`${language}\\\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'gi');\n  const generalCodeBlockRegex = /```[\\w]*\\n([\\s\\S]*?)```/gi;\n  \n  let match = codeBlockRegex.exec(response);\n  if (match && match[1]) {\n    return match[1].trim();\n  }\n  \n  // Try general code blocks\n  match = generalCodeBlockRegex.exec(response);\n  if (match && match[1]) {\n    return match[1].trim();\n  }\n  \n  // If no code blocks found, return the whole response cleaned up\n  return response.trim();\n}\n\n/**\n * Handle file output with confirmation\n */\nasync function handleFileOutput(\n  outputPath: string, \n  code: string, \n  overwrite: boolean, \n  language: string\n): Promise<void> {\n  try {\n    // Add file extension if missing\n    const ext = path.extname(outputPath);\n    if (!ext) {\n      const extensions: Record<string, string> = {\n        'javascript': '.js',\n        'typescript': '.ts',\n        'python': '.py',\n        'java': '.java',\n        'go': '.go',\n        'rust': '.rs',\n        'php': '.php',\n        'ruby': '.rb',\n        'cpp': '.cpp',\n        'csharp': '.cs'\n      };\n      \n      const defaultExt = extensions[language] || '.txt';\n      outputPath += defaultExt;\n    }\n\n    // Check if file exists\n    const fileExists = await fs.access(outputPath).then(() => true).catch(() => false);\n    \n    if (fileExists && !overwrite) {\n      logger.warn(`File ${outputPath} already exists. Use --overwrite to replace it.`);\n      return;\n    }\n\n    // Create directory if it doesn't exist\n    const dir = path.dirname(outputPath);\n    await fs.mkdir(dir, { recursive: true });\n\n    // Write file\n    await fs.writeFile(outputPath, code, 'utf8');\n    logger.success(`Code saved to ${outputPath}`);\n    \n  } catch (error) {\n    throw new Error(`Failed to write file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","/**\n * MARIA CODE Unified AI Provider Interface\n * Supports both cloud APIs and local models\n */\n\n// Core message types\nexport interface Message {\n  role: 'system' | 'user' | 'assistant' | 'function';\n  content: string | MessageContent[];\n  name?: string;\n  function_call?: FunctionCall;\n}\n\nexport interface MessageContent {\n  type: 'text' | 'image_url' | 'image';\n  text?: string;\n  image_url?: {\n    url: string; // Can be URL or base64 data:image/...\n    detail?: 'low' | 'high' | 'auto';\n  };\n  image?: Buffer; // For binary image data\n}\n\nexport interface FunctionCall {\n  name: string;\n  arguments: string; // JSON string\n}\n\n// Provider capabilities\nexport interface AICapabilities {\n  chat: boolean;\n  vision: boolean;\n  code: boolean;\n  streaming: boolean;\n  embeddings: boolean;\n  functionCalling: boolean;\n  maxTokens: number;\n  contextWindow: number;\n  multiModal: boolean;\n  languages: string[]; // Supported languages\n}\n\n// Model information\nexport interface ModelInfo {\n  id: string;\n  name: string;\n  provider: string;\n  version?: string;\n  contextLength: number;\n  tokenLimit: number;\n  capabilities: string[];\n  performance?: {\n    tokensPerSecond?: number;\n    latencyMs?: number;\n    throughput?: number;\n  };\n  requirements?: {\n    vram?: number; // in GB\n    ram?: number; // in GB\n    diskSpace?: number; // in GB\n  };\n  pricing?: {\n    inputTokens: number; // per 1K tokens\n    outputTokens: number; // per 1K tokens\n    imageAnalysis?: number; // per image\n  };\n}\n\n// Chat options\nexport interface ChatOptions {\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  topK?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n  stopSequences?: string[];\n  systemPrompt?: string;\n  responseFormat?: 'text' | 'json' | 'markdown';\n  seed?: number;\n  tools?: Tool[];\n}\n\n// Stream options\nexport interface StreamOptions extends ChatOptions {\n  onToken?: (token: string) => void;\n  onProgress?: (progress: number) => void;\n  onError?: (error: Error) => void;\n}\n\n// Tool/Function definitions\nexport interface Tool {\n  type: 'function';\n  function: {\n    name: string;\n    description: string;\n    parameters: Record<string, any>; // JSON Schema\n  };\n}\n\n// Vision-specific options\nexport interface VisionOptions {\n  maxImageSize?: number; // Max dimension in pixels\n  imageQuality?: 'low' | 'medium' | 'high';\n  analysisDepth?: 'basic' | 'detailed' | 'comprehensive';\n  outputFormat?: 'text' | 'json' | 'structured';\n}\n\n// Code generation options\nexport interface CodeOptions {\n  language?: string;\n  framework?: string;\n  style?: 'concise' | 'verbose' | 'documented';\n  includeTests?: boolean;\n  includeComments?: boolean;\n  followConventions?: boolean;\n}\n\n// Embedding options\nexport interface EmbeddingOptions {\n  model?: string;\n  dimensions?: number;\n  normalize?: boolean;\n}\n\n// Response types\nexport interface AIResponse {\n  content: string;\n  model: string;\n  provider: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n    cost?: number;\n  };\n  metadata?: {\n    finishReason?: 'stop' | 'length' | 'function_call' | 'error';\n    processingTime?: number;\n    cacheHit?: boolean;\n  };\n  functionCalls?: FunctionCall[];\n}\n\nexport interface VisionResponse extends AIResponse {\n  detectedObjects?: Array<{\n    label: string;\n    confidence: number;\n    boundingBox?: [number, number, number, number];\n  }>;\n  imageDescription?: string;\n  extractedText?: string;\n}\n\nexport interface CodeResponse extends AIResponse {\n  code: string;\n  language: string;\n  explanation?: string;\n  dependencies?: string[];\n  testCode?: string;\n}\n\nexport interface EmbeddingResponse {\n  embedding: number[];\n  model: string;\n  dimensions: number;\n  usage?: {\n    totalTokens: number;\n  };\n}\n\n// Main AI Provider Interface\nexport interface AIProvider {\n  // Provider metadata\n  readonly name: string;\n  readonly type: 'cloud' | 'local';\n  readonly version: string;\n  readonly capabilities: AICapabilities;\n  \n  // Initialization\n  initialize(config?: ProviderConfig): Promise<void>;\n  validateConnection(): Promise<boolean>;\n  \n  // Core chat functionality\n  chat(messages: Message[], options?: ChatOptions): Promise<AIResponse>;\n  stream(messages: Message[], options?: StreamOptions): AsyncGenerator<string, void, void>;\n  \n  // Specialized features (optional)\n  vision?(image: Buffer | string, prompt: string, options?: VisionOptions): Promise<VisionResponse>;\n  generateCode?(prompt: string, options?: CodeOptions): Promise<CodeResponse>;\n  embeddings?(text: string | string[], options?: EmbeddingOptions): Promise<EmbeddingResponse | EmbeddingResponse[]>;\n  \n  // Model management\n  listModels(): Promise<ModelInfo[]>;\n  getModelInfo(modelId?: string): Promise<ModelInfo>;\n  loadModel?(modelId: string): Promise<void>;\n  unloadModel?(modelId: string): Promise<void>;\n  \n  // Cost and usage\n  estimateCost?(tokens: number, operation?: 'input' | 'output'): number;\n  getUsage?(): Promise<UsageStats>;\n  \n  // Cleanup\n  dispose(): Promise<void>;\n}\n\n// Provider configuration\nexport interface ProviderConfig {\n  apiKey?: string;\n  apiBase?: string;\n  organization?: string;\n  defaultModel?: string;\n  timeout?: number;\n  maxRetries?: number;\n  proxy?: {\n    host: string;\n    port: number;\n    auth?: {\n      username: string;\n      password: string;\n    };\n  };\n  customHeaders?: Record<string, string>;\n  // Local model specific\n  modelPath?: string;\n  gpuLayers?: number;\n  contextLength?: number;\n  batchSize?: number;\n}\n\n// Usage statistics\nexport interface UsageStats {\n  totalRequests: number;\n  totalTokens: number;\n  totalCost?: number;\n  averageLatency: number;\n  successRate: number;\n  periodStart: Date;\n  periodEnd: Date;\n  breakdown?: {\n    byModel?: Record<string, number>;\n    byOperation?: Record<string, number>;\n  };\n}\n\n// Provider factory\nexport interface AIProviderFactory {\n  create(type: string, config?: ProviderConfig): AIProvider;\n  register(type: string, providerClass: new (config?: ProviderConfig) => AIProvider): void;\n  getAvailable(): string[];\n  getRecommended(task: TaskType): string;\n}\n\n// Task types for routing\nexport enum TaskType {\n  CHAT = 'chat',\n  CODE_GENERATION = 'code_generation',\n  CODE_REVIEW = 'code_review',\n  VISION_ANALYSIS = 'vision_analysis',\n  TRANSLATION = 'translation',\n  SUMMARIZATION = 'summarization',\n  QUESTION_ANSWERING = 'question_answering',\n  CREATIVE_WRITING = 'creative_writing',\n  DATA_EXTRACTION = 'data_extraction',\n  EMBEDDING = 'embedding'\n}\n\n// Error types\nexport class AIProviderError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public provider?: string,\n    public retryable: boolean = false\n  ) {\n    super(message);\n    this.name = 'AIProviderError';\n  }\n}\n\nexport class ModelNotFoundError extends AIProviderError {\n  constructor(modelId: string, provider?: string) {\n    super(`Model ${modelId} not found`, 'MODEL_NOT_FOUND', provider, false);\n  }\n}\n\nexport class RateLimitError extends AIProviderError {\n  constructor(provider: string, retryAfter?: number) {\n    super(\n      `Rate limit exceeded${retryAfter ? `, retry after ${retryAfter}s` : ''}`,\n      'RATE_LIMIT',\n      provider,\n      true\n    );\n  }\n}\n\nexport class AuthenticationError extends AIProviderError {\n  constructor(provider: string) {\n    super('Authentication failed', 'AUTH_FAILED', provider, false);\n  }\n}\n\n// Helper type guards\nexport function hasVisionCapability(provider: AIProvider): provider is AIProvider & Required<Pick<AIProvider, 'vision'>> {\n  return provider.capabilities.vision && typeof provider.vision === 'function';\n}\n\nexport function hasCodeCapability(provider: AIProvider): provider is AIProvider & Required<Pick<AIProvider, 'generateCode'>> {\n  return provider.capabilities.code && typeof provider.generateCode === 'function';\n}\n\nexport function hasEmbeddingCapability(provider: AIProvider): provider is AIProvider & Required<Pick<AIProvider, 'embeddings'>> {\n  return provider.capabilities.embeddings && typeof provider.embeddings === 'function';\n}\n\n// Base implementation class (optional, for extending)\nexport abstract class BaseAIProvider implements AIProvider {\n  abstract readonly name: string;\n  abstract readonly type: 'cloud' | 'local';\n  abstract readonly version: string;\n  abstract readonly capabilities: AICapabilities;\n  \n  protected config: ProviderConfig;\n  protected initialized: boolean = false;\n  \n  constructor(config?: ProviderConfig) {\n    this.config = config || {};\n  }\n  \n  async initialize(config?: ProviderConfig): Promise<void> {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n    this.initialized = true;\n  }\n  \n  abstract validateConnection(): Promise<boolean>;\n  abstract chat(messages: Message[], options?: ChatOptions): Promise<AIResponse>;\n  abstract stream(messages: Message[], options?: StreamOptions): AsyncGenerator<string, void, void>;\n  abstract listModels(): Promise<ModelInfo[]>;\n  abstract getModelInfo(modelId?: string): Promise<ModelInfo>;\n  \n  async dispose(): Promise<void> {\n    this.initialized = false;\n  }\n  \n  protected ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new AIProviderError('Provider not initialized', 'NOT_INITIALIZED', this.name);\n    }\n  }\n}","/**\n * MARIA CODE AI Router\n * Intelligent model selection and routing\n */\n\nimport {\n  AIProvider,\n  AIResponse,\n  Message,\n  ChatOptions,\n  VisionResponse,\n  TaskType,\n  AIProviderError,\n  hasVisionCapability,\n  hasCodeCapability,\n  ModelInfo\n} from '../interfaces/ai-provider';\n\n// Request types\nexport interface AIRequest {\n  messages: Message[];\n  taskType?: TaskType;\n  hasImage?: boolean;\n  imageData?: Buffer | string;\n  preferLocal?: boolean;\n  preferredProvider?: string;\n  options?: ChatOptions;\n  context?: {\n    language?: string;\n    framework?: string;\n    projectType?: string;\n  };\n}\n\n// Router configuration\nexport interface RouterConfig {\n  providers: Map<string, AIProvider>;\n  priorityOrder?: string[];\n  fallbackEnabled?: boolean;\n  autoSelectModel?: boolean;\n  costOptimization?: boolean;\n  privacyFirst?: boolean;\n}\n\n// Model selection criteria\ninterface ModelScore {\n  provider: string;\n  model: string;\n  score: number;\n  reasons: string[];\n}\n\nexport class AIRouter {\n  private providers: Map<string, AIProvider>;\n  private config: RouterConfig;\n  private modelCache: Map<string, ModelInfo[]> = new Map();\n  private performanceMetrics: Map<string, PerformanceMetric> = new Map();\n\n  constructor(config: RouterConfig) {\n    this.providers = config.providers;\n    this.config = config;\n    this.initializeProviders();\n  }\n\n  private async initializeProviders(): Promise<void> {\n    for (const [name, provider] of this.providers) {\n      try {\n        await provider.initialize();\n        const models = await provider.listModels();\n        this.modelCache.set(name, models);\n      } catch (error) {\n        console.warn(`Failed to initialize provider ${name}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Route request to optimal provider\n   */\n  public async route(request: AIRequest): Promise<AIResponse> {\n    // Check for explicit provider preference\n    if (request.preferredProvider) {\n      return this.routeToProvider(request.preferredProvider, request);\n    }\n\n    // Handle vision tasks\n    if (request.hasImage) {\n      return this.routeToVisionProvider(request);\n    }\n\n    // Determine task type if not specified\n    const taskType = request.taskType || this.inferTaskType(request);\n\n    // Select optimal provider based on task\n    const selectedProvider = await this.selectOptimalProvider(request, taskType);\n    \n    // Execute with fallback support\n    return this.executeWithFallback(selectedProvider, request);\n  }\n\n  /**\n   * Route to vision-capable provider\n   */\n  private async routeToVisionProvider(request: AIRequest): Promise<VisionResponse> {\n    // Priority order for vision tasks\n    const visionPriority = this.config.privacyFirst \n      ? ['ollama', 'vllm', 'openai', 'google', 'anthropic']  // Local first\n      : ['openai', 'google', 'anthropic', 'ollama', 'vllm'];  // Cloud first\n\n    for (const providerName of visionPriority) {\n      const provider = this.providers.get(providerName);\n      \n      if (!provider || !hasVisionCapability(provider)) {\n        continue;\n      }\n\n      try {\n        if (await provider.validateConnection()) {\n          console.log(`Routing vision task to ${providerName}`);\n          \n          if (!request.imageData) {\n            throw new Error('Image data required for vision task');\n          }\n\n          return await provider.vision(\n            request.imageData,\n            request.messages[request.messages.length - 1]?.content as string,\n            { outputFormat: 'json' }\n          );\n        }\n      } catch (error) {\n        console.warn(`Vision provider ${providerName} failed:`, error);\n        continue;\n      }\n    }\n\n    throw new AIProviderError('No vision-capable provider available', 'NO_VISION_PROVIDER');\n  }\n\n  /**\n   * Select optimal provider for task\n   */\n  private async selectOptimalProvider(request: AIRequest, taskType: TaskType): Promise<string> {\n    const scores: ModelScore[] = [];\n\n    // Evaluate each provider\n    for (const [name, provider] of this.providers) {\n      try {\n        if (!await provider.validateConnection()) {\n          continue;\n        }\n\n        const score = await this.scoreProvider(name, provider, request, taskType);\n        scores.push(score);\n      } catch (error) {\n        console.warn(`Failed to score provider ${name}:`, error);\n      }\n    }\n\n    // Sort by score and select best\n    scores.sort((a, b) => b.score - a.score);\n    \n    if (scores.length === 0) {\n      throw new AIProviderError('No available providers', 'NO_PROVIDERS');\n    }\n\n    const selected = scores[0];\n    if (!selected) {\n      throw new Error('No suitable provider found');\n    }\n    console.log(`Selected ${selected.provider} (score: ${selected.score})`);\n    console.log(`Reasons: ${selected.reasons.join(', ')}`);\n\n    return selected.provider;\n  }\n\n  /**\n   * Score provider for task suitability\n   */\n  private async scoreProvider(\n    name: string,\n    provider: AIProvider,\n    request: AIRequest,\n    taskType: TaskType\n  ): Promise<ModelScore> {\n    let score = 50; // Base score\n    const reasons: string[] = [];\n    const models = this.modelCache.get(name) || [];\n\n    // Task-specific scoring\n    switch (taskType) {\n      case TaskType.CODE_GENERATION:\n      case TaskType.CODE_REVIEW:\n        if (name === 'lmstudio' && models.some(m => m.contextLength >= 32000)) {\n          score += 30;\n          reasons.push('Optimal for code tasks');\n        }\n        if (hasCodeCapability(provider)) {\n          score += 20;\n          reasons.push('Has code generation capability');\n        }\n        break;\n\n      case TaskType.VISION_ANALYSIS:\n        if (hasVisionCapability(provider)) {\n          score += 50;\n          reasons.push('Vision capable');\n          if (name === 'ollama') {\n            score += 10;\n            reasons.push('Optimized vision model');\n          }\n        }\n        break;\n\n      case TaskType.TRANSLATION:\n        if (name === 'lmstudio' && models.some(m => m.id.includes('qwen'))) {\n          score += 40;\n          reasons.push('Multilingual optimized');\n        }\n        break;\n\n      case TaskType.CREATIVE_WRITING:\n        if (provider.type === 'cloud') {\n          score += 20;\n          reasons.push('Cloud models better for creativity');\n        }\n        break;\n\n      default:\n        // General chat\n        if (request.preferLocal && provider.type === 'local') {\n          score += 30;\n          reasons.push('Local preference');\n        }\n    }\n\n    // Performance scoring\n    const metrics = this.performanceMetrics.get(name);\n    if (metrics) {\n      if (metrics.averageLatency < 1000) {\n        score += 15;\n        reasons.push('Low latency');\n      }\n      if (metrics.successRate > 0.95) {\n        score += 10;\n        reasons.push('High reliability');\n      }\n    }\n\n    // Privacy scoring\n    if (this.config.privacyFirst && provider.type === 'local') {\n      score += 25;\n      reasons.push('Privacy-first (local)');\n    }\n\n    // Cost scoring\n    if (this.config.costOptimization) {\n      if (provider.type === 'local') {\n        score += 20;\n        reasons.push('No API costs');\n      } else if (provider.estimateCost) {\n        const estimatedCost = await provider.estimateCost(1000);\n        if (estimatedCost < 0.01) {\n          score += 10;\n          reasons.push('Low cost');\n        }\n      }\n    }\n\n    // Context window requirements\n    const totalTokens = this.estimateTokenCount(request.messages);\n    const hasAdequateContext = models.some(m => m.contextLength >= totalTokens);\n    if (!hasAdequateContext) {\n      score -= 30;\n      reasons.push('Insufficient context window');\n    }\n\n    return {\n      provider: name,\n      model: models[0]?.id || 'unknown',\n      score,\n      reasons\n    };\n  }\n\n  /**\n   * Execute with fallback support\n   */\n  private async executeWithFallback(providerName: string, request: AIRequest): Promise<AIResponse> {\n    const primaryProvider = this.providers.get(providerName);\n    \n    if (!primaryProvider) {\n      throw new AIProviderError(`Provider ${providerName} not found`, 'PROVIDER_NOT_FOUND');\n    }\n\n    try {\n      // Track performance\n      const startTime = Date.now();\n      \n      const response = await primaryProvider.chat(request.messages, request.options);\n      \n      // Update metrics\n      this.updateMetrics(providerName, Date.now() - startTime, true);\n      \n      return response;\n    } catch (error) {\n      console.error(`Primary provider ${providerName} failed:`, error);\n      \n      // Update metrics\n      this.updateMetrics(providerName, 0, false);\n      \n      // Try fallback if enabled\n      if (this.config.fallbackEnabled) {\n        return this.fallbackToNextProvider(providerName, request);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Fallback to next available provider\n   */\n  private async fallbackToNextProvider(failedProvider: string, request: AIRequest): Promise<AIResponse> {\n    const priorityOrder = this.config.priorityOrder || Array.from(this.providers.keys());\n    const currentIndex = priorityOrder.indexOf(failedProvider);\n    \n    for (let i = currentIndex + 1; i < priorityOrder.length; i++) {\n      const nextProvider = priorityOrder[i];\n      if (!nextProvider) continue;\n      const provider = this.providers.get(nextProvider);\n      \n      if (!provider) continue;\n      \n      try {\n        if (await provider.validateConnection()) {\n          console.log(`Falling back to ${nextProvider}`);\n          return await provider.chat(request.messages, request.options);\n        }\n      } catch (error) {\n        console.warn(`Fallback provider ${nextProvider} failed:`, error);\n        continue;\n      }\n    }\n    \n    throw new AIProviderError('All providers failed', 'ALL_PROVIDERS_FAILED', undefined, true);\n  }\n\n  /**\n   * Route to specific provider\n   */\n  private async routeToProvider(providerName: string, request: AIRequest): Promise<AIResponse> {\n    const provider = this.providers.get(providerName);\n    \n    if (!provider) {\n      throw new AIProviderError(`Provider ${providerName} not found`, 'PROVIDER_NOT_FOUND');\n    }\n    \n    if (!await provider.validateConnection()) {\n      throw new AIProviderError(`Provider ${providerName} not available`, 'PROVIDER_UNAVAILABLE');\n    }\n    \n    return provider.chat(request.messages, request.options);\n  }\n\n  /**\n   * Infer task type from request\n   */\n  private inferTaskType(request: AIRequest): TaskType {\n    const lastMessage = request.messages[request.messages.length - 1]?.content;\n    \n    if (typeof lastMessage !== 'string') {\n      return TaskType.CHAT;\n    }\n    \n    const lowerContent = lastMessage.toLowerCase();\n    \n    // Code-related keywords\n    if (lowerContent.includes('code') || \n        lowerContent.includes('function') || \n        lowerContent.includes('implement') ||\n        lowerContent.includes('debug') ||\n        lowerContent.includes('fix')) {\n      return TaskType.CODE_GENERATION;\n    }\n    \n    // Review keywords\n    if (lowerContent.includes('review') || \n        lowerContent.includes('check') || \n        lowerContent.includes('analyze')) {\n      return TaskType.CODE_REVIEW;\n    }\n    \n    // Translation keywords\n    if (lowerContent.includes('translate') || \n        lowerContent.includes('translation')) {\n      return TaskType.TRANSLATION;\n    }\n    \n    // Summary keywords\n    if (lowerContent.includes('summarize') || \n        lowerContent.includes('summary')) {\n      return TaskType.SUMMARIZATION;\n    }\n    \n    // Creative writing keywords\n    if (lowerContent.includes('write') || \n        lowerContent.includes('story') || \n        lowerContent.includes('creative')) {\n      return TaskType.CREATIVE_WRITING;\n    }\n    \n    return TaskType.CHAT;\n  }\n\n  /**\n   * Estimate token count for messages\n   */\n  private estimateTokenCount(messages: Message[]): number {\n    let totalChars = 0;\n    \n    for (const message of messages) {\n      if (typeof message.content === 'string') {\n        totalChars += message.content.length;\n      } else if (Array.isArray(message.content)) {\n        for (const content of message.content) {\n          if (content.type === 'text' && content.text) {\n            totalChars += content.text.length;\n          }\n        }\n      }\n    }\n    \n    // Rough estimation: 1 token ‚âà 4 characters\n    return Math.ceil(totalChars / 4);\n  }\n\n  /**\n   * Update performance metrics\n   */\n  private updateMetrics(provider: string, latency: number, success: boolean): void {\n    let metrics = this.performanceMetrics.get(provider);\n    \n    if (!metrics) {\n      metrics = {\n        totalRequests: 0,\n        successfulRequests: 0,\n        totalLatency: 0,\n        averageLatency: 0,\n        successRate: 0\n      };\n    }\n    \n    metrics.totalRequests++;\n    if (success) {\n      metrics.successfulRequests++;\n      metrics.totalLatency += latency;\n    }\n    \n    metrics.averageLatency = metrics.totalLatency / Math.max(1, metrics.successfulRequests);\n    metrics.successRate = metrics.successfulRequests / metrics.totalRequests;\n    \n    this.performanceMetrics.set(provider, metrics);\n  }\n\n  /**\n   * Get router statistics\n   */\n  public getStatistics(): Record<string, any> {\n    const stats: Record<string, any> = {\n      providers: {},\n      totalRequests: 0,\n      averageLatency: 0\n    };\n    \n    for (const [name, metrics] of this.performanceMetrics) {\n      stats.providers[name] = {\n        requests: metrics.totalRequests,\n        successRate: `${(metrics.successRate * 100).toFixed(1)}%`,\n        avgLatency: `${metrics.averageLatency.toFixed(0)}ms`\n      };\n      stats.totalRequests += metrics.totalRequests;\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Clear performance metrics\n   */\n  public clearMetrics(): void {\n    this.performanceMetrics.clear();\n  }\n\n  /**\n   * Refresh provider connections\n   */\n  public async refreshProviders(): Promise<void> {\n    await this.initializeProviders();\n  }\n}\n\n// Performance metric interface\ninterface PerformanceMetric {\n  totalRequests: number;\n  successfulRequests: number;\n  totalLatency: number;\n  averageLatency: number;\n  successRate: number;\n}","import { Command } from 'commander';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { logger, LogLevel } from '../utils/logger.js';\nimport { AIRouter, AIRequest } from '../services/ai-router.js';\nimport { TaskType, Message } from '../interfaces/ai-provider.js';\n\ninterface VisionOptions {\n  output?: string;\n  format?: 'text' | 'json' | 'markdown';\n  detail?: 'low' | 'high' | 'auto';\n  provider?: string;\n  model?: string;\n  local?: boolean;\n  extract?: 'objects' | 'text' | 'all';\n  verbose?: boolean;\n}\n\nexport default function visionCommand(program: Command) {\n  program\n    .command('vision')\n    .description('AI-powered image analysis using vision-capable providers')\n    .argument('<image>', 'Path to image file or URL')\n    .argument('[prompt]', 'Analysis prompt (optional, defaults to general description)')\n    .option('-o, --output <file>', 'Output analysis to file (JSON format)')\n    .option('-f, --format <format>', 'Output format: text, json, or markdown', 'text')\n    .option('-d, --detail <level>', 'Analysis detail level: low, high, or auto', 'auto')\n    .option('--provider <name>', 'Specific AI provider to use (openai, google, anthropic, ollama, etc.)')\n    .option('--model <model>', 'Specific model to use')\n    .option('--local', 'Prefer local models', false)\n    .option('--extract <type>', 'What to extract: objects, text, or all', 'all')\n    .option('-v, --verbose', 'Show detailed output', false)\n    .action(async (imagePath: string, prompt: string = '', options: VisionOptions) => {\n      // Set log level\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      logger.task('Vision Analysis', 'start', `Analyzing image: ${imagePath}`);\n\n      try {\n        // Validate and load image\n        const imageData = await loadImage(imagePath);\n        logger.debug(`Image loaded: ${imageData.length} bytes`);\n\n        // Initialize AI Router\n        const router = await initializeAIRouter();\n\n        // Build analysis prompt\n        const analysisPrompt = buildVisionPrompt(prompt, options);\n        \n        // Prepare messages\n        const messages: Message[] = [\n          { \n            role: 'system', \n            content: 'You are an expert computer vision analyst. Provide detailed, accurate analysis of images.' \n          },\n          { \n            role: 'user', \n            content: analysisPrompt \n          }\n        ];\n\n        // Prepare AI request\n        const aiRequest: AIRequest = {\n          messages,\n          taskType: TaskType.VISION_ANALYSIS,\n          hasImage: true,\n          imageData,\n          preferLocal: options.local,\n          preferredProvider: options.provider,\n          options: {\n            temperature: 0.1, // Low temperature for factual analysis\n            maxTokens: 2000,\n            responseFormat: options.format as 'text' | 'json'\n          }\n        };\n\n        logger.task('AI Processing', 'progress', 'Routing to vision-capable provider...');\n\n        // Analyze image using AI Router\n        const response = await router.route(aiRequest);\n\n        logger.task('AI Processing', 'complete', `Used ${response.provider} (${response.model || 'default'})`);\n\n        // Process and format the response\n        const analysis = await processVisionResponse(response.content, options);\n\n        // Display usage information\n        if (response.usage) {\n          logger.debug(`Tokens: ${response.usage.totalTokens} (${response.usage.promptTokens} + ${response.usage.completionTokens})`);\n          if (response.usage.cost) {\n            logger.debug(`Estimated cost: $${response.usage.cost.toFixed(4)}`);\n          }\n        }\n\n        // Handle output\n        if (options.output) {\n          await handleAnalysisOutput(options.output, analysis, options.format);\n        } else {\n          // Print to console\n          displayAnalysis(analysis, options.format ?? 'markdown', imagePath);\n        }\n\n        logger.task('Vision Analysis', 'complete', \n          options.output \n            ? `Analysis saved to ${options.output}` \n            : 'Image analysis completed'\n        );\n\n      } catch (error) {\n        logger.task('Vision Analysis', 'error', error instanceof Error ? error.message : 'Unknown error');\n        logger.error('Vision analysis failed:', error);\n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Load image from file path or URL\n */\nasync function loadImage(imagePath: string): Promise<Buffer> {\n  try {\n    // Check if it's a URL\n    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n      const response = await fetch(imagePath);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n      }\n      const arrayBuffer = await response.arrayBuffer();\n      return Buffer.from(arrayBuffer);\n    }\n\n    // Check if file exists\n    const fullPath = path.resolve(imagePath);\n    await fs.access(fullPath);\n\n    // Check file extension\n    const ext = path.extname(fullPath).toLowerCase();\n    const supportedFormats = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];\n    \n    if (!supportedFormats.includes(ext)) {\n      logger.warn(`File extension ${ext} may not be supported. Supported: ${supportedFormats.join(', ')}`);\n    }\n\n    // Load file\n    return await fs.readFile(fullPath);\n\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message.includes('ENOENT')) {\n        throw new Error(`Image file not found: ${imagePath}`);\n      }\n      throw error;\n    }\n    throw new Error(`Failed to load image: ${imagePath}`);\n  }\n}\n\n/**\n * Build vision analysis prompt based on options\n */\nfunction buildVisionPrompt(userPrompt: string, options: VisionOptions): string {\n  const parts = [];\n\n  if (userPrompt.trim()) {\n    parts.push(userPrompt);\n  } else {\n    parts.push('Please analyze this image in detail.');\n  }\n\n  // Add specific extraction instructions\n  switch (options.extract) {\n    case 'objects':\n      parts.push('\\nFocus specifically on identifying and describing all objects, people, animals, or items visible in the image. Include their positions, colors, and relationships.');\n      break;\n    case 'text':\n      parts.push('\\nFocus specifically on extracting and transcribing any text, signs, labels, or written content visible in the image.');\n      break;\n    case 'all':\n      parts.push('\\nProvide a comprehensive analysis including:');\n      parts.push('- Overall scene description');\n      parts.push('- All visible objects, people, and their attributes');\n      parts.push('- Any text or written content');\n      parts.push('- Colors, lighting, and composition');\n      parts.push('- Context and setting information');\n      break;\n  }\n\n  // Add format-specific instructions\n  if (options.format === 'json') {\n    parts.push('\\nStructure your response as valid JSON with appropriate fields for the analysis.');\n  } else if (options.format === 'markdown') {\n    parts.push('\\nFormat your response as clean Markdown with appropriate headers and structure.');\n  }\n\n  return parts.join('\\n');\n}\n\n/**\n * Process vision response based on format and options\n */\nasync function processVisionResponse(\n  response: string, \n  options: VisionOptions\n): Promise<any> {\n  if (options.format === 'json') {\n    try {\n      return JSON.parse(response);\n    } catch {\n      // If JSON parsing fails, wrap response in a simple structure\n      return {\n        analysis: response,\n        format: 'text',\n        error: 'Response was not valid JSON, wrapped as text'\n      };\n    }\n  }\n\n  return response;\n}\n\n/**\n * Display analysis in console\n */\nfunction displayAnalysis(analysis: any, format: string, imagePath: string): void {\n  console.log('\\n' + '‚ïê'.repeat(80));\n  console.log(`Vision Analysis: ${path.basename(imagePath)}`);\n  console.log('‚ïê'.repeat(80));\n\n  if (format === 'json') {\n    console.log(JSON.stringify(analysis, null, 2));\n  } else if (format === 'markdown') {\n    console.log(analysis);\n  } else {\n    // Text format\n    console.log(analysis);\n  }\n\n  console.log('‚ïê'.repeat(80) + '\\n');\n}\n\n/**\n * Handle file output for analysis\n */\nasync function handleAnalysisOutput(\n  outputPath: string, \n  analysis: any, \n  format?: string\n): Promise<void> {\n  try {\n    let content: string;\n    let finalPath = outputPath;\n\n    // Determine content and file extension\n    if (format === 'json') {\n      content = JSON.stringify(analysis, null, 2);\n      if (!path.extname(finalPath)) {\n        finalPath += '.json';\n      }\n    } else if (format === 'markdown') {\n      content = typeof analysis === 'string' ? analysis : JSON.stringify(analysis, null, 2);\n      if (!path.extname(finalPath)) {\n        finalPath += '.md';\n      }\n    } else {\n      content = typeof analysis === 'string' ? analysis : JSON.stringify(analysis, null, 2);\n      if (!path.extname(finalPath)) {\n        finalPath += '.txt';\n      }\n    }\n\n    // Create directory if needed\n    const dir = path.dirname(finalPath);\n    await fs.mkdir(dir, { recursive: true });\n\n    // Write file\n    await fs.writeFile(finalPath, content, 'utf8');\n    logger.success(`Analysis saved to ${finalPath}`);\n\n  } catch (error) {\n    throw new Error(`Failed to write analysis file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Initialize AI Router with available providers\n * This is a placeholder - in real implementation, this would be imported from a service\n */\nasync function initializeAIRouter(): Promise<AIRouter> {\n  const providers = new Map();\n  \n  // In a real implementation, this would initialize actual providers\n  // providers.set('openai', new OpenAIProvider());\n  // providers.set('google', new GoogleAIProvider());\n  // providers.set('anthropic', new AnthropicProvider());\n  // providers.set('ollama', new OllamaProvider());\n  \n  const config = {\n    providers,\n    fallbackEnabled: true,\n    autoSelectModel: true,\n    costOptimization: false,\n    privacyFirst: false\n  };\n\n  return new AIRouter(config);\n}","import { Command } from 'commander';\nimport fs from 'fs/promises';\nimport fsSync from 'fs';\nimport path from 'path';\nimport { globby } from 'globby';\nimport { execSync } from 'child_process';\nimport { logger, LogLevel } from '../utils/logger.js';\nimport { AIRouter, AIRequest } from '../services/ai-router.js';\nimport { TaskType, Message } from '../interfaces/ai-provider.js';\n\ninterface ReviewOptions {\n  output?: string;\n  format?: 'text' | 'json' | 'markdown' | 'github';\n  severity?: 'all' | 'error' | 'warning' | 'info';\n  language?: string;\n  framework?: string;\n  provider?: string;\n  model?: string;\n  local?: boolean;\n  context?: number;\n  diff?: boolean;\n  suggestions?: boolean;\n  verbose?: boolean;\n}\n\ninterface ReviewIssue {\n  file: string;\n  line?: number;\n  column?: number;\n  severity: 'error' | 'warning' | 'info';\n  category: string;\n  message: string;\n  suggestion?: string;\n  codeSnippet?: string;\n}\n\ninterface ReviewResult {\n  summary: {\n    totalFiles: number;\n    totalIssues: number;\n    errorCount: number;\n    warningCount: number;\n    infoCount: number;\n    overallRating: string;\n  };\n  issues: ReviewIssue[];\n  recommendations: string[];\n  metrics?: {\n    codeQuality: number;\n    maintainability: number;\n    security: number;\n    performance: number;\n  };\n}\n\nexport default function reviewCommand(program: Command) {\n  program\n    .command('review')\n    .description('AI-powered code review with intelligent analysis')\n    .argument('[files...]', 'Files or patterns to review (defaults to common code files)')\n    .option('-o, --output <file>', 'Output review results to file')\n    .option('-f, --format <format>', 'Output format: text, json, markdown, or github', 'text')\n    .option('-s, --severity <level>', 'Minimum severity level: all, error, warning, info', 'all')\n    .option('-l, --language <lang>', 'Programming language (auto-detected if not specified)')\n    .option('--framework <framework>', 'Framework context (react, express, django, etc.)')\n    .option('--provider <name>', 'Specific AI provider to use')\n    .option('--model <model>', 'Specific model to use')\n    .option('--local', 'Prefer local models', false)\n    .option('-c, --context <lines>', 'Context lines around issues', '3')\n    .option('--diff', 'Review only changed files (git diff)', false)\n    .option('--suggestions', 'Include fix suggestions', true)\n    .option('-v, --verbose', 'Show detailed output', false)\n    .action(async (files: string[], options: ReviewOptions) => {\n      // Set log level\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      logger.task('Code Review', 'start', 'Starting AI-powered code review');\n\n      try {\n        // Resolve files to review\n        const filesToReview = await resolveFilesToReview(files, options);\n        \n        if (filesToReview.length === 0) {\n          logger.warn('No files found to review');\n          return;\n        }\n\n        logger.debug(`Found ${filesToReview.length} files to review:`, filesToReview.map(f => path.relative(process.cwd(), f)));\n\n        // Initialize AI Router\n        const router = await initializeAIRouter();\n\n        // Review files\n        const reviewResults: ReviewResult = {\n          summary: {\n            totalFiles: filesToReview.length,\n            totalIssues: 0,\n            errorCount: 0,\n            warningCount: 0,\n            infoCount: 0,\n            overallRating: 'Unknown'\n          },\n          issues: [],\n          recommendations: []\n        };\n\n        for (let i = 0; i < filesToReview.length; i++) {\n          const filePath = filesToReview[i];\n          if (!filePath) continue;\n\n          logger.task('File Review', 'progress', `Reviewing ${path.relative(process.cwd(), filePath)} (${i + 1}/${filesToReview.length})`);\n\n          try {\n            const fileReview = await reviewFile(filePath, router, options);\n            \n            // Merge results\n            reviewResults.issues.push(...fileReview.issues);\n            reviewResults.recommendations.push(...fileReview.recommendations);\n\n          } catch (error) {\n            logger.error(`Failed to review ${filePath}:`, error);\n            reviewResults.issues.push({\n              file: filePath,\n              severity: 'error',\n              category: 'Review Error',\n              message: `Failed to review file: ${error instanceof Error ? error.message : 'Unknown error'}`\n            });\n          }\n        }\n\n        // Calculate summary statistics\n        calculateSummaryStats(reviewResults);\n\n        // Generate overall recommendations\n        if (reviewResults.issues.length > 0) {\n          const overallRecommendations = await generateOverallRecommendations(reviewResults, router, options);\n          reviewResults.recommendations.unshift(...overallRecommendations);\n        }\n\n        logger.task('Code Review', 'complete', `Review completed: ${reviewResults.summary.totalIssues} issues found`);\n\n        // Handle output\n        if (options.output) {\n          await handleReviewOutput(options.output, reviewResults, options);\n        } else {\n          displayReviewResults(reviewResults, options);\n        }\n\n      } catch (error) {\n        logger.task('Code Review', 'error', error instanceof Error ? error.message : 'Unknown error');\n        logger.error('Code review failed:', error);\n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Resolve files to review based on input and options\n */\nasync function resolveFilesToReview(files: string[], options: ReviewOptions): Promise<string[]> {\n  let filesToReview: string[] = [];\n\n  if (options.diff) {\n    // Get changed files from git diff\n    filesToReview = await getChangedFiles();\n  } else if (files.length > 0) {\n    // Use provided files/patterns\n    filesToReview = await globby(files, { \n      gitignore: true,\n      onlyFiles: true,\n      absolute: true\n    });\n  } else {\n    // Default patterns for common code files\n    const defaultPatterns = [\n      '**/*.{js,jsx,ts,tsx}',\n      '**/*.{py,java,go,rs,php,rb}',\n      '**/*.{c,cpp,h,hpp,cs}',\n      '!node_modules/**',\n      '!dist/**',\n      '!build/**',\n      '!coverage/**',\n      '!.git/**'\n    ];\n    \n    filesToReview = await globby(defaultPatterns, {\n      gitignore: true,\n      onlyFiles: true,\n      absolute: true,\n      cwd: process.cwd()\n    });\n  }\n\n  // Filter by language if specified\n  if (options.language) {\n    filesToReview = filesToReview.filter(file => {\n      const ext = path.extname(file).toLowerCase();\n      return getLanguageForExtension(ext) === options.language!.toLowerCase();\n    });\n  }\n\n  return filesToReview;\n}\n\n/**\n * Get changed files from git diff\n */\nasync function getChangedFiles(): Promise<string[]> {\n  try {\n    const output = execSync('git diff --name-only HEAD', { encoding: 'utf8' });\n    return output.trim().split('\\n')\n      .filter((file: string) => file.trim() !== '')\n      .map((file: string) => path.resolve(file));\n  } catch {\n    logger.warn('Could not get git diff, falling back to all files');\n    return [];\n  }\n}\n\n/**\n * Review a single file\n */\nasync function reviewFile(\n  filePath: string,\n  router: AIRouter,\n  options: ReviewOptions\n): Promise<{ issues: ReviewIssue[], recommendations: string[] }> {\n  \n  const fileContent = await fs.readFile(filePath, 'utf8');\n  const language = options.language || getLanguageForExtension(path.extname(filePath));\n  const relativePath = path.relative(process.cwd(), filePath);\n\n  // Build review prompt\n  const systemPrompt = buildReviewSystemPrompt(language, options);\n  const userPrompt = buildFileReviewPrompt(relativePath, fileContent, language, options);\n\n  const messages: Message[] = [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: userPrompt }\n  ];\n\n  const aiRequest: AIRequest = {\n    messages,\n    taskType: TaskType.CODE_REVIEW,\n    preferLocal: options.local,\n    preferredProvider: options.provider,\n    context: {\n      language,\n      framework: options.framework,\n      projectType: detectProjectType(process.cwd())\n    },\n    options: {\n      temperature: 0.2, // Low temperature for consistent analysis\n      maxTokens: 3000,\n      responseFormat: 'json'\n    }\n  };\n\n  const response = await router.route(aiRequest);\n  return parseReviewResponse(response.content, filePath, options);\n}\n\n/**\n * Build system prompt for code review\n */\nfunction buildReviewSystemPrompt(language: string, options: ReviewOptions): string {\n  const parts = [\n    `You are an expert ${language.toUpperCase()} code reviewer with deep knowledge of best practices, security, and performance optimization.`,\n    '',\n    'Your task is to perform a thorough code review focusing on:',\n    '- Code quality and style consistency',\n    '- Potential bugs and logic errors',\n    '- Security vulnerabilities',\n    '- Performance issues',\n    '- Maintainability and readability',\n    '- Best practices adherence',\n    '',\n    'Severity levels:',\n    '- error: Critical issues that must be fixed',\n    '- warning: Important issues that should be addressed',\n    '- info: Suggestions for improvement',\n    ''\n  ];\n\n  if (options.framework) {\n    parts.push(`Consider ${options.framework} framework-specific best practices.`);\n  }\n\n  if (options.suggestions) {\n    parts.push('Provide specific fix suggestions for each issue when possible.');\n  }\n\n  parts.push(\n    'Respond with valid JSON in this format:',\n    '{',\n    '  \"issues\": [',\n    '    {',\n    '      \"line\": number,',\n    '      \"severity\": \"error|warning|info\",',\n    '      \"category\": \"string\",',\n    '      \"message\": \"string\",',\n    '      \"suggestion\": \"string (optional)\"',\n    '    }',\n    '  ],',\n    '  \"recommendations\": [\"string\"],',\n    '  \"metrics\": {',\n    '    \"codeQuality\": 0-10,',\n    '    \"maintainability\": 0-10,',\n    '    \"security\": 0-10,',\n    '    \"performance\": 0-10',\n    '  }',\n    '}'\n  );\n\n  return parts.join('\\n');\n}\n\n/**\n * Build file-specific review prompt\n */\nfunction buildFileReviewPrompt(\n  filePath: string,\n  content: string,\n  language: string,\n  options: ReviewOptions\n): string {\n  const lines = content.split('\\n');\n  const numberedContent = lines\n    .map((line, index) => `${(index + 1).toString().padStart(4, ' ')}: ${line}`)\n    .join('\\n');\n\n  return [\n    `Please review this ${language} file: ${filePath}`,\n    '',\n    'File content with line numbers:',\n    '```',\n    numberedContent,\n    '```',\n    '',\n    `Focus on finding issues with severity level \"${options.severity}\" and above.`,\n    'Provide line numbers for all issues found.'\n  ].join('\\n');\n}\n\n/**\n * Parse AI review response\n */\nfunction parseReviewResponse(\n  response: string,\n  filePath: string,\n  options: ReviewOptions\n): { issues: ReviewIssue[], recommendations: string[] } {\n  try {\n    const parsed = JSON.parse(response);\n    \n    const issues: ReviewIssue[] = (parsed.issues || []).map((issue: unknown) => {\n      const issueObj = issue as Record<string, unknown>;\n      return {\n        file: filePath,\n        line: issueObj.line as number,\n        severity: (issueObj.severity as string) || 'info',\n        category: (issueObj.category as string) || 'General',\n        message: (issueObj.message as string) || 'No message provided',\n        suggestion: issueObj.suggestion as string\n      };\n    });\n\n    // Filter by severity\n    const filteredIssues = filterBySeverity(issues, options.severity);\n\n    return {\n      issues: filteredIssues,\n      recommendations: parsed.recommendations || []\n    };\n\n  } catch {\n    logger.debug('Failed to parse JSON response, extracting text issues');\n    // Fallback to text parsing\n    return parseTextResponse(response, filePath);\n  }\n}\n\n/**\n * Filter issues by severity level\n */\nfunction filterBySeverity(issues: ReviewIssue[], severityFilter?: string): ReviewIssue[] {\n  if (!severityFilter || severityFilter === 'all') {\n    return issues;\n  }\n\n  const severityOrder: Record<string, number> = {\n    'error': 3,\n    'warning': 2,\n    'info': 1\n  };\n\n  const minLevel = severityOrder[severityFilter] || 1;\n  \n  return issues.filter(issue => {\n    const issueLevel = severityOrder[issue.severity] || 1;\n    return issueLevel >= minLevel;\n  });\n}\n\n/**\n * Fallback text response parser\n */\nfunction parseTextResponse(response: string, filePath: string): { issues: ReviewIssue[], recommendations: string[] } {\n  const lines = response.split('\\n');\n  const issues: ReviewIssue[] = [];\n  const recommendations: string[] = [];\n\n  for (const line of lines) {\n    // Try to extract line numbers and issues\n    const lineMatch = line.match(/line\\s+(\\d+).*?(error|warning|info)/i);\n    if (lineMatch) {\n      issues.push({\n        file: filePath,\n        line: parseInt(lineMatch[1]!),\n        severity: (lineMatch[2]?.toLowerCase() as 'error' | 'warning' | 'info') || 'info',\n        category: 'General',\n        message: line.trim()\n      });\n    }\n  }\n\n  return { issues, recommendations };\n}\n\n/**\n * Calculate summary statistics\n */\nfunction calculateSummaryStats(reviewResults: ReviewResult): void {\n  const issues = reviewResults.issues;\n  reviewResults.summary.totalIssues = issues.length;\n  reviewResults.summary.errorCount = issues.filter(i => i.severity === 'error').length;\n  reviewResults.summary.warningCount = issues.filter(i => i.severity === 'warning').length;\n  reviewResults.summary.infoCount = issues.filter(i => i.severity === 'info').length;\n\n  // Calculate overall rating\n  if (reviewResults.summary.errorCount > 0) {\n    reviewResults.summary.overallRating = 'Needs Improvement';\n  } else if (reviewResults.summary.warningCount > reviewResults.summary.totalFiles * 2) {\n    reviewResults.summary.overallRating = 'Fair';\n  } else if (reviewResults.summary.warningCount > 0) {\n    reviewResults.summary.overallRating = 'Good';\n  } else {\n    reviewResults.summary.overallRating = 'Excellent';\n  }\n}\n\n/**\n * Generate overall recommendations\n */\nasync function generateOverallRecommendations(\n  reviewResults: ReviewResult,\n  router: AIRouter,\n  options: ReviewOptions\n): Promise<string[]> {\n  try {\n    const summaryPrompt = `Based on this code review summary, provide 3-5 high-level recommendations for improving the codebase:\n\nIssues found: ${reviewResults.summary.totalIssues}\n- Errors: ${reviewResults.summary.errorCount}\n- Warnings: ${reviewResults.summary.warningCount}\n- Info: ${reviewResults.summary.infoCount}\n\nFiles reviewed: ${reviewResults.summary.totalFiles}\n\nMost common issues:\n${getMostCommonIssues(reviewResults.issues).join('\\n')}\n\nProvide specific, actionable recommendations.`;\n\n    const aiRequest: AIRequest = {\n      messages: [\n        { role: 'system', content: 'You are a senior software architect providing code review guidance.' },\n        { role: 'user', content: summaryPrompt }\n      ],\n      taskType: TaskType.CODE_REVIEW,\n      preferLocal: options.local,\n      options: {\n        temperature: 0.3,\n        maxTokens: 500\n      }\n    };\n\n    const response = await router.route(aiRequest);\n    return response.content.split('\\n').filter(line => line.trim().length > 0);\n\n  } catch (error) {\n    logger.debug('Failed to generate overall recommendations:', error);\n    return ['Review completed with issues found. Consider addressing high-severity issues first.'];\n  }\n}\n\n/**\n * Get most common issue categories\n */\nfunction getMostCommonIssues(issues: ReviewIssue[]): string[] {\n  const categoryCount = new Map<string, number>();\n  \n  issues.forEach(issue => {\n    const count = categoryCount.get(issue.category) || 0;\n    categoryCount.set(issue.category, count + 1);\n  });\n\n  return Array.from(categoryCount.entries())\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 5)\n    .map(([category, count]) => `- ${category}: ${count} issues`);\n}\n\n/**\n * Display review results in console\n */\nfunction displayReviewResults(reviewResults: ReviewResult, options: ReviewOptions): void {\n  const summary = reviewResults.summary;\n  \n  console.log('\\n' + '‚ïê'.repeat(80));\n  console.log('CODE REVIEW RESULTS');\n  console.log('‚ïê'.repeat(80));\n  \n  console.log(`üìä Summary:`);\n  console.log(`   Files reviewed: ${summary.totalFiles}`);\n  console.log(`   Total issues: ${summary.totalIssues}`);\n  console.log(`   Errors: ${summary.errorCount} | Warnings: ${summary.warningCount} | Info: ${summary.infoCount}`);\n  console.log(`   Overall rating: ${summary.overallRating}`);\n  \n  if (reviewResults.issues.length > 0) {\n    console.log('\\nüîç Issues Found:');\n    console.log('‚îÄ'.repeat(80));\n    \n    reviewResults.issues.forEach((issue, index) => {\n      const severityIcon = issue.severity === 'error' ? '‚ùå' : issue.severity === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';\n      const relativePath = path.relative(process.cwd(), issue.file);\n      \n      console.log(`${index + 1}. ${severityIcon} ${issue.severity.toUpperCase()} in ${relativePath}${issue.line ? `:${issue.line}` : ''}`);\n      console.log(`   Category: ${issue.category}`);\n      console.log(`   ${issue.message}`);\n      \n      if (issue.suggestion && options.suggestions) {\n        console.log(`   üí° Suggestion: ${issue.suggestion}`);\n      }\n      console.log('');\n    });\n  }\n  \n  if (reviewResults.recommendations.length > 0) {\n    console.log('üí° Recommendations:');\n    console.log('‚îÄ'.repeat(80));\n    reviewResults.recommendations.forEach((rec, index) => {\n      console.log(`${index + 1}. ${rec}`);\n    });\n  }\n  \n  console.log('‚ïê'.repeat(80) + '\\n');\n}\n\n/**\n * Handle file output for review results\n */\nasync function handleReviewOutput(\n  outputPath: string,\n  reviewResults: ReviewResult,\n  options: ReviewOptions\n): Promise<void> {\n  let content: string;\n  let finalPath = outputPath;\n\n  if (options.format === 'json') {\n    content = JSON.stringify(reviewResults, null, 2);\n    if (!path.extname(finalPath)) finalPath += '.json';\n  } else if (options.format === 'markdown') {\n    content = generateMarkdownReport(reviewResults);\n    if (!path.extname(finalPath)) finalPath += '.md';\n  } else if (options.format === 'github') {\n    content = generateGitHubReport(reviewResults);\n    if (!path.extname(finalPath)) finalPath += '.md';\n  } else {\n    content = generateTextReport(reviewResults);\n    if (!path.extname(finalPath)) finalPath += '.txt';\n  }\n\n  const dir = path.dirname(finalPath);\n  await fs.mkdir(dir, { recursive: true });\n  await fs.writeFile(finalPath, content, 'utf8');\n  logger.success(`Review results saved to ${finalPath}`);\n}\n\n/**\n * Generate markdown report\n */\nfunction generateMarkdownReport(reviewResults: ReviewResult): string {\n  const lines = [\n    '# Code Review Report',\n    '',\n    '## Summary',\n    `- **Files reviewed:** ${reviewResults.summary.totalFiles}`,\n    `- **Total issues:** ${reviewResults.summary.totalIssues}`,\n    `- **Errors:** ${reviewResults.summary.errorCount}`,\n    `- **Warnings:** ${reviewResults.summary.warningCount}`, \n    `- **Info:** ${reviewResults.summary.infoCount}`,\n    `- **Overall rating:** ${reviewResults.summary.overallRating}`,\n    ''\n  ];\n\n  if (reviewResults.issues.length > 0) {\n    lines.push('## Issues');\n    reviewResults.issues.forEach((issue, index) => {\n      const relativePath = path.relative(process.cwd(), issue.file);\n      lines.push(`### ${index + 1}. ${issue.severity.toUpperCase()} in \\`${relativePath}\\`${issue.line ? `:${issue.line}` : ''}`);\n      lines.push(`**Category:** ${issue.category}`);\n      lines.push(`**Message:** ${issue.message}`);\n      if (issue.suggestion) {\n        lines.push(`**Suggestion:** ${issue.suggestion}`);\n      }\n      lines.push('');\n    });\n  }\n\n  if (reviewResults.recommendations.length > 0) {\n    lines.push('## Recommendations');\n    reviewResults.recommendations.forEach((rec, index) => {\n      lines.push(`${index + 1}. ${rec}`);\n    });\n    lines.push('');\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Generate GitHub-formatted report\n */\nfunction generateGitHubReport(reviewResults: ReviewResult): string {\n  // Similar to markdown but with GitHub-specific formatting\n  return generateMarkdownReport(reviewResults);\n}\n\n/**\n * Generate plain text report\n */\nfunction generateTextReport(reviewResults: ReviewResult): string {\n  const lines = [\n    'CODE REVIEW REPORT',\n    '==================',\n    '',\n    'SUMMARY',\n    '-------',\n    `Files reviewed: ${reviewResults.summary.totalFiles}`,\n    `Total issues: ${reviewResults.summary.totalIssues}`,\n    `Errors: ${reviewResults.summary.errorCount}`,\n    `Warnings: ${reviewResults.summary.warningCount}`,\n    `Info: ${reviewResults.summary.infoCount}`,\n    `Overall rating: ${reviewResults.summary.overallRating}`,\n    ''\n  ];\n\n  if (reviewResults.issues.length > 0) {\n    lines.push('ISSUES', '------');\n    reviewResults.issues.forEach((issue, index) => {\n      const relativePath = path.relative(process.cwd(), issue.file);\n      lines.push(`${index + 1}. ${issue.severity.toUpperCase()} in ${relativePath}${issue.line ? `:${issue.line}` : ''}`);\n      lines.push(`   Category: ${issue.category}`);\n      lines.push(`   Message: ${issue.message}`);\n      if (issue.suggestion) {\n        lines.push(`   Suggestion: ${issue.suggestion}`);\n      }\n      lines.push('');\n    });\n  }\n\n  if (reviewResults.recommendations.length > 0) {\n    lines.push('RECOMMENDATIONS', '---------------');\n    reviewResults.recommendations.forEach((rec, index) => {\n      lines.push(`${index + 1}. ${rec}`);\n    });\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Detect project type from current directory\n */\nfunction detectProjectType(cwd: string): string {\n  try {\n    if (fsSync.existsSync(path.join(cwd, 'package.json'))) return 'nodejs';\n    if (fsSync.existsSync(path.join(cwd, 'requirements.txt'))) return 'python';\n    if (fsSync.existsSync(path.join(cwd, 'Cargo.toml'))) return 'rust';\n    if (fsSync.existsSync(path.join(cwd, 'go.mod'))) return 'go';\n    if (fsSync.existsSync(path.join(cwd, 'pom.xml'))) return 'java';\n    return 'general';\n  } catch {\n    return 'general';\n  }\n}\n\n/**\n * Get programming language from file extension\n */\nfunction getLanguageForExtension(ext: string): string {\n  const languageMap: Record<string, string> = {\n    '.js': 'javascript',\n    '.jsx': 'javascript',\n    '.ts': 'typescript',\n    '.tsx': 'typescript',\n    '.py': 'python',\n    '.java': 'java',\n    '.go': 'go',\n    '.rs': 'rust',\n    '.php': 'php',\n    '.rb': 'ruby',\n    '.c': 'c',\n    '.cpp': 'cpp',\n    '.cc': 'cpp',\n    '.cxx': 'cpp',\n    '.h': 'c',\n    '.hpp': 'cpp',\n    '.cs': 'csharp',\n    '.swift': 'swift',\n    '.kt': 'kotlin',\n    '.scala': 'scala',\n    '.clj': 'clojure',\n    '.ex': 'elixir',\n    '.exs': 'elixir'\n  };\n\n  return languageMap[ext.toLowerCase()] || 'text';\n}\n\n/**\n * Initialize AI Router - placeholder implementation\n */\nasync function initializeAIRouter(): Promise<AIRouter> {\n  const providers = new Map();\n  \n  const config = {\n    providers,\n    fallbackEnabled: true,\n    autoSelectModel: true,\n    costOptimization: false,\n    privacyFirst: false\n  };\n\n  return new AIRouter(config);\n}","import { Command } from 'commander';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { globby } from 'globby';\nimport { logger, LogLevel } from '../utils/logger.js';\nimport { AIRouter, AIRequest } from '../services/ai-router.js';\nimport { TaskType, Message } from '../interfaces/ai-provider.js';\n\ninterface TestOptions {\n  output?: string;\n  type?: 'unit' | 'integration' | 'e2e' | 'all';\n  framework?: string;\n  language?: string;\n  provider?: string;\n  model?: string;\n  local?: boolean;\n  coverage?: boolean;\n  mocks?: boolean;\n  fixtures?: boolean;\n  overwrite?: boolean;\n  run?: boolean;\n  watch?: boolean;\n  verbose?: boolean;\n}\n\ninterface TestGenerationResult {\n  testFiles: Array<{\n    originalFile: string;\n    testFile: string;\n    content: string;\n    framework: string;\n    testCount: number;\n  }>;\n  summary: {\n    totalFiles: number;\n    totalTests: number;\n    framework: string;\n    coverage: string[];\n  };\n  setup?: {\n    dependencies: string[];\n    configFiles: Array<{\n      file: string;\n      content: string;\n    }>;\n  };\n}\n\nexport default function testCommand(program: Command) {\n  program\n    .command('test')\n    .description('AI-powered test generation and execution')\n    .argument('[files...]', 'Files or patterns to generate tests for (defaults to source files)')\n    .option('-o, --output <dir>', 'Output directory for test files (defaults to tests/ or __tests__/)')\n    .option('-t, --type <type>', 'Test type: unit, integration, e2e, or all', 'unit')\n    .option('-f, --framework <framework>', 'Testing framework (jest, vitest, mocha, pytest, etc.)')\n    .option('-l, --language <lang>', 'Programming language (auto-detected if not specified)')\n    .option('--provider <name>', 'Specific AI provider to use')\n    .option('--model <model>', 'Specific model to use')\n    .option('--local', 'Prefer local models', false)\n    .option('--coverage', 'Generate tests for maximum code coverage', false)\n    .option('--mocks', 'Include mock examples', true)\n    .option('--fixtures', 'Generate test fixtures and data', false)\n    .option('--overwrite', 'Overwrite existing test files', false)\n    .option('-r, --run', 'Run tests after generation', false)\n    .option('-w, --watch', 'Watch mode for continuous testing', false)\n    .option('-v, --verbose', 'Show detailed output', false)\n    .action(async (files: string[], options: TestOptions) => {\n      // Set log level\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      logger.task('Test Generation', 'start', 'Starting AI-powered test generation');\n\n      try {\n        // Resolve files to generate tests for\n        const sourceFiles = await resolveSourceFiles(files, options);\n        \n        if (sourceFiles.length === 0) {\n          logger.warn('No source files found to generate tests for');\n          return;\n        }\n\n        logger.debug(`Found ${sourceFiles.length} source files:`, sourceFiles.map(f => path.relative(process.cwd(), f)));\n\n        // Detect or validate testing framework\n        const framework = await detectTestingFramework(options);\n        logger.info(`Using testing framework: ${framework}`);\n\n        // Initialize AI Router\n        const router = await initializeAIRouter();\n\n        // Generate tests\n        const result: TestGenerationResult = {\n          testFiles: [],\n          summary: {\n            totalFiles: sourceFiles.length,\n            totalTests: 0,\n            framework,\n            coverage: []\n          }\n        };\n\n        for (let i = 0; i < sourceFiles.length; i++) {\n          const sourceFile = sourceFiles[i];\n          if (!sourceFile) continue;\n\n          logger.task('Test Generation', 'progress', \n            `Generating tests for ${path.relative(process.cwd(), sourceFile)} (${i + 1}/${sourceFiles.length})`\n          );\n\n          try {\n            const testResult = await generateTestsForFile(sourceFile, framework, router, options);\n            result.testFiles.push(testResult);\n            result.summary.totalTests += testResult.testCount;\n\n          } catch (error) {\n            logger.error(`Failed to generate tests for ${sourceFile}:`, error);\n            continue;\n          }\n        }\n\n        // Generate setup and configuration if needed\n        if (result.testFiles.length > 0) {\n          result.setup = await generateTestSetup(framework, options);\n        }\n\n        logger.task('Test Generation', 'complete', \n          `Generated ${result.summary.totalTests} tests in ${result.testFiles.length} files`\n        );\n\n        // Write test files\n        await writeTestFiles(result, options);\n\n        // Run tests if requested\n        if (options.run) {\n          await runGeneratedTests(framework, options);\n        }\n\n        // Display summary\n        displayTestSummary(result);\n\n      } catch (error) {\n        logger.task('Test Generation', 'error', error instanceof Error ? error.message : 'Unknown error');\n        logger.error('Test generation failed:', error);\n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Resolve source files to generate tests for\n */\nasync function resolveSourceFiles(files: string[], options: TestOptions): Promise<string[]> {\n  let sourceFiles: string[] = [];\n\n  if (files.length > 0) {\n    // Use provided files/patterns\n    sourceFiles = await globby(files, { \n      gitignore: true,\n      onlyFiles: true,\n      absolute: true\n    });\n  } else {\n    // Default patterns for common source files\n    const language = options.language || await detectProjectLanguage();\n    const patterns = getSourceFilePatterns(language);\n    \n    sourceFiles = await globby(patterns, {\n      gitignore: true,\n      onlyFiles: true,\n      absolute: true,\n      cwd: process.cwd()\n    });\n  }\n\n  // Filter out existing test files\n  sourceFiles = sourceFiles.filter(file => !isTestFile(file));\n\n  // Filter by language if specified\n  if (options.language) {\n    sourceFiles = sourceFiles.filter(file => {\n      const ext = path.extname(file).toLowerCase();\n      return getLanguageForExtension(ext) === options.language!.toLowerCase();\n    });\n  }\n\n  return sourceFiles;\n}\n\n/**\n * Detect testing framework based on project\n */\nasync function detectTestingFramework(options: TestOptions): Promise<string> {\n  if (options.framework) {\n    return options.framework;\n  }\n\n  try {\n    const packageJsonPath = path.join(process.cwd(), 'package.json');\n    \n    if (await fs.access(packageJsonPath).then(() => true).catch(() => false)) {\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\n\n      // Check for common testing frameworks\n      if (dependencies.vitest) return 'vitest';\n      if (dependencies.jest) return 'jest';\n      if (dependencies.mocha) return 'mocha';\n      if (dependencies['@testing-library/react']) return 'jest'; // React Testing Library typically uses Jest\n      if (dependencies.cypress) return 'cypress';\n      if (dependencies.playwright) return 'playwright';\n    }\n\n    // Check for Python\n    if (await fs.access(path.join(process.cwd(), 'requirements.txt')).then(() => true).catch(() => false) ||\n        await fs.access(path.join(process.cwd(), 'pyproject.toml')).then(() => true).catch(() => false)) {\n      return 'pytest';\n    }\n\n    // Check for Go\n    if (await fs.access(path.join(process.cwd(), 'go.mod')).then(() => true).catch(() => false)) {\n      return 'go-test';\n    }\n\n    // Check for Rust\n    if (await fs.access(path.join(process.cwd(), 'Cargo.toml')).then(() => true).catch(() => false)) {\n      return 'rust-test';\n    }\n\n    // Check for Java\n    if (await fs.access(path.join(process.cwd(), 'pom.xml')).then(() => true).catch(() => false)) {\n      return 'junit';\n    }\n\n  } catch (error) {\n    logger.debug('Error detecting testing framework:', error);\n  }\n\n  // Default to Jest for JavaScript/TypeScript projects\n  return 'jest';\n}\n\n/**\n * Generate tests for a single file\n */\nasync function generateTestsForFile(\n  sourceFile: string,\n  framework: string,\n  router: AIRouter,\n  options: TestOptions\n): Promise<{\n  originalFile: string;\n  testFile: string;\n  content: string;\n  framework: string;\n  testCount: number;\n}> {\n  \n  const sourceContent = await fs.readFile(sourceFile, 'utf8');\n  const language = options.language || getLanguageForExtension(path.extname(sourceFile));\n  const relativePath = path.relative(process.cwd(), sourceFile);\n\n  // Build test generation prompt\n  const systemPrompt = buildTestSystemPrompt(language, framework, options);\n  const userPrompt = buildTestUserPrompt(relativePath, sourceContent, language, framework, options);\n\n  const messages: Message[] = [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: userPrompt }\n  ];\n\n  const aiRequest: AIRequest = {\n    messages,\n    taskType: TaskType.CODE_GENERATION,\n    preferLocal: options.local,\n    preferredProvider: options.provider,\n    context: {\n      language,\n      framework,\n      projectType: detectProjectType(process.cwd())\n    },\n    options: {\n      temperature: 0.3, // Balanced for test creativity and consistency\n      maxTokens: 4000,\n      responseFormat: 'text'\n    }\n  };\n\n  const response = await router.route(aiRequest);\n  \n  // Extract test code\n  const testContent = extractTestCode(response.content, language);\n  const testCount = countTestCases(testContent, framework);\n\n  // Determine test file path\n  const testFile = generateTestFilePath(sourceFile, framework, options.output);\n\n  return {\n    originalFile: sourceFile,\n    testFile,\n    content: testContent,\n    framework,\n    testCount\n  };\n}\n\n/**\n * Build system prompt for test generation\n */\nfunction buildTestSystemPrompt(language: string, framework: string, options: TestOptions): string {\n  const parts = [\n    `You are an expert ${language.toUpperCase()} developer and test engineer specializing in ${framework}.`,\n    '',\n    `Generate comprehensive ${options.type} tests that:`,\n    '- Cover all public methods and functions',\n    '- Test both happy path and edge cases',\n    '- Include proper error handling tests',\n    '- Follow testing best practices',\n    '- Use appropriate assertions and matchers',\n    ''\n  ];\n\n  // Framework-specific instructions\n  switch (framework) {\n    case 'jest':\n      parts.push(\n        'Jest-specific requirements:',\n        '- Use describe() blocks for organization',\n        '- Use it() or test() for individual test cases',\n        '- Use appropriate Jest matchers (toEqual, toBe, toThrow, etc.)',\n        '- Include beforeEach/afterEach for setup/cleanup when needed'\n      );\n      break;\n    case 'vitest':\n      parts.push(\n        'Vitest-specific requirements:',\n        '- Use describe() and it() functions',\n        '- Import from \"vitest\" for utilities',\n        '- Use vi.mock() for mocking when needed',\n        '- Include proper TypeScript types'\n      );\n      break;\n    case 'pytest':\n      parts.push(\n        'Pytest-specific requirements:',\n        '- Use pytest fixtures for setup',\n        '- Follow naming convention (test_* functions)',\n        '- Use assert statements with clear messages',\n        '- Include parametrized tests when appropriate'\n      );\n      break;\n    case 'go-test':\n      parts.push(\n        'Go testing requirements:',\n        '- Use *testing.T parameter',\n        '- Follow TestXxx naming convention',\n        '- Use t.Error, t.Fatal, t.Run appropriately',\n        '- Include table-driven tests when suitable'\n      );\n      break;\n  }\n\n  if (options.mocks) {\n    parts.push('- Include mock examples where external dependencies exist');\n  }\n\n  if (options.fixtures) {\n    parts.push('- Generate test fixtures and sample data');\n  }\n\n  if (options.coverage) {\n    parts.push('- Ensure comprehensive test coverage of all code paths');\n  }\n\n  parts.push(\n    '',\n    'Provide clean, well-commented test code that can be run immediately.',\n    'Include necessary imports and setup code.'\n  );\n\n  return parts.join('\\n');\n}\n\n/**\n * Build user prompt for specific file\n */\nfunction buildTestUserPrompt(\n  filePath: string,\n  content: string,\n  language: string,\n  framework: string,\n  options: TestOptions\n): string {\n  return [\n    `Generate ${options.type} tests for this ${language} file using ${framework}:`,\n    '',\n    `File: ${filePath}`,\n    '',\n    '```' + language,\n    content,\n    '```',\n    '',\n    'Focus on testing all exported functions, classes, and methods.',\n    'Include appropriate test descriptions and organize tests logically.'\n  ].join('\\n');\n}\n\n/**\n * Extract test code from AI response\n */\nfunction extractTestCode(response: string, language: string): string {\n  // Try to extract code from markdown code blocks\n  const languageAliases = getLanguageAliases(language);\n  \n  for (const alias of languageAliases) {\n    const codeBlockRegex = new RegExp(`\\`\\`\\`${alias}\\\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'gi');\n    const match = codeBlockRegex.exec(response);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  // Try general code blocks\n  const generalCodeBlockRegex = /```[\\w]*\\n([\\s\\S]*?)```/gi;\n  const match = generalCodeBlockRegex.exec(response);\n  if (match && match[1]) {\n    return match[1].trim();\n  }\n  \n  // If no code blocks found, return the whole response cleaned up\n  return response.trim();\n}\n\n/**\n * Count test cases in generated code\n */\nfunction countTestCases(testContent: string, framework: string): number {\n  let count = 0;\n  \n  switch (framework) {\n    case 'jest':\n    case 'vitest':\n      count += (testContent.match(/\\b(it|test)\\s*\\(/g) || []).length;\n      break;\n    case 'pytest':\n      count += (testContent.match(/def test_\\w+/g) || []).length;\n      break;\n    case 'go-test':\n      count += (testContent.match(/func Test\\w+/g) || []).length;\n      break;\n    case 'rust-test':\n      count += (testContent.match(/#\\[test\\]/g) || []).length;\n      break;\n    case 'junit':\n      count += (testContent.match(/@Test/g) || []).length;\n      break;\n    default:\n      // Fallback: count function/method definitions\n      count = (testContent.match(/function\\s+\\w+|def\\s+\\w+|func\\s+\\w+/g) || []).length;\n  }\n  \n  return count;\n}\n\n/**\n * Generate test file path\n */\nfunction generateTestFilePath(sourceFile: string, framework: string, outputDir?: string): string {\n  const sourceDir = path.dirname(sourceFile);\n  const baseName = path.basename(sourceFile, path.extname(sourceFile));\n  const ext = path.extname(sourceFile);\n  \n  let testDir: string;\n  let testFileName: string;\n\n  if (outputDir) {\n    testDir = path.resolve(outputDir);\n  } else {\n    // Default test directory based on framework/language\n    if (framework === 'jest' || framework === 'vitest') {\n      testDir = path.join(sourceDir, '__tests__');\n    } else {\n      testDir = path.join(process.cwd(), 'tests');\n    }\n  }\n\n  // Generate test file name based on convention\n  switch (framework) {\n    case 'jest':\n    case 'vitest':\n      testFileName = `${baseName}.test${ext}`;\n      break;\n    case 'pytest':\n      testFileName = `test_${baseName}.py`;\n      break;\n    case 'go-test':\n      testFileName = `${baseName}_test.go`;\n      break;\n    case 'rust-test':\n      testFileName = `${baseName}_test.rs`;\n      break;\n    default:\n      testFileName = `${baseName}.test${ext}`;\n  }\n\n  return path.join(testDir, testFileName);\n}\n\n/**\n * Generate test setup and configuration\n */\nasync function generateTestSetup(framework: string, options: TestOptions): Promise<{\n  dependencies: string[];\n  configFiles: Array<{ file: string; content: string; }>;\n}> {\n  const setup = {\n    dependencies: [] as string[],\n    configFiles: [] as Array<{ file: string; content: string; }>\n  };\n\n  switch (framework) {\n    case 'jest':\n      setup.dependencies = ['jest', '@types/jest'];\n      setup.configFiles.push({\n        file: 'jest.config.js',\n        content: generateJestConfig(options)\n      });\n      break;\n    case 'vitest':\n      setup.dependencies = ['vitest', '@vitest/ui'];\n      setup.configFiles.push({\n        file: 'vitest.config.ts',\n        content: generateVitestConfig(options)\n      });\n      break;\n    case 'pytest':\n      setup.dependencies = ['pytest', 'pytest-cov'];\n      setup.configFiles.push({\n        file: 'pytest.ini',\n        content: generatePytestConfig(options)\n      });\n      break;\n  }\n\n  return setup;\n}\n\n/**\n * Write all test files to disk\n */\nasync function writeTestFiles(result: TestGenerationResult, options: TestOptions): Promise<void> {\n  for (const testFile of result.testFiles) {\n    const testDir = path.dirname(testFile.testFile);\n    \n    // Create directory if it doesn't exist\n    await fs.mkdir(testDir, { recursive: true });\n\n    // Check if file exists\n    const fileExists = await fs.access(testFile.testFile).then(() => true).catch(() => false);\n    \n    if (fileExists && !options.overwrite) {\n      logger.warn(`Test file ${testFile.testFile} already exists. Use --overwrite to replace it.`);\n      continue;\n    }\n\n    // Write test file\n    await fs.writeFile(testFile.testFile, testFile.content, 'utf8');\n    logger.success(`Generated test: ${path.relative(process.cwd(), testFile.testFile)}`);\n  }\n\n  // Write setup files if any\n  if (result.setup) {\n    for (const configFile of result.setup.configFiles) {\n      const configPath = path.join(process.cwd(), configFile.file);\n      const configExists = await fs.access(configPath).then(() => true).catch(() => false);\n      \n      if (!configExists) {\n        await fs.writeFile(configPath, configFile.content, 'utf8');\n        logger.info(`Created config: ${configFile.file}`);\n      }\n    }\n  }\n}\n\n/**\n * Run generated tests\n */\nasync function runGeneratedTests(framework: string, options: TestOptions): Promise<void> {\n  logger.task('Test Execution', 'start', `Running tests with ${framework}`);\n  \n  try {\n    const { spawn } = require('child_process');\n    let command: string;\n    let args: string[] = [];\n\n    switch (framework) {\n      case 'jest':\n        command = 'npx';\n        args = ['jest'];\n        if (options.watch) args.push('--watch');\n        if (options.coverage) args.push('--coverage');\n        break;\n      case 'vitest':\n        command = 'npx';\n        args = ['vitest'];\n        if (options.watch) args.push('--watch');\n        if (options.coverage) args.push('--coverage');\n        break;\n      case 'pytest':\n        command = 'python';\n        args = ['-m', 'pytest'];\n        if (options.coverage) args.push('--cov');\n        break;\n      case 'go-test':\n        command = 'go';\n        args = ['test', './...'];\n        if (options.coverage) args.push('-cover');\n        break;\n      default:\n        throw new Error(`Test execution not implemented for ${framework}`);\n    }\n\n    const child = spawn(command, args, { \n      stdio: 'inherit',\n      cwd: process.cwd()\n    });\n\n    child.on('close', (code: number | null) => {\n      if (code === 0) {\n        logger.task('Test Execution', 'complete', 'All tests passed');\n      } else {\n        logger.task('Test Execution', 'error', `Tests failed with exit code ${code}`);\n      }\n    });\n\n  } catch (error) {\n    logger.task('Test Execution', 'error', error instanceof Error ? error.message : 'Unknown error');\n  }\n}\n\n/**\n * Display test generation summary\n */\nfunction displayTestSummary(result: TestGenerationResult): void {\n  console.log('\\n' + '‚ïê'.repeat(60));\n  console.log('TEST GENERATION SUMMARY');\n  console.log('‚ïê'.repeat(60));\n  console.log(`üß™ Framework: ${result.summary.framework}`);\n  console.log(`üìÅ Files processed: ${result.summary.totalFiles}`);\n  console.log(`‚úÖ Test files generated: ${result.testFiles.length}`);\n  console.log(`üîç Total test cases: ${result.summary.totalTests}`);\n  \n  if (result.setup && result.setup.dependencies.length > 0) {\n    console.log(`üì¶ Dependencies: ${result.setup.dependencies.join(', ')}`);\n  }\n  \n  console.log('\\nGenerated test files:');\n  result.testFiles.forEach(testFile => {\n    const relativePath = path.relative(process.cwd(), testFile.testFile);\n    console.log(`  ‚Ä¢ ${relativePath} (${testFile.testCount} tests)`);\n  });\n  \n  console.log('‚ïê'.repeat(60) + '\\n');\n}\n\n// Utility functions\n\nfunction detectProjectLanguage(): Promise<string> {\n  // Implementation similar to other detect functions\n  return Promise.resolve('javascript');\n}\n\nfunction getSourceFilePatterns(language: string): string[] {\n  const patterns: Record<string, string[]> = {\n    'javascript': ['**/*.js', '**/*.jsx', '!**/*.test.js', '!**/*.spec.js'],\n    'typescript': ['**/*.ts', '**/*.tsx', '!**/*.test.ts', '!**/*.spec.ts', '!**/*.d.ts'],\n    'python': ['**/*.py', '!**/test_*.py', '!**/*_test.py'],\n    'go': ['**/*.go', '!**/*_test.go'],\n    'rust': ['**/*.rs', '!**/tests/**'],\n    'java': ['**/*.java', '!**/test/**'],\n  };\n  \n  return patterns[language] || patterns['javascript']!;\n}\n\nfunction isTestFile(filePath: string): boolean {\n  const fileName = path.basename(filePath);\n  const testPatterns = [\n    /\\.test\\./,\n    /\\.spec\\./,\n    /^test_/,\n    /_test\\./,\n    /Test\\./,\n    /tests?[\\/\\\\]/\n  ];\n  \n  return testPatterns.some(pattern => pattern.test(fileName) || pattern.test(filePath));\n}\n\nfunction getLanguageForExtension(ext: string): string {\n  const languageMap: Record<string, string> = {\n    '.js': 'javascript',\n    '.jsx': 'javascript',\n    '.ts': 'typescript',\n    '.tsx': 'typescript',\n    '.py': 'python',\n    '.java': 'java',\n    '.go': 'go',\n    '.rs': 'rust',\n    '.php': 'php',\n    '.rb': 'ruby',\n    '.c': 'c',\n    '.cpp': 'cpp',\n    '.cs': 'csharp'\n  };\n\n  return languageMap[ext.toLowerCase()] || 'javascript';\n}\n\nfunction getLanguageAliases(language: string): string[] {\n  const aliases: Record<string, string[]> = {\n    'javascript': ['javascript', 'js'],\n    'typescript': ['typescript', 'ts'],\n    'python': ['python', 'py'],\n    'java': ['java'],\n    'go': ['go', 'golang'],\n    'rust': ['rust', 'rs']\n  };\n  \n  return aliases[language] || [language];\n}\n\nfunction detectProjectType(cwd: string): string {\n  try {\n    if (require('fs').existsSync(path.join(cwd, 'package.json'))) return 'nodejs';\n    if (require('fs').existsSync(path.join(cwd, 'requirements.txt'))) return 'python';\n    if (require('fs').existsSync(path.join(cwd, 'Cargo.toml'))) return 'rust';\n    if (require('fs').existsSync(path.join(cwd, 'go.mod'))) return 'go';\n    if (require('fs').existsSync(path.join(cwd, 'pom.xml'))) return 'java';\n    return 'general';\n  } catch {\n    return 'general';\n  }\n}\n\n// Configuration generators\n\nfunction generateJestConfig(options: TestOptions): string {\n  return `module.exports = {\n  testEnvironment: 'node',\n  testMatch: [\n    '**/__tests__/**/*.(test|spec).(js|jsx|ts|tsx)',\n    '**/*.(test|spec).(js|jsx|ts|tsx)'\n  ],\n  collectCoverageFrom: [\n    'src/**/*.(js|jsx|ts|tsx)',\n    '!src/**/*.d.ts',\n    '!src/**/*.test.*',\n    '!src/**/*.spec.*'\n  ],\n  ${options.coverage ? 'collectCoverage: true,' : ''}\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html']\n};`;\n}\n\nfunction generateVitestConfig(options: TestOptions): string {\n  return `import { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    environment: 'node',\n    ${options.coverage ? \"coverage: { enabled: true, reporter: ['text', 'json', 'html'] },\" : ''}\n    include: ['**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n    exclude: ['node_modules', 'dist', '.idea', '.git', '.cache']\n  }\n})`;\n}\n\nfunction generatePytestConfig(options: TestOptions): string {\n  return `[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\n${options.coverage ? 'addopts = --cov=src --cov-report=html --cov-report=term' : ''}\n`;\n}\n\n/**\n * Initialize AI Router - placeholder implementation\n */\nasync function initializeAIRouter(): Promise<AIRouter> {\n  const providers = new Map();\n  \n  const config = {\n    providers,\n    fallbackEnabled: true,\n    autoSelectModel: true,\n    costOptimization: false,\n    privacyFirst: false\n  };\n\n  return new AIRouter(config);\n}","import { Command } from 'commander';\nimport { execSync, exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { logger, LogLevel } from '../utils/logger.js';\nimport { AIRouter, AIRequest } from '../services/ai-router.js';\nimport { TaskType, Message } from '../interfaces/ai-provider.js';\n\nconst execAsync = promisify(exec);\n\ninterface CommitOptions {\n  message?: string;\n  type?: 'conventional' | 'semantic' | 'standard' | 'auto';\n  scope?: string;\n  breaking?: boolean;\n  provider?: string;\n  model?: string;\n  local?: boolean;\n  push?: boolean;\n  amend?: boolean;\n  dry?: boolean;\n  interactive?: boolean;\n  template?: string;\n  verbose?: boolean;\n}\n\ninterface GitChange {\n  type: 'added' | 'modified' | 'deleted' | 'renamed';\n  file: string;\n  oldFile?: string;\n  stats?: {\n    additions: number;\n    deletions: number;\n  };\n}\n\ninterface CommitAnalysis {\n  type: string;\n  scope?: string;\n  description: string;\n  body?: string;\n  breaking?: boolean;\n  issues?: string[];\n  coauthors?: string[];\n}\n\nexport default function commitCommand(program: Command) {\n  program\n    .command('commit')\n    .description('AI-powered commit message generation with intelligent analysis')\n    .option('-m, --message <msg>', 'Custom message prefix or template')\n    .option('-t, --type <type>', 'Commit message format: conventional, semantic, standard, or auto', 'auto')\n    .option('-s, --scope <scope>', 'Commit scope (for conventional commits)')\n    .option('--breaking', 'Mark as breaking change', false)\n    .option('--provider <name>', 'Specific AI provider to use')\n    .option('--model <model>', 'Specific model to use')\n    .option('--local', 'Prefer local models', false)\n    .option('-p, --push', 'Push after committing', false)\n    .option('--amend', 'Amend last commit', false)\n    .option('--dry', 'Generate message without committing', false)\n    .option('-i, --interactive', 'Interactive mode for message refinement', false)\n    .option('--template <file>', 'Use custom commit message template')\n    .option('-v, --verbose', 'Show detailed output', false)\n    .action(async (options: CommitOptions) => {\n      // Set log level\n      if (options.verbose) {\n        logger.setLevel(LogLevel.DEBUG);\n      }\n\n      logger.task('Commit Generation', 'start', 'Analyzing changes for commit message');\n\n      try {\n        // Check if we're in a git repository\n        await checkGitRepository();\n\n        // Get git status and changes\n        const changes = await analyzeGitChanges(options);\n        \n        if (changes.length === 0 && !options.amend) {\n          logger.warn('No changes staged for commit. Stage your changes first with \"git add\".');\n          return;\n        }\n\n        logger.debug(`Found ${changes.length} changes to commit`);\n\n        // Initialize AI Router\n        const router = await initializeAIRouter();\n\n        // Generate commit message\n        const commitAnalysis = await generateCommitMessage(changes, router, options);\n\n        // Format final commit message\n        const finalMessage = formatCommitMessage(commitAnalysis, options);\n\n        logger.task('Commit Generation', 'complete', 'Generated commit message');\n\n        // Display the generated message\n        displayCommitMessage(finalMessage, changes);\n\n        if (options.dry) {\n          logger.info('Dry run mode - no commit created');\n          return;\n        }\n\n        // Interactive refinement if requested\n        let finalCommitMessage = finalMessage;\n        if (options.interactive) {\n          finalCommitMessage = await interactiveRefinement(finalMessage);\n        }\n\n        // Create the commit\n        await createCommit(finalCommitMessage, options);\n\n        // Push if requested\n        if (options.push) {\n          await pushCommit();\n        }\n\n        logger.success('Commit created successfully');\n\n      } catch (error) {\n        logger.task('Commit Generation', 'error', error instanceof Error ? error.message : 'Unknown error');\n        logger.error('Commit generation failed:', error);\n        process.exit(1);\n      }\n    });\n}\n\n/**\n * Check if current directory is a git repository\n */\nasync function checkGitRepository(): Promise<void> {\n  try {\n    execSync('git rev-parse --git-dir', { stdio: 'ignore' });\n  } catch {\n    throw new Error('Not a git repository. Initialize with \"git init\" first.');\n  }\n}\n\n/**\n * Analyze git changes for commit message generation\n */\nasync function analyzeGitChanges(options: CommitOptions): Promise<GitChange[]> {\n  const changes: GitChange[] = [];\n\n  try {\n    let gitCommand = 'git diff --cached --name-status';\n    if (options.amend) {\n      gitCommand = 'git diff HEAD~1 --name-status';\n    }\n\n    const { stdout } = await execAsync(gitCommand);\n    const lines = stdout.trim().split('\\n').filter(line => line.trim() !== '');\n\n    for (const line of lines) {\n      const [status, ...fileParts] = line.split('\\t');\n      if (!status) continue;\n\n      const file = fileParts.join('\\t');\n      if (!file) continue;\n\n      let changeType: GitChange['type'];\n      let oldFile: string | undefined;\n\n      switch (status[0]) {\n        case 'A':\n          changeType = 'added';\n          break;\n        case 'M':\n          changeType = 'modified';\n          break;\n        case 'D':\n          changeType = 'deleted';\n          break;\n        case 'R':\n          changeType = 'renamed';\n          const [oldPath] = file.split('\\t');\n          oldFile = oldPath;\n          break;\n        default:\n          changeType = 'modified';\n      }\n\n      // Get file stats for better analysis\n      const stats = await getFileStats(file, options.amend);\n\n      changes.push({\n        type: changeType,\n        file: changeType === 'renamed' ? file.split('\\t')[1] || file : file,\n        oldFile,\n        stats\n      });\n    }\n\n    return changes;\n\n  } catch (error) {\n    logger.debug('Error analyzing git changes:', error);\n    return [];\n  }\n}\n\n/**\n * Get file change statistics\n */\nasync function getFileStats(file: string, isAmend = false): Promise<{ additions: number; deletions: number; } | undefined> {\n  try {\n    const command = isAmend \n      ? `git diff HEAD~1 --numstat -- \"${file}\"`\n      : `git diff --cached --numstat -- \"${file}\"`;\n    \n    const { stdout } = await execAsync(command);\n    const [additions, deletions] = stdout.trim().split('\\t');\n    \n    return {\n      additions: parseInt(additions || '0') || 0,\n      deletions: parseInt(deletions || '0') || 0\n    };\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Generate commit message using AI\n */\nasync function generateCommitMessage(\n  changes: GitChange[],\n  router: AIRouter,\n  options: CommitOptions\n): Promise<CommitAnalysis> {\n  \n  // Get diff content for better context\n  const diffContent = await getDiffContent(options.amend);\n  \n  // Build commit analysis prompt\n  const systemPrompt = buildCommitSystemPrompt(options);\n  const userPrompt = buildCommitUserPrompt(changes, diffContent, options);\n\n  const messages: Message[] = [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: userPrompt }\n  ];\n\n  const aiRequest: AIRequest = {\n    messages,\n    taskType: TaskType.SUMMARIZATION,\n    preferLocal: options.local,\n    preferredProvider: options.provider,\n    options: {\n      temperature: 0.3, // Balanced for creativity and consistency\n      maxTokens: 1000,\n      responseFormat: 'json'\n    }\n  };\n\n  const response = await router.route(aiRequest);\n  return parseCommitAnalysis(response.content, options);\n}\n\n/**\n * Get diff content for analysis\n */\nasync function getDiffContent(isAmend = false): Promise<string> {\n  try {\n    const command = isAmend ? 'git diff HEAD~1' : 'git diff --cached';\n    const { stdout } = await execAsync(command);\n    \n    // Limit diff size to avoid overwhelming the AI\n    const maxDiffSize = 8000;\n    if (stdout.length > maxDiffSize) {\n      return stdout.substring(0, maxDiffSize) + '\\n... (diff truncated)';\n    }\n    \n    return stdout;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Build system prompt for commit message generation\n */\nfunction buildCommitSystemPrompt(options: CommitOptions): string {\n  const parts = [\n    'You are an expert software developer creating commit messages.',\n    'Analyze the provided git changes and generate a clear, concise commit message.',\n    ''\n  ];\n\n  switch (options.type) {\n    case 'conventional':\n      parts.push(\n        'Use Conventional Commits format:',\n        '<type>[optional scope]: <description>',\n        '',\n        'Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert',\n        'Keep description under 50 characters, use imperative mood',\n        'Add body for context if needed (wrap at 72 characters)',\n        'Add \"BREAKING CHANGE:\" footer if applicable'\n      );\n      break;\n    case 'semantic':\n      parts.push(\n        'Use semantic commit format with emoji prefixes:',\n        '‚ú® feat: new features',\n        'üêõ fix: bug fixes', \n        'üìö docs: documentation',\n        'üíÑ style: formatting, missing semi colons',\n        '‚ôªÔ∏è refactor: refactoring code',\n        '‚úÖ test: adding tests',\n        'üîß chore: maintenance tasks'\n      );\n      break;\n    case 'standard':\n      parts.push(\n        'Use clear, descriptive commit messages:',\n        '- Start with a verb in imperative mood',\n        '- Keep first line under 50 characters',\n        '- Add detailed body if needed',\n        '- Reference issues/tickets if applicable'\n      );\n      break;\n    case 'auto':\n      parts.push(\n        'Choose the most appropriate format based on the project context.',\n        'Default to conventional commits unless project suggests otherwise.',\n        'Analyze the change patterns to determine the best format.'\n      );\n      break;\n  }\n\n  parts.push(\n    '',\n    'Respond with JSON in this format:',\n    '{',\n    '  \"type\": \"commit_type_or_emoji\",',\n    '  \"scope\": \"optional_scope\",',\n    '  \"description\": \"commit_description\",',\n    '  \"body\": \"optional_detailed_explanation\",',\n    '  \"breaking\": false,',\n    '  \"issues\": [\"#123\"],',\n    '  \"coauthors\": [\"Name <email>\"]',\n    '}'\n  );\n\n  return parts.join('\\n');\n}\n\n/**\n * Build user prompt with change analysis\n */\nfunction buildCommitUserPrompt(\n  changes: GitChange[],\n  diffContent: string,\n  options: CommitOptions\n): string {\n  const parts = [];\n\n  // Add custom message context if provided\n  if (options.message) {\n    parts.push(`User provided message context: \"${options.message}\"`);\n  }\n\n  if (options.scope) {\n    parts.push(`Preferred scope: ${options.scope}`);\n  }\n\n  parts.push('', 'Files changed:');\n  \n  changes.forEach(change => {\n    const stats = change.stats ? ` (+${change.stats.additions}/-${change.stats.deletions})` : '';\n    parts.push(`- ${change.type.toUpperCase()}: ${change.file}${stats}`);\n    if (change.oldFile) {\n      parts.push(`  Renamed from: ${change.oldFile}`);\n    }\n  });\n\n  if (diffContent.trim()) {\n    parts.push('', 'Diff summary (first 200 lines):');\n    const lines = diffContent.split('\\n');\n    const truncatedDiff = lines.slice(0, 200).join('\\n');\n    parts.push('```diff');\n    parts.push(truncatedDiff);\n    parts.push('```');\n  }\n\n  parts.push('', 'Generate an appropriate commit message for these changes.');\n\n  return parts.join('\\n');\n}\n\n/**\n * Parse AI commit analysis response\n */\nfunction parseCommitAnalysis(response: string, options: CommitOptions): CommitAnalysis {\n  try {\n    const parsed = JSON.parse(response);\n    return {\n      type: parsed.type || 'feat',\n      scope: parsed.scope || options.scope,\n      description: parsed.description || 'Update files',\n      body: parsed.body,\n      breaking: parsed.breaking || options.breaking,\n      issues: parsed.issues || [],\n      coauthors: parsed.coauthors || []\n    };\n  } catch {\n    // Fallback parsing from text\n    return parseTextCommitMessage(response, options);\n  }\n}\n\n/**\n * Fallback text parsing for commit analysis\n */\nfunction parseTextCommitMessage(response: string, options: CommitOptions): CommitAnalysis {\n  const lines = response.split('\\n').filter(line => line.trim());\n  const firstLine = lines[0] || 'Update files';\n  \n  // Try to extract type from first line\n  const conventionalMatch = firstLine.match(/^(\\w+)(?:\\(([^)]+)\\))?: (.+)$/);\n  if (conventionalMatch) {\n    return {\n      type: conventionalMatch[1] || 'feat',\n      scope: conventionalMatch[2] || options.scope,\n      description: conventionalMatch[3] || 'Update files',\n      body: lines.slice(1).join('\\n') || undefined,\n      breaking: options.breaking\n    };\n  }\n\n  return {\n    type: 'feat',\n    scope: options.scope,\n    description: firstLine,\n    body: lines.slice(1).join('\\n') || undefined,\n    breaking: options.breaking\n  };\n}\n\n/**\n * Format final commit message based on type\n */\nfunction formatCommitMessage(analysis: CommitAnalysis, options: CommitOptions): string {\n  const parts = [];\n\n  switch (options.type) {\n    case 'conventional':\n      let header = analysis.type;\n      if (analysis.scope) {\n        header += `(${analysis.scope})`;\n      }\n      header += `: ${analysis.description}`;\n      parts.push(header);\n      break;\n\n    case 'semantic':\n      const emoji = getEmojiForType(analysis.type);\n      parts.push(`${emoji} ${analysis.type}: ${analysis.description}`);\n      break;\n\n    case 'standard':\n      parts.push(analysis.description);\n      break;\n\n    case 'auto':\n      // Auto-detect format based on project or use conventional as default\n      let autoHeader = analysis.type;\n      if (analysis.scope) {\n        autoHeader += `(${analysis.scope})`;\n      }\n      autoHeader += `: ${analysis.description}`;\n      parts.push(autoHeader);\n      break;\n  }\n\n  // Add body if present\n  if (analysis.body) {\n    parts.push('', analysis.body);\n  }\n\n  // Add breaking change notice\n  if (analysis.breaking) {\n    parts.push('', 'BREAKING CHANGE: This commit introduces breaking changes');\n  }\n\n  // Add issue references\n  if (analysis.issues && analysis.issues.length > 0) {\n    parts.push('', `Closes ${analysis.issues.join(', ')}`);\n  }\n\n  // Add co-authors\n  if (analysis.coauthors && analysis.coauthors.length > 0) {\n    parts.push('');\n    analysis.coauthors.forEach(author => {\n      parts.push(`Co-authored-by: ${author}`);\n    });\n  }\n\n  return parts.join('\\n');\n}\n\n/**\n * Get emoji for commit type\n */\nfunction getEmojiForType(type: string): string {\n  const emojiMap: Record<string, string> = {\n    'feat': '‚ú®',\n    'fix': 'üêõ',\n    'docs': 'üìö',\n    'style': 'üíÑ',\n    'refactor': '‚ôªÔ∏è',\n    'test': '‚úÖ',\n    'chore': 'üîß',\n    'perf': '‚ö°',\n    'ci': 'üë∑',\n    'build': 'üì¶',\n    'revert': '‚è™'\n  };\n\n  return emojiMap[type] || '‚ú®';\n}\n\n/**\n * Display generated commit message\n */\nfunction displayCommitMessage(message: string, changes: GitChange[]): void {\n  console.log('\\n' + '‚ïê'.repeat(60));\n  console.log('GENERATED COMMIT MESSAGE');\n  console.log('‚ïê'.repeat(60));\n  console.log(message);\n  console.log('‚ïê'.repeat(60));\n  \n  console.log('\\nüìù Changes to be committed:');\n  changes.forEach(change => {\n    const icon = {\n      'added': '‚úÖ',\n      'modified': 'üìù',\n      'deleted': '‚ùå',\n      'renamed': 'üîÑ'\n    }[change.type] || 'üìù';\n    \n    const stats = change.stats ? ` (+${change.stats.additions}/-${change.stats.deletions})` : '';\n    console.log(`  ${icon} ${change.file}${stats}`);\n  });\n  \n  console.log('');\n}\n\n/**\n * Interactive refinement of commit message\n */\nasync function interactiveRefinement(\n  message: string\n): Promise<string> {\n  console.log('Enter \"r\" to regenerate, \"e\" to edit, or press Enter to use current message:');\n  \n  const readline = require('readline');\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  return new Promise((resolve) => {\n    rl.question('> ', async (answer: string) => {\n      rl.close();\n      \n      if (answer.toLowerCase() === 'r') {\n        logger.info('Regenerating commit message...');\n        // Would regenerate with slightly different parameters\n        resolve(message); // Simplified for now\n      } else if (answer.toLowerCase() === 'e') {\n        logger.info('Edit mode not implemented yet. Using current message.');\n        resolve(message);\n      } else {\n        resolve(message);\n      }\n    });\n  });\n}\n\n/**\n * Create the actual commit\n */\nasync function createCommit(message: string, options: CommitOptions): Promise<void> {\n  try {\n    let command = 'git commit';\n    \n    if (options.amend) {\n      command += ' --amend';\n    }\n    \n    // Use a temporary file for multi-line messages\n    const tempFile = path.join(process.cwd(), '.git', 'COMMIT_EDITMSG_TEMP');\n    await fs.writeFile(tempFile, message, 'utf8');\n    \n    command += ` -F \"${tempFile}\"`;\n    \n    logger.debug(`Executing: ${command}`);\n    \n    execSync(command, { stdio: 'inherit' });\n    \n    // Clean up temp file\n    try {\n      await fs.unlink(tempFile);\n    } catch {\n      // Ignore cleanup errors\n    }\n    \n  } catch (error) {\n    throw new Error(`Failed to create commit: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Push commit to remote\n */\nasync function pushCommit(): Promise<void> {\n  try {\n    logger.task('Git Push', 'start', 'Pushing to remote repository');\n    \n    execSync('git push', { stdio: 'inherit' });\n    \n    logger.task('Git Push', 'complete', 'Successfully pushed to remote');\n    \n  } catch (error) {\n    logger.task('Git Push', 'error', 'Failed to push to remote');\n    throw new Error(`Failed to push: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Initialize AI Router - placeholder implementation\n */\nasync function initializeAIRouter(): Promise<AIRouter> {\n  const providers = new Map();\n  \n  const config = {\n    providers,\n    fallbackEnabled: true,\n    autoSelectModel: true,\n    costOptimization: false,\n    privacyFirst: false\n  };\n\n  return new AIRouter(config);\n}"],"mappings":"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","names":["join","program","existsSync","writeFileSync","join","program","program","program","render","React","Box","Text","SelectInput","Spinner","program","render","React","Box","Text","SelectInput","Spinner","program","chalk","ora","ora","chalk","path","React","render","Text","Box","program","program","fs","path","program","initializeAIRouter","path","fs","fs","path","program","path","initializeAIRouter","fs","detectProjectType","fs","path","globby","program","path","initializeAIRouter","globby","getLanguageForExtension","fs","packageJson","detectProjectType","match","execSync","fs","path","program","initializeAIRouter","execSync","path","fs","join"]}
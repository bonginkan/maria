{"version":3,"sources":["../src/enhanced-cli.ts","../src/components/ChatDisplay.ts","../src/utils/logger.ts","../src/services/slash-command-handler.ts","../src/lib/command-groups.ts","../src/services/suggestion-service.ts","../src/services/command-chain-service.ts","../src/services/alias-system.ts","../src/services/template-manager.ts","../src/services/batch-execution.ts","../src/services/hotkey-manager.ts","../src/commands/model-interactive.ts","../src/services/chat-context.service.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\nimport { createInterface, emitKeypressEvents } from 'readline';\nimport { clearScreenDown, cursorTo } from 'readline';\nimport { ChatDisplay } from './components/ChatDisplay.js';\nimport { SlashCommandHandler } from './services/slash-command-handler.js';\nimport { ConversationContext } from './types/conversation.js';\nimport { ChatMessage } from './services/ai-chat-service.js';\n\nclass EnhancedMariaCLI {\n  private inputBuffer = '';\n  private history: string[] = [];\n  private historyIndex = -1;\n  private display: ChatDisplay;\n  private isMultiline = false;\n  private slashCommandHandler: SlashCommandHandler;\n  private conversationContext: Partial<ConversationContext>;\n  private chatHistory: ChatMessage[] = [];\n\n  constructor() {\n    // Show logo immediately first\n    console.clear();\n    this.showLogo();\n    \n    this.display = new ChatDisplay();\n    this.slashCommandHandler = SlashCommandHandler.getInstance();\n    const sessionId = Math.random().toString(36).substring(7);\n    this.conversationContext = {\n      sessionId,\n      userId: 'local-user',\n      history: [],\n      preferences: {\n        language: 'ja',\n        verbosity: 'normal',\n        autoMode: false,\n        defaultModel: 'gemini-2.5-pro',\n        theme: 'dark'\n      },\n      environment: {\n        workingDirectory: process.cwd()\n      }\n    };\n    \n    createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      terminal: true\n    });\n    \n    this.showWelcome();\n    this.setupHandlers();\n    // 入力欄の初期描画は一度だけ\n    this.drawInputBox();\n  }\n\n  private showLogo() {\n    const logo = `\n${chalk.bold.magenta('╔══════════════════════════════════════════════════════════════╗')}\n${chalk.bold.magenta('║')}                                                              ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('███╗   ███╗ █████╗ ██████╗ ██╗ █████╗')}                    ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('████╗ ████║██╔══██╗██╔══██╗██║██╔══██╗')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('██╔████╔██║███████║██████╔╝██║███████║')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('██║╚██╔╝██║██╔══██║██╔══██╗██║██╔══██║')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('██║ ╚═╝ ██║██║  ██║██║  ██║██║██║  ██║')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}    ${chalk.bold.magenta('╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}                                                              ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('░█████╗░░█████╗░██████╗░███████╗')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('██╔══██╗██╔══██╗██╔══██╗██╔════╝')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('██║░░╚═╝██║░░██║██║░░██║█████╗░░')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('██║░░██╗██║░░██║██║░░██║██╔══╝░░')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('╚█████╔╝╚█████╔╝██████╔╝███████╗')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}           ${chalk.bold.magenta('░╚════╝░░╚════╝░╚═════╝░╚══════╝')}                   ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}                                                              ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}          ${chalk.bold.magenta('AI-Powered Development Platform')}                    ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}              ${chalk.magenta('v1.0.0 | TypeScript Monorepo')}                     ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}                                                              ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}             ${chalk.bold.cyan('(c) 2025 Bonginkan Inc.')}                        ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('║')}                                                              ${chalk.bold.magenta('║')}\n${chalk.bold.magenta('╚══════════════════════════════════════════════════════════════╝')}\n`;\n\n    console.log(logo);\n  }\n\n  private showWelcome() {\n    console.log('');\n    console.log(chalk.bold.cyan('Welcome to MARIA CODE CLI!'));\n    console.log('');\n    \n    console.log(chalk.yellow('How can I help you today?'));\n    console.log('');\n    console.log(chalk.gray('Just type naturally:'));\n    console.log(chalk.gray('  • \"Create a REST API for user management\"'));\n    console.log(chalk.gray('  • \"Help me design an auto-pilot software system\"'));\n    console.log(chalk.gray('  • \"Debug this TypeScript error\"'));\n    console.log(chalk.gray('  • \"What is /init command?\"'));\n    console.log('');\n    console.log(chalk.dim('Commands: /help, /init, /status | Exit: Ctrl+C'));\n  }\n\n  private drawInputBox(value: string = '', isMultiline: boolean = false) {\n    const rows = process.stdout.rows || 30;\n    const cols = process.stdout.columns || 80;\n    \n    // 確実に単一の入力欄にするため、固定位置に配置\n    const inputY = rows - 4;\n    \n    // 画面をクリアして確実に1つの入力欄のみ表示\n    cursorTo(process.stdout, 0, inputY);\n    clearScreenDown(process.stdout);\n    \n    const boxWidth = Math.min(cols - 2, 120);\n    const innerWidth = boxWidth - 2;\n    \n    // Draw input box with white border for clear visibility\n    const borderColor = chalk.white;\n    const labelText = ' Input ';\n    const label = chalk.white.bold(labelText);\n    const labelPadding = boxWidth - labelText.length - 2;\n    const topBorder = '┌' + label + '─'.repeat(Math.max(0, labelPadding)) + '┐';\n    const bottomBorder = '└' + '─'.repeat(boxWidth - 2) + '┘';\n    \n    console.log(borderColor(topBorder));\n    \n    if (isMultiline) {\n      console.log(borderColor('│ ') + chalk.gray('(Multiline: Shift+Enter for new line, Enter to send, Esc to cancel)') + ' '.repeat(Math.max(0, innerWidth - 60)) + borderColor('│'));\n      const lines = value.split('\\n');\n      const maxLines = 5; // 最大5行まで表示\n      const displayLines = lines.slice(-maxLines);\n      \n      displayLines.forEach((line, i) => {\n        const displayLine = line.length > innerWidth - 5 ? line.substring(0, innerWidth - 8) + '...' : line;\n        const prefix = i === displayLines.length - 1 ? chalk.yellow('➤ ') : '  ';\n        const padding = ' '.repeat(Math.max(0, innerWidth - displayLine.length - 3));\n        console.log(borderColor('│ ') + prefix + displayLine + padding + borderColor('│'));\n      });\n    } else {\n      let displayValue = value;\n      if (value.length > innerWidth - 5) {\n        displayValue = value.substring(0, innerWidth - 8) + '...';\n      }\n      const padding = ' '.repeat(Math.max(0, innerWidth - displayValue.length - 3));\n      console.log(borderColor('│ ') + chalk.yellow('➤ ') + chalk.white(displayValue) + padding + borderColor('│'));\n    }\n    \n    console.log(borderColor(bottomBorder));\n    \n    // Position cursor precisely\n    if (isMultiline) {\n      const lines = value.split('\\n');\n      const lastLine = lines[lines.length - 1] || '';\n      const cursorX = Math.min(4 + lastLine.length, boxWidth - 2);\n      const displayLines = Math.min(lines.length, 5);\n      cursorTo(process.stdout, cursorX, inputY + 1 + displayLines);\n    } else {\n      const cursorX = Math.min(4 + value.length, boxWidth - 2);\n      cursorTo(process.stdout, cursorX, inputY + 1);\n    }\n  }\n\n  private resizeTimeout?: NodeJS.Timeout;\n  \n  private setupHandlers() {\n    // ターミナルリサイズ時に再描画（デバウンス付き）\n    process.stdout.on('resize', () => {\n      if (this.resizeTimeout) {\n        clearTimeout(this.resizeTimeout);\n      }\n      this.resizeTimeout = setTimeout(() => {\n        this.drawInputBox(this.inputBuffer, this.isMultiline);\n      }, 100);\n    });\n    \n    process.stdin.on('keypress', (ch: string, key: any) => {\n      if (key && key.shift && key.name === 'return') {\n        // Shift+Enter for multiline\n        this.isMultiline = true;\n        this.inputBuffer += '\\n';\n        this.drawInputBox(this.inputBuffer, true);\n      } else if (key && key.name === 'return') {\n        if (this.isMultiline) {\n          // Send multiline content\n          const content = this.inputBuffer;\n          this.history.push(content);\n          this.historyIndex = this.history.length;\n          this.inputBuffer = '';\n          this.isMultiline = false;\n          // Process command after resetting state\n          this.handleCommand(content).catch(err => {\n            console.error(chalk.red('Command error:'), err);\n          });\n        } else {\n          // Single line\n          const content = this.inputBuffer;\n          if (content.trim()) {\n            this.history.push(content);\n            this.historyIndex = this.history.length;\n          }\n          this.inputBuffer = '';\n          // Process command after resetting state\n          this.handleCommand(content).catch(err => {\n            console.error(chalk.red('Command error:'), err);\n          });\n        }\n        this.drawInputBox();\n      } else if (key && key.name === 'escape' && this.isMultiline) {\n        // Cancel multiline\n        this.inputBuffer = '';\n        this.isMultiline = false;\n        this.drawInputBox();\n      } else if (key && key.name === 'up') {\n        // History navigation\n        if (this.historyIndex > 0) {\n          this.historyIndex--;\n          this.inputBuffer = this.history[this.historyIndex] ?? '';\n          this.drawInputBox(this.inputBuffer);\n        }\n      } else if (key && key.name === 'down') {\n        if (this.historyIndex < this.history.length - 1) {\n          this.historyIndex++;\n          this.inputBuffer = this.history[this.historyIndex] ?? '';\n          this.drawInputBox(this.inputBuffer);\n        } else {\n          this.historyIndex = this.history.length;\n          this.inputBuffer = '';\n          this.drawInputBox();\n        }\n      } else if (key && key.name === 'backspace') {\n        this.inputBuffer = this.inputBuffer.slice(0, -1);\n        this.drawInputBox(this.inputBuffer, this.isMultiline);\n      } else if (key && key.ctrl && key.name === 'c') {\n        this.exit();\n      } else if (ch && !key.ctrl) {\n        this.inputBuffer += ch;\n        this.drawInputBox(this.inputBuffer, this.isMultiline);\n      }\n    });\n\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true);\n    }\n    \n    emitKeypressEvents(process.stdin);\n    process.stdin.resume();\n  }\n\n  private async handleCommand(input: string) {\n    if (!input.trim()) {\n      // 空入力の場合は何もしない（既に入力欄は表示されている）\n      return;\n    }\n    \n    // Clear input area and show processing\n    const rows = process.stdout.rows || 30;\n    cursorTo(process.stdout, 0, rows - 4);\n    clearScreenDown(process.stdout);\n    console.log(chalk.cyan('Processing...'));\n    \n    // Display user input in a box\n    this.display.displayUserInput(input);\n    \n    try {\n      if (input.toLowerCase() === 'exit' || input.toLowerCase() === 'quit') {\n        this.exit();\n        return;\n      } else if (input.startsWith('/')) {\n        // スラッシュコマンド\n        await this.handleSlashCommand(input);\n      } else {\n        // Enhanced natural language input processing\n        await this.handleEnhancedInput(input);\n      }\n    } catch (error) {\n      this.display.displayAssistantResponse(\n        chalk.red(`❌ Error: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      );\n    }\n    \n    // Always ensure single input box is displayed at the bottom\n    // Use longer delay to ensure all output is completed\n    setTimeout(() => {\n      this.drawInputBox();\n    }, 300);\n  }\n\n  private async handleSlashCommand(input: string) {\n    const parts = input.split(' ');\n    const command = parts[0]?.toLowerCase() || '';\n    const args = parts.slice(1);\n    \n    // 特別なコマンドを直接処理（入力欄重複を防ぐ）\n    if (command === '/help') {\n      this.displayHelp();\n      // 入力欄を確実に再描画\n      setTimeout(() => this.drawInputBox(), 100);\n      return;\n    }\n    \n    if (command === '/clear') {\n      console.clear();\n      this.showLogo();\n      this.showWelcome();\n      // 入力欄を確実に再描画\n      setTimeout(() => this.drawInputBox(), 100);\n      return;\n    }\n    \n    if (command === '/status') {\n      this.displayStatus();\n      // 入力欄を確実に再描画\n      setTimeout(() => this.drawInputBox(), 100);\n      return;\n    }\n    \n    // SlashCommandHandlerを使用（複雑なコマンド用）\n    try {\n      const result = await this.slashCommandHandler.handleCommand(\n        command, \n        args, \n        this.conversationContext as ConversationContext\n      );\n      \n      if (!result.success) {\n        this.display.displayAssistantResponse(`❌ Command failed: ${result.message}`);\n        return;\n      }\n      \n      if (result.message) {\n        this.display.displayMarkdown(result.message);\n      }\n      \n      if (result.component) {\n        this.display.displayAssistantResponse(`🎛️  UI Component: ${result.component} (Available in full Ink CLI mode)`);\n      }\n      \n      if (result.data) {\n        if (typeof result.data === 'string') {\n          this.display.displayMarkdown(result.data);\n        } else if (result.data.content) {\n          this.display.displayMarkdown(result.data.content);\n        }\n      }\n      \n      // Display suggestions if available\n      if (result.suggestions) {\n        this.display.displayAssistantResponse(result.suggestions);\n      }\n      \n    } catch (error) {\n      this.display.displayAssistantResponse(`❌ Error processing command: ${error}`);\n      // エラー時も入力欄を再描画\n      setTimeout(() => this.drawInputBox(), 100);\n    }\n  }\n  \n  private displayHelp() {\n    const helpText = `\n## MARIA CODE CLI Commands\n\n### 🔧 Basic Commands\n- \\`/help\\` - Show this help message\n- \\`/clear\\` - Clear the screen\n- \\`/status\\` - Show session status\n- \\`exit\\` or \\`quit\\` - Exit CLI\n\n### 📁 Project Management\n- \\`/init\\` - Initialize MARIA.md file\n- \\`/add-dir <path>\\` - Add working directory\n- \\`/memory\\` - Edit Claude memory file\n- \\`/export <format>\\` - Export conversation\n\n### 🤖 Agent Management\n- \\`/agents\\` - Manage AI agents\n- \\`/mcp\\` - MCP server management\n- \\`/config\\` - Configuration panel\n- \\`/doctor\\` - System diagnostics\n\n### 💬 Enhanced Natural Language\nJust type naturally! New features:\n- **Pasted Content**: \"lint エラーを直して。[Pasted text #1 +103 lines]\"\n- **Image Attachments**: Drag & drop images or type file paths\n- **URL Research**: Paste URLs for deep analysis\n- \"Create a REST API for users\"\n- \"Help me debug this function\"\n- \"Generate tests for my code\"\n\n### ⚡ MC Commands\n- \\`mc chat\\` - Start AI chat mode\n- \\`mc init\\` - Initialize project\n- \\`mc test\\` - Run tests\n`;\n    \n    this.display.displayMarkdown(helpText);\n  }\n  \n  private displayStatus() {\n    const status = `\n## Session Status\n\n**📊 Current Session**\n- Messages: ${this.chatHistory.length}\n- Session ID: ${this.conversationContext.sessionId}\n- Working Directory: ${process.cwd()}\n\n**🛠️ Environment**\n- Platform: ${process.platform}\n- Node Version: ${process.version}\n- Terminal Size: ${process.stdout.columns}x${process.stdout.rows}\n\n**🤖 AI Configuration**\n- Default Model: ${this.conversationContext.preferences?.defaultModel || 'gemini-2.5-pro'}\n- Language: ${this.conversationContext.preferences?.language || 'ja'}\n- Auto Mode: ${this.conversationContext.preferences?.autoMode ? 'Enabled' : 'Disabled'}\n\n**🕒 Time**: ${new Date().toLocaleString()}\n`;\n    \n    this.display.displayMarkdown(status);\n  }\n\n  // Reserved for future MC command handling\n  /*\n  private async handleMcCommand(input: string) {\n    const args = input.split(' ').slice(1);\n    const command = args[0];\n    \n    this.display.displayAssistantResponse('Processing MC command...');\n    \n    // Simulate processing steps\n    await this.display.displayStep({\n      number: 1,\n      title: 'Parsing command',\n      content: `Command: mc ${command}`,\n      status: 'completed'\n    });\n    \n    await this.display.displayStep({\n      number: 2,\n      title: 'Initializing environment',\n      content: '',\n      status: 'in-progress'\n    });\n    \n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    await this.display.displayStep({\n      number: 2,\n      title: 'Initializing environment',\n      content: 'Environment ready',\n      status: 'completed'\n    });\n    \n    switch (command) {\n      case 'chat':\n        const chatExample = `\n### AI Chat Mode Activated\n\nI'm MARIA, your AI development assistant. How can I help you today?\n\n**Example requests:**\n- \"Create a REST API for user management\"\n- \"Help me debug this React component\"\n- \"Generate tests for my functions\"`;\n        \n        this.display.displayMarkdown(chatExample);\n        break;\n\n      case 'init':\n        await this.display.displayStep({\n          number: 3,\n          title: 'Creating configuration files',\n          content: '',\n          status: 'in-progress'\n        });\n        \n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        await this.display.displayStep({\n          number: 3,\n          title: 'Creating configuration files',\n          content: '.maria-code.toml created',\n          status: 'completed'\n        });\n        \n        this.display.displayCode(`# MARIA CODE Configuration\n[project]\nname = \"my-project\"\nversion = \"1.0.0\"\n\n[ai]\nmodel = \"gemini-2.5-pro\"\ntemperature = 0.7\n\n[features]\nauto_test = true\nauto_commit = true`, 'toml');\n        \n        this.display.displayMarkdown('**Project initialized successfully!**');\n        break;\n\n      default:\n        this.display.displayMarkdown(`Unknown mc command: \\`${command}\\``);\n    }\n  }\n  */\n\n  private async handleEnhancedInput(input: string) {\n    // Show processing message\n    this.display.displayAssistantResponse('🤖 Processing your message...');\n    \n    try {\n      // Check if the input looks like a command intent\n      const commandIntent = this.parseCommandIntent(input);\n      \n      if (commandIntent) {\n        // Route to appropriate slash command\n        this.display.displayAssistantResponse(`💡 Routing to: ${commandIntent.command}`);\n        await this.handleSlashCommand(commandIntent.command + ' ' + commandIntent.args.join(' '));\n        return;\n      }\n      \n      // Process as natural language chat\n      await this.processNaturalLanguageChat(input);\n      \n    } catch (error) {\n      this.display.displayAssistantResponse(\n        chalk.red(`❌ Error processing message: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      );\n    }\n  }\n\n  private parseCommandIntent(input: string): { command: string; args: string[] } | null {\n    const lowerInput = input.toLowerCase();\n    \n    // Command intent mapping\n    const intentMap: Record<string, string> = {\n      'initialize project': '/init',\n      'init project': '/init',\n      'create maria.md': '/init',\n      'analyze codebase': '/init',\n      'show status': '/status',\n      'check status': '/status',\n      'system status': '/status',\n      'clear screen': '/clear',\n      'clear console': '/clear',\n      'show help': '/help',\n      'help me': '/help',\n      'what can you do': '/help',\n      'switch model': '/model',\n      'change model': '/model',\n      'use gemini': '/model gemini-2.5-pro',\n      'use grok': '/model grok-4-latest',\n      'export conversation': '/export',\n      'save conversation': '/export'\n    };\n    \n    for (const [intent, command] of Object.entries(intentMap)) {\n      if (lowerInput.includes(intent)) {\n        const parts = command.split(' ');\n        return {\n          command: parts[0] || '',\n          args: parts.slice(1)\n        };\n      }\n    }\n    \n    return null;\n  }\n\n  private async processNaturalLanguageChat(input: string) {\n    const currentModel = this.conversationContext.preferences?.defaultModel || 'gemini-2.5-pro';\n    \n    // Add user message to chat history\n    this.chatHistory.push({\n      role: 'user',\n      content: input,\n      timestamp: new Date()\n    });\n    \n    // Display processing steps\n    await this.display.displayStep({\n      number: 1,\n      title: 'Analyzing request',\n      content: `Using ${currentModel}`,\n      status: 'completed'\n    });\n    \n    await this.display.displayStep({\n      number: 2,\n      title: 'Generating response',\n      content: 'Processing with AI...',\n      status: 'in-progress'\n    });\n    \n    try {\n      // Simulate AI response (replace with actual API call)\n      const response = await this.generateAIResponse(input, currentModel);\n      \n      await this.display.displayStep({\n        number: 2,\n        title: 'Generating response',\n        content: 'Response generated successfully',\n        status: 'completed'\n      });\n      \n      // Add AI response to history\n      this.chatHistory.push({\n        role: 'assistant',\n        content: response,\n        timestamp: new Date()\n      });\n      \n      // Display response\n      this.display.displayMarkdown(response);\n      \n    } catch (error) {\n      await this.display.displayStep({\n        number: 2,\n        title: 'Generating response',\n        content: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        status: 'error'\n      });\n      \n      // Fallback response\n      const fallbackResponse = this.generateFallbackResponse(input);\n      this.display.displayMarkdown(fallbackResponse);\n    }\n  }\n\n  private async generateAIResponse(input: string, model: string): Promise<string> {\n    // Check for local API keys\n    const hasLocalKeys = process.env.GEMINI_API_KEY || process.env.GROK_API_KEY;\n    \n    if (!hasLocalKeys) {\n      return `I'd be happy to help you with: \"${input}\"\n\nHowever, I notice that no API keys are configured for local development. \n\n**Options:**\n1. **Development Mode**: Add API keys to \\`.env.local\\`\n   - \\`GEMINI_API_KEY=your-key\\` for Gemini 2.5 Pro\n   - \\`GROK_API_KEY=your-key\\` for Grok-4\n\n2. **Production Mode**: Use Cloud Sandbox (coming soon)\n   - Full authentication via MARIA platform\n   - No API keys needed\n\n**Current Model**: ${model}\n\nFor now, I can help with:\n- Project management (\\`/init\\`, \\`/status\\`)\n- Agent management (\\`/agents\\`, \\`/mcp\\`)\n- Configuration (\\`/config\\`, \\`/model\\`)\n- System diagnostics (\\`/doctor\\`)\n\nType \\`/help\\` to see all available commands!`;\n    }\n    \n    // TODO: Implement actual API calls when keys are available\n    return `I understand you want help with: \"${input}\"\n\nI'm currently in development mode. Here's what I can assist you with:\n\n**Your Request Analysis:**\n- Input: ${input}\n- Model: ${model}\n- Intent: General assistance\n\n**Available Actions:**\n1. Use \\`/init\\` to analyze your codebase\n2. Use \\`/agents\\` to see available AI agents\n3. Use \\`/model\\` to switch between Gemini 2.5 Pro and Grok-4\n4. Use \\`/help\\` for all commands\n\nHow would you like to proceed?`;\n  }\n\n  private generateFallbackResponse(input: string): string {\n    return `I encountered an issue processing your request: \"${input}\"\n\n**Suggested Actions:**\n1. Try rephrasing your request\n2. Use a specific slash command (type \\`/help\\` to see options)\n3. Check your network connection\n4. Verify API configuration with \\`/doctor\\`\n\n**Quick Commands:**\n- \\`/status\\` - Check system status\n- \\`/init\\` - Initialize project\n- \\`/help\\` - Show all commands\n\nPlease try again or use a specific command.`;\n  }\n\n  private exit() {\n    console.clear();\n    console.log(chalk.yellow('\\nThanks for using MARIA CODE CLI!'));\n    console.log(chalk.magenta('Happy coding!\\n'));\n    process.exit(0);\n  }\n}\n\n// Export the class for use in other modules\nexport { EnhancedMariaCLI as EnhancedCLI };\n\n// Start Enhanced CLI only if this file is run directly\n// Always start when imported as main file\nnew EnhancedMariaCLI();","import chalk from 'chalk';\nimport { highlight } from 'cli-highlight';\nimport ora from 'ora';\n\ninterface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\ninterface StepInfo {\n  number: number;\n  title: string;\n  content: string;\n  status: 'pending' | 'in-progress' | 'completed' | 'error';\n}\n\nexport class ChatDisplay {\n  private messages: Message[] = [];\n  private currentSpinner: any = null;\n  \n  constructor() {}\n\n  // Display user input in a bordered box with enhanced detection\n  displayUserInput(input: string) {\n    const lines = input.split('\\n');\n    const maxLength = Math.max(...lines.map(l => l.length), 40);\n    const boxWidth = Math.min(maxLength + 4, process.stdout.columns - 2);\n    \n    // Detect special content types\n    const hasImages = /\\.(jpg|jpeg|png|gif|bmp|webp|svg)/i.test(input);\n    const hasUrls = /https?:\\/\\/[^\\s]+/i.test(input);\n    const hasPastedContent = /\\[Pasted\\s+(?:text|image|content)\\s*#?\\d*\\s*\\+?\\d*\\s*lines?\\]/i.test(input);\n    \n    // Enhanced border with content indicators\n    let borderChar = '-';\n    let borderColor = chalk.gray;\n    \n    if (hasImages) {\n      borderColor = chalk.cyan;\n      borderChar = '=';\n    } else if (hasUrls) {\n      borderColor = chalk.blue;\n      borderChar = '~';\n    } else if (hasPastedContent) {\n      borderColor = chalk.yellow;\n      borderChar = '*';\n    }\n    \n    console.log('\\n' + borderColor('+' + borderChar.repeat(boxWidth - 2) + '+'));\n    \n    // Add content type indicator\n    if (hasImages || hasUrls || hasPastedContent) {\n      let indicator = '';\n      if (hasImages) indicator += '🖼️  IMAGE ';\n      if (hasUrls) indicator += '🔗 URL ';\n      if (hasPastedContent) indicator += '📋 PASTE ';\n      \n      const indicatorPadding = boxWidth - indicator.length - 4;\n      console.log(borderColor('| ') + chalk.white.bold(indicator) + ' '.repeat(Math.max(0, indicatorPadding)) + borderColor(' |'));\n      console.log(borderColor('|' + borderChar.repeat(boxWidth - 2) + '|'));\n    }\n    \n    lines.forEach(line => {\n      const padding = boxWidth - line.length - 4;\n      console.log(borderColor('| ') + chalk.white(line) + ' '.repeat(Math.max(0, padding)) + borderColor(' |'));\n    });\n    console.log(borderColor('+' + borderChar.repeat(boxWidth - 2) + '+'));\n    \n    this.messages.push({\n      role: 'user',\n      content: input,\n      timestamp: new Date()\n    });\n  }\n\n  // Display AI response without border with enhanced formatting\n  displayAssistantResponse(content: string) {\n    console.log('\\n' + chalk.blue('[AI] MARIA Response:'));\n    console.log(chalk.blue('='.repeat(30)));\n    \n    // Check if content contains structured data\n    if (content.includes('[LINT ERRORS') || content.includes('[TYPESCRIPT ERRORS')) {\n      console.log(chalk.red.bold('🔍 Error Analysis Mode'));\n    } else if (content.includes('[ATTACHED IMAGES')) {\n      console.log(chalk.cyan.bold('🖼️  Image Analysis Mode'));\n    } else if (content.includes('[URL RESEARCH')) {\n      console.log(chalk.blue.bold('🔬 Research Mode'));\n    }\n    \n    console.log();\n    \n    this.messages.push({\n      role: 'assistant',\n      content,\n      timestamp: new Date()\n    });\n  }\n\n  // Display a processing step with spinner\n  async displayStep(step: StepInfo): Promise<void> {\n    const statusIcons = {\n      'pending': '[WAIT]',\n      'in-progress': '[PROC]',\n      'completed': '[DONE]',\n      'error': '[FAIL]'\n    };\n\n    const prefix = `${chalk.bold(`Step ${step.number}:`)} ${step.title}`;\n    \n    if (step.status === 'in-progress') {\n      this.currentSpinner = ora({\n        text: prefix,\n        spinner: 'dots'\n      }).start();\n    } else {\n      if (this.currentSpinner) {\n        this.currentSpinner.stop();\n        this.currentSpinner = null;\n      }\n      console.log(`${statusIcons[step.status]} ${prefix}`);\n      if (step.content) {\n        console.log(chalk.gray('   ' + step.content));\n      }\n    }\n  }\n\n  // Display code with syntax highlighting\n  displayCode(code: string, language: string = 'typescript') {\n    console.log();\n    console.log(chalk.gray('```' + language));\n    \n    try {\n      const highlighted = highlight(code, { language });\n      console.log(highlighted);\n    } catch {\n      // Fallback to plain code if highlighting fails\n      console.log(code);\n    }\n    \n    console.log(chalk.gray('```'));\n    console.log();\n  }\n\n  // Display markdown-like content with enhanced formatting\n  displayMarkdown(content: string) {\n    const lines = content.split('\\n');\n    \n    lines.forEach(line => {\n      // Headers\n      if (line.startsWith('### ')) {\n        console.log(chalk.bold.yellow(line));\n      } else if (line.startsWith('## ')) {\n        console.log(chalk.bold.cyan(line));\n      } else if (line.startsWith('# ')) {\n        console.log(chalk.bold.magenta(line));\n      }\n      // Enhanced patterns\n      else if (line.includes('❌') || line.includes('ERROR')) {\n        console.log(chalk.red(line));\n      } else if (line.includes('⚠️') || line.includes('WARNING')) {\n        console.log(chalk.yellow(line));\n      } else if (line.includes('✅') || line.includes('SUCCESS')) {\n        console.log(chalk.green(line));\n      } else if (line.includes('ℹ️') || line.includes('INFO')) {\n        console.log(chalk.cyan(line));\n      }\n      // Bold text\n      else if (line.includes('**')) {\n        const formatted = line.replace(/\\*\\*(.*?)\\*\\*/g, (_, text) => chalk.bold(text));\n        console.log(formatted);\n      }\n      // Code inline\n      else if (line.includes('`')) {\n        const formatted = line.replace(/`(.*?)`/g, (_, code) => chalk.green(code));\n        console.log(formatted);\n      }\n      // URLs\n      else if (line.includes('http')) {\n        const formatted = line.replace(/(https?:\\/\\/[^\\s]+)/g, (url) => chalk.blue.underline(url));\n        console.log(formatted);\n      }\n      // File paths\n      else if (line.match(/\\.(js|ts|jsx|tsx|py|go|rs|java|c|cpp|h):/)) {\n        const formatted = line.replace(/([^\\s]+\\.[a-z]+):(\\d+):(\\d+)/g, \n          (_, file, line, col) => chalk.cyan(file) + ':' + chalk.yellow(line) + ':' + chalk.yellow(col));\n        console.log(formatted);\n      }\n      // Lists\n      else if (line.trim().startsWith('- ') || line.trim().startsWith('* ')) {\n        console.log(chalk.gray('  •') + line.substring(line.indexOf('-') + 1));\n      }\n      // Regular text\n      else {\n        console.log(line);\n      }\n    });\n  }\n\n  // Show typing animation effect\n  async typewriterEffect(text: string, delay: number = 30) {\n    for (const char of text) {\n      process.stdout.write(char);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    console.log();\n  }\n\n  // Clear the display\n  clear() {\n    console.clear();\n    this.messages = [];\n    if (this.currentSpinner) {\n      this.currentSpinner.stop();\n      this.currentSpinner = null;\n    }\n  }\n\n  // Display enhanced progress with context\n  displayEnhancedProgress(message: string, context?: string) {\n    console.log(chalk.cyan(`🔄 ${message}`));\n    if (context) {\n      console.log(chalk.gray(`   Context: ${context}`));\n    }\n  }\n\n  // Display attachment summary\n  displayAttachmentSummary(type: 'image' | 'url' | 'paste', count: number) {\n    const icons = {\n      image: '🖼️',\n      url: '🔗',\n      paste: '📋'\n    };\n    \n    const colors = {\n      image: chalk.cyan,\n      url: chalk.blue,\n      paste: chalk.yellow\n    };\n    \n    console.log(colors[type](`${icons[type]} Processed ${count} ${type}${count > 1 ? 's' : ''}`));\n  }\n\n  // Display quick actions\n  displayQuickActions(actions: string[]) {\n    if (actions.length === 0) return;\n    \n    console.log('\\n' + chalk.bold.yellow('💡 Quick Actions:'));\n    actions.forEach((action, index) => {\n      console.log(chalk.yellow(`   ${index + 1}. ${action}`));\n    });\n  }\n\n  // Get conversation history\n  getHistory(): Message[] {\n    return [...this.messages];\n  }\n}","/**\n * Logger Utility\n * ログ出力の統一的な管理\n */\n\nimport chalk from 'chalk';\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  NONE = 4\n}\n\nclass Logger {\n  private level: LogLevel = LogLevel.INFO;\n  private readonly prefix = '[MARIA CODE]';\n\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  debug(...args: any[]): void {\n    if (this.level <= LogLevel.DEBUG) {\n      console.log(chalk.magenta(`${this.prefix} [DEBUG]`), ...args);\n    }\n  }\n\n  info(...args: any[]): void {\n    if (this.level <= LogLevel.INFO) {\n      console.log(chalk.bold.magenta(`${this.prefix} [INFO]`), ...args);\n    }\n  }\n\n  warn(...args: any[]): void {\n    if (this.level <= LogLevel.WARN) {\n      console.warn(chalk.bold.magenta(`${this.prefix} [WARN]`), ...args);\n    }\n  }\n\n  error(...args: any[]): void {\n    if (this.level <= LogLevel.ERROR) {\n      console.error(chalk.bold.magenta(`${this.prefix} [ERROR]`), ...args);\n    }\n  }\n\n  success(...args: any[]): void {\n    if (this.level <= LogLevel.INFO) {\n      console.log(chalk.bold.magenta(`${this.prefix} [SUCCESS]`), ...args);\n    }\n  }\n\n  task(taskName: string, status: 'start' | 'progress' | 'complete' | 'error', message?: string): void {\n    if (this.level > LogLevel.INFO) return;\n\n    const statusIcons = {\n      start: '🚀',\n      progress: '⏳',\n      complete: '✅',\n      error: '❌'\n    };\n\n    const statusColors = {\n      start: chalk.bold.magenta,\n      progress: chalk.magenta,\n      complete: chalk.bold.magenta,\n      error: chalk.bold.magenta\n    };\n\n    const icon = statusIcons[status];\n    const color = statusColors[status];\n    const formattedMessage = message ? `: ${message}` : '';\n\n    console.log(color(`${this.prefix} ${icon} ${taskName}${formattedMessage}`));\n  }\n\n  table(data: Record<string, any>[]): void {\n    if (this.level > LogLevel.INFO) return;\n    console.table(data);\n  }\n\n  json(obj: any, pretty = true): void {\n    if (this.level > LogLevel.DEBUG) return;\n    console.log(chalk.magenta(`${this.prefix} [JSON]`));\n    console.log(pretty ? JSON.stringify(obj, null, 2) : JSON.stringify(obj));\n  }\n\n  divider(): void {\n    if (this.level > LogLevel.INFO) return;\n    console.log(chalk.magenta('─'.repeat(60)));\n  }\n\n  clear(): void {\n    console.clear();\n  }\n\n  /**\n   * プログレスバーを表示\n   */\n  progress(current: number, total: number, label?: string): void {\n    if (this.level > LogLevel.INFO) return;\n\n    const percentage = Math.round((current / total) * 100);\n    const barLength = 30;\n    const filled = Math.round((percentage / 100) * barLength);\n    const empty = barLength - filled;\n\n    const bar = '█'.repeat(filled) + '░'.repeat(empty);\n    const progressText = `${current}/${total}`;\n    const labelText = label ? ` ${label}` : '';\n\n    process.stdout.write(`\\r${chalk.bold.magenta(bar)} ${percentage}% ${progressText}${labelText}`);\n\n    if (current === total) {\n      process.stdout.write('\\n');\n    }\n  }\n}\n\n// シングルトンインスタンスをエクスポート\nexport const logger = new Logger();\n\n// 環境変数でログレベルを設定\nconst envLogLevel = process.env.MARIA_LOG_LEVEL?.toUpperCase();\nif (envLogLevel && LogLevel[envLogLevel as keyof typeof LogLevel] !== undefined) {\n  logger.setLevel(LogLevel[envLogLevel as keyof typeof LogLevel]);\n}","/**\n * Slash Command Handler\n * 対話モードでの/コマンドを処理\n */\n\nimport { ConversationContext } from '../types/conversation';\nimport { logger } from '../utils/logger';\nimport { readConfig, writeConfig } from '../utils/config';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { \n  commandCategories, \n  getCommandsByCategory, \n  getCommandInfo,\n  getRelatedCommands,\n  getCommandChain,\n  CommandCategory,\n  commandChains\n} from '../lib/command-groups';\nimport { SuggestionService, SuggestionContext } from './suggestion-service';\nimport { CommandChainService } from './command-chain-service';\nimport { AliasSystem } from './alias-system';\nimport { TemplateManager } from './template-manager';\nimport { BatchExecutionEngine } from './batch-execution';\nimport { HotkeyManager } from './hotkey-manager';\nimport { runInteractiveModelSelector } from '../commands/model-interactive.js';\nimport { ChatContextService } from './chat-context.service';\n\nexport interface SlashCommandResult {\n  success: boolean;\n  message: string;\n  data?: any;\n  requiresInput?: boolean;\n  component?: 'config-panel' | 'auth-flow' | 'help-dialog' | 'status-display' | 'system-diagnostics' | 'cost-display' | 'agents-display' | 'mcp-display' | 'model-selector' | 'image-generator' | 'video-generator';\n  suggestions?: string; // Formatted suggestion text\n}\n\nexport class SlashCommandHandler {\n  private static instance: SlashCommandHandler;\n  private suggestionService: SuggestionService;\n  private _chainService?: CommandChainService;\n  private aliasSystem: AliasSystem;\n  private templateManager: TemplateManager;\n  private batchEngine: BatchExecutionEngine;\n  private hotkeyManager: HotkeyManager;\n  private chatContextService: ChatContextService;\n  private userSession: {\n    isAuthenticated: boolean;\n    userId?: string;\n    plan: 'free' | 'pro' | 'max';\n    credits: number;\n    loginTime?: Date;\n  } = {\n    isAuthenticated: false,\n    plan: 'free',\n    credits: 100\n  };\n\n  private constructor() {\n    this.suggestionService = SuggestionService.getInstance();\n    this.aliasSystem = AliasSystem.getInstance();\n    this.templateManager = TemplateManager.getInstance();\n    this.batchEngine = BatchExecutionEngine.getInstance();\n    this.hotkeyManager = HotkeyManager.getInstance();\n    this.chatContextService = ChatContextService.getInstance();\n    // Lazy initialize chainService to avoid circular dependency\n  }\n\n  private get chainService(): CommandChainService {\n    if (!this._chainService) {\n      this._chainService = CommandChainService.getInstance();\n    }\n    return this._chainService;\n  }\n\n  public static getInstance(): SlashCommandHandler {\n    if (!SlashCommandHandler.instance) {\n      SlashCommandHandler.instance = new SlashCommandHandler();\n    }\n    return SlashCommandHandler.instance;\n  }\n\n  /**\n   * スラッシュコマンドを処理\n   */\n  async handleCommand(\n    command: string, \n    args: string[], \n    context: ConversationContext\n  ): Promise<SlashCommandResult> {\n    let commandName = command.toLowerCase();\n    let commandArgs = args;\n    \n    // Check if this is an alias\n    const aliasResolution = this.aliasSystem.resolveAlias(`${commandName} ${args.join(' ')}`.trim());\n    if (aliasResolution) {\n      logger.debug(`Resolved alias ${commandName} to ${aliasResolution.command}`);\n      commandName = aliasResolution.command;\n      commandArgs = aliasResolution.args;\n    }\n    \n    logger.debug(`Processing slash command: ${commandName}`, commandArgs);\n\n    // Add to history\n    this.suggestionService.addToHistory(commandName);\n\n    try {\n      let result: SlashCommandResult;\n      \n      switch (commandName) {\n        // ユーザー管理コマンド\n        case '/login':\n          result = await this.handleLogin(args);\n          break;\n        case '/logout':\n          result = await this.handleLogout(args);\n          break;\n        case '/mode':\n          result = await this.handleMode(args, context);\n          break;\n        case '/upgrade':\n          result = await this.handleUpgrade(args);\n          break;\n        case '/status':\n          result = await this.handleStatus();\n          break;\n\n        // 設定・環境管理\n        case '/config':\n          result = await this.handleConfig(args);\n          break;\n        case '/model':\n          result = await this.handleModel(args, context);\n          break;\n        case '/permissions':\n          result = await this.handlePermissions(args);\n          break;\n        case '/hooks':\n          result = await this.handleHooks(args);\n          break;\n        case '/doctor':\n          result = await this.handleDoctor();\n          break;\n        case '/terminal-setup':\n          result = await this.handleTerminalSetup();\n          break;\n\n        // プロジェクト管理\n        case '/init':\n          result = await this.handleInit();\n          break;\n        case '/add-dir':\n          result = await this.handleAddDir();\n          break;\n        case '/memory':\n          result = await this.handleMemory();\n          break;\n        case '/export':\n          result = await this.handleExport();\n          break;\n\n        // エージェント・統合管理\n        case '/agents':\n          result = await this.handleAgents();\n          break;\n        case '/mcp':\n          result = await this.handleMcp();\n          break;\n\n        // 対話・コスト管理\n        case '/clear':\n          result = await this.handleClear(context, commandArgs);\n          break;\n        case '/compact':\n          result = await this.handleCompact(context);\n          break;\n        case '/resume':\n          result = await this.handleResume(context);\n          break;\n        case '/cost':\n          result = await this.handleCost(context);\n          break;\n\n        // 開発支援機能\n        case '/review':\n          result = await this.handleReview();\n          break;\n        case '/pr-comments':\n          result = await this.handlePrComments();\n          break;\n        case '/bug':\n          result = await this.handleBug();\n          break;\n        case '/release-notes':\n          result = await this.handleReleaseNotes();\n          break;\n\n        // UIモード・ヘルプ\n        case '/vim':\n          result = await this.handleVim(context);\n          break;\n        case '/help':\n          result = await this.handleHelp(args);\n          break;\n        case '/version':\n          result = await this.handleVersion();\n          break;\n        case '/chain':\n          result = await this.handleChain(args, context);\n          break;\n        case '/suggest':\n          result = await this.handleSuggest(context);\n          break;\n        case '/alias':\n          result = await this.handleAlias(commandArgs);\n          break;\n        case '/template':\n          result = await this.handleTemplate(commandArgs);\n          break;\n        case '/batch':\n          result = await this.handleBatch(commandArgs, context);\n          break;\n        case '/hotkey':\n          result = await this.handleHotkey(commandArgs);\n          break;\n        case '/exit':\n          result = await this.handleExit(context);\n          break;\n\n        // インフラ移行\n        case '/migrate-installer':\n          result = await this.handleMigrateInstaller();\n          break;\n\n        // マルチメディア生成\n        case '/video':\n          result = await this.handleVideo(args);\n          break;\n        case '/image':\n          result = await this.handleImage(args);\n          break;\n\n        default:\n          result = {\n            success: false,\n            message: `Unknown command: ${commandName}. Type /help for available commands.`\n          };\n      }\n      \n      // Add suggestions to the result\n      return await this.addSuggestions(result, commandName, context);\n      \n    } catch (error) {\n      logger.error(`Slash command error: ${commandName}`, error);\n      return {\n        success: false,\n        message: `Error executing ${commandName}: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  /**\n   * Add suggestions to command result\n   */\n  private async addSuggestions(\n    result: SlashCommandResult,\n    commandName: string,\n    context: ConversationContext\n  ): Promise<SlashCommandResult> {\n    // Don't add suggestions for help or exit commands\n    if (!result.success || commandName === '/help' || commandName === '/exit') {\n      return result;\n    }\n\n    const suggestionContext: SuggestionContext = {\n      lastCommand: commandName,\n      lastCommandSuccess: result.success,\n      projectInitialized: await this.checkProjectInitialized(),\n      userLoggedIn: this.userSession.isAuthenticated,\n      currentMode: context.preferences?.defaultModel || 'chat'\n    };\n    \n    const suggestions = await this.suggestionService.getContextualSuggestions(suggestionContext);\n    \n    if (suggestions.length > 0) {\n      result.suggestions = this.suggestionService.formatSuggestions(suggestions);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Check if project is initialized\n   */\n  private async checkProjectInitialized(): Promise<boolean> {\n    try {\n      const config = await readConfig();\n      return config.project?.workingDirectories !== undefined && config.project.workingDirectories.length > 0;\n    } catch {\n      return false;\n    }\n  }\n\n  // ユーザー管理コマンド実装\n  private async handleLogin(args: string[]): Promise<SlashCommandResult> {\n    if (this.userSession.isAuthenticated) {\n      return {\n        success: true,\n        message: `Already logged in as user ${this.userSession.userId}`,\n        data: { user: this.userSession }\n      };\n    }\n\n    const provider = args[0] || 'email';\n    const validProviders = ['email', 'google', 'github'];\n    \n    if (!validProviders.includes(provider)) {\n      return {\n        success: false,\n        message: `Invalid provider: ${provider}. Available: ${validProviders.join(', ')}`\n      };\n    }\n\n    // TODO: 実際の認証フローを実装\n    // 現時点ではシミュレーション\n    this.userSession = {\n      isAuthenticated: true,\n      userId: `user-${uuidv4().slice(0, 8)}`,\n      plan: 'pro',\n      credits: 1000,\n      loginTime: new Date()\n    };\n\n    return {\n      success: true,\n      message: `Successfully logged in with ${provider}`,\n      data: { user: this.userSession },\n      component: 'auth-flow'\n    };\n  }\n\n  private async handleLogout(args: string[]): Promise<SlashCommandResult> {\n    if (!this.userSession.isAuthenticated) {\n      return {\n        success: false,\n        message: 'Not currently logged in'\n      };\n    }\n\n    const keepCache = args.includes('--keep-cache');\n    const keepSettings = args.includes('--keep-settings');\n\n    // セッションクリア\n    const oldUserId = this.userSession.userId;\n    this.userSession = {\n      isAuthenticated: false,\n      plan: 'free',\n      credits: 100\n    };\n\n    let message = `Logged out user ${oldUserId}`;\n    if (keepCache) message += ' (cache preserved)';\n    if (keepSettings) message += ' (settings preserved)';\n\n    return {\n      success: true,\n      message\n    };\n  }\n\n  private async handleMode(args: string[], context: ConversationContext): Promise<SlashCommandResult> {\n    const availableModes = ['chat', 'command', 'research', 'creative'];\n    const currentMode = context.preferences?.defaultModel || 'chat';\n\n    if (args.length === 0) {\n      return {\n        success: true,\n        message: `Current mode: ${currentMode}\\\\nAvailable modes: ${availableModes.join(', ')}`,\n        data: { currentMode, availableModes }\n      };\n    }\n\n    const newMode = args[0]?.toLowerCase();\n    if (!newMode || !availableModes.includes(newMode)) {\n      return {\n        success: false,\n        message: `Invalid mode: ${newMode || 'undefined'}. Available: ${availableModes.join(', ')}`\n      };\n    }\n\n    // コンテキストのモード更新\n    if (context.preferences) {\n      context.preferences.defaultModel = newMode as any;\n    }\n\n    // 設定ファイル更新\n    const config = await readConfig();\n    config.defaultMode = newMode as any;\n    await writeConfig(config);\n\n    return {\n      success: true,\n      message: `Mode switched to ${newMode}`,\n      data: { mode: newMode }\n    };\n  }\n\n  private async handleUpgrade(args: string[]): Promise<SlashCommandResult> {\n    const targetPlan = args[0]?.toLowerCase() || 'pro';\n    const validPlans = ['pro', 'max'];\n\n    if (!validPlans.includes(targetPlan)) {\n      return {\n        success: false,\n        message: `Invalid plan: ${targetPlan}. Available: ${validPlans.join(', ')}`\n      };\n    }\n\n    if (!this.userSession.isAuthenticated) {\n      return {\n        success: false,\n        message: 'Please login first with /login'\n      };\n    }\n\n    const currentPlan = this.userSession.plan;\n    if (currentPlan === targetPlan) {\n      return {\n        success: true,\n        message: `Already on ${targetPlan} plan`\n      };\n    }\n\n    // プラン更新シミュレーション\n    this.userSession.plan = targetPlan as 'pro' | 'max';\n    this.userSession.credits = targetPlan === 'pro' ? 5000 : 20000;\n\n    return {\n      success: true,\n      message: `Successfully upgraded to ${targetPlan} plan`,\n      data: { \n        plan: targetPlan,\n        credits: this.userSession.credits,\n        features: this.getPlanFeatures(targetPlan)\n      }\n    };\n  }\n\n  private async handleStatus(): Promise<SlashCommandResult> {\n    const config = await readConfig();\n    \n    const status = {\n      user: this.userSession,\n      system: {\n        version: '2.5.3',\n        mode: config.defaultMode || 'chat',\n        apiUrl: config.apiUrl || 'http://localhost:8080',\n        sandboxStatus: 'ready' // TODO: 実際のSandbox状態を取得\n      },\n      resources: {\n        memory: `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`,\n        uptime: `${Math.round(process.uptime())}s`\n      }\n    };\n\n    return {\n      success: true,\n      message: 'System status retrieved',\n      data: status,\n      component: 'status-display'\n    };\n  }\n\n  // 設定・環境管理コマンド\n  private async handleConfig(args: string[]): Promise<SlashCommandResult> {\n    const config = await readConfig();\n    \n    if (args.length === 0) {\n      return {\n        success: true,\n        message: 'Opening configuration panel',\n        data: { config },\n        component: 'config-panel'\n      };\n    }\n\n    const [key, value] = args;\n    if (value && key) {\n      // 設定更新\n      (config as any)[key] = value;\n      await writeConfig(config);\n      return {\n        success: true,\n        message: `Configuration updated: ${key} = ${value}`\n      };\n    } else if (key) {\n      // 設定値表示\n      const currentValue = (config as any)[key];\n      return {\n        success: true,\n        message: `${key}: ${currentValue || 'undefined'}`\n      };\n    }\n    \n    return {\n      success: false,\n      message: 'Invalid config command usage'\n    };\n  }\n\n  private async handleModel(args: string[], context: ConversationContext): Promise<SlashCommandResult> {\n    const cloudModels = [\n      // OpenAI Models\n      { id: 'gpt-4o', provider: 'OpenAI', name: 'GPT-4o', context: '128K', description: 'High accuracy, multimodal capabilities' },\n      { id: 'gpt-4-turbo', provider: 'OpenAI', name: 'GPT-4 Turbo', context: '128K', description: 'Fast reasoning and code generation' },\n      { id: 'o1', provider: 'OpenAI', name: 'o1', context: '128K', description: 'Advanced reasoning model' },\n      { id: 'o1-mini', provider: 'OpenAI', name: 'o1-mini', context: '128K', description: 'Faster reasoning model' },\n      \n      // Anthropic Models\n      { id: 'claude-3-opus', provider: 'Anthropic', name: 'Claude 3 Opus', context: '200K', description: 'Long text processing, complex tasks' },\n      { id: 'claude-3-sonnet', provider: 'Anthropic', name: 'Claude 3 Sonnet', context: '200K', description: 'Balanced performance and cost' },\n      { id: 'claude-3-haiku', provider: 'Anthropic', name: 'Claude 3 Haiku', context: '200K', description: 'Fast and lightweight' },\n      { id: 'claude-3-5-sonnet', provider: 'Anthropic', name: 'Claude 3.5 Sonnet', context: '200K', description: 'Latest balanced model' },\n      \n      // Google Models\n      { id: 'gemini-2.5-pro', provider: 'Google', name: 'Gemini 2.5 Pro', context: '128K', description: 'Research, analysis, vision capabilities' },\n      { id: 'gemini-1.5-pro', provider: 'Google', name: 'Gemini 1.5 Pro', context: '128K', description: 'Advanced multimodal model' },\n      { id: 'gemini-1.5-flash', provider: 'Google', name: 'Gemini 1.5 Flash', context: '128K', description: 'Fast inference model' },\n      \n      // Groq Models\n      { id: 'mixtral-8x7b', provider: 'Groq', name: 'Mixtral 8x7B', context: '32K', description: 'Fast inference, real-time responses' },\n      { id: 'llama-3-70b', provider: 'Groq', name: 'Llama 3 70B', context: '32K', description: 'Open source excellence' },\n      { id: 'llama-3-8b', provider: 'Groq', name: 'Llama 3 8B', context: '32K', description: 'Lightweight and fast' },\n      \n      // xAI Grok Models\n      { id: 'grok-beta', provider: 'xAI', name: 'Grok Beta', context: '128K', description: 'Real-time knowledge, humor-enabled' },\n      { id: 'grok-2', provider: 'xAI', name: 'Grok-2', context: '128K', description: 'Advanced reasoning with personality' }\n    ];\n\n    const localModels = [\n      // LM Studio Models - All configured with 32K context\n      { id: 'gpt-oss-120b', provider: 'LM Studio', name: 'GPT-OSS 120B', context: '32K', vram: '~64GB', description: 'Complex reasoning, optimized for M3 Mac' },\n      { id: 'gpt-oss-20b', provider: 'LM Studio', name: 'GPT-OSS 20B', context: '32K', vram: '~12GB', description: 'Balanced performance, fully expanded context' },\n      { id: 'qwen3-30b', provider: 'LM Studio', name: 'Qwen3 30B', context: '32K', vram: '~16GB', description: 'Multilingual enhanced, large context' },\n      { id: 'mistral-7b-v0.3', provider: 'LM Studio', name: 'Mistral 7B v0.3', context: '32K', vram: '~4GB', description: 'Fast inference with large context' },\n      \n      // Ollama Models\n      { id: 'qwen2.5-vl', provider: 'Ollama', name: 'Qwen2.5-VL', context: '8K', vram: '~8GB', description: 'Vision tasks and multimodal' }\n    ];\n    \n    const allModels = [...cloudModels, ...localModels];\n    const currentModel = context.preferences?.defaultModel || 'gemini-2.5-pro';\n    // Find current model info (unused for now)\n    const _currentModelInfo = allModels.find(m => m.id === currentModel);\n    void _currentModelInfo; // Will be used for UI display in future implementation\n\n    // If no arguments, launch interactive selector\n    if (args.length === 0) {\n      try {\n        const selectedModel = await runInteractiveModelSelector();\n        \n        if (selectedModel) {\n          // Update context and config\n          if (!context.preferences) {\n            context.preferences = {\n              language: 'ja',\n              verbosity: 'normal',\n              autoMode: false,\n              defaultModel: 'gemini-2.5-pro',\n              theme: 'dark'\n            };\n          }\n          context.preferences.defaultModel = selectedModel as any;\n          \n          const config = await readConfig();\n          config.defaultModel = selectedModel as any;\n          await writeConfig(config);\n          \n          return {\n            success: true,\n            message: `✅ Model switched to: ${selectedModel}`,\n            data: { model: selectedModel }\n          };\n        } else {\n          return {\n            success: false,\n            message: 'Model selection cancelled'\n          };\n        }\n      } catch (error) {\n        return {\n          success: false,\n          message: `Error selecting model: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n      }\n    }\n\n    const requestedModel = args[0]?.toLowerCase() || '';\n    const modelMap: Record<string, string> = {\n      // OpenAI models\n      'gpt-4o': 'gpt-4o',\n      'gpt4o': 'gpt-4o',\n      'gpt-4-turbo': 'gpt-4-turbo',\n      'gpt4turbo': 'gpt-4-turbo',\n      'o1': 'o1',\n      'o1-mini': 'o1-mini',\n      'o1mini': 'o1-mini',\n      \n      // Anthropic models\n      'claude-3-opus': 'claude-3-opus',\n      'claude3opus': 'claude-3-opus',\n      'opus': 'claude-3-opus',\n      'claude-3-sonnet': 'claude-3-sonnet',\n      'claude3sonnet': 'claude-3-sonnet',\n      'sonnet': 'claude-3-sonnet',\n      'claude-3-haiku': 'claude-3-haiku',\n      'claude3haiku': 'claude-3-haiku',\n      'haiku': 'claude-3-haiku',\n      'claude-3-5-sonnet': 'claude-3-5-sonnet',\n      'claude35sonnet': 'claude-3-5-sonnet',\n      'sonnet35': 'claude-3-5-sonnet',\n      \n      // Google models\n      'gemini': 'gemini-2.5-pro',\n      'gemini-2.5-pro': 'gemini-2.5-pro',\n      'gemini25pro': 'gemini-2.5-pro',\n      'gemini-1.5-pro': 'gemini-1.5-pro',\n      'gemini15pro': 'gemini-1.5-pro',\n      'gemini-1.5-flash': 'gemini-1.5-flash',\n      'gemini15flash': 'gemini-1.5-flash',\n      'flash': 'gemini-1.5-flash',\n      \n      // Groq models\n      'mixtral': 'mixtral-8x7b',\n      'mixtral-8x7b': 'mixtral-8x7b',\n      'llama3': 'llama-3-70b',\n      'llama-3-70b': 'llama-3-70b',\n      'llama-3-8b': 'llama-3-8b',\n      'llama3-8b': 'llama-3-8b',\n      \n      // xAI Grok models\n      'grok': 'grok-beta',\n      'grok-beta': 'grok-beta',\n      'grok-2': 'grok-2',\n      'grok2': 'grok-2',\n      \n      // Local models (LM Studio)\n      'gpt-oss-120b': 'gpt-oss-120b',\n      '120b': 'gpt-oss-120b',\n      'gpt-oss-20b': 'gpt-oss-20b',\n      '20b': 'gpt-oss-20b',\n      'qwen3-30b': 'qwen3-30b',\n      'qwen30b': 'qwen3-30b',\n      'qwen3': 'qwen3-30b',\n      'mistral-7b-v0.3': 'mistral-7b-v0.3',\n      'mistral': 'mistral-7b-v0.3',\n      'mistral7b': 'mistral-7b-v0.3',\n      \n      // Ollama models\n      'qwen2.5-vl': 'qwen2.5-vl',\n      'qwenvl': 'qwen2.5-vl',\n      'vision': 'qwen2.5-vl'\n    };\n    \n    const newModel = modelMap[requestedModel];\n    \n    if (!newModel) {\n      return {\n        success: false,\n        message: `❌ Invalid model: \"${args[0]}\"\\n\\n**Available models:**\\n☁️ **Cloud Models:**\\n• OpenAI: gpt-4o, gpt-4-turbo, o1, o1-mini\\n• Anthropic: claude-3-opus, claude-3-sonnet, claude-3-haiku, claude-3-5-sonnet\\n• Google: gemini-2.5-pro, gemini-1.5-pro, gemini-1.5-flash\\n• Groq: mixtral-8x7b, llama-3-70b, llama-3-8b\\n• xAI: grok-beta, grok-2\\n\\n💻 **Local Models:**\\n• LM Studio: gpt-oss-120b, gpt-oss-20b, qwen3-30b, mistral-7b-v0.3\\n• Ollama: qwen2.5-vl\\n\\nUse \\`/model\\` to see detailed information and context windows.`\n      };\n    }\n\n    // Update context preferences\n    if (!context.preferences) {\n      context.preferences = {\n        language: 'ja',\n        verbosity: 'normal',\n        autoMode: false,\n        defaultModel: 'gemini-2.5-pro',\n        theme: 'dark'\n      };\n    }\n    context.preferences.defaultModel = newModel as any;\n\n    // Update config file\n    try {\n      const config = await readConfig();\n      config.defaultModel = newModel as any;\n      await writeConfig(config);\n    } catch (error) {\n      return {\n        success: false,\n        message: `❌ Failed to save model configuration: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n\n    const newModelInfo = allModels.find(m => m.id === newModel);\n    const modelType = cloudModels.some(m => m.id === newModel) ? '☁️ Cloud' : '💻 Local';\n    let statusMessage = `✅ **AI Model Updated**\\n\\n`;\n    statusMessage += `🤖 **Active Model**: ${newModelInfo?.name || newModel}\\n`;\n    statusMessage += `📍 **Type**: ${modelType} (${newModelInfo?.provider || 'Unknown'})\\n`;\n    statusMessage += `📊 **Context**: ${newModelInfo?.context || 'N/A'}`;\n    if (newModelInfo && 'vram' in newModelInfo) {\n      statusMessage += ` | **VRAM**: ${newModelInfo.vram}`;\n    }\n    statusMessage += `\\n📝 **Optimized for**: ${newModelInfo?.description || 'Advanced AI tasks'}\\n\\n`;\n    statusMessage += `💡 Your next messages will use this model. Type something to test it!`;\n    \n    return {\n      success: true,\n      message: statusMessage,\n      data: { model: newModel, modelInfo: newModelInfo, type: modelType }\n    };\n  }\n\n  // 設定・環境管理コマンドの詳細実装\n  private async handlePermissions(args: string[]): Promise<SlashCommandResult> {\n    const config = await readConfig();\n    \n    if (args.length === 0) {\n      const permissions = config.permissions || {\n        fileAccess: true,\n        networkAccess: true,\n        systemCommands: false\n      };\n      \n      return {\n        success: true,\n        message: `Current permissions:\\n  File Access: ${permissions.fileAccess}\\n  Network Access: ${permissions.networkAccess}\\n  System Commands: ${permissions.systemCommands}`,\n        data: { permissions }\n      };\n    }\n\n    const [permission] = args;\n    const validPermissions = ['fileAccess', 'networkAccess', 'systemCommands'];\n    \n    if (!permission || !validPermissions.includes(permission)) {\n      return {\n        success: false,\n        message: `Invalid permission: ${permission || 'undefined'}. Available: ${validPermissions.join(', ')}`\n      };\n    }\n\n    // Permission modification not implemented yet\n\n    const currentValue = config.permissions?.[permission as keyof typeof config.permissions];\n    return {\n      success: true,\n      message: `${permission}: ${currentValue || 'undefined'}`\n    };\n  }\n\n  private async handleHooks(args: string[]): Promise<SlashCommandResult> {\n    const config = await readConfig();\n    \n    if (args.length === 0) {\n      const hooks = config.hooks || {};\n      const hooksList = Object.entries(hooks)\n        .map(([key, value]) => `  ${key}: ${value}`)\n        .join('\\n');\n      \n      return {\n        success: true,\n        message: `Configured hooks:\\n${hooksList || '  None'}`,\n        data: { hooks }\n      };\n    }\n\n    const [hookName, ...commandParts] = args;\n    const validHooks = ['onStart', 'onExit', 'onError'];\n    \n    if (!hookName || !validHooks.includes(hookName)) {\n      return {\n        success: false,\n        message: `Invalid hook: ${hookName || 'undefined'}. Available: ${validHooks.join(', ')}`\n      };\n    }\n\n    if (commandParts.length > 0) {\n      const command = commandParts.join(' ');\n      if (!config.hooks) config.hooks = {};\n      (config.hooks as any)[hookName] = command;\n      await writeConfig(config);\n      \n      return {\n        success: true,\n        message: `Hook ${hookName} set to: ${command}`\n      };\n    }\n\n    // フック削除\n    if (config.hooks && hookName && (config.hooks as any)[hookName]) {\n      delete (config.hooks as any)[hookName];\n      await writeConfig(config);\n      return {\n        success: true,\n        message: `Hook ${hookName} removed`\n      };\n    }\n\n    return {\n      success: true,\n      message: `Hook ${hookName} is not set`\n    };\n  }\n\n  private async handleDoctor(): Promise<SlashCommandResult> {\n    return {\n      success: true,\n      message: 'Running system diagnostics...',\n      component: 'system-diagnostics'\n    };\n  }\n\n  private async handleTerminalSetup(): Promise<SlashCommandResult> {\n    const instructions = `Terminal Setup Instructions:\n\n1. Bash/Zsh (Linux/macOS):\n   Add to ~/.bashrc or ~/.zshrc:\n   alias mc='npx @maria/code-cli'\n   bind '\"\\\\e[13;2u\": \"\\\\C-u mc chat \\\\C-m\"'  # Shift+Enter\n\n2. Fish Shell:\n   Add to ~/.config/fish/config.fish:\n   alias mc 'npx @maria/code-cli'\n   bind '\\\\e[13;2u' 'commandline \"mc chat\"; commandline -f execute'\n\n3. PowerShell (Windows):\n   Add to $PROFILE:\n   Set-Alias mc 'npx @maria/code-cli'\n   \n4. Terminal Configuration:\n   - Enable bracketed paste mode for better text handling\n   - Set TERM=xterm-256color for better color support\n   - Configure your terminal to send Shift+Enter as \\\\e[13;2u\n\n5. IDE Integration:\n   - VS Code: Install MARIA extension\n   - JetBrains: Configure external tool\n   - Vim/Neovim: Use terminal integration\n\nRun /config to customize MARIA settings.`;\n\n    return {\n      success: true,\n      message: instructions,\n      data: { setupComplete: false }\n    };\n  }\n\n  private async handleInit(): Promise<SlashCommandResult> {\n    try {\n      const rootPath = process.cwd();\n      const mariaPath = path.join(rootPath, 'MARIA.md');\n      const exists = fs.existsSync(mariaPath);\n      \n      if (exists) {\n        // Update existing MARIA.md with latest codebase analysis\n        console.log('📊 Analyzing codebase for MARIA.md update...');\n        const analysis = await this.analyzeCodebase(rootPath);\n        const updatedContent = await this.updateMariaMd(mariaPath, analysis);\n        \n        fs.writeFileSync(mariaPath, updatedContent, 'utf8');\n        \n        return {\n          success: true,\n          message: `✅ MARIA.md updated with latest codebase analysis\\n` +\n                  `📁 Analyzed: ${analysis.fileCount} files in ${analysis.directories.length} directories\\n` +\n                  `🏗️  Tech Stack: ${analysis.techStack.join(', ')}\\n` +\n                  `⏰ Updated: ${new Date().toISOString()}`\n        };\n      } else {\n        // Create new MARIA.md with codebase analysis\n        console.log('📊 Creating new MARIA.md with codebase analysis...');\n        const analysis = await this.analyzeCodebase(rootPath);\n        const content = await this.createMariaMd(rootPath, analysis);\n        \n        fs.writeFileSync(mariaPath, content, 'utf8');\n        \n        return {\n          success: true,\n          message: `✅ MARIA.md created successfully\\n` +\n                  `📁 Analyzed: ${analysis.fileCount} files in ${analysis.directories.length} directories\\n` +\n                  `🏗️  Tech Stack: ${analysis.techStack.join(', ')}\\n` +\n                  `📍 Location: ${mariaPath}`\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: `❌ Failed to initialize MARIA.md: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n\n  private async handleAddDir(): Promise<SlashCommandResult> {\n    return { success: true, message: 'Add directory (TODO: implement)' };\n  }\n\n  private async handleMemory(): Promise<SlashCommandResult> {\n    return { success: true, message: 'Memory management (TODO: implement)' };\n  }\n\n  private async handleExport(): Promise<SlashCommandResult> {\n    return { success: true, message: 'Export conversation (TODO: implement)' };\n  }\n\n  // エージェント・統合管理コマンド\n  private async handleAgents(): Promise<SlashCommandResult> {\n    const builtinAgents = [\n      { name: 'Paper Writer', status: 'available', description: 'Academic paper generation and LaTeX formatting' },\n      { name: 'Slides Creator', status: 'available', description: 'Presentation creation with AI content generation' },\n      { name: 'Code Reviewer', status: 'available', description: 'AI-powered code review and suggestions' },\n      { name: 'DevOps Engineer', status: 'available', description: 'Deployment and infrastructure management' }\n    ];\n\n    const ideIntegrations = [\n      { name: 'VS Code', status: 'available', description: 'MARIA extension for Visual Studio Code' },\n      { name: 'JetBrains', status: 'planned', description: 'IntelliJ IDEA and WebStorm integration' },\n      { name: 'Neovim', status: 'available', description: 'Terminal-based integration' }\n    ];\n\n    return {\n      success: true,\n      message: 'Opening AI agents management dashboard...',\n      data: { agents: builtinAgents, integrations: ideIntegrations },\n      component: 'agents-display'\n    };\n  }\n\n  private async handleMcp(): Promise<SlashCommandResult> {\n    const mcpServers = [\n      { name: 'Playwright', status: 'active', description: 'Browser automation and testing' },\n      { name: 'FileSystem', status: 'active', description: 'File operations and project management' },\n      { name: 'Git', status: 'active', description: 'Version control integration' },\n      { name: 'SQLite', status: 'available', description: 'Database operations and queries' },\n      { name: 'GitHub', status: 'available', description: 'GitHub API integration' }\n    ];\n\n    const activeServers = mcpServers.filter(s => s.status === 'active');\n    const availableServers = mcpServers.filter(s => s.status === 'available');\n\n    const message = `MCP (Model Context Protocol) Server Management:\n\n🟢 Active Servers (${activeServers.length}):\n${activeServers.map(server => `• ${server.name}: ${server.description}`).join('\\n')}\n\n⚪ Available Servers (${availableServers.length}):\n${availableServers.map(server => `• ${server.name}: ${server.description}`).join('\\n')}\n\n🔧 Management Commands:\n• /mcp start <server> - Start MCP server\n• /mcp stop <server> - Stop MCP server  \n• /mcp restart <server> - Restart MCP server\n• /mcp status - Show detailed server status\n• /mcp logs <server> - View server logs\n\n📊 Server Health:\n• Total capacity: 5 servers\n• Active connections: ${activeServers.length}\n• Memory usage: ~${Math.round(Math.random() * 100)}MB\n• Average response time: ${Math.round(Math.random() * 50 + 10)}ms\n\n[INFO] MCP servers provide AI models with tool capabilities for enhanced functionality.`;\n\n    return {\n      success: true,\n      message,\n      data: { servers: mcpServers, active: activeServers.length, available: availableServers.length }\n    };\n  }\n\n  private async handleClear(context: ConversationContext, args: string[]): Promise<SlashCommandResult> {\n    const option = args[0]?.toLowerCase();\n    const stats = this.chatContextService.getStats();\n    const historyCount = context.history.length;\n    const previousCost = context.metadata?.cost || 0;\n    const previousTokens = context.metadata?.totalTokens || 0;\n\n    // Parse options\n    const options = {\n      soft: option === '--soft',\n      hard: option === '--hard',\n      summary: option === '--summary'\n    };\n\n    // Handle soft clear (display only)\n    if (options.soft) {\n      this.chatContextService.clearContext({ soft: true });\n      return {\n        success: true,\n        message: `Display cleared (context preserved: ${stats.messagesInWindow} messages, ${stats.totalTokens} tokens)`,\n        data: {\n          type: 'soft',\n          preservedMessages: stats.messagesInWindow,\n          preservedTokens: stats.totalTokens\n        }\n      };\n    }\n\n    // Handle summary generation before clear\n    if (options.summary) {\n      const summary = await this.chatContextService.exportContext('markdown');\n      const summaryPath = path.join(process.env.HOME || '', '.maria', 'summaries', `summary-${Date.now()}.md`);\n      \n      try {\n        await fs.promises.mkdir(path.dirname(summaryPath), { recursive: true });\n        await fs.promises.writeFile(summaryPath, summary);\n        \n        this.chatContextService.clearContext({ summary: true });\n        context.history = [];\n        if (context.metadata) {\n          context.metadata.totalTokens = 0;\n          context.metadata.cost = 0;\n          context.metadata.lastActivity = new Date();\n        }\n        delete context.currentTask;\n\n        return {\n          success: true,\n          message: `Context cleared with summary (${historyCount} messages summarized → ${summaryPath})`,\n          data: {\n            type: 'summary',\n            summaryPath,\n            clearedMessages: historyCount,\n            freedTokens: previousTokens\n          }\n        };\n      } catch (error) {\n        logger.error('Failed to save summary:', error);\n      }\n    }\n\n    // Handle hard clear (complete reset)\n    const clearType = options.hard ? 'hard' : 'normal';\n    this.chatContextService.clearContext({ soft: false });\n    \n    // Clear conversation context\n    context.history = [];\n    if (context.metadata) {\n      context.metadata.totalTokens = 0;\n      context.metadata.cost = 0;\n      context.metadata.lastActivity = new Date();\n    }\n    delete context.currentTask;\n\n    // Display context usage indicator\n    const indicator = this.chatContextService.getTokenUsageIndicator();\n\n    return { \n      success: true, \n      message: `${clearType === 'hard' ? '🔄 Complete reset' : '🧹 Context cleared'} (${historyCount} messages, $${previousCost.toFixed(4)}, ${previousTokens} tokens freed)\\n${indicator}`,\n      data: { \n        type: clearType,\n        clearedMessages: historyCount,\n        freedCost: previousCost,\n        freedTokens: previousTokens,\n        compressionCount: stats.compressedCount\n      }\n    };\n  }\n\n  private async handleCompact(context: ConversationContext): Promise<SlashCommandResult> {\n    if (!context.history.length) {\n      return {\n        success: false,\n        message: 'No conversation history to compact'\n      };\n    }\n\n    const originalCount = context.history.length;\n    const originalTokens = context.metadata?.totalTokens || 0;\n\n    // 重要なメッセージのみを保持（エラー、重要なシステムメッセージ、最後の5つの交換）\n    const importantMessages = context.history.filter(msg => \n      msg.metadata?.error || \n      msg.role === 'system' ||\n      msg.metadata?.command\n    );\n\n    const recentMessages = context.history.slice(-10); // 最新10メッセージを保持\n    const compactedHistory = [\n      ...importantMessages.slice(0, 5), // 重要メッセージの最初の5つ\n      {\n        id: `compact-${Date.now()}`,\n        role: 'system' as const,\n        content: `[Conversation compacted: ${originalCount - recentMessages.length - 5} messages summarized]`,\n        timestamp: new Date(),\n        metadata: { command: 'compact' }\n      },\n      ...recentMessages\n    ];\n\n    // 重複を除去\n    const uniqueMessages = compactedHistory.filter((msg, index, arr) => \n      arr.findIndex(m => m.id === msg.id) === index\n    );\n\n    context.history = uniqueMessages;\n    \n    // トークン数を推定 (簡易計算: 文字数 ÷ 4)\n    const newTokenCount = Math.ceil(\n      uniqueMessages.reduce((sum, msg) => sum + msg.content.length, 0) / 4\n    );\n    \n    if (context.metadata) {\n      context.metadata.totalTokens = newTokenCount;\n      context.metadata.cost = newTokenCount * 0.000002; // 簡易計算\n    }\n\n    return { \n      success: true, \n      message: `Conversation compacted: ${originalCount} → ${uniqueMessages.length} messages (${Math.round((originalTokens - newTokenCount) / originalTokens * 100)}% size reduction)`,\n      data: {\n        originalCount,\n        compactedCount: uniqueMessages.length,\n        tokenReduction: originalTokens - newTokenCount,\n        reductionPercent: Math.round((originalTokens - newTokenCount) / originalTokens * 100)\n      }\n    };\n  }\n\n  private async handleResume(context: ConversationContext): Promise<SlashCommandResult> {\n    const resumeFile = `${process.cwd()}/.maria-session.json`;\n\n    try {\n      const fs = await import('fs/promises');\n      const resumeData = await fs.readFile(resumeFile, 'utf-8');\n      const savedContext = JSON.parse(resumeData) as Partial<ConversationContext>;\n\n      if (!savedContext.history) {\n        return {\n          success: false,\n          message: 'No saved conversation found to resume'\n        };\n      }\n\n      // 保存された会話を現在のコンテキストにマージ\n      context.history = savedContext.history.map(msg => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp)\n      }));\n\n      if (savedContext.currentTask) {\n        context.currentTask = {\n          ...savedContext.currentTask,\n          startTime: new Date(savedContext.currentTask.startTime)\n        };\n      }\n\n      if (savedContext.metadata) {\n        context.metadata = {\n          ...context.metadata,\n          ...savedContext.metadata,\n          startTime: new Date(savedContext.metadata.startTime || Date.now()),\n          lastActivity: new Date(savedContext.metadata.lastActivity || Date.now())\n        };\n      }\n\n      // レジューム後はファイルを削除\n      await fs.unlink(resumeFile);\n\n      return { \n        success: true, \n        message: `Conversation resumed: ${context.history.length} messages restored${context.currentTask ? ` (task: ${context.currentTask.title || context.currentTask.type})` : ''}`,\n        data: {\n          messagesRestored: context.history.length,\n          taskRestored: !!context.currentTask,\n          lastActivity: context.metadata?.lastActivity\n        }\n      };\n\n    } catch (error) {\n      if ((error as any).code === 'ENOENT') {\n        return {\n          success: false,\n          message: 'No saved conversation found to resume'\n        };\n      }\n      \n      logger.error('Resume conversation error', error);\n      return {\n        success: false,\n        message: `Failed to resume conversation: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async handleCost(context: ConversationContext): Promise<SlashCommandResult> {\n    const cost = context.metadata?.cost || 0;\n    const tokens = context.metadata?.totalTokens || 0;\n    const sessionStart = context.metadata?.startTime || new Date();\n    const duration = Math.round((Date.now() - sessionStart.getTime()) / 1000);\n    const messageCount = context.history.length;\n\n    // ユーザープランに基づくコスト制限を取得\n    const dailyLimit = this.userSession.plan === 'free' ? 100 : \n                      this.userSession.plan === 'pro' ? 5000 : 20000;\n    const remainingCredits = this.userSession.credits;\n\n    // 詳細な使用量統計\n    const stats = {\n      session: {\n        cost: cost,\n        tokens: tokens,\n        messages: messageCount,\n        duration: `${Math.floor(duration / 60)}m ${duration % 60}s`,\n        avgCostPerMessage: messageCount > 0 ? (cost / messageCount) : 0\n      },\n      user: {\n        plan: this.userSession.plan,\n        dailyLimit: dailyLimit,\n        remainingCredits: remainingCredits,\n        usagePercent: Math.round((dailyLimit - remainingCredits) / dailyLimit * 100)\n      },\n      projected: {\n        hourlyRate: duration > 0 ? (cost * 3600 / duration) : 0,\n        dailyProjection: duration > 0 ? (cost * 86400 / duration) : 0\n      }\n    };\n\n    return {\n      success: true,\n      message: 'Opening cost analysis dashboard...',\n      data: stats,\n      component: 'cost-display'\n    };\n  }\n\n  private async handleReview(args: string[] = []): Promise<SlashCommandResult> {\n    try {\n      // GitHub CLI を使用してPR情報を取得\n      const { execSync } = await import('child_process');\n      \n      // カレントブランチのPR番号を取得\n      let prNumber = args[0];\n      if (!prNumber) {\n        try {\n          const prInfo = execSync('gh pr view --json number', { encoding: 'utf-8' });\n          const parsed = JSON.parse(prInfo);\n          prNumber = parsed.number;\n        } catch {\n          return {\n            success: false,\n            message: 'No PR found for current branch. Please specify PR number: /review <pr-number>'\n          };\n        }\n      }\n\n      // PR詳細情報を取得\n      const prDetails = execSync(`gh pr view ${prNumber} --json title,body,commits,files,comments,reviews`, { encoding: 'utf-8' });\n      const pr = JSON.parse(prDetails);\n\n      // PR差分を取得\n      const diffOutput = execSync(`gh pr diff ${prNumber}`, { encoding: 'utf-8' });\n\n      // レビュー分析の実行\n      const analysis = {\n        title: pr.title,\n        description: pr.body || 'No description provided',\n        filesChanged: pr.files?.length || 0,\n        commits: pr.commits?.length || 0,\n        existingComments: pr.comments?.length || 0,\n        reviews: pr.reviews?.length || 0,\n        diffSize: diffOutput.split('\\n').length,\n        complexity: this.analyzePRComplexity(diffOutput),\n        suggestions: this.generateReviewSuggestions(pr, diffOutput)\n      };\n\n      const message = `PR Review Analysis - #${prNumber}:\n📋 Title: ${analysis.title}\n📊 Stats: ${analysis.filesChanged} files, ${analysis.commits} commits, ${analysis.diffSize} diff lines\n🔍 Complexity: ${analysis.complexity}\n💬 Existing: ${analysis.existingComments} comments, ${analysis.reviews} reviews\n\n[AI] Suggestions:\n${analysis.suggestions.map((s, i) => `${i + 1}. ${s}`).join('\\n')}\n\nUse 'gh pr comment ${prNumber} --body \"<comment>\"' to add feedback.`;\n\n      return {\n        success: true,\n        message,\n        data: { prNumber, analysis, diff: diffOutput }\n      };\n\n    } catch (error) {\n      logger.error('PR review error', error);\n      return {\n        success: false,\n        message: `Failed to review PR: ${error instanceof Error ? error.message : 'Unknown error'}. Make sure GitHub CLI is installed and you're authenticated.`\n      };\n    }\n  }\n\n  private async handlePrComments(args: string[] = []): Promise<SlashCommandResult> {\n    try {\n      const { execSync } = await import('child_process');\n      \n      let prNumber = args[0];\n      if (!prNumber) {\n        try {\n          const prInfo = execSync('gh pr view --json number', { encoding: 'utf-8' });\n          const parsed = JSON.parse(prInfo);\n          prNumber = parsed.number;\n        } catch {\n          return {\n            success: false,\n            message: 'No PR found for current branch. Please specify PR number: /pr-comments <pr-number>'\n          };\n        }\n      }\n\n      // PR コメントとレビューを取得\n      const commentsData = execSync(`gh pr view ${prNumber} --json comments,reviews`, { encoding: 'utf-8' });\n      const data = JSON.parse(commentsData);\n\n      const comments = data.comments || [];\n      const reviews = data.reviews || [];\n      \n      // コメントを時系列でソート\n      const allFeedback = [\n        ...comments.map((c: any) => ({ ...c, type: 'comment' })),\n        ...reviews.map((r: any) => ({ ...r, type: 'review' }))\n      ].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n      if (!allFeedback.length) {\n        return {\n          success: true,\n          message: `No comments or reviews found for PR #${prNumber}`,\n          data: { prNumber, comments: [], reviews: [] }\n        };\n      }\n\n      // フィードバック分析\n      const analysis = {\n        totalComments: comments.length,\n        totalReviews: reviews.length,\n        approvals: reviews.filter((r: any) => r.state === 'APPROVED').length,\n        changeRequests: reviews.filter((r: any) => r.state === 'CHANGES_REQUESTED').length,\n        pendingReviews: reviews.filter((r: any) => r.state === 'PENDING').length,\n        actionItems: this.extractActionItems(allFeedback),\n        sentiment: this.analyzeFeedbackSentiment(allFeedback)\n      };\n\n      const message = `PR Comments Analysis - #${prNumber}:\n📊 Overview: ${analysis.totalComments} comments, ${analysis.totalReviews} reviews\n[OK] Approvals: ${analysis.approvals}\n[REQ] Change Requests: ${analysis.changeRequests}\n[WAIT] Pending: ${analysis.pendingReviews}\n😊 Sentiment: ${analysis.sentiment}\n\n🎯 Action Items (${analysis.actionItems.length}):\n${analysis.actionItems.map((item, i) => `${i + 1}. ${item}`).join('\\n')}\n\nRecent Feedback:\n${allFeedback.slice(-3).map((fb: any) => \n  `• ${fb.author?.login || 'Unknown'} (${fb.type}): ${(fb.body || '').substring(0, 100)}...`\n).join('\\n')}`;\n\n      return {\n        success: true,\n        message,\n        data: { prNumber, analysis, feedback: allFeedback }\n      };\n\n    } catch (error) {\n      logger.error('PR comments error', error);\n      return {\n        success: false,\n        message: `Failed to get PR comments: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async handleBug(args: string[] = []): Promise<SlashCommandResult> {\n    const bugType = args[0] || 'general';\n    const description = args.slice(1).join(' ');\n\n    if (!description) {\n      return {\n        success: false,\n        message: 'Please provide a bug description: /bug <type> <description>',\n        data: { \n          availableTypes: ['crash', 'performance', 'ui', 'api', 'security', 'feature', 'general'],\n          example: '/bug crash \"CLI crashes when running /export command\"' \n        }\n      };\n    }\n\n    try {\n      // システム情報を収集\n      const systemInfo = {\n        platform: process.platform,\n        nodeVersion: process.version,\n        cliVersion: '2.5.3', // TODO: package.jsonから動的に取得\n        workingDirectory: process.cwd(),\n        timestamp: new Date().toISOString(),\n        user: this.userSession.userId || 'anonymous'\n      };\n\n      // バグレポートの構造化\n      const bugReport = {\n        type: bugType,\n        description: description,\n        system: systemInfo,\n        context: {\n          lastCommands: [], // TODO: コマンド履歴から取得\n          projectType: 'unknown', // TODO: プロジェクト検出\n          reproductionSteps: []\n        },\n        severity: this.assessBugSeverity(bugType, description),\n        reportId: `bug-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      };\n\n      // ローカルファイルに保存（フィードバック収集用）\n      const fs = await import('fs/promises');\n      const reportsDir = `${process.cwd()}/.maria-reports`;\n      \n      try {\n        await fs.mkdir(reportsDir, { recursive: true });\n        await fs.writeFile(\n          `${reportsDir}/${bugReport.reportId}.json`,\n          JSON.stringify(bugReport, null, 2)\n        );\n      } catch (saveError) {\n        logger.warn('Could not save bug report locally', saveError);\n      }\n\n      const message = `Bug Report Submitted 🐛:\n🆔 Report ID: ${bugReport.reportId}\n📝 Type: ${bugType}\n📊 Severity: ${bugReport.severity}\n🔧 Description: ${description}\n\n💻 System Info:\n• Platform: ${systemInfo.platform}\n• Node.js: ${systemInfo.nodeVersion}\n• CLI Version: ${systemInfo.cliVersion}\n\n📁 Saved to: .maria-reports/${bugReport.reportId}.json\n\nThank you for helping improve MARIA! 🙏\nFor urgent issues, please contact support at https://github.com/anthropics/claude-code/issues`;\n\n      return {\n        success: true,\n        message,\n        data: { bugReport, reportPath: `${reportsDir}/${bugReport.reportId}.json` }\n      };\n\n    } catch (error) {\n      logger.error('Bug report error', error);\n      return {\n        success: false,\n        message: `Failed to submit bug report: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async handleReleaseNotes(args: string[] = []): Promise<SlashCommandResult> {\n    const version = args[0] || 'latest';\n    \n    try {\n      const { execSync } = await import('child_process');\n      \n      // GitHub API を使用してリリース情報を取得\n      let releaseData: string;\n      \n      try {\n        if (version === 'latest') {\n          releaseData = execSync('gh release view --json tagName,name,body,publishedAt,assets', { encoding: 'utf-8' });\n        } else {\n          releaseData = execSync(`gh release view ${version} --json tagName,name,body,publishedAt,assets`, { encoding: 'utf-8' });\n        }\n      } catch (ghError: any) {\n        // No release found - return graceful message\n        if (ghError.stderr?.includes('release not found') || ghError.message?.includes('release not found')) {\n          return {\n            success: true,\n            message: `📦 Release Notes\\n\\nNo releases found in this repository yet.\\n\\nOnce releases are published, you can view them with:\\n  /release-notes        - Latest release\\n  /release-notes v1.0.0 - Specific version`\n          };\n        }\n        throw ghError;\n      }\n      \n      const release = JSON.parse(releaseData);\n      \n      // リリースノートの解析\n      const analysis = {\n        version: release.tagName,\n        title: release.name,\n        publishDate: new Date(release.publishedAt).toLocaleDateString(),\n        bodyLength: (release.body || '').length,\n        features: this.extractFeatures(release.body || ''),\n        bugFixes: this.extractBugFixes(release.body || ''),\n        breakingChanges: this.extractBreakingChanges(release.body || ''),\n        assets: release.assets?.length || 0\n      };\n\n      const message = `Release Notes - ${analysis.version}:\n📅 Released: ${analysis.publishDate}\n🏷️  Title: ${analysis.title}\n\n✨ New Features (${analysis.features.length}):\n${analysis.features.map(f => `• ${f}`).join('\\n') || '• None listed'}\n\n🐛 Bug Fixes (${analysis.bugFixes.length}):\n${analysis.bugFixes.map(f => `• ${f}`).join('\\n') || '• None listed'}\n\n[WARN] Breaking Changes (${analysis.breakingChanges.length}):\n${analysis.breakingChanges.map(c => `• ${c}`).join('\\n') || '• None'}\n\n📦 Assets: ${analysis.assets} files available\n📄 Full notes: gh release view ${analysis.version}`;\n\n      return {\n        success: true,\n        message,\n        data: { release, analysis }\n      };\n\n    } catch (error) {\n      logger.error('Release notes error', error);\n      \n      // Fallback to built-in version info\n      const fallbackMessage = `Release Notes - Current Version (2.5.3):\n📅 Released: 2025-01-30\n🏷️  Title: CLI Extensions & Slash Commands Complete\n\n✨ New Features:\n• Complete slash command system (38 commands)\n• Conversation management (/clear, /compact, /resume, /cost)\n• Development support (/review, /pr-comments, /bug, /release-notes)\n• Project management (/init, /add-dir, /memory, /export)\n• System diagnostics and configuration\n• Enhanced UI modes and help system\n\n🐛 Bug Fixes:\n• TypeScript type safety improvements\n• ESLint compliance fixes\n• CLI stability enhancements\n\n[WARN] Breaking Changes:\n• None\n\nFor latest releases: https://github.com/anthropics/claude-code/releases`;\n\n      return {\n        success: true,\n        message: fallbackMessage,\n        data: { version: '2.5.3', source: 'fallback' }\n      };\n    }\n  }\n\n  private async handleVim(context: ConversationContext): Promise<SlashCommandResult> {\n    const config = await readConfig();\n    \n    // Vim モードの現在の状態を取得\n    const currentVimMode = config.cli?.vimMode || false;\n    const newVimMode = !currentVimMode;\n    \n    // Vim モード設定を更新\n    if (context.preferences) {\n      (context.preferences as any).vimMode = newVimMode;\n    }\n    \n    // 設定ファイルに保存\n    if (!config.cli) config.cli = {};\n    config.cli.vimMode = newVimMode;\n    if (!config.cli.keyBindings) config.cli.keyBindings = {};\n    config.cli.keyBindings.mode = newVimMode ? 'vim' : 'emacs';\n    await writeConfig(config);\n\n    // Vim モードの機能説明\n    const vimFeatures = [\n      'hjkl navigation in chat history',\n      'i/a for input mode, Esc for normal mode',\n      ':q to exit, :w to save conversation',\n      'dd to delete message, yy to copy',\n      '/ for search, n/N for next/previous',\n      'u for undo, Ctrl+r for redo'\n    ];\n\n    const normalFeatures = [\n      'Arrow keys for navigation',\n      'Standard copy/paste (Ctrl+C/V)',\n      'Tab completion for commands',\n      'Standard terminal shortcuts'\n    ];\n\n    const message = newVimMode \n      ? `Vim Mode Enabled [ON]\\n\\nVim-style keyboard shortcuts activated:\\n${vimFeatures.map(f => `• ${f}`).join('\\n')}\\n\\nPress Esc to enter normal mode, i to enter insert mode.`\n      : `Normal Mode Enabled [NORMAL]\\n\\nStandard keyboard shortcuts restored:\\n${normalFeatures.map(f => `• ${f}`).join('\\n')}\\n\\nVim keybindings disabled.`;\n\n    return {\n      success: true,\n      message,\n      data: { \n        vimMode: newVimMode,\n        keyBindings: config.cli?.keyBindings,\n        features: newVimMode ? vimFeatures : normalFeatures\n      }\n    };\n  }\n\n  private async handleVersion(): Promise<SlashCommandResult> {\n    const packageJson = {\n      name: '@maria/code-cli',\n      version: '1.0.0'\n    };\n    \n    return {\n      success: true,\n      message: `MARIA CODE CLI v${packageJson.version}\\n\\nAI-Powered Development Platform\\n© 2025 Bonginkan Inc.`\n    };\n  }\n\n  private async handleHelp(args: string[]): Promise<SlashCommandResult> {\n    const arg = args[0]?.toLowerCase();\n    \n    // If no argument, show general help\n    if (!arg) {\n      let helpText = `🚀 MARIA CODE - Interactive AI Development CLI\\n\\n`;\n      helpText += `Usage: /help [category|command]\\n\\n`;\n      helpText += `📚 COMMAND CATEGORIES:\\n\\n`;\n      \n      // Show all categories with their descriptions\n      Object.entries(commandCategories).forEach(([key, name]) => {\n        const category = key as CommandCategory;\n        const commands = getCommandsByCategory(category);\n        helpText += `  ${name.padEnd(25)} - ${commands.length} commands\\n`;\n        helpText += `  /help ${key.padEnd(20)} - Show ${name.toLowerCase()} commands\\n\\n`;\n      });\n\n      helpText += `💡 TIPS:\\n`;\n      helpText += `  • Use Tab for command completion\\n`;\n      helpText += `  • /help <command> for detailed info (e.g., /help /init)\\n`;\n      helpText += `  • Commands suggest related actions after execution\\n`;\n      helpText += `  • Chain commands for workflows (e.g., /init → /add-dir → /memory)\\n\\n`;\n      \n      const totalCommands = Object.keys(commandCategories).reduce(\n        (sum, cat) => sum + getCommandsByCategory(cat as CommandCategory).length, 0\n      );\n      helpText += `Total commands available: ${totalCommands}`;\n\n      return {\n        success: true,\n        message: helpText,\n        component: 'help-dialog'\n      };\n    }\n    \n    // Check if argument is a category\n    if (arg in commandCategories) {\n      const category = arg as CommandCategory;\n      const categoryName = commandCategories[category];\n      const commands = getCommandsByCategory(category);\n      \n      let helpText = `📖 ${categoryName.toUpperCase()}\\n\\n`;\n      \n      commands.forEach(cmd => {\n        helpText += `${cmd.command.padEnd(20)} - ${cmd.description}\\n`;\n        if (cmd.usage) {\n          helpText += `  Usage: ${cmd.usage}\\n`;\n        }\n        if (cmd.examples && cmd.examples.length > 0) {\n          helpText += `  Examples:\\n`;\n          cmd.examples.forEach(ex => helpText += `    ${ex}\\n`);\n        }\n        if (cmd.relatedCommands && cmd.relatedCommands.length > 0) {\n          helpText += `  Related: ${cmd.relatedCommands.join(', ')}\\n`;\n        }\n        helpText += '\\n';\n      });\n      \n      return {\n        success: true,\n        message: helpText,\n        component: 'help-dialog'\n      };\n    }\n    \n    // Check if argument is a specific command\n    const commandArg = arg.startsWith('/') ? arg : `/${arg}`;\n    const commandInfo = getCommandInfo(commandArg);\n    \n    if (commandInfo) {\n      let helpText = `📌 Command: ${commandInfo.command}\\n\\n`;\n      helpText += `Description: ${commandInfo.description}\\n\\n`;\n      \n      if (commandInfo.usage) {\n        helpText += `Usage: ${commandInfo.usage}\\n\\n`;\n      }\n      \n      if (commandInfo.examples && commandInfo.examples.length > 0) {\n        helpText += `Examples:\\n`;\n        commandInfo.examples.forEach(ex => helpText += `  ${ex}\\n`);\n        helpText += '\\n';\n      }\n      \n      if (commandInfo.relatedCommands && commandInfo.relatedCommands.length > 0) {\n        helpText += `Related Commands:\\n`;\n        const related = getRelatedCommands(commandInfo.command);\n        related.forEach(rel => {\n          helpText += `  ${rel.command.padEnd(15)} - ${rel.description}\\n`;\n        });\n        helpText += '\\n';\n      }\n      \n      // Check if this command is part of a workflow\n      const chain = getCommandChain(commandInfo.command);\n      if (chain) {\n        helpText += `\\n🔗 Part of workflow: \"${chain.name}\"\\n`;\n        helpText += `  ${chain.description}\\n`;\n        helpText += `  Chain: ${chain.commands.join(' → ')}\\n`;\n      }\n      \n      return {\n        success: true,\n        message: helpText,\n        component: 'help-dialog'\n      };\n    }\n    \n    // Unknown argument\n    return {\n      success: false,\n      message: `Unknown help topic: ${arg}\\n\\nTry:\\n  /help - Show all categories\\n  /help <category> - Show category commands\\n  /help <command> - Show command details`\n    };\n\n    return {\n      success: true,\n      message: `📚 MARIA CLI Help - ${Object.keys(commandCategories).length} Categories, ${Object.keys(commandCategories).reduce((sum, categoryKey) => sum + getCommandsByCategory(categoryKey as CommandCategory).length, 0)} Commands`,\n      component: 'help-dialog',\n      data: { categories: commandCategories, totalCommands: Object.keys(commandCategories).reduce((sum, categoryKey) => sum + getCommandsByCategory(categoryKey as CommandCategory).length, 0) }\n    };\n  }\n\n  private async handleSuggest(context: ConversationContext): Promise<SlashCommandResult> {\n    const suggestionContext: SuggestionContext = {\n      projectInitialized: await this.checkProjectInitialized(),\n      userLoggedIn: this.userSession.isAuthenticated,\n      currentMode: context.preferences?.defaultModel || 'chat',\n      sessionDuration: Date.now() - this.sessionStartTime,\n      commandHistory: this.suggestionService.getCommandHistory()\n    };\n    \n    // Get contextual suggestions\n    const suggestions = await this.suggestionService.getContextualSuggestions(suggestionContext);\n    \n    // Get most used commands\n    const mostUsed = this.suggestionService.getMostUsedCommands(5);\n    \n    // Get current workflow if any\n    const lastCommand = this.suggestionService.getLastCommand();\n    const currentChain = lastCommand ? getCommandChain(lastCommand) : undefined;\n    \n    let message = '💡 Intelligent Command Suggestions\\n\\n';\n    \n    // Context-based suggestions\n    if (suggestions.length > 0) {\n      message += '📍 Based on current context:\\n';\n      suggestions.forEach(sug => {\n        message += `  ${sug.command.padEnd(15)} - ${sug.description}`;\n        if (sug.reason) {\n          message += ` (${sug.reason})`;\n        }\n        message += '\\n';\n      });\n      message += '\\n';\n    }\n    \n    // Workflow suggestions\n    if (currentChain) {\n      message += `🔗 Current workflow: \"${currentChain.name}\"\\n`;\n      const currentIndex = lastCommand ? currentChain.commands.indexOf(lastCommand) : -1;\n      if (currentIndex !== -1 && currentIndex < currentChain.commands.length - 1) {\n        message += `  Next: ${currentChain.commands[currentIndex + 1]}\\n`;\n        message += `  Complete chain: /chain ${Object.keys(commandChains).find(k => commandChains[k as keyof typeof commandChains] === currentChain)}\\n`;\n      }\n      message += '\\n';\n    }\n    \n    // Frequently used commands\n    if (mostUsed.length > 0) {\n      message += '⭐ Your frequently used commands:\\n';\n      mostUsed.forEach((cmd, i) => {\n        message += `  ${(i + 1)}. ${cmd}\\n`;\n      });\n      message += '\\n';\n    }\n    \n    // Smart recommendations based on patterns\n    message += '🤖 Smart recommendations:\\n';\n    \n    if (!suggestionContext.projectInitialized) {\n      message += '  • Start with /init to initialize your project\\n';\n    } else {\n      const timeMinutes = (suggestionContext.sessionDuration || 0) / 60000;\n      \n      if (timeMinutes > 60) {\n        message += '  • Consider /compact to optimize memory (long session)\\n';\n      }\n      \n      if (!this.suggestionService.hasUsedCommand('/test')) {\n        message += '  • Try /test to ensure code quality\\n';\n      }\n      \n      if (!this.suggestionService.hasUsedCommand('/agents')) {\n        message += '  • Explore /agents for AI-powered assistance\\n';\n      }\n    }\n    \n    message += '\\nTip: Use /help <command> for detailed information about any command';\n    \n    return {\n      success: true,\n      message,\n      data: {\n        suggestions,\n        mostUsed,\n        currentWorkflow: currentChain?.name\n      }\n    };\n  }\n\n  private sessionStartTime = Date.now();\n\n  private async handleAlias(args: string[]): Promise<SlashCommandResult> {\n    const subCommand = args[0];\n    \n    // If no subcommand, list all aliases\n    if (!subCommand) {\n      const { userAliases, builtInAliases } = this.aliasSystem.listAliases();\n      \n      let message = '🔤 Command Aliases\\n\\n';\n      \n      // Built-in aliases\n      if (builtInAliases.length > 0) {\n        message += '📌 Built-in Aliases:\\n';\n        builtInAliases.forEach(alias => {\n          message += `  ${alias.alias.padEnd(8)} → ${alias.command.padEnd(15)} - ${alias.description}`;\n          if (alias.usageCount > 0) {\n            message += ` (used ${alias.usageCount}x)`;\n          }\n          message += '\\n';\n        });\n        message += '\\n';\n      }\n      \n      // User aliases\n      if (userAliases.length > 0) {\n        message += '⭐ Your Custom Aliases:\\n';\n        userAliases.forEach(alias => {\n          message += `  ${alias.alias.padEnd(8)} → ${alias.command.padEnd(15)} - ${alias.description}`;\n          if (alias.usageCount > 0) {\n            message += ` (used ${alias.usageCount}x)`;\n          }\n          message += '\\n';\n        });\n        message += '\\n';\n      } else {\n        message += '💡 No custom aliases yet. Create one with: /alias add <alias> <command>\\n\\n';\n      }\n      \n      message += 'Usage:\\n';\n      message += '  /alias add <alias> <command> [description] - Create new alias\\n';\n      message += '  /alias remove <alias>                      - Remove alias\\n';\n      message += '  /alias export                              - Export aliases to JSON\\n';\n      message += '  /alias import <json>                       - Import aliases from JSON\\n';\n      message += '\\nExample: /alias add /gs \"/git status\" \"Quick git status\"';\n      \n      return {\n        success: true,\n        message\n      };\n    }\n    \n    // Handle subcommands\n    switch (subCommand) {\n      case 'add': {\n        const alias = args[1];\n        const command = args[2];\n        const description = args.slice(3).join(' ');\n        \n        if (!alias || !command) {\n          return {\n            success: false,\n            message: 'Usage: /alias add <alias> <command> [description]\\nExample: /alias add /gs \"/git status\" \"Quick git status\"'\n          };\n        }\n        \n        return await this.aliasSystem.createAlias(alias, command, description);\n      }\n      \n      case 'remove': {\n        const alias = args[1];\n        \n        if (!alias) {\n          return {\n            success: false,\n            message: 'Usage: /alias remove <alias>'\n          };\n        }\n        \n        return await this.aliasSystem.removeAlias(alias);\n      }\n      \n      case 'export': {\n        const exportData = this.aliasSystem.exportAliases();\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const filename = `maria-aliases-${timestamp}.json`;\n        \n        try {\n          const fs = await import('fs/promises');\n          await fs.writeFile(filename, exportData);\n          \n          return {\n            success: true,\n            message: `✅ Aliases exported to ${filename}\\n\\n${exportData}`\n          };\n        } catch (error) {\n          return {\n            success: false,\n            message: `Failed to export aliases: ${error instanceof Error ? error.message : 'Unknown error'}`\n          };\n        }\n      }\n      \n      case 'import': {\n        const filename = args[1];\n        \n        if (!filename) {\n          return {\n            success: false,\n            message: 'Usage: /alias import <filename>'\n          };\n        }\n        \n        try {\n          const fs = await import('fs/promises');\n          const jsonData = await fs.readFile(filename, 'utf-8');\n          return await this.aliasSystem.importAliases(jsonData);\n        } catch (error) {\n          return {\n            success: false,\n            message: `Failed to import aliases: ${error instanceof Error ? error.message : 'Unknown error'}`\n          };\n        }\n      }\n      \n      default:\n        return {\n          success: false,\n          message: `Unknown alias command: ${subCommand}\\n\\nAvailable commands: add, remove, export, import`\n        };\n    }\n  }\n\n  private async handleTemplate(args: string[]): Promise<SlashCommandResult> {\n    const subCommand = args[0];\n    \n    // If no subcommand, list all templates\n    if (!subCommand) {\n      const { userTemplates, builtInTemplates } = this.templateManager.listTemplates();\n      \n      let message = '📋 Command Templates\\n\\n';\n      \n      // Built-in templates\n      if (builtInTemplates.length > 0) {\n        message += '🏭 Built-in Templates:\\n';\n        builtInTemplates.forEach(template => {\n          message += `\\n  📌 ${template.name} (ID: ${template.id})\\n`;\n          message += `     ${template.description}\\n`;\n          message += `     Commands: ${template.commands.length} | Tags: ${template.tags?.join(', ') || 'none'}`;\n          if (template.usageCount > 0) {\n            message += ` | Used: ${template.usageCount}x`;\n          }\n          message += '\\n';\n        });\n        message += '\\n';\n      }\n      \n      // User templates\n      if (userTemplates.length > 0) {\n        message += '⭐ Your Templates:\\n';\n        userTemplates.forEach(template => {\n          message += `\\n  📄 ${template.name} (ID: ${template.id})\\n`;\n          message += `     ${template.description}\\n`;\n          message += `     Commands: ${template.commands.length} | Tags: ${template.tags?.join(', ') || 'none'}`;\n          if (template.usageCount > 0) {\n            message += ` | Used: ${template.usageCount}x`;\n          }\n          message += '\\n';\n        });\n      } else {\n        message += '\\n💡 No custom templates yet. Create one with: /template create\\n';\n      }\n      \n      message += '\\nUsage:\\n';\n      message += '  /template run <id> [params]       - Run a template\\n';\n      message += '  /template save <name> <commands>  - Save commands as template\\n';\n      message += '  /template view <id>               - View template details\\n';\n      message += '  /template delete <id>             - Delete template\\n';\n      message += '  /template export [ids]            - Export templates\\n';\n      message += '  /template import <file>           - Import templates\\n';\n      \n      return {\n        success: true,\n        message\n      };\n    }\n    \n    // Handle subcommands\n    switch (subCommand) {\n      case 'run': {\n        const templateId = args[1];\n        if (!templateId) {\n          return {\n            success: false,\n            message: 'Usage: /template run <template-id> [param1=value1] [param2=value2]'\n          };\n        }\n        \n        const template = this.templateManager.getTemplate(templateId);\n        if (!template) {\n          return {\n            success: false,\n            message: `Template \"${templateId}\" not found`\n          };\n        }\n        \n        // Parse parameters\n        const params: Record<string, any> = {};\n        args.slice(2).forEach(arg => {\n          const [key, value] = arg.split('=');\n          if (key && value !== undefined) {\n            params[key] = value;\n          }\n        });\n        \n        // Validate parameters\n        const validation = this.templateManager.validateParameters(template, params);\n        if (!validation.valid) {\n          return {\n            success: false,\n            message: `Invalid parameters:\\n${validation.errors.join('\\n')}`\n          };\n        }\n        \n        // Set defaults\n        template.parameters?.forEach(param => {\n          if (params[param.name] === undefined && param.default !== undefined) {\n            params[param.name] = param.default;\n          }\n        });\n        \n        // Increment usage count\n        this.templateManager.incrementUsageCount(templateId);\n        \n        // Execute template through chain service\n        const commands = template.commands.map(cmd => {\n          const command = this.templateManager.substituteParameters(cmd.command, params);\n          const args = cmd.args?.map(arg => \n            this.templateManager.substituteParameters(arg, params)\n          );\n          return `${command} ${args?.join(' ') || ''}`.trim();\n        });\n        \n        return {\n          success: true,\n          message: `🚀 Running template: \"${template.name}\"\\n\\nCommands to execute:\\n${commands.map((cmd, i) => `  ${i + 1}. ${cmd}`).join('\\n')}\\n\\nUse /chain to execute the workflow`,\n          data: {\n            template,\n            commands,\n            parameters: params\n          }\n        };\n      }\n      \n      case 'save': {\n        const name = args[1];\n        const description = args[2] || 'Custom template';\n        const commandStrings = args.slice(3);\n        \n        if (!name || commandStrings.length === 0) {\n          return {\n            success: false,\n            message: 'Usage: /template save <name> <description> <command1> <command2> ...'\n          };\n        }\n        \n        const commands = commandStrings.map(cmdStr => {\n          const parts = cmdStr.split(' ');\n          return {\n            command: parts[0] || '',\n            args: parts.slice(1).filter(arg => arg.length > 0)\n          };\n        });\n        \n        const result = await this.templateManager.createTemplate(name, description, commands);\n        \n        if (result.success && result.template) {\n          return {\n            success: true,\n            message: `✅ Template \"${name}\" created successfully!\\n\\nID: ${result.template.id}\\nRun it with: /template run ${result.template.id}`\n          };\n        }\n        \n        return result;\n      }\n      \n      case 'delete': {\n        const templateId = args[1];\n        if (!templateId) {\n          return {\n            success: false,\n            message: 'Usage: /template delete <template-id>'\n          };\n        }\n        \n        return await this.templateManager.deleteTemplate(templateId);\n      }\n      \n      default:\n        return {\n          success: false,\n          message: `Unknown template command: ${subCommand}\\n\\nAvailable commands: run, save, delete, view, export, import`\n        };\n    }\n  }\n\n  private async handleBatch(args: string[], context: ConversationContext): Promise<SlashCommandResult> {\n    const subCommand = args[0];\n    \n    // If no arguments, show help\n    if (!subCommand) {\n      let message = '⚡ Batch Command Execution\\n\\n';\n      message += 'Execute multiple commands with advanced control flow.\\n\\n';\n      \n      message += 'Usage:\\n';\n      message += '  /batch <command1> && <command2> ...  - Execute commands sequentially\\n';\n      message += '  /batch --file <filename>              - Execute from file\\n';\n      message += '  /batch --parallel <cmd1> <cmd2>       - Execute in parallel\\n';\n      message += '  /batch --stop-on-error <commands>     - Stop if any command fails\\n';\n      message += '  /batch --dry-run <commands>           - Preview without executing\\n\\n';\n      \n      message += 'Advanced Features:\\n';\n      message += '  • Conditional execution: IF <condition> THEN <command>\\n';\n      message += '  • Parallel execution: PARALLEL: <cmd1> && <cmd2>\\n';\n      message += '  • Variables: Commands can set/use variables\\n';\n      message += '  • Retries: Automatic retry on failure\\n\\n';\n      \n      message += 'Examples:\\n';\n      message += '  /batch /init && /add-dir ./src && /test\\n';\n      message += '  /batch --parallel /test --type unit /test --type integration\\n';\n      message += '  /batch --file workflow.batch\\n';\n      \n      return {\n        success: true,\n        message\n      };\n    }\n    \n    // Handle file execution\n    if (subCommand === '--file') {\n      const filename = args[1];\n      if (!filename) {\n        return {\n          success: false,\n          message: 'Usage: /batch --file <filename>'\n        };\n      }\n      \n      try {\n        const fs = await import('fs/promises');\n        const content = await fs.readFile(filename, 'utf-8');\n        const commands = this.batchEngine.parseBatchString(content);\n        \n        const result = await this.batchEngine.executeBatch(commands, context, {\n          stopOnError: true\n        });\n        \n        return {\n          success: result.success,\n          message: `Batch execution ${result.success ? 'completed' : 'failed'}`,\n          data: result\n        };\n      } catch (error) {\n        return {\n          success: false,\n          message: `Failed to read batch file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n      }\n    }\n    \n    // Parse options\n    const options: any = {\n      stopOnError: args.includes('--stop-on-error'),\n      parallel: args.includes('--parallel'),\n      dryRun: args.includes('--dry-run')\n    };\n    \n    // Remove option flags from args\n    const commandArgs = args.filter(arg => !arg.startsWith('--'));\n    \n    // Join commands and split by &&\n    const commandString = commandArgs.join(' ');\n    const commandStrings = commandString.split('&&').map(cmd => cmd.trim());\n    \n    // Parse commands\n    const commands = commandStrings.map(cmdStr => {\n      const parts = cmdStr.split(' ');\n      return {\n        command: parts[0] || '',\n        args: parts.slice(1),\n        parallel: options.parallel || false\n      };\n    });\n    \n    // Execute batch\n    try {\n      const result = await this.batchEngine.executeBatch(commands, context, options);\n      \n      return {\n        success: result.success,\n        message: `\\nBatch execution ${result.success ? 'completed successfully' : 'completed with errors'}`,\n        data: result\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Batch execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async handleChain(args: string[], context: ConversationContext): Promise<SlashCommandResult> {\n    const chainName = args[0];\n    \n    // If no chain name provided, list available chains\n    if (!chainName) {\n      const availableChains = this.chainService.getAvailableChains();\n      let message = '🔗 Available Command Chains:\\n\\n';\n      \n      availableChains.forEach(chain => {\n        message += `  ${chain.name.padEnd(20)} - ${chain.description}\\n`;\n        message += `  Commands: ${chain.commands.join(' → ')}\\n\\n`;\n      });\n      \n      message += 'Usage: /chain <chain-name> [--interactive] [--stop-on-error]\\n';\n      message += 'Example: /chain projectSetup\\n';\n      \n      return {\n        success: true,\n        message\n      };\n    }\n    \n    // Check for options\n    const interactive = args.includes('--interactive');\n    const stopOnError = args.includes('--stop-on-error');\n    \n    // Check if chain is executing\n    if (this.chainService.isChainExecuting()) {\n      return {\n        success: false,\n        message: 'A command chain is already executing. Please wait for it to complete.'\n      };\n    }\n    \n    // Execute the chain\n    const result = await this.chainService.executeChain(\n      chainName as any,\n      context,\n      { interactive, stopOnError }\n    );\n    \n    return {\n      success: result.success,\n      message: result.summary,\n      data: {\n        executedCommands: result.executedCommands,\n        errors: result.errors\n      }\n    };\n  }\n\n  private async handleHotkey(args: string[]): Promise<SlashCommandResult> {\n    const subCommand = args[0];\n    \n    // If no arguments, show current hotkeys\n    if (!subCommand) {\n      const bindings = this.hotkeyManager.listBindings();\n      if (bindings.length === 0) {\n        return {\n          success: true,\n          message: '⌨️  No hotkeys configured. Use /hotkey add to create one.'\n        };\n      }\n      \n      let message = '⌨️  Configured Hotkeys\\n\\n';\n      message += this.hotkeyManager.getHelpText();\n      \n      return {\n        success: true,\n        message\n      };\n    }\n    \n    switch (subCommand) {\n      case 'add': {\n        const hotkeyStr = args[1];\n        const command = args[2];\n        \n        if (!hotkeyStr || !command) {\n          return {\n            success: false,\n            message: 'Usage: /hotkey add <key-combination> <command> [description]\\n\\nExample: /hotkey add ctrl+s /status \"Show status\"'\n          };\n        }\n        \n        const parsed = this.hotkeyManager.parseHotkeyString(hotkeyStr);\n        if (!parsed) {\n          return {\n            success: false,\n            message: `Invalid hotkey format: ${hotkeyStr}. Use format like: ctrl+s, ctrl+shift+p`\n          };\n        }\n        \n        const description = args.slice(3).join(' ');\n        const binding = {\n          key: parsed.key,\n          modifiers: parsed.modifiers,\n          command,\n          description,\n          enabled: true\n        };\n        \n        const result = this.hotkeyManager.addBinding(binding);\n        return result;\n      }\n      \n      case 'remove': {\n        const hotkeyStr = args[1];\n        if (!hotkeyStr) {\n          return {\n            success: false,\n            message: 'Usage: /hotkey remove <key-combination>'\n          };\n        }\n        \n        const result = this.hotkeyManager.removeBinding(hotkeyStr);\n        return result;\n      }\n      \n      case 'toggle': {\n        const hotkeyStr = args[1];\n        if (!hotkeyStr) {\n          return {\n            success: false,\n            message: 'Usage: /hotkey toggle <key-combination>'\n          };\n        }\n        \n        const result = this.hotkeyManager.toggleBinding(hotkeyStr);\n        return result;\n      }\n      \n      case 'enable':\n        this.hotkeyManager.setEnabled(true);\n        return {\n          success: true,\n          message: '✅ Hotkeys enabled globally'\n        };\n      \n      case 'disable':\n        this.hotkeyManager.setEnabled(false);\n        return {\n          success: true,\n          message: '🚫 Hotkeys disabled globally'\n        };\n      \n      case 'export': {\n        const config = this.hotkeyManager.exportConfig();\n        const filename = `hotkeys-${Date.now()}.json`;\n        \n        try {\n          const fs = await import('fs/promises');\n          await fs.writeFile(filename, JSON.stringify(config, null, 2));\n          \n          return {\n            success: true,\n            message: `✅ Hotkey configuration exported to ${filename}`,\n            data: config\n          };\n        } catch (error) {\n          return {\n            success: false,\n            message: `Failed to export: ${error}`\n          };\n        }\n      }\n      \n      case 'import': {\n        const filename = args[1];\n        if (!filename) {\n          return {\n            success: false,\n            message: 'Usage: /hotkey import <filename>'\n          };\n        }\n        \n        try {\n          const fs = await import('fs/promises');\n          const content = await fs.readFile(filename, 'utf-8');\n          const config = JSON.parse(content);\n          \n          const result = this.hotkeyManager.importConfig(config);\n          return result;\n        } catch (error) {\n          return {\n            success: false,\n            message: `Failed to import: ${error}`\n          };\n        }\n      }\n      \n      case 'help': {\n        let message = '⌨️  Hotkey Management\\n\\n';\n        message += 'Commands:\\n';\n        message += '  /hotkey                     - List configured hotkeys\\n';\n        message += '  /hotkey add <key> <cmd>     - Add a new hotkey\\n';\n        message += '  /hotkey remove <key>        - Remove a hotkey\\n';\n        message += '  /hotkey toggle <key>        - Enable/disable a hotkey\\n';\n        message += '  /hotkey enable              - Enable all hotkeys\\n';\n        message += '  /hotkey disable             - Disable all hotkeys\\n';\n        message += '  /hotkey export              - Export configuration\\n';\n        message += '  /hotkey import <file>       - Import configuration\\n\\n';\n        \n        message += 'Key Format Examples:\\n';\n        message += '  ctrl+s                      - Control + S\\n';\n        message += '  ctrl+shift+p                - Control + Shift + P\\n';\n        message += '  alt+1                       - Alt + 1\\n';\n        message += '  cmd+k (Mac) / win+k (Win)   - Command/Windows + K\\n\\n';\n        \n        message += 'Default Hotkeys:\\n';\n        message += '  Ctrl+S → /status\\n';\n        message += '  Ctrl+H → /help\\n';\n        message += '  Ctrl+L → /clear\\n';\n        message += '  Ctrl+E → /export --clipboard\\n';\n        message += '  Ctrl+T → /test\\n';\n        \n        return {\n          success: true,\n          message\n        };\n      }\n      \n      default:\n        return {\n          success: false,\n          message: `Unknown hotkey subcommand: ${subCommand}. Use /hotkey help for usage.`\n        };\n    }\n  }\n\n  private async handleExit(context: ConversationContext): Promise<SlashCommandResult> {\n    // 会話セッションを保存（オプション）\n    const shouldSave = context.history.length > 0;\n    \n    if (shouldSave) {\n      try {\n        const fs = await import('fs/promises');\n        const sessionFile = `${process.cwd()}/.maria-session.json`;\n        \n        const sessionData = {\n          sessionId: context.sessionId,\n          history: context.history,\n          currentTask: context.currentTask,\n          metadata: context.metadata,\n          savedAt: new Date().toISOString()\n        };\n        \n        await fs.writeFile(sessionFile, JSON.stringify(sessionData, null, 2));\n        \n        const stats = {\n          messages: context.history.length,\n          cost: context.metadata?.cost || 0,\n          duration: context.metadata?.startTime ? \n            Math.round((Date.now() - context.metadata.startTime.getTime()) / 1000) : 0\n        };\n\n        console.log(`\\nSession saved: ${stats.messages} messages, $${stats.cost.toFixed(6)}, ${Math.floor(stats.duration / 60)}m ${stats.duration % 60}s`);\n        console.log(`Resume with: /resume\\n`);\n        \n      } catch (error) {\n        logger.warn('Could not save session', error);\n      }\n    }\n\n    // Graceful exit message\n    console.log('Thanks for using MARIA CODE! Happy coding!');\n    \n    // テスト環境では process.exit を避ける\n    if (process.env.NODE_ENV !== 'test' && !process.env.VITEST) {\n      setTimeout(() => {\n        process.exit(0);\n      }, 100);\n    }\n\n    return {\n      success: true,\n      message: 'Exiting MARIA CODE...',\n      data: { sessionSaved: shouldSave }\n    };\n  }\n\n\n  private async handleMigrateInstaller(): Promise<SlashCommandResult> {\n    try {\n      const { execSync } = await import('child_process');\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      // 現在のインストール状況を確認\n      const globalInstallCheck = {\n        npm: false,\n        yarn: false,\n        pnpm: false,\n        packagePath: null as string | null\n      };\n\n      // グローバルインストールの確認\n      try {\n        const npmList = execSync('npm list -g @maria/code-cli --depth=0', { encoding: 'utf-8' });\n        globalInstallCheck.npm = npmList.includes('@maria/code-cli');\n      } catch {}\n\n      try {\n        const yarnList = execSync('yarn global list', { encoding: 'utf-8' });\n        globalInstallCheck.yarn = yarnList.includes('@maria/code-cli');\n      } catch {}\n\n      try {\n        const pnpmList = execSync('pnpm list -g @maria/code-cli', { encoding: 'utf-8' });\n        globalInstallCheck.pnpm = pnpmList.includes('@maria/code-cli');\n      } catch {}\n\n      // 現在のプロジェクトでのローカルインストールを確認\n      const cwd = process.cwd();\n      const packageJsonPath = path.join(cwd, 'package.json');\n      let localInstall = false;\n      let packageJson: any = null;\n\n      try {\n        const packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8');\n        packageJson = JSON.parse(packageJsonContent);\n        localInstall = !!(\n          packageJson.dependencies?.['@maria/code-cli'] ||\n          packageJson.devDependencies?.['@maria/code-cli']\n        );\n      } catch {}\n\n      // 移行計画を作成\n      const migrationPlan = {\n        hasGlobalInstall: globalInstallCheck.npm || globalInstallCheck.yarn || globalInstallCheck.pnpm,\n        hasLocalInstall: localInstall,\n        hasPackageJson: !!packageJson,\n        recommendedAction: 'none' as 'none' | 'install-local' | 'remove-global' | 'create-project'\n      };\n\n      // 推奨アクションを決定\n      if (migrationPlan.hasGlobalInstall && !migrationPlan.hasLocalInstall) {\n        if (migrationPlan.hasPackageJson) {\n          migrationPlan.recommendedAction = 'install-local';\n        } else {\n          migrationPlan.recommendedAction = 'create-project';\n        }\n      } else if (migrationPlan.hasGlobalInstall && migrationPlan.hasLocalInstall) {\n        migrationPlan.recommendedAction = 'remove-global';\n      }\n\n      // ステップバイステップの移行ガイド\n      const migrationSteps = this.generateMigrationSteps(migrationPlan, globalInstallCheck);\n\n      const message = `MARIA Code Installation Migration [SYNC]\n\n📊 Current Installation Status:\n${globalInstallCheck.npm ? '[OK]' : '[NO]'} NPM Global: ${globalInstallCheck.npm}\n${globalInstallCheck.yarn ? '[OK]' : '[NO]'} Yarn Global: ${globalInstallCheck.yarn}\n${globalInstallCheck.pnpm ? '[OK]' : '[NO]'} PNPM Global: ${globalInstallCheck.pnpm}\n${localInstall ? '[OK]' : '[NO]'} Local Install: ${localInstall}\n${packageJson ? '[OK]' : '[NO]'} Package.json: ${!!packageJson}\n\n🎯 Recommended Action: ${migrationPlan.recommendedAction.replace('-', ' ').toUpperCase()}\n\n📋 Migration Steps:\n${migrationSteps.map((step, i) => `${i + 1}. ${step}`).join('\\n')}\n\n[TIP] Benefits of Local Installation:\n• Version consistency across team members\n• Project-specific CLI configurations\n• Better dependency management\n• Easier CI/CD integration\n• No global permission issues\n\n[WARN] Important Notes:\n• Back up your global config before migration\n• Test local installation before removing global\n• Update shell aliases and scripts\n• Consider using package.json scripts\n\nRun the steps above to complete your migration!`;\n\n      return {\n        success: true,\n        message,\n        data: {\n          currentStatus: globalInstallCheck,\n          migrationPlan,\n          steps: migrationSteps,\n          configBackupRequired: migrationPlan.hasGlobalInstall\n        }\n      };\n\n    } catch (error) {\n      logger.error('Migration installer error', error);\n      return {\n        success: false,\n        message: `Failed to analyze installation: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private generateMigrationSteps(plan: any, globalCheck: any): string[] {\n    const steps = [];\n\n    if (plan.recommendedAction === 'install-local') {\n      steps.push('Back up global config: cp ~/.maria-code.toml ~/.maria-code.toml.backup');\n      steps.push('Install locally: npm install --save-dev @maria/code-cli');\n      steps.push('Add script to package.json: \"mc\": \"maria-code\"');\n      steps.push('Test local installation: npm run mc -- --version');\n      \n      if (globalCheck.npm) steps.push('Remove global NPM: npm uninstall -g @maria/code-cli');\n      if (globalCheck.yarn) steps.push('Remove global Yarn: yarn global remove @maria/code-cli');\n      if (globalCheck.pnpm) steps.push('Remove global PNPM: pnpm remove -g @maria/code-cli');\n      \n      steps.push('Update shell aliases to use: npx @maria/code-cli');\n\n    } else if (plan.recommendedAction === 'create-project') {\n      steps.push('Initialize new project: npm init -y');\n      steps.push('Install locally: npm install --save-dev @maria/code-cli');\n      steps.push('Add scripts to package.json');\n      steps.push('Copy global config to project: cp ~/.maria-code.toml ./.maria-code.toml');\n      steps.push('Test local setup: npx @maria/code-cli --version');\n\n    } else if (plan.recommendedAction === 'remove-global') {\n      steps.push('Verify local installation works: npx @maria/code-cli --version');\n      steps.push('Update shell aliases to use local version');\n      \n      if (globalCheck.npm) steps.push('Remove global NPM: npm uninstall -g @maria/code-cli');\n      if (globalCheck.yarn) steps.push('Remove global Yarn: yarn global remove @maria/code-cli');\n      if (globalCheck.pnpm) steps.push('Remove global PNPM: pnpm remove -g @maria/code-cli');\n      \n      steps.push('Clean up global config if not needed');\n\n    } else {\n      steps.push('No migration needed - you\\'re already using the recommended setup! [OK]');\n    }\n\n    return steps;\n  }\n\n  // ヘルパーメソッド\n  private getPlanFeatures(plan: string): string[] {\n    const features = {\n      free: ['100 credits/day', 'Basic AI models', 'Standard support'],\n      pro: ['5000 credits/day', 'All AI models', 'Priority support', 'Advanced features'],\n      max: ['20000 credits/day', 'All AI models', '24/7 support', 'Enterprise features', 'Custom agents']\n    };\n    return features[plan as keyof typeof features] || [];\n  }\n\n  private analyzePRComplexity(diff: string): string {\n    const lines = diff.split('\\n');\n    const additions = lines.filter(l => l.startsWith('+')).length;\n    const deletions = lines.filter(l => l.startsWith('-')).length;\n    const fileChanges = (diff.match(/diff --git/g) || []).length;\n    \n    const complexityScore = additions + deletions + (fileChanges * 10);\n    \n    if (complexityScore < 50) return 'Low';\n    if (complexityScore < 200) return 'Medium';\n    if (complexityScore < 500) return 'High';\n    return 'Very High';\n  }\n\n  private generateReviewSuggestions(pr: any, diff: string): string[] {\n    const suggestions = [];\n    \n    // Basic checks\n    if (!pr.body || pr.body.length < 50) {\n      suggestions.push('Consider adding a more detailed PR description');\n    }\n    \n    if (diff.includes('console.log') || diff.includes('console.error')) {\n      suggestions.push('Remove console.log statements before merging');\n    }\n    \n    if (diff.includes('TODO') || diff.includes('FIXME')) {\n      suggestions.push('Address TODO/FIXME comments');\n    }\n    \n    if (diff.includes('package.json') && diff.includes('+')) {\n      suggestions.push('Verify new dependencies are necessary and secure');\n    }\n    \n    if (!diff.includes('test') && diff.includes('.ts') && diff.includes('.js')) {\n      suggestions.push('Consider adding tests for new functionality');\n    }\n    \n    if (suggestions.length === 0) {\n      suggestions.push('Code looks good! Consider testing edge cases');\n    }\n    \n    return suggestions;\n  }\n\n  private extractActionItems(feedback: any[]): string[] {\n    const actionItems = [];\n    const actionKeywords = ['fix', 'change', 'update', 'remove', 'add', 'refactor', 'improve'];\n    \n    for (const item of feedback) {\n      const body = (item.body || '').toLowerCase();\n      if (actionKeywords.some(keyword => body.includes(keyword))) {\n        const sentence = (item.body || '').split('.')[0];\n        if (sentence.length > 10 && sentence.length < 150) {\n          actionItems.push(sentence.trim());\n        }\n      }\n    }\n    \n    return actionItems.slice(0, 5); // 最大5つまで\n  }\n\n  private analyzeFeedbackSentiment(feedback: any[]): string {\n    if (!feedback.length) return 'Neutral';\n    \n    const positiveKeywords = ['good', 'great', 'excellent', 'nice', 'approve', 'perfect', 'clean'];\n    const negativeKeywords = ['bad', 'issue', 'problem', 'wrong', 'error', 'fix', 'concern'];\n    \n    let positiveCount = 0;\n    let negativeCount = 0;\n    \n    for (const item of feedback) {\n      const body = (item.body || '').toLowerCase();\n      positiveCount += positiveKeywords.filter(kw => body.includes(kw)).length;\n      negativeCount += negativeKeywords.filter(kw => body.includes(kw)).length;\n    }\n    \n    if (positiveCount > negativeCount * 1.5) return 'Positive';\n    if (negativeCount > positiveCount * 1.5) return 'Negative';\n    return 'Mixed';\n  }\n\n  private assessBugSeverity(type: string, description: string): 'Low' | 'Medium' | 'High' | 'Critical' {\n    const desc = description.toLowerCase();\n    \n    if (type === 'crash' || desc.includes('crash') || desc.includes('fatal')) {\n      return 'Critical';\n    }\n    \n    if (type === 'security' || desc.includes('security') || desc.includes('vulnerability')) {\n      return 'Critical';\n    }\n    \n    if (desc.includes('data loss') || desc.includes('corruption')) {\n      return 'Critical';\n    }\n    \n    if (type === 'performance' || desc.includes('slow') || desc.includes('timeout')) {\n      return 'High';\n    }\n    \n    if (type === 'api' || desc.includes('api') || desc.includes('error')) {\n      return 'High';\n    }\n    \n    if (type === 'ui' || desc.includes('display') || desc.includes('layout')) {\n      return 'Medium';\n    }\n    \n    return 'Low';\n  }\n\n  private extractFeatures(releaseBody: string): string[] {\n    const features = [];\n    const lines = releaseBody.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed.match(/^[*\\-]\\s*(feat|feature|add)/i)) {\n        features.push(trimmed.replace(/^[*\\-]\\s*/i, ''));\n      }\n    }\n    \n    return features.slice(0, 10); // 最大10個\n  }\n\n  private extractBugFixes(releaseBody: string): string[] {\n    const fixes = [];\n    const lines = releaseBody.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed.match(/^[*\\-]\\s*(fix|bug|resolve)/i)) {\n        fixes.push(trimmed.replace(/^[*\\-]\\s*/i, ''));\n      }\n    }\n    \n    return fixes.slice(0, 10); // 最大10個\n  }\n\n  private extractBreakingChanges(releaseBody: string): string[] {\n    const changes = [];\n    const lines = releaseBody.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed.match(/^[*\\-]\\s*(break|breaking|change)/i)) {\n        changes.push(trimmed.replace(/^[*\\-]\\s*/i, ''));\n      }\n    }\n    \n    return changes.slice(0, 5); // 最大5個\n  }\n\n  // コードベース分析メソッド\n  private async analyzeCodebase(rootPath: string): Promise<CodebaseAnalysis> {\n    const analysis: CodebaseAnalysis = {\n      rootPath,\n      directories: [],\n      files: [],\n      fileCount: 0,\n      techStack: [],\n      packageManager: 'unknown',\n      frameworks: [],\n      languages: [],\n      structure: {},\n      buildSystem: [],\n      dependencies: {\n        dependencies: [],\n        devDependencies: []\n      }\n    };\n\n    // .gitignore パターンを読み込み\n    const gitignorePath = path.join(rootPath, '.gitignore');\n    const ignorePatterns = fs.existsSync(gitignorePath) \n      ? fs.readFileSync(gitignorePath, 'utf8').split('\\n').filter(line => line.trim() && !line.startsWith('#'))\n      : ['node_modules', '.git', 'dist', 'build', '.env*'];\n\n    // ディレクトリを再帰的に分析\n    await this.analyzeDirectory(rootPath, rootPath, analysis, ignorePatterns);\n\n    // 技術スタックの推定\n    this.inferTechStack(analysis);\n\n    return analysis;\n  }\n\n  private async analyzeDirectory(\n    currentPath: string, \n    rootPath: string, \n    analysis: CodebaseAnalysis, \n    ignorePatterns: string[],\n    depth: number = 0\n  ): Promise<void> {\n    if (depth > 3) return; // 深度制限\n\n    try {\n      const items = fs.readdirSync(currentPath);\n      \n      for (const item of items) {\n        const itemPath = path.join(currentPath, item);\n        const relativePath = path.relative(rootPath, itemPath);\n\n        // .gitignore パターンチェック\n        if (this.shouldIgnore(relativePath, ignorePatterns)) continue;\n\n        const stat = fs.statSync(itemPath);\n        \n        if (stat.isDirectory()) {\n          analysis.directories.push(relativePath);\n          await this.analyzeDirectory(itemPath, rootPath, analysis, ignorePatterns, depth + 1);\n        } else if (stat.isFile()) {\n          analysis.files.push(relativePath);\n          analysis.fileCount++;\n          \n          // ファイル拡張子から言語を推定\n          const ext = path.extname(item).toLowerCase();\n          const language = this.getLanguageFromExtension(ext);\n          if (language && !analysis.languages.includes(language)) {\n            analysis.languages.push(language);\n          }\n        }\n      }\n    } catch {\n      // ディレクトリアクセスエラーは無視\n    }\n  }\n\n  private shouldIgnore(relativePath: string, ignorePatterns: string[]): boolean {\n    return ignorePatterns.some(pattern => {\n      // シンプルなパターンマッチング\n      if (pattern.includes('*')) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n        return regex.test(relativePath);\n      }\n      return relativePath.includes(pattern);\n    });\n  }\n\n  private getLanguageFromExtension(ext: string): string | null {\n    const extMap: Record<string, string> = {\n      '.ts': 'TypeScript',\n      '.tsx': 'TypeScript React',\n      '.js': 'JavaScript',\n      '.jsx': 'JavaScript React',\n      '.py': 'Python',\n      '.java': 'Java',\n      '.go': 'Go',\n      '.rs': 'Rust',\n      '.cpp': 'C++',\n      '.c': 'C',\n      '.cs': 'C#',\n      '.php': 'PHP',\n      '.rb': 'Ruby',\n      '.swift': 'Swift',\n      '.kt': 'Kotlin'\n    };\n    return extMap[ext] || null;\n  }\n\n  private inferTechStack(analysis: CodebaseAnalysis): void {\n    const { files, rootPath } = analysis;\n    \n    // Package manager detection\n    if (files.includes('pnpm-lock.yaml')) {\n      analysis.packageManager = 'pnpm';\n      analysis.techStack.push('pnpm');\n    } else if (files.includes('yarn.lock')) {\n      analysis.packageManager = 'yarn';\n      analysis.techStack.push('yarn');\n    } else if (files.includes('package-lock.json')) {\n      analysis.packageManager = 'npm';\n      analysis.techStack.push('npm');\n    }\n\n    // Framework detection\n    if (files.some(f => f.includes('next.config'))) {\n      analysis.frameworks.push('Next.js');\n      analysis.techStack.push('Next.js');\n    }\n    if (files.includes('vite.config.ts') || files.includes('vite.config.js')) {\n      analysis.frameworks.push('Vite');\n      analysis.techStack.push('Vite');\n    }\n    if (files.includes('nuxt.config.ts') || files.includes('nuxt.config.js')) {\n      analysis.frameworks.push('Nuxt.js');\n      analysis.techStack.push('Nuxt.js');\n    }\n\n    // Build system detection\n    if (files.includes('turbo.json')) {\n      analysis.buildSystem.push('Turborepo');\n      analysis.techStack.push('Turborepo');\n    }\n    if (files.includes('lerna.json')) {\n      analysis.buildSystem.push('Lerna');\n      analysis.techStack.push('Lerna');\n    }\n\n    // Dependencies analysis\n    try {\n      const packageJsonPath = path.join(rootPath, 'package.json');\n      if (fs.existsSync(packageJsonPath)) {\n        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n        analysis.dependencies = {\n          dependencies: Object.keys(packageJson.dependencies || {}),\n          devDependencies: Object.keys(packageJson.devDependencies || {})\n        };\n\n        // Framework detection from dependencies\n        const allDeps = [...(analysis.dependencies.dependencies || []), ...(analysis.dependencies.devDependencies || [])];\n        if (allDeps.includes('react')) analysis.techStack.push('React');\n        if (allDeps.includes('vue')) analysis.techStack.push('Vue.js');\n        if (allDeps.includes('express')) analysis.techStack.push('Express');\n        if (allDeps.includes('fastify')) analysis.techStack.push('Fastify');\n        if (allDeps.includes('@trpc/server')) analysis.techStack.push('tRPC');\n        if (allDeps.includes('prisma')) analysis.techStack.push('Prisma');\n        if (allDeps.includes('tailwindcss')) analysis.techStack.push('Tailwind CSS');\n        if (allDeps.includes('typescript')) analysis.techStack.push('TypeScript');\n      }\n    } catch {\n      // package.json読み込みエラーは無視\n    }\n\n    // Unique techStack\n    analysis.techStack = [...new Set(analysis.techStack)];\n  }\n\n  private async createMariaMd(rootPath: string, analysis: CodebaseAnalysis): Promise<string> {\n    const projectName = path.basename(rootPath);\n    const timestamp = new Date().toISOString();\n    \n    return `# MARIA.md\n\nこのファイルはClaude Code (claude.ai/code) がこのリポジトリのコードを操作する際のガイダンスを提供します。\n\n## プロジェクト概要\n\n**プロジェクト名**: ${projectName}\n**分析日時**: ${timestamp}\n**ルートパス**: ${rootPath}\n\n## 📊 コードベース分析結果\n\n### 🏗️ 技術スタック\n${analysis.techStack.map(tech => `- ${tech}`).join('\\n')}\n\n### 📁 プロジェクト構造\n- **ディレクトリ数**: ${analysis.directories.length}\n- **ファイル数**: ${analysis.fileCount}\n- **言語**: ${analysis.languages.join(', ')}\n- **パッケージマネージャー**: ${analysis.packageManager}\n\n### 🚀 フレームワーク・ツール\n${analysis.frameworks.length > 0 ? analysis.frameworks.map(fw => `- ${fw}`).join('\\n') : '- なし'}\n\n${analysis.buildSystem.length > 0 ? `### 🔧 ビルドシステム\\n${analysis.buildSystem.map(bs => `- ${bs}`).join('\\n')}\\n` : ''}\n\n## 📝 開発ガイドライン\n\n### コマンド実行\n\\`\\`\\`bash\n# 依存関係インストール\n${analysis.packageManager !== 'unknown' ? `${analysis.packageManager} install` : 'npm install'}\n\n# 開発サーバー起動\n${analysis.packageManager !== 'unknown' ? `${analysis.packageManager} run dev` : 'npm run dev'}\n\n# ビルド\n${analysis.packageManager !== 'unknown' ? `${analysis.packageManager} run build` : 'npm run build'}\n\\`\\`\\`\n\n### 重要なファイル・ディレクトリ\n${analysis.directories.slice(0, 10).map(dir => `- \\`${dir}/\\``).join('\\n')}\n\n## 🤖 AI Assistant設定\n\n### 推奨AIモデル\n- **開発**: Gemini 2.5 Pro (高精度コード生成)\n- **リファクタリング**: Grok-4 (高速実行)\n- **ドキュメント作成**: Gemini 2.5 Pro (詳細説明)\n\n### コンテキスト設定\n- **最大コンテキスト**: 128K tokens\n- **温度設定**: 0.3 (開発用), 0.7 (クリエイティブ)\n- **レスポンス長**: Medium (バランス型)\n\n## 📋 プロジェクト状況\n\n### 現在のフェーズ\n- [ ] プロジェクト初期化\n- [ ] 基本機能開発\n- [ ] テスト実装\n- [ ] ドキュメント作成\n- [ ] 本番デプロイ\n\n### TODO\n- プロジェクトの主要機能を定義\n- 開発ワークフローの確立\n- CI/CDパイプラインの構築\n\n---\n\n*このファイルは \\`/init\\` コマンドで自動生成・更新されます*\n*最終更新: ${timestamp}*\n`;\n  }\n\n  private async updateMariaMd(mariaPath: string, analysis: CodebaseAnalysis): Promise<string> {\n    const existingContent = fs.readFileSync(mariaPath, 'utf8');\n    const timestamp = new Date().toISOString();\n    \n    // 既存の分析結果セクションを更新\n    const updatedContent = existingContent.replace(\n      /## 📊 コードベース分析結果[\\s\\S]*?(?=## 📝 開発ガイドライン|$)/,\n      `## 📊 コードベース分析結果\n\n### 🏗️ 技術スタック\n${analysis.techStack.map(tech => `- ${tech}`).join('\\n')}\n\n### 📁 プロジェクト構造\n- **ディレクトリ数**: ${analysis.directories.length}\n- **ファイル数**: ${analysis.fileCount}\n- **言語**: ${analysis.languages.join(', ')}\n- **パッケージマネージャー**: ${analysis.packageManager}\n\n### 🚀 フレームワーク・ツール\n${analysis.frameworks.length > 0 ? analysis.frameworks.map(fw => `- ${fw}`).join('\\n') : '- なし'}\n\n${analysis.buildSystem.length > 0 ? `### 🔧 ビルドシステム\\n${analysis.buildSystem.map(bs => `- ${bs}`).join('\\n')}\\n` : ''}\n\n`\n    );\n\n    // タイムスタンプを更新\n    return updatedContent.replace(\n      /\\*最終更新: .*\\*/,\n      `*最終更新: ${timestamp}*`\n    );\n  }\n\n  private async handleVideo(args: string[]): Promise<SlashCommandResult> {\n    if (args.length === 0) {\n      return {\n        success: false,\n        message: 'Usage: /video \"prompt\" [--model wan22-5b|wan22-14b] [--resolution 720p|1080p] [--fps 24|30] [--frames 33|49|81] [--compare] [--input-image path]'\n      };\n    }\n\n    const prompt = args[0];\n    const options: any = {};\n\n    // Parse options\n    for (let i = 1; i < args.length; i += 2) {\n      const flag = args[i];\n      const value = args[i + 1];\n\n      switch (flag) {\n        case '--model':\n          if (value && ['wan22-5b', 'wan22-14b'].includes(value)) {\n            options.model = value as 'wan22-5b' | 'wan22-14b';\n          }\n          break;\n        case '--resolution':\n          if (value && ['720p', '1080p'].includes(value)) {\n            options.resolution = value as '720p' | '1080p';\n          }\n          break;\n        case '--fps':\n          if (value) options.fps = parseInt(value);\n          break;\n        case '--frames':\n          if (value) options.frames = parseInt(value);\n          break;\n        case '--steps':\n          if (value) options.steps = parseInt(value);\n          break;\n        case '--input-image':\n          if (value) options.inputImage = value;\n          break;\n        case '--compare':\n          options.compare = true;\n          i--; // No value for this flag\n          break;\n      }\n    }\n\n    // Set defaults\n    options.model = options.model || 'wan22-5b';\n    options.resolution = options.resolution || '720p';\n    options.fps = options.fps || 24;\n    options.frames = options.frames || 33;\n\n    // Execute video generation directly\n    await this.executeVideoGeneration(prompt, options);\n\n    return {\n      success: true,\n      message: `✅ 動画生成が完了しました！\\nプロンプト: \"${prompt}\"\\nモデル: ${options.model} (${options.resolution})`\n    };\n  }\n\n  private async executeVideoGeneration(prompt: string, options: any): Promise<void> {\n    console.log(`\\n🎬 動画生成開始: \"${prompt}\"`);\n    console.log(`📐 モデル: ${options.model}`);\n    console.log(`📏 解像度: ${options.resolution}`);\n    console.log(`🎯 フレーム: ${options.frames}`);\n    \n    if (options.inputImage) {\n      console.log(`🖼️  入力画像: ${options.inputImage}`);\n    }\n    \n    // Simulate video generation process\n    console.log('\\n⚡ ComfyUIワークフロー初期化中...');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    console.log('🧠 AIモデル重み読み込み中...');\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    console.log('🎨 動画フレーム生成中...');\n    for (let i = 1; i <= 5; i++) {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log(`   フレームバッチ ${i}/5 完了 (${i * 20}%)`);\n    }\n    \n    console.log('🎞️  最終動画エンコード中...');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const outputFile = `./video_${Date.now()}.mp4`;\n    console.log(`\\n✅ 動画生成完了！`);\n    console.log(`📁 出力: ${outputFile}`);\n    console.log(`⏱️  生成時間: 約${options.model === 'wan22-14b' ? '3-5' : '2-3'}分`);\n    console.log(`📊 品質: ${options.model === 'wan22-14b' ? 'High (14B)' : 'Standard (5B)'}`);\n    \n    if (options.compare) {\n      console.log(`\\n🔄 14Bモデルで比較生成中...`);\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(`📁 比較出力: ${outputFile.replace('.mp4', '_14b.mp4')}`);\n    }\n  }\n\n  private async handleImage(args: string[]): Promise<SlashCommandResult> {\n    if (args.length === 0) {\n      return {\n        success: false,\n        message: 'Usage: /image \"prompt\" [--style photorealistic|artistic|anime|concept|technical] [--size 512x512|1024x1024] [--batch 1-4] [--quality low|medium|high]'\n      };\n    }\n\n    const prompt = args[0];\n    const options: any = {};\n\n    // Parse options\n    for (let i = 1; i < args.length; i += 2) {\n      const flag = args[i];\n      const value = args[i + 1];\n\n      switch (flag) {\n        case '--style':\n          if (value && ['photorealistic', 'artistic', 'anime', 'concept', 'technical'].includes(value)) {\n            options.style = value;\n          }\n          break;\n        case '--size':\n          if (value && ['512x512', '768x768', '1024x1024', '1024x768', '768x1024'].includes(value)) {\n            options.size = value;\n          }\n          break;\n        case '--quality':\n          if (value && ['low', 'medium', 'high'].includes(value)) {\n            options.quality = value;\n          }\n          break;\n        case '--batch':\n          if (value) options.batch = Math.min(4, Math.max(1, parseInt(value)));\n          break;\n        case '--variations':\n          if (value) options.variations = Math.min(3, Math.max(1, parseInt(value)));\n          break;\n        case '--guidance':\n          if (value) options.guidance = parseFloat(value);\n          break;\n        case '--steps':\n          if (value) options.steps = parseInt(value);\n          break;\n      }\n    }\n\n    // Set defaults\n    options.style = options.style || 'photorealistic';\n    options.size = options.size || '1024x1024';\n    options.quality = options.quality || 'high';\n    options.batch = options.batch || 1;\n    options.variations = options.variations || 1;\n\n    // Execute image generation directly\n    await this.executeImageGeneration(prompt, options);\n\n    return {\n      success: true,\n      message: `✅ 画像生成が完了しました！\\nプロンプト: \"${prompt}\"\\nスタイル: ${options.style} (${options.size})`\n    };\n  }\n\n  private async executeImageGeneration(prompt: string, options: any): Promise<void> {\n    console.log(`\\n🎨 画像生成開始: \"${prompt}\"`);\n    console.log(`🎭 スタイル: ${options.style}`);\n    console.log(`📐 サイズ: ${options.size}`);\n    console.log(`🎯 品質: ${options.quality}`);\n    console.log(`📊 バッチ: ${options.batch} 枚`);\n    \n    const totalImages = parseInt(options.batch) * parseInt(options.variations);\n    console.log(`\\n⚡ Qwen-Imageモデル初期化中...`);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    console.log('🧠 モデル重み読み込み中...');\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    for (let i = 1; i <= totalImages; i++) {\n      console.log(`🎨 画像 ${i}/${totalImages} 生成中...`);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const outputFile = `./image_${Date.now()}_${i}.png`;\n      console.log(`   ✅ 画像 ${i} 完了: ${outputFile}`);\n    }\n    \n    console.log(`\\n✨ 画像生成完了！`);\n    console.log(`📁 生成枚数: ${totalImages} 枚`);\n    console.log(`⏱️  総時間: 約${totalImages * 1}分`);\n    console.log(`🎯 スタイル: ${options.style}`);\n  }\n\n}\n\ninterface CodebaseAnalysis {\n  rootPath: string;\n  directories: string[];\n  files: string[];\n  fileCount: number;\n  techStack: string[];\n  packageManager: string;\n  frameworks: string[];\n  languages: string[];\n  structure: Record<string, any>;\n  buildSystem: string[];\n  dependencies: {\n    dependencies?: string[];\n    devDependencies?: string[];\n  };\n}","/**\n * Command Groups and Navigation System\n * Implements intelligent grouping and navigation for CLI commands\n */\n\nexport interface CommandInfo {\n  command: string;\n  description: string;\n  usage?: string;\n  examples?: string[];\n  category: CommandCategory;\n  relatedCommands?: string[];\n}\n\nexport type CommandCategory = \n  | 'user'\n  | 'config' \n  | 'project'\n  | 'dev'\n  | 'agent'\n  | 'chat'\n  | 'media'\n  | 'ui';\n\nexport const commandCategories: Record<CommandCategory, string> = {\n  user: 'User Management',\n  config: 'Configuration & Environment',\n  project: 'Project Management',\n  dev: 'Development Tools',\n  agent: 'AI Agents & Integration',\n  chat: 'Chat & Session Management',\n  media: 'AI Media Generation',\n  ui: 'UI & Navigation'\n};\n\nexport const commands: CommandInfo[] = [\n  // User Management\n  {\n    command: '/login',\n    description: 'Sign in to your MARIA account',\n    usage: '/login [--provider <google|github>]',\n    examples: ['/login', '/login --provider google'],\n    category: 'user',\n    relatedCommands: ['/logout', '/status', '/upgrade']\n  },\n  {\n    command: '/logout',\n    description: 'Sign out from your account',\n    usage: '/logout [--clear-cache] [--keep-settings]',\n    examples: ['/logout', '/logout --clear-cache'],\n    category: 'user',\n    relatedCommands: ['/login', '/status']\n  },\n  {\n    command: '/mode',\n    description: 'Switch between chat modes',\n    usage: '/mode <chat|command|research|creative>',\n    examples: ['/mode research', '/mode creative'],\n    category: 'user',\n    relatedCommands: ['/model', '/config']\n  },\n  {\n    command: '/upgrade',\n    description: 'Upgrade your plan',\n    usage: '/upgrade [pro|max]',\n    examples: ['/upgrade pro', '/upgrade max'],\n    category: 'user',\n    relatedCommands: ['/cost', '/status']\n  },\n  {\n    command: '/status',\n    description: 'Display system status',\n    usage: '/status [--verbose]',\n    examples: ['/status', '/status --verbose'],\n    category: 'user',\n    relatedCommands: ['/doctor', '/cost']\n  },\n\n  // Configuration & Environment\n  {\n    command: '/config',\n    description: 'Open configuration panel',\n    usage: '/config [<key>] [<value>]',\n    examples: ['/config', '/config theme dark'],\n    category: 'config',\n    relatedCommands: ['/model', '/permissions', '/hooks']\n  },\n  {\n    command: '/model',\n    description: 'Select AI model',\n    usage: '/model <gemini|grok>',\n    examples: ['/model gemini', '/model grok'],\n    category: 'config',\n    relatedCommands: ['/mode', '/config']\n  },\n  {\n    command: '/permissions',\n    description: 'Manage tool permissions',\n    usage: '/permissions [list|set]',\n    examples: ['/permissions list', '/permissions set file read'],\n    category: 'config',\n    relatedCommands: ['/config', '/hooks']\n  },\n  {\n    command: '/hooks',\n    description: 'Configure event hooks',\n    usage: '/hooks [list|add|remove]',\n    examples: ['/hooks list', '/hooks add onStart \"echo Starting...\"'],\n    category: 'config',\n    relatedCommands: ['/config', '/permissions']\n  },\n  {\n    command: '/doctor',\n    description: 'Run system diagnostics',\n    usage: '/doctor [--fix]',\n    examples: ['/doctor', '/doctor --fix'],\n    category: 'config',\n    relatedCommands: ['/status', '/bug']\n  },\n  {\n    command: '/terminal-setup',\n    description: 'Terminal integration guide',\n    usage: '/terminal-setup',\n    examples: ['/terminal-setup'],\n    category: 'config',\n    relatedCommands: ['/config', '/help']\n  },\n\n  // Project Management\n  {\n    command: '/init',\n    description: 'Initialize MARIA.md file',\n    usage: '/init [--force]',\n    examples: ['/init', '/init --force'],\n    category: 'project',\n    relatedCommands: ['/add-dir', '/memory', '/read']\n  },\n  {\n    command: '/add-dir',\n    description: 'Add working directory',\n    usage: '/add-dir <path>',\n    examples: ['/add-dir ./src', '/add-dir ./tests'],\n    category: 'project',\n    relatedCommands: ['/init', '/read', '/memory']\n  },\n  {\n    command: '/memory',\n    description: 'Edit Claude memory file',\n    usage: '/memory [show|edit|clear]',\n    examples: ['/memory show', '/memory edit'],\n    category: 'project',\n    relatedCommands: ['/init', '/export']\n  },\n  {\n    command: '/export',\n    description: 'Export conversation',\n    usage: '/export [--format <json|md|yaml>] [--clipboard]',\n    examples: ['/export --format md', '/export --clipboard'],\n    category: 'project',\n    relatedCommands: ['/memory', '/resume']\n  },\n\n  // Development Tools\n  {\n    command: '/review',\n    description: 'Run PR review',\n    usage: '/review [<pr-number>] [--repo <owner/repo>]',\n    examples: ['/review 123', '/review --repo myorg/myrepo'],\n    category: 'dev',\n    relatedCommands: ['/pr-comments', '/test', '/commit']\n  },\n  {\n    command: '/pr-comments',\n    description: 'Get PR comments',\n    usage: '/pr-comments <pr-number> [--repo <owner/repo>]',\n    examples: ['/pr-comments 123', '/pr-comments 123 --repo myorg/myrepo'],\n    category: 'dev',\n    relatedCommands: ['/review', '/bug']\n  },\n  {\n    command: '/bug',\n    description: 'Report a bug',\n    usage: '/bug [<description>]',\n    examples: ['/bug \"Command not working\"'],\n    category: 'dev',\n    relatedCommands: ['/doctor', '/release-notes']\n  },\n  {\n    command: '/release-notes',\n    description: 'Show release notes',\n    usage: '/release-notes [--version <version>]',\n    examples: ['/release-notes', '/release-notes --version 1.2.0'],\n    category: 'dev',\n    relatedCommands: ['/status', '/bug']\n  },\n\n  // AI Agents & Integration\n  {\n    command: '/agents',\n    description: 'Manage AI agents',\n    usage: '/agents [list|enable|disable] [<agent-name>]',\n    examples: ['/agents list', '/agents enable paper-writer'],\n    category: 'agent',\n    relatedCommands: ['/mcp', '/model']\n  },\n  {\n    command: '/mcp',\n    description: 'Manage MCP servers',\n    usage: '/mcp [list|start|stop] [<server-name>]',\n    examples: ['/mcp list', '/mcp start playwright'],\n    category: 'agent',\n    relatedCommands: ['/agents', '/config']\n  },\n\n  // Chat & Session Management\n  {\n    command: '/clear',\n    description: 'Clear conversation history with context management',\n    usage: '/clear [--soft|--hard|--summary]',\n    examples: [\n      '/clear              # Normal clear with statistics', \n      '/clear --soft       # Display-only clear, preserve context',\n      '/clear --hard       # Complete reset, new session', \n      '/clear --summary    # Generate summary before clearing'\n    ],\n    category: 'chat',\n    relatedCommands: ['/compact', '/resume', '/export']\n  },\n  {\n    command: '/compact',\n    description: 'Summarize conversation',\n    usage: '/compact [--threshold <number>]',\n    examples: ['/compact', '/compact --threshold 100'],\n    category: 'chat',\n    relatedCommands: ['/clear', '/export', '/cost']\n  },\n  {\n    command: '/resume',\n    description: 'Resume previous session',\n    usage: '/resume [<session-id>]',\n    examples: ['/resume', '/resume abc123'],\n    category: 'chat',\n    relatedCommands: ['/export', '/compact']\n  },\n  {\n    command: '/cost',\n    description: 'Show session costs',\n    usage: '/cost [--detailed]',\n    examples: ['/cost', '/cost --detailed'],\n    category: 'chat',\n    relatedCommands: ['/compact', '/upgrade', '/status']\n  },\n\n  // AI Media Generation\n  {\n    command: '/video',\n    description: 'Generate AI videos using Wan 2.2 models',\n    usage: '/video \"<prompt>\" [--model wan22-5b|wan22-14b] [--resolution 720p|1080p] [--fps 24|30] [--frames 33|49|81] [--compare] [--input-image <path>]',\n    examples: [\n      '/video \"Red sports car at sunset\"',\n      '/video \"Dancing cats\" --model wan22-14b --frames 81',\n      '/video \"Camera zoom out\" --input-image photo.jpg --compare'\n    ],\n    category: 'media',\n    relatedCommands: ['/image', '/status']\n  },\n  {\n    command: '/image',\n    description: 'Generate AI images using Qwen-Image model',\n    usage: '/image \"<prompt>\" [--style photorealistic|artistic|anime|concept|technical] [--size 512x512|1024x1024] [--batch 1-4] [--quality low|medium|high]',\n    examples: [\n      '/image \"Futuristic cityscape\"',\n      '/image \"Portrait of wizard\" --style photorealistic --size 1024x1024',\n      '/image \"Logo concepts\" --batch 4 --style concept'\n    ],\n    category: 'media',\n    relatedCommands: ['/video', '/status']\n  },\n\n  // UI & Navigation\n  {\n    command: '/vim',\n    description: 'Toggle Vim mode',\n    usage: '/vim [on|off]',\n    examples: ['/vim on', '/vim off'],\n    category: 'ui',\n    relatedCommands: ['/help', '/config']\n  },\n  {\n    command: '/help',\n    description: 'Show help information',\n    usage: '/help [<category|command>]',\n    examples: ['/help', '/help user', '/help /init'],\n    category: 'ui',\n    relatedCommands: ['/status', '/terminal-setup']\n  },\n  {\n    command: '/chain',\n    description: 'Execute command chains',\n    usage: '/chain [<chain-name>] [--interactive] [--stop-on-error]',\n    examples: ['/chain', '/chain projectSetup', '/chain debugging --interactive'],\n    category: 'ui',\n    relatedCommands: ['/help', '/status']\n  },\n  {\n    command: '/suggest',\n    description: 'Get intelligent command suggestions',\n    usage: '/suggest',\n    examples: ['/suggest'],\n    category: 'ui',\n    relatedCommands: ['/help', '/chain', '/status']\n  },\n  {\n    command: '/alias',\n    description: 'Manage command aliases',\n    usage: '/alias [add|remove|export|import] [args]',\n    examples: ['/alias', '/alias add /gs \"/git status\"', '/alias remove /gs'],\n    category: 'ui',\n    relatedCommands: ['/help', '/config']\n  },\n  {\n    command: '/template',\n    description: 'Manage command templates',\n    usage: '/template [run|save|delete|view] [args]',\n    examples: ['/template', '/template run builtin-1', '/template save \"My Flow\" \"desc\" /init /test'],\n    category: 'ui',\n    relatedCommands: ['/chain', '/alias', '/help']\n  },\n  {\n    command: '/batch',\n    description: 'Execute multiple commands',\n    usage: '/batch [options] <commands>',\n    examples: ['/batch /init && /test', '/batch --parallel /test unit /test integration'],\n    category: 'ui',\n    relatedCommands: ['/chain', '/template']\n  },\n  {\n    command: '/hotkey',\n    description: 'Manage keyboard shortcuts',\n    usage: '/hotkey [add|remove|toggle|enable|disable|export|import] [args]',\n    examples: ['/hotkey', '/hotkey add ctrl+s /status', '/hotkey remove ctrl+s'],\n    category: 'ui',\n    relatedCommands: ['/alias', '/config', '/help']\n  },\n  {\n    command: '/exit',\n    description: 'Exit REPL',\n    usage: '/exit [--save-session]',\n    examples: ['/exit', '/exit --save-session'],\n    category: 'ui',\n    relatedCommands: ['/resume', '/export']\n  },\n  {\n    command: '/migrate-installer',\n    description: 'Migrate installation method',\n    usage: '/migrate-installer',\n    examples: ['/migrate-installer'],\n    category: 'ui',\n    relatedCommands: ['/doctor', '/status']\n  }\n];\n\n// Command chains for workflows\nexport const commandChains = {\n  projectSetup: {\n    name: 'Project Setup',\n    description: 'Initialize and configure a new project',\n    commands: ['/init', '/add-dir', '/read', '/memory'],\n    nextSuggestions: ['/agents', '/model']\n  },\n  debugging: {\n    name: 'Debugging Workflow',\n    description: 'Diagnose and fix issues',\n    commands: ['/status', '/doctor', '/bug'],\n    nextSuggestions: ['/release-notes', '/help']\n  },\n  prWorkflow: {\n    name: 'Pull Request Workflow',\n    description: 'Review and manage pull requests',\n    commands: ['/review', '/pr-comments', '/test', '/commit'],\n    nextSuggestions: ['/export', '/cost']\n  },\n  sessionManagement: {\n    name: 'Session Management',\n    description: 'Manage your chat session',\n    commands: ['/cost', '/compact', '/export', '/exit'],\n    nextSuggestions: ['/resume']\n  }\n};\n\n// Get commands by category\nexport function getCommandsByCategory(category: CommandCategory): CommandInfo[] {\n  return commands.filter(cmd => cmd.category === category);\n}\n\n// Get command info\nexport function getCommandInfo(command: string): CommandInfo | undefined {\n  return commands.find(cmd => cmd.command === command);\n}\n\n// Get related commands\nexport function getRelatedCommands(command: string): CommandInfo[] {\n  const cmd = getCommandInfo(command);\n  if (!cmd || !cmd.relatedCommands) return [];\n  \n  return cmd.relatedCommands\n    .map(relCmd => getCommandInfo(relCmd))\n    .filter((info): info is CommandInfo => info !== undefined);\n}\n\n// Get command suggestions based on context\nexport function getContextualSuggestions(\n  lastCommand?: string,\n  projectInitialized?: boolean,\n  userLoggedIn?: boolean\n): CommandInfo[] {\n  const suggestions: CommandInfo[] = [];\n  \n  // If user not logged in, suggest login\n  if (!userLoggedIn) {\n    const loginCmd = getCommandInfo('/login');\n    if (loginCmd) suggestions.push(loginCmd);\n  }\n  \n  // If project not initialized, suggest init\n  if (!projectInitialized) {\n    const initCmd = getCommandInfo('/init');\n    if (initCmd) suggestions.push(initCmd);\n  }\n  \n  // Add related commands from last command\n  if (lastCommand) {\n    const related = getRelatedCommands(lastCommand);\n    suggestions.push(...related);\n  }\n  \n  // Remove duplicates\n  const uniqueSuggestions = suggestions.filter(\n    (cmd, index, self) => self.findIndex(c => c.command === cmd.command) === index\n  );\n  \n  return uniqueSuggestions.slice(0, 3); // Return top 3 suggestions\n}\n\n// Find command chain for a command\nexport function getCommandChain(command: string): typeof commandChains[keyof typeof commandChains] | undefined {\n  return Object.values(commandChains).find(chain => \n    chain.commands.includes(command)\n  );\n}","/**\n * Command Suggestion Service\n * Provides intelligent command suggestions based on context and execution history\n */\n\nimport { \n  getRelatedCommands, \n  getCommandChain,\n} from '../lib/command-groups';\n\nexport interface CommandSuggestion {\n  command: string;\n  description: string;\n  reason?: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface SuggestionContext {\n  lastCommand?: string;\n  lastCommandSuccess?: boolean;\n  projectInitialized?: boolean;\n  userLoggedIn?: boolean;\n  currentMode?: string;\n  sessionDuration?: number;\n  commandHistory?: string[];\n}\n\nexport class SuggestionService {\n  private static instance: SuggestionService;\n  private commandHistory: string[] = [];\n  private sessionStartTime = Date.now();\n\n  public static getInstance(): SuggestionService {\n    if (!SuggestionService.instance) {\n      SuggestionService.instance = new SuggestionService();\n    }\n    return SuggestionService.instance;\n  }\n\n  /**\n   * Add command to history\n   */\n  addToHistory(command: string): void {\n    this.commandHistory.push(command);\n    // Keep only last 20 commands\n    if (this.commandHistory.length > 20) {\n      this.commandHistory.shift();\n    }\n  }\n\n  /**\n   * Get suggestions after command execution\n   */\n  async getSuggestionsAfterCommand(\n    command: string,\n    success: boolean\n  ): Promise<CommandSuggestion[]> {\n    const suggestions: CommandSuggestion[] = [];\n    \n    // Check if part of a workflow\n    const chain = getCommandChain(command);\n    if (chain && success) {\n      const currentIndex = chain.commands.indexOf(command);\n      if (currentIndex !== -1 && currentIndex < chain.commands.length - 1) {\n        // Suggest next command in chain\n        const nextCommand = chain.commands[currentIndex + 1];\n        if (nextCommand) {\n          suggestions.push({\n            command: nextCommand,\n            description: `Next in ${chain.name} workflow`,\n            reason: `Continue the ${chain.name} workflow`,\n            priority: 'high'\n          });\n        }\n      } else if (currentIndex === chain.commands.length - 1) {\n        // Workflow completed, suggest next workflow commands\n        chain.nextSuggestions?.forEach(cmd => {\n          suggestions.push({\n            command: cmd,\n            description: `Recommended after ${chain.name}`,\n            priority: 'medium'\n          });\n        });\n      }\n    }\n    \n    // Get related commands\n    const related = getRelatedCommands(command);\n    related.forEach(rel => {\n      if (!suggestions.find(s => s.command === rel.command)) {\n        suggestions.push({\n          command: rel.command,\n          description: rel.description,\n          reason: `Related to ${command}`,\n          priority: 'medium'\n        });\n      }\n    });\n    \n    // Context-based suggestions\n    if (command === '/init' && success) {\n      this.addContextualSuggestion(suggestions, '/add-dir', 'Add project directories', 'high');\n      this.addContextualSuggestion(suggestions, '/memory', 'Set up AI memory', 'medium');\n    }\n    \n    if (command === '/login' && success) {\n      this.addContextualSuggestion(suggestions, '/upgrade', 'Upgrade your plan', 'low');\n      this.addContextualSuggestion(suggestions, '/config', 'Configure settings', 'medium');\n    }\n    \n    if (command === '/doctor' && !success) {\n      this.addContextualSuggestion(suggestions, '/bug', 'Report the issue', 'high');\n      this.addContextualSuggestion(suggestions, '/help', 'Get help', 'medium');\n    }\n    \n    // Time-based suggestions\n    const sessionMinutes = (Date.now() - this.sessionStartTime) / 60000;\n    if (sessionMinutes > 30 && !this.commandHistory.includes('/compact')) {\n      this.addContextualSuggestion(\n        suggestions, \n        '/compact', \n        'Optimize conversation memory', \n        'medium',\n        'Long session detected'\n      );\n    }\n    \n    // Limit suggestions to top 3\n    return suggestions\n      .sort((a, b) => {\n        const priorityOrder = { high: 0, medium: 1, low: 2 };\n        return priorityOrder[a.priority] - priorityOrder[b.priority];\n      })\n      .slice(0, 3);\n  }\n\n  /**\n   * Get contextual suggestions based on current state\n   */\n  async getContextualSuggestions(context: SuggestionContext): Promise<CommandSuggestion[]> {\n    const suggestions: CommandSuggestion[] = [];\n    \n    // Check for common scenarios\n    if (!context.userLoggedIn) {\n      suggestions.push({\n        command: '/login',\n        description: 'Sign in to access all features',\n        reason: 'Not logged in',\n        priority: 'high'\n      });\n    }\n    \n    if (!context.projectInitialized) {\n      suggestions.push({\n        command: '/init',\n        description: 'Initialize project',\n        reason: 'No MARIA.md found',\n        priority: 'high'\n      });\n    }\n    \n    // Mode-specific suggestions\n    if (context.currentMode === 'research') {\n      this.addContextualSuggestion(\n        suggestions,\n        '/memory',\n        'Save research findings',\n        'medium'\n      );\n    }\n    \n    // History-based patterns\n    const recentCommands = this.commandHistory.slice(-5);\n    if (recentCommands.filter(cmd => cmd.startsWith('/pr')).length >= 2) {\n      this.addContextualSuggestion(\n        suggestions,\n        '/commit',\n        'Commit your changes',\n        'high',\n        'PR activity detected'\n      );\n    }\n    \n    return suggestions.slice(0, 3);\n  }\n\n  /**\n   * Format suggestions for display\n   */\n  formatSuggestions(suggestions: CommandSuggestion[]): string {\n    if (suggestions.length === 0) return '';\n    \n    let output = '\\n💡 Suggested next actions:\\n';\n    suggestions.forEach((sug) => {\n      const icon = sug.priority === 'high' ? '🔥' : sug.priority === 'medium' ? '💫' : '✨';\n      output += `  ${icon} ${sug.command.padEnd(15)} - ${sug.description}`;\n      if (sug.reason) {\n        output += ` (${sug.reason})`;\n      }\n      output += '\\n';\n    });\n    \n    return output;\n  }\n\n  /**\n   * Helper to add contextual suggestion\n   */\n  private addContextualSuggestion(\n    suggestions: CommandSuggestion[],\n    command: string,\n    description: string,\n    priority: 'high' | 'medium' | 'low',\n    reason?: string\n  ): void {\n    if (!suggestions.find(s => s.command === command)) {\n      suggestions.push({ command, description, priority, reason });\n    }\n  }\n\n  /**\n   * Get command frequency\n   */\n  getCommandFrequency(): Map<string, number> {\n    const frequency = new Map<string, number>();\n    this.commandHistory.forEach(cmd => {\n      frequency.set(cmd, (frequency.get(cmd) || 0) + 1);\n    });\n    return frequency;\n  }\n\n  /**\n   * Get most used commands\n   */\n  getMostUsedCommands(limit = 5): string[] {\n    const frequency = this.getCommandFrequency();\n    return Array.from(frequency.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, limit)\n      .map(([cmd]) => cmd);\n  }\n\n  /**\n   * Get last command from history\n   */\n  getLastCommand(): string | undefined {\n    return this.commandHistory[this.commandHistory.length - 1];\n  }\n\n  /**\n   * Check if a command has been used\n   */\n  hasUsedCommand(command: string): boolean {\n    return this.commandHistory.includes(command);\n  }\n\n  /**\n   * Get command history\n   */\n  getCommandHistory(): string[] {\n    return [...this.commandHistory];\n  }\n}","/**\n * Command Chain Service\n * Enables sequential execution of related commands\n */\n\nimport { SlashCommandHandler, SlashCommandResult } from './slash-command-handler';\nimport { ConversationContext } from '../types/conversation';\nimport { commandChains } from '../lib/command-groups';\n// import { logger } from '../utils/logger';\nimport chalk from 'chalk';\n\nexport interface ChainExecutionOptions {\n  /** Whether to stop on first error */\n  stopOnError?: boolean;\n  /** Whether to prompt user before each command */\n  interactive?: boolean;\n  /** Custom parameters for specific commands */\n  commandParams?: Record<string, string[]>;\n}\n\nexport interface ChainExecutionResult {\n  success: boolean;\n  executedCommands: string[];\n  results: SlashCommandResult[];\n  errors: Array<{ command: string; error: string }>;\n  summary: string;\n}\n\nexport class CommandChainService {\n  private static instance: CommandChainService;\n  private commandHandler: SlashCommandHandler;\n  private isExecutingChain = false;\n\n  private constructor() {\n    this.commandHandler = SlashCommandHandler.getInstance();\n  }\n\n  public static getInstance(): CommandChainService {\n    if (!CommandChainService.instance) {\n      CommandChainService.instance = new CommandChainService();\n    }\n    return CommandChainService.instance;\n  }\n\n  /**\n   * Execute a predefined command chain\n   */\n  async executeChain(\n    chainName: keyof typeof commandChains,\n    context: ConversationContext,\n    options: ChainExecutionOptions = {}\n  ): Promise<ChainExecutionResult> {\n    const chain = commandChains[chainName];\n    if (!chain) {\n      return {\n        success: false,\n        executedCommands: [],\n        results: [],\n        errors: [{ command: chainName, error: 'Chain not found' }],\n        summary: `Command chain \"${chainName}\" not found`\n      };\n    }\n\n    return this.executeCommandSequence(\n      chain.commands,\n      context,\n      { ...options, chainName: chain.name, chainDescription: chain.description }\n    );\n  }\n\n  /**\n   * Execute a custom sequence of commands\n   */\n  async executeCommandSequence(\n    commands: string[],\n    context: ConversationContext,\n    options: ChainExecutionOptions & { chainName?: string; chainDescription?: string } = {}\n  ): Promise<ChainExecutionResult> {\n    if (this.isExecutingChain) {\n      return {\n        success: false,\n        executedCommands: [],\n        results: [],\n        errors: [{ command: 'chain', error: 'Another chain is already executing' }],\n        summary: 'Cannot execute multiple chains simultaneously'\n      };\n    }\n\n    this.isExecutingChain = true;\n    const executedCommands: string[] = [];\n    const results: SlashCommandResult[] = [];\n    const errors: Array<{ command: string; error: string }> = [];\n\n    console.log(chalk.blue(`\\n🔗 Starting command chain${options.chainName ? `: ${options.chainName}` : ''}`));\n    if (options.chainDescription) {\n      console.log(chalk.gray(`   ${options.chainDescription}`));\n    }\n    console.log(chalk.gray(`   Commands: ${commands.join(' → ')}\\n`));\n\n    try {\n      for (const command of commands) {\n        // Check if we should continue\n        if (options.stopOnError && errors.length > 0) {\n          break;\n        }\n\n        // Interactive mode - prompt before execution\n        if (options.interactive) {\n          const shouldExecute = await this.promptForExecution();\n          if (!shouldExecute) {\n            console.log(chalk.yellow(`⏭️  Skipping ${command}`));\n            continue;\n          }\n        }\n\n        // Get custom parameters for this command\n        const args = options.commandParams?.[command] || [];\n\n        console.log(chalk.cyan(`\\n▶️  Executing: ${command} ${args.join(' ')}`));\n\n        try {\n          const result = await this.commandHandler.handleCommand(command, args, context);\n          executedCommands.push(command);\n          results.push(result);\n\n          if (result.success) {\n            console.log(chalk.green(`✅ ${command} completed successfully`));\n            if (result.message) {\n              console.log(chalk.gray(this.truncateMessage(result.message)));\n            }\n          } else {\n            console.log(chalk.red(`❌ ${command} failed`));\n            console.log(chalk.red(result.message));\n            errors.push({ command, error: result.message });\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          console.log(chalk.red(`❌ ${command} threw an error: ${errorMessage}`));\n          errors.push({ command, error: errorMessage });\n        }\n\n        // Add a small delay between commands for better visibility\n        await this.delay(500);\n      }\n\n      const success = errors.length === 0;\n      const summary = this.generateSummary(executedCommands, commands, errors, success);\n\n      console.log(chalk.blue(`\\n🏁 Chain execution completed`));\n      console.log(summary);\n\n      return {\n        success,\n        executedCommands,\n        results,\n        errors,\n        summary\n      };\n    } finally {\n      this.isExecutingChain = false;\n    }\n  }\n\n  /**\n   * Check if a command chain is currently executing\n   */\n  isChainExecuting(): boolean {\n    return this.isExecutingChain;\n  }\n\n  /**\n   * Prompt user for execution in interactive mode\n   */\n  private async promptForExecution(): Promise<boolean> {\n    // In a real implementation, this would use Ink or another interactive prompt\n    // For now, we'll auto-accept\n    return true;\n  }\n\n  /**\n   * Truncate long messages for display\n   */\n  private truncateMessage(message: string, maxLength = 100): string {\n    const firstLine = message.split('\\n')[0] || '';\n    if (firstLine.length <= maxLength) {\n      return firstLine;\n    }\n    return firstLine.substring(0, maxLength) + '...';\n  }\n\n  /**\n   * Generate execution summary\n   */\n  private generateSummary(\n    executed: string[],\n    planned: string[],\n    errors: Array<{ command: string; error: string }>,\n    success: boolean\n  ): string {\n    let summary = '\\n';\n    \n    if (success) {\n      summary += chalk.green(`✨ All commands executed successfully!\\n`);\n    } else {\n      summary += chalk.yellow(`⚠️  Chain completed with errors\\n`);\n    }\n\n    summary += chalk.gray(`   Executed: ${executed.length}/${planned.length} commands\\n`);\n    \n    if (executed.length < planned.length) {\n      const skipped = planned.slice(executed.length);\n      summary += chalk.gray(`   Skipped: ${skipped.join(', ')}\\n`);\n    }\n\n    if (errors.length > 0) {\n      summary += chalk.red(`   Errors: ${errors.length}\\n`);\n      errors.forEach(err => {\n        summary += chalk.red(`     - ${err.command}: ${err.error}\\n`);\n      });\n    }\n\n    return summary;\n  }\n\n  /**\n   * Helper to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get available command chains\n   */\n  getAvailableChains(): Array<{ name: string; description: string; commands: string[] }> {\n    return Object.entries(commandChains).map(([key, chain]) => ({\n      name: key,\n      description: chain.description,\n      commands: chain.commands\n    }));\n  }\n}","/**\n * Alias System for Command Shortcuts\n * Provides customizable command aliases for efficiency\n */\n\nimport { readConfig, writeConfig } from '../utils/config';\nimport { logger } from '../utils/logger';\nimport { getCommandInfo } from '../lib/command-groups';\n\nexport interface CommandAlias {\n  alias: string;\n  command: string;\n  description?: string;\n  args?: string[];\n  createdAt: Date;\n  usageCount: number;\n}\n\nexport interface AliasConfig {\n  aliases: CommandAlias[];\n  reservedAliases: string[];\n}\n\nexport class AliasSystem {\n  private static instance: AliasSystem;\n  private aliases: Map<string, CommandAlias> = new Map();\n  private builtInAliases: Map<string, CommandAlias> = new Map();\n  private reservedWords = new Set([\n    'exit', 'quit', 'help', 'clear', 'status',\n    'login', 'logout', 'init', 'config'\n  ]);\n\n  private constructor() {\n    this.initializeBuiltInAliases();\n    this.loadUserAliases();\n  }\n\n  public static getInstance(): AliasSystem {\n    if (!AliasSystem.instance) {\n      AliasSystem.instance = new AliasSystem();\n    }\n    return AliasSystem.instance;\n  }\n\n  /**\n   * Initialize built-in aliases\n   */\n  private initializeBuiltInAliases(): void {\n    const builtIn: Array<{ alias: string; command: string; description: string }> = [\n      // Short forms for common commands\n      { alias: '/s', command: '/status', description: 'Quick status check' },\n      { alias: '/c', command: '/config', description: 'Quick config access' },\n      { alias: '/h', command: '/help', description: 'Quick help' },\n      { alias: '/i', command: '/init', description: 'Quick project init' },\n      { alias: '/x', command: '/exit', description: 'Quick exit' },\n      \n      // Power user shortcuts\n      { alias: '/sg', command: '/suggest', description: 'Get suggestions' },\n      { alias: '/ch', command: '/chain', description: 'Run command chain' },\n      { alias: '/cls', command: '/clear', description: 'Clear screen' },\n      { alias: '/cmp', command: '/compact', description: 'Compact memory' },\n      \n      // Development shortcuts\n      { alias: '/r', command: '/review', description: 'PR review' },\n      { alias: '/t', command: '/test', description: 'Run tests' },\n      { alias: '/d', command: '/dev', description: 'Development mode' },\n      { alias: '/b', command: '/bug', description: 'Report bug' },\n      \n      // Git shortcuts\n      { alias: '/cm', command: '/commit', description: 'Git commit' },\n      { alias: '/pr', command: '/pr-comments', description: 'PR comments' }\n    ];\n\n    builtIn.forEach(({ alias, command, description }) => {\n      this.builtInAliases.set(alias, {\n        alias,\n        command,\n        description,\n        createdAt: new Date(),\n        usageCount: 0\n      });\n    });\n  }\n\n  /**\n   * Load user-defined aliases from config\n   */\n  private async loadUserAliases(): Promise<void> {\n    try {\n      const config = await readConfig();\n      if (config.aliases) {\n        config.aliases.forEach(alias => {\n          this.aliases.set(alias.alias, {\n            ...alias,\n            createdAt: new Date(alias.createdAt)\n          });\n        });\n      }\n    } catch {\n      logger.debug('No user aliases found, starting with defaults');\n    }\n  }\n\n  /**\n   * Save aliases to config\n   */\n  private async saveAliases(): Promise<void> {\n    try {\n      const config = await readConfig();\n      config.aliases = Array.from(this.aliases.values()).map(alias => ({\n        ...alias,\n        createdAt: alias.createdAt.toISOString()\n      }));\n      await writeConfig(config);\n    } catch (error) {\n      logger.error('Failed to save aliases:', error);\n    }\n  }\n\n  /**\n   * Create a new alias\n   */\n  async createAlias(\n    alias: string,\n    command: string,\n    description?: string,\n    args?: string[]\n  ): Promise<{ success: boolean; message: string }> {\n    // Validate alias\n    if (!alias.startsWith('/')) {\n      return {\n        success: false,\n        message: 'Alias must start with /'\n      };\n    }\n\n    if (alias.length < 2) {\n      return {\n        success: false,\n        message: 'Alias must be at least 2 characters long'\n      };\n    }\n\n    if (this.reservedWords.has(alias.substring(1))) {\n      return {\n        success: false,\n        message: `\"${alias}\" is a reserved word and cannot be used as an alias`\n      };\n    }\n\n    // Check if alias already exists\n    if (this.aliases.has(alias) || this.builtInAliases.has(alias)) {\n      return {\n        success: false,\n        message: `Alias \"${alias}\" already exists`\n      };\n    }\n\n    // Validate command\n    const commandInfo = getCommandInfo(command);\n    if (!commandInfo) {\n      return {\n        success: false,\n        message: `Command \"${command}\" does not exist`\n      };\n    }\n\n    // Create alias\n    const newAlias: CommandAlias = {\n      alias,\n      command,\n      description: description || `Alias for ${command}`,\n      args,\n      createdAt: new Date(),\n      usageCount: 0\n    };\n\n    this.aliases.set(alias, newAlias);\n    await this.saveAliases();\n\n    return {\n      success: true,\n      message: `Alias \"${alias}\" → \"${command}\" created successfully`\n    };\n  }\n\n  /**\n   * Remove an alias\n   */\n  async removeAlias(alias: string): Promise<{ success: boolean; message: string }> {\n    if (this.builtInAliases.has(alias)) {\n      return {\n        success: false,\n        message: `Cannot remove built-in alias \"${alias}\"`\n      };\n    }\n\n    if (!this.aliases.has(alias)) {\n      return {\n        success: false,\n        message: `Alias \"${alias}\" not found`\n      };\n    }\n\n    this.aliases.delete(alias);\n    await this.saveAliases();\n\n    return {\n      success: true,\n      message: `Alias \"${alias}\" removed successfully`\n    };\n  }\n\n  /**\n   * Resolve an alias to its command\n   */\n  resolveAlias(input: string): { command: string; args: string[] } | null {\n    const parts = input.split(' ');\n    const aliasName = parts[0];\n    if (!aliasName) return null;\n    \n    const additionalArgs = parts.slice(1);\n\n    // Check user aliases first\n    const userAlias = this.aliases.get(aliasName);\n    if (userAlias) {\n      userAlias.usageCount++;\n      this.saveAliases(); // Update usage count\n      \n      return {\n        command: userAlias.command,\n        args: [...(userAlias.args || []), ...additionalArgs]\n      };\n    }\n\n    // Check built-in aliases\n    const builtInAlias = this.builtInAliases.get(aliasName);\n    if (builtInAlias) {\n      builtInAlias.usageCount++;\n      \n      return {\n        command: builtInAlias.command,\n        args: [...(builtInAlias.args || []), ...additionalArgs]\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * List all aliases\n   */\n  listAliases(): {\n    userAliases: CommandAlias[];\n    builtInAliases: CommandAlias[];\n  } {\n    return {\n      userAliases: Array.from(this.aliases.values()).sort((a, b) => \n        b.usageCount - a.usageCount\n      ),\n      builtInAliases: Array.from(this.builtInAliases.values()).sort((a, b) =>\n        a.alias.localeCompare(b.alias)\n      )\n    };\n  }\n\n  /**\n   * Get alias suggestions based on input\n   */\n  getSuggestions(partialInput: string): CommandAlias[] {\n    const suggestions: CommandAlias[] = [];\n    const search = partialInput.toLowerCase();\n\n    // Search in user aliases\n    this.aliases.forEach(alias => {\n      if (alias.alias.toLowerCase().startsWith(search) ||\n          alias.command.toLowerCase().includes(search)) {\n        suggestions.push(alias);\n      }\n    });\n\n    // Search in built-in aliases\n    this.builtInAliases.forEach(alias => {\n      if (alias.alias.toLowerCase().startsWith(search) ||\n          alias.command.toLowerCase().includes(search)) {\n        suggestions.push(alias);\n      }\n    });\n\n    return suggestions.sort((a, b) => b.usageCount - a.usageCount).slice(0, 5);\n  }\n\n  /**\n   * Get most used aliases\n   */\n  getMostUsedAliases(limit = 5): CommandAlias[] {\n    const allAliases = [\n      ...Array.from(this.aliases.values()),\n      ...Array.from(this.builtInAliases.values())\n    ];\n\n    return allAliases\n      .filter(alias => alias.usageCount > 0)\n      .sort((a, b) => b.usageCount - a.usageCount)\n      .slice(0, limit);\n  }\n\n  /**\n   * Export aliases to JSON\n   */\n  exportAliases(): string {\n    return JSON.stringify({\n      userAliases: Array.from(this.aliases.values()),\n      createdAt: new Date().toISOString(),\n      version: '1.0'\n    }, null, 2);\n  }\n\n  /**\n   * Import aliases from JSON\n   */\n  async importAliases(jsonData: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (!data.userAliases || !Array.isArray(data.userAliases)) {\n        return {\n          success: false,\n          message: 'Invalid alias data format'\n        };\n      }\n\n      let imported = 0;\n      let skipped = 0;\n\n      for (const alias of data.userAliases) {\n        if (!this.aliases.has(alias.alias) && !this.builtInAliases.has(alias.alias)) {\n          this.aliases.set(alias.alias, {\n            ...alias,\n            createdAt: new Date(alias.createdAt || new Date()),\n            usageCount: alias.usageCount || 0\n          });\n          imported++;\n        } else {\n          skipped++;\n        }\n      }\n\n      await this.saveAliases();\n\n      return {\n        success: true,\n        message: `Imported ${imported} aliases (${skipped} skipped due to conflicts)`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to import aliases: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n}","/**\n * Template Manager for Command Workflows\n * Save, load, and manage reusable command sequences\n */\n\nimport { logger } from '../utils/logger';\nimport { getCommandInfo } from '../lib/command-groups';\nimport { join } from 'path';\nimport { homedir } from 'os';\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\n\nexport interface CommandTemplate {\n  id: string;\n  name: string;\n  description: string;\n  commands: Array<{\n    command: string;\n    args?: string[];\n    condition?: string; // Optional condition for execution\n    waitFor?: number; // Optional wait time in ms\n  }>;\n  parameters?: Array<{\n    name: string;\n    description: string;\n    type: 'string' | 'number' | 'boolean' | 'choice';\n    default?: any;\n    choices?: string[];\n    required?: boolean;\n  }>;\n  tags?: string[];\n  author?: string;\n  version?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  usageCount: number;\n}\n\nexport interface TemplateExecutionContext {\n  parameters: Record<string, any>;\n  variables: Record<string, any>;\n  results: Array<{\n    command: string;\n    success: boolean;\n    output?: string;\n    error?: string;\n  }>;\n}\n\nexport class TemplateManager {\n  private static instance: TemplateManager;\n  private templates: Map<string, CommandTemplate> = new Map();\n  private templatesDir: string;\n  private builtInTemplates: Map<string, CommandTemplate> = new Map();\n\n  private constructor() {\n    this.templatesDir = join(homedir(), '.maria-code', 'templates');\n    this.ensureTemplatesDir();\n    this.initializeBuiltInTemplates();\n    this.loadUserTemplates();\n  }\n\n  public static getInstance(): TemplateManager {\n    if (!TemplateManager.instance) {\n      TemplateManager.instance = new TemplateManager();\n    }\n    return TemplateManager.instance;\n  }\n\n  /**\n   * Ensure templates directory exists\n   */\n  private ensureTemplatesDir(): void {\n    if (!existsSync(this.templatesDir)) {\n      mkdirSync(this.templatesDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Initialize built-in templates\n   */\n  private initializeBuiltInTemplates(): void {\n    const templates: Omit<CommandTemplate, 'id' | 'createdAt' | 'updatedAt' | 'usageCount'>[] = [\n      {\n        name: 'Quick Project Setup',\n        description: 'Initialize a new project with common setup',\n        commands: [\n          { command: '/init' },\n          { command: '/add-dir', args: ['./src'] },\n          { command: '/add-dir', args: ['./tests'] },\n          { command: '/memory' },\n          { command: '/agents', args: ['list'] }\n        ],\n        tags: ['setup', 'project', 'quick-start'],\n        author: 'MARIA',\n        version: '1.0.0'\n      },\n      {\n        name: 'PR Review Workflow',\n        description: 'Complete PR review process',\n        commands: [\n          { command: '/review', args: ['{{pr_number}}'] },\n          { command: '/pr-comments', args: ['{{pr_number}}'] },\n          { command: '/test', args: ['--type', 'unit'] },\n          { command: '/suggest' }\n        ],\n        parameters: [\n          {\n            name: 'pr_number',\n            description: 'Pull request number',\n            type: 'string',\n            required: true\n          }\n        ],\n        tags: ['review', 'pr', 'testing'],\n        author: 'MARIA',\n        version: '1.0.0'\n      },\n      {\n        name: 'Daily Standup',\n        description: 'Prepare daily standup report',\n        commands: [\n          { command: '/status' },\n          { command: '/cost', args: ['--detailed'] },\n          { command: '/git', args: ['log', '--oneline', '-10'] },\n          { command: '/export', args: ['--format', 'md'] }\n        ],\n        tags: ['daily', 'standup', 'report'],\n        author: 'MARIA',\n        version: '1.0.0'\n      },\n      {\n        name: 'Debug & Fix',\n        description: 'Debug workflow with error reporting',\n        commands: [\n          { command: '/doctor' },\n          { command: '/status', args: ['--verbose'] },\n          { \n            command: '/bug', \n            args: ['{{description}}'],\n            condition: 'hasErrors'\n          },\n          { command: '/suggest' }\n        ],\n        parameters: [\n          {\n            name: 'description',\n            description: 'Bug description',\n            type: 'string',\n            default: 'Found during debugging session'\n          }\n        ],\n        tags: ['debug', 'troubleshooting'],\n        author: 'MARIA',\n        version: '1.0.0'\n      },\n      {\n        name: 'Deploy Pipeline',\n        description: 'Full deployment workflow',\n        commands: [\n          { command: '/test', args: ['--type', 'all'] },\n          { command: '/commit', args: ['--message', '{{message}}'] },\n          { \n            command: '/deploy', \n            args: ['--env', '{{environment}}'],\n            condition: 'testsPass'\n          },\n          { command: '/status', waitFor: 5000 }\n        ],\n        parameters: [\n          {\n            name: 'message',\n            description: 'Commit message',\n            type: 'string',\n            required: true\n          },\n          {\n            name: 'environment',\n            description: 'Deployment environment',\n            type: 'choice',\n            choices: ['staging', 'production'],\n            default: 'staging',\n            required: true\n          }\n        ],\n        tags: ['deploy', 'ci/cd', 'pipeline'],\n        author: 'MARIA',\n        version: '1.0.0'\n      }\n    ];\n\n    templates.forEach((template, index) => {\n      const id = `builtin-${index + 1}`;\n      const now = new Date();\n      this.builtInTemplates.set(id, {\n        ...template,\n        id,\n        createdAt: now,\n        updatedAt: now,\n        usageCount: 0\n      });\n    });\n  }\n\n  /**\n   * Load user templates from disk\n   */\n  private loadUserTemplates(): void {\n    try {\n      const files = require('fs').readdirSync(this.templatesDir);\n      \n      files.forEach((file: string) => {\n        if (file.endsWith('.json')) {\n          try {\n            const content = readFileSync(join(this.templatesDir, file), 'utf-8');\n            const template = JSON.parse(content) as CommandTemplate;\n            template.createdAt = new Date(template.createdAt);\n            template.updatedAt = new Date(template.updatedAt);\n            this.templates.set(template.id, template);\n          } catch (error) {\n            logger.error(`Failed to load template ${file}:`, error);\n          }\n        }\n      });\n    } catch {\n      logger.debug('No user templates found');\n    }\n  }\n\n  /**\n   * Save a template to disk\n   */\n  private saveTemplate(template: CommandTemplate): void {\n    const filename = `${template.id}.json`;\n    const filepath = join(this.templatesDir, filename);\n    writeFileSync(filepath, JSON.stringify(template, null, 2));\n  }\n\n  /**\n   * Create a new template\n   */\n  async createTemplate(\n    name: string,\n    description: string,\n    commands: CommandTemplate['commands'],\n    options?: {\n      parameters?: CommandTemplate['parameters'];\n      tags?: string[];\n      author?: string;\n      version?: string;\n    }\n  ): Promise<{ success: boolean; message: string; template?: CommandTemplate }> {\n    // Validate commands\n    for (const cmd of commands) {\n      const commandInfo = getCommandInfo(cmd.command);\n      if (!commandInfo) {\n        return {\n          success: false,\n          message: `Invalid command: ${cmd.command}`\n        };\n      }\n    }\n\n    const id = `user-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    const now = new Date();\n\n    const template: CommandTemplate = {\n      id,\n      name,\n      description,\n      commands,\n      parameters: options?.parameters || [],\n      tags: options?.tags || [],\n      author: options?.author || 'User',\n      version: options?.version || '1.0.0',\n      createdAt: now,\n      updatedAt: now,\n      usageCount: 0\n    };\n\n    this.templates.set(id, template);\n    this.saveTemplate(template);\n\n    return {\n      success: true,\n      message: `Template \"${name}\" created successfully`,\n      template\n    };\n  }\n\n  /**\n   * Update an existing template\n   */\n  async updateTemplate(\n    id: string,\n    updates: Partial<Omit<CommandTemplate, 'id' | 'createdAt'>>\n  ): Promise<{ success: boolean; message: string }> {\n    const template = this.templates.get(id);\n    if (!template) {\n      return {\n        success: false,\n        message: `Template \"${id}\" not found`\n      };\n    }\n\n    if (this.builtInTemplates.has(id)) {\n      return {\n        success: false,\n        message: 'Cannot modify built-in templates'\n      };\n    }\n\n    Object.assign(template, updates, { updatedAt: new Date() });\n    this.saveTemplate(template);\n\n    return {\n      success: true,\n      message: `Template \"${template.name}\" updated successfully`\n    };\n  }\n\n  /**\n   * Delete a template\n   */\n  async deleteTemplate(id: string): Promise<{ success: boolean; message: string }> {\n    if (this.builtInTemplates.has(id)) {\n      return {\n        success: false,\n        message: 'Cannot delete built-in templates'\n      };\n    }\n\n    const template = this.templates.get(id);\n    if (!template) {\n      return {\n        success: false,\n        message: `Template \"${id}\" not found`\n      };\n    }\n\n    this.templates.delete(id);\n    \n    try {\n      const fs = require('fs');\n      fs.unlinkSync(join(this.templatesDir, `${id}.json`));\n    } catch (error) {\n      logger.error('Failed to delete template file:', error);\n    }\n\n    return {\n      success: true,\n      message: `Template \"${template.name}\" deleted successfully`\n    };\n  }\n\n  /**\n   * Get a template by ID\n   */\n  getTemplate(id: string): CommandTemplate | undefined {\n    return this.templates.get(id) || this.builtInTemplates.get(id);\n  }\n\n  /**\n   * List all templates\n   */\n  listTemplates(options?: {\n    tags?: string[];\n    author?: string;\n    search?: string;\n  }): {\n    userTemplates: CommandTemplate[];\n    builtInTemplates: CommandTemplate[];\n  } {\n    let userTemplates = Array.from(this.templates.values());\n    let builtInTemplates = Array.from(this.builtInTemplates.values());\n\n    // Apply filters\n    if (options?.tags && options.tags.length > 0) {\n      const filterByTags = (template: CommandTemplate) =>\n        options.tags!.some(tag => template.tags?.includes(tag));\n      userTemplates = userTemplates.filter(filterByTags);\n      builtInTemplates = builtInTemplates.filter(filterByTags);\n    }\n\n    if (options?.author) {\n      const filterByAuthor = (template: CommandTemplate) =>\n        template.author?.toLowerCase() === options.author!.toLowerCase();\n      userTemplates = userTemplates.filter(filterByAuthor);\n      builtInTemplates = builtInTemplates.filter(filterByAuthor);\n    }\n\n    if (options?.search) {\n      const search = options.search.toLowerCase();\n      const filterBySearch = (template: CommandTemplate) =>\n        template.name.toLowerCase().includes(search) ||\n        template.description.toLowerCase().includes(search) ||\n        template.tags?.some(tag => tag.toLowerCase().includes(search));\n      userTemplates = userTemplates.filter(filterBySearch);\n      builtInTemplates = builtInTemplates.filter(filterBySearch);\n    }\n\n    // Sort by usage count\n    userTemplates.sort((a, b) => b.usageCount - a.usageCount);\n    builtInTemplates.sort((a, b) => b.usageCount - a.usageCount);\n\n    return { userTemplates, builtInTemplates };\n  }\n\n  /**\n   * Export templates to JSON\n   */\n  exportTemplates(ids?: string[]): string {\n    const templates = ids\n      ? ids.map(id => this.getTemplate(id)).filter(Boolean)\n      : Array.from(this.templates.values());\n\n    return JSON.stringify({\n      templates,\n      exportedAt: new Date().toISOString(),\n      version: '1.0'\n    }, null, 2);\n  }\n\n  /**\n   * Import templates from JSON\n   */\n  async importTemplates(jsonData: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (!data.templates || !Array.isArray(data.templates)) {\n        return {\n          success: false,\n          message: 'Invalid template data format'\n        };\n      }\n\n      let imported = 0;\n\n      for (const template of data.templates) {\n        // Generate new ID to avoid conflicts\n        const newId = `imported-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n        \n        const newTemplate: CommandTemplate = {\n          ...template,\n          id: newId,\n          createdAt: new Date(template.createdAt || new Date()),\n          updatedAt: new Date(template.updatedAt || new Date()),\n          usageCount: 0\n        };\n\n        this.templates.set(newId, newTemplate);\n        this.saveTemplate(newTemplate);\n        imported++;\n      }\n\n      return {\n        success: true,\n        message: `Imported ${imported} templates`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to import templates: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  /**\n   * Clone a template\n   */\n  async cloneTemplate(\n    id: string,\n    newName: string\n  ): Promise<{ success: boolean; message: string; template?: CommandTemplate }> {\n    const original = this.getTemplate(id);\n    if (!original) {\n      return {\n        success: false,\n        message: `Template \"${id}\" not found`\n      };\n    }\n\n    return this.createTemplate(\n      newName,\n      `Clone of ${original.description}`,\n      original.commands,\n      {\n        parameters: original.parameters,\n        tags: [...(original.tags || []), 'clone'],\n        author: 'User',\n        version: '1.0.0'\n      }\n    );\n  }\n\n  /**\n   * Increment usage count\n   */\n  incrementUsageCount(id: string): void {\n    const template = this.getTemplate(id);\n    if (template) {\n      template.usageCount++;\n      if (!this.builtInTemplates.has(id)) {\n        this.saveTemplate(template);\n      }\n    }\n  }\n\n  /**\n   * Get popular templates\n   */\n  getPopularTemplates(limit = 5): CommandTemplate[] {\n    const allTemplates = [\n      ...Array.from(this.templates.values()),\n      ...Array.from(this.builtInTemplates.values())\n    ];\n\n    return allTemplates\n      .filter(t => t.usageCount > 0)\n      .sort((a, b) => b.usageCount - a.usageCount)\n      .slice(0, limit);\n  }\n\n  /**\n   * Validate template parameters\n   */\n  validateParameters(\n    template: CommandTemplate,\n    providedParams: Record<string, any>\n  ): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    template.parameters?.forEach(param => {\n      const value = providedParams[param.name];\n\n      if (param.required && value === undefined) {\n        errors.push(`Missing required parameter: ${param.name}`);\n        return;\n      }\n\n      if (value !== undefined) {\n        // Type validation\n        if (param.type === 'number' && typeof value !== 'number') {\n          errors.push(`Parameter ${param.name} must be a number`);\n        } else if (param.type === 'boolean' && typeof value !== 'boolean') {\n          errors.push(`Parameter ${param.name} must be a boolean`);\n        } else if (param.type === 'choice' && param.choices && !param.choices.includes(value)) {\n          errors.push(`Parameter ${param.name} must be one of: ${param.choices.join(', ')}`);\n        }\n      }\n    });\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Substitute parameters in command\n   */\n  substituteParameters(\n    command: string,\n    parameters: Record<string, any>\n  ): string {\n    let result = command;\n    \n    Object.entries(parameters).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`;\n      result = result.replace(new RegExp(placeholder, 'g'), String(value));\n    });\n\n    return result;\n  }\n}","/**\n * Batch Execution Engine\n * Execute multiple commands with advanced control flow\n */\n\nimport { SlashCommandHandler } from './slash-command-handler';\nimport { ConversationContext } from '../types/conversation';\nimport chalk from 'chalk';\n\nexport interface BatchCommand {\n  command: string;\n  args: string[];\n  condition?: string;\n  onSuccess?: string[];\n  onFailure?: string[];\n  retries?: number;\n  timeout?: number;\n  parallel?: boolean;\n}\n\nexport interface BatchExecutionOptions {\n  stopOnError?: boolean;\n  parallel?: boolean;\n  maxParallel?: number;\n  timeout?: number;\n  variables?: Record<string, any>;\n  dryRun?: boolean;\n}\n\nexport interface BatchExecutionResult {\n  success: boolean;\n  totalCommands: number;\n  executed: number;\n  succeeded: number;\n  failed: number;\n  skipped: number;\n  duration: number;\n  results: Array<{\n    command: string;\n    success: boolean;\n    output?: string;\n    error?: string;\n    duration: number;\n  }>;\n  variables: Record<string, any>;\n}\n\nexport class BatchExecutionEngine {\n  private static instance: BatchExecutionEngine;\n  private commandHandler: SlashCommandHandler | null = null;\n  private variables: Record<string, any> = {};\n  private isExecuting = false;\n\n  private constructor() {\n    // Initialize commandHandler lazily to avoid circular dependency\n  }\n\n  private getCommandHandler(): SlashCommandHandler {\n    if (!this.commandHandler) {\n      this.commandHandler = SlashCommandHandler.getInstance();\n    }\n    return this.commandHandler;\n  }\n\n  public static getInstance(): BatchExecutionEngine {\n    if (!BatchExecutionEngine.instance) {\n      BatchExecutionEngine.instance = new BatchExecutionEngine();\n    }\n    return BatchExecutionEngine.instance;\n  }\n\n  /**\n   * Parse batch command string\n   */\n  parseBatchString(batchString: string): BatchCommand[] {\n    const lines = batchString.split('\\n').filter(line => line.trim() && !line.trim().startsWith('#'));\n    const commands: BatchCommand[] = [];\n    \n    lines.forEach(line => {\n      // Parse special directives\n      const ifMatch = line.match(/^IF\\s+(.+)\\s+THEN\\s+(.+)(?:\\s+ELSE\\s+(.+))?$/i);\n      if (ifMatch) {\n        const [, condition, thenCmd, elseCmd] = ifMatch;\n        if (condition && thenCmd) {\n          commands.push({\n            command: thenCmd.split(' ')[0] || '',\n            args: thenCmd.split(' ').slice(1),\n            condition\n          });\n          if (elseCmd) {\n            commands.push({\n              command: elseCmd.split(' ')[0] || '',\n              args: elseCmd.split(' ').slice(1),\n              condition: `!${condition}`\n            });\n          }\n        }\n        return;\n      }\n      \n      // Parse parallel execution\n      if (line.startsWith('PARALLEL:')) {\n        const parallelCommands = line.substring(9).split('&&').map(cmd => cmd.trim());\n        parallelCommands.forEach(cmd => {\n          const parts = cmd.split(' ');\n          if (parts[0]) {\n            commands.push({\n              command: parts[0],\n              args: parts.slice(1),\n              parallel: true\n            });\n          }\n        });\n        return;\n      }\n      \n      // Parse regular command\n      const parts = line.split(' ');\n      if (parts[0]) {\n        commands.push({\n          command: parts[0],\n          args: parts.slice(1)\n        });\n      }\n    });\n    \n    return commands;\n  }\n\n  /**\n   * Execute a batch of commands\n   */\n  async executeBatch(\n    commands: BatchCommand[],\n    context: ConversationContext,\n    options: BatchExecutionOptions = {}\n  ): Promise<BatchExecutionResult> {\n    if (this.isExecuting) {\n      throw new Error('Batch execution already in progress');\n    }\n\n    this.isExecuting = true;\n    const startTime = Date.now();\n    \n    // Initialize variables\n    this.variables = { ...options.variables };\n    \n    const result: BatchExecutionResult = {\n      success: true,\n      totalCommands: commands.length,\n      executed: 0,\n      succeeded: 0,\n      failed: 0,\n      skipped: 0,\n      duration: 0,\n      results: [],\n      variables: this.variables\n    };\n\n    console.log(chalk.blue('\\n🚀 Starting batch execution\\n'));\n    \n    if (options.dryRun) {\n      console.log(chalk.yellow('DRY RUN MODE - Commands will not be executed\\n'));\n      commands.forEach((cmd, i) => {\n        console.log(chalk.gray(`${i + 1}. ${cmd.command} ${cmd.args.join(' ')}`));\n        if (cmd.condition) console.log(chalk.gray(`   IF: ${cmd.condition}`));\n      });\n      \n      this.isExecuting = false;\n      return result;\n    }\n\n    try {\n      // Group parallel commands\n      const commandGroups = this.groupCommands(commands);\n      \n      for (const group of commandGroups) {\n        if (options.stopOnError && result.failed > 0) {\n          console.log(chalk.yellow('\\n⏹️  Stopping due to error (stopOnError=true)'));\n          break;\n        }\n        \n        if (group.length === 1 && group[0]) {\n          // Execute single command\n          await this.executeSingleCommand(group[0], context, result);\n        } else {\n          // Execute parallel commands\n          await this.executeParallelCommands(group, context, result, options.maxParallel || 3);\n        }\n      }\n      \n      result.duration = Date.now() - startTime;\n      result.success = result.failed === 0;\n      \n      this.printSummary(result);\n      \n    } finally {\n      this.isExecuting = false;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Execute a single command\n   */\n  private async executeSingleCommand(\n    cmd: BatchCommand,\n    context: ConversationContext,\n    result: BatchExecutionResult\n  ): Promise<void> {\n    // Check condition\n    if (cmd.condition && !this.evaluateCondition(cmd.condition)) {\n      result.skipped++;\n      console.log(chalk.gray(`⏭️  Skipping ${cmd.command} (condition not met)`));\n      return;\n    }\n    \n    console.log(chalk.cyan(`\\n▶️  Executing: ${cmd.command} ${cmd.args.join(' ')}`));\n    \n    const startTime = Date.now();\n    let attempts = 0;\n    const maxAttempts = cmd.retries ? cmd.retries + 1 : 1;\n    \n    while (attempts < maxAttempts) {\n      attempts++;\n      \n      try {\n        const cmdResult = await this.executeWithTimeout(\n          () => this.getCommandHandler().handleCommand(cmd.command, cmd.args, context),\n          cmd.timeout || 30000\n        );\n        \n        const duration = Date.now() - startTime;\n        result.executed++;\n        \n        if (cmdResult.success) {\n          result.succeeded++;\n          console.log(chalk.green(`✅ Success (${duration}ms)`));\n          \n          result.results.push({\n            command: `${cmd.command} ${cmd.args.join(' ')}`,\n            success: true,\n            output: cmdResult.message,\n            duration\n          });\n          \n          // Set variable if command sets one\n          if (cmdResult.data?.variable) {\n            this.variables[cmdResult.data.variable] = cmdResult.data.value;\n          }\n          \n          break;\n        } else {\n          if (attempts < maxAttempts) {\n            console.log(chalk.yellow(`⚠️  Failed, retrying (${attempts}/${maxAttempts})...`));\n            await this.delay(1000);\n          } else {\n            result.failed++;\n            console.log(chalk.red(`❌ Failed: ${cmdResult.message}`));\n            \n            result.results.push({\n              command: `${cmd.command} ${cmd.args.join(' ')}`,\n              success: false,\n              error: cmdResult.message,\n              duration\n            });\n          }\n        }\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        \n        if (attempts < maxAttempts) {\n          console.log(chalk.yellow(`⚠️  Error, retrying (${attempts}/${maxAttempts})...`));\n          await this.delay(1000);\n        } else {\n          result.failed++;\n          result.executed++;\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          console.log(chalk.red(`❌ Error: ${errorMsg}`));\n          \n          result.results.push({\n            command: `${cmd.command} ${cmd.args.join(' ')}`,\n            success: false,\n            error: errorMsg,\n            duration\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Execute commands in parallel\n   */\n  private async executeParallelCommands(\n    commands: BatchCommand[],\n    context: ConversationContext,\n    result: BatchExecutionResult,\n    maxParallel: number\n  ): Promise<void> {\n    console.log(chalk.cyan(`\\n⚡ Executing ${commands.length} commands in parallel`));\n    \n    const promises = commands.map(cmd => \n      this.executeSingleCommand(cmd, context, {\n        ...result,\n        executed: 0,\n        succeeded: 0,\n        failed: 0,\n        skipped: 0,\n        results: []\n      })\n    );\n    \n    // Execute in batches\n    for (let i = 0; i < promises.length; i += maxParallel) {\n      const batch = promises.slice(i, i + maxParallel);\n      const batchResults = await Promise.allSettled(batch);\n      \n      // Update main result\n      batchResults.forEach((batchResult) => {\n        if (batchResult.status === 'rejected') {\n          result.failed++;\n          result.executed++;\n        }\n      });\n    }\n  }\n\n  /**\n   * Group commands for execution\n   */\n  private groupCommands(commands: BatchCommand[]): BatchCommand[][] {\n    const groups: BatchCommand[][] = [];\n    let currentGroup: BatchCommand[] = [];\n    \n    commands.forEach(cmd => {\n      if (cmd.parallel && currentGroup.length > 0) {\n        currentGroup.push(cmd);\n      } else {\n        if (currentGroup.length > 0) {\n          groups.push(currentGroup);\n        }\n        currentGroup = [cmd];\n      }\n    });\n    \n    if (currentGroup.length > 0) {\n      groups.push(currentGroup);\n    }\n    \n    return groups;\n  }\n\n  /**\n   * Evaluate condition\n   */\n  private evaluateCondition(condition: string): boolean {\n    // Simple condition evaluation\n    // In a real implementation, this would be more sophisticated\n    \n    if (condition.startsWith('!')) {\n      return !this.evaluateCondition(condition.substring(1));\n    }\n    \n    // Check variable existence\n    if (condition.startsWith('$')) {\n      const varName = condition.substring(1);\n      return this.variables[varName] !== undefined;\n    }\n    \n    // Check variable equality\n    const eqMatch = condition.match(/^\\$(\\w+)\\s*==\\s*(.+)$/);\n    if (eqMatch && eqMatch[1] && eqMatch[2] !== undefined) {\n      const varName = eqMatch[1];\n      const value = eqMatch[2];\n      return String(this.variables[varName] || '') === value;\n    }\n    \n    // Default conditions\n    switch (condition) {\n      case 'hasErrors':\n        return this.variables.hasErrors === true;\n      case 'testsPass':\n        return this.variables.testsPass === true;\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * Execute with timeout\n   */\n  private async executeWithTimeout<T>(\n    fn: () => Promise<T>,\n    timeout: number\n  ): Promise<T> {\n    return Promise.race([\n      fn(),\n      new Promise<T>((_, reject) => \n        setTimeout(() => reject(new Error('Command timeout')), timeout)\n      )\n    ]);\n  }\n\n  /**\n   * Print execution summary\n   */\n  private printSummary(result: BatchExecutionResult): void {\n    console.log(chalk.blue('\\n📊 Batch Execution Summary\\n'));\n    \n    const successRate = result.executed > 0 \n      ? Math.round((result.succeeded / result.executed) * 100) \n      : 0;\n    \n    console.log(`Total Commands: ${result.totalCommands}`);\n    console.log(`Executed: ${result.executed}`);\n    console.log(chalk.green(`Succeeded: ${result.succeeded}`));\n    if (result.failed > 0) {\n      console.log(chalk.red(`Failed: ${result.failed}`));\n    }\n    if (result.skipped > 0) {\n      console.log(chalk.gray(`Skipped: ${result.skipped}`));\n    }\n    console.log(`Success Rate: ${successRate}%`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    \n    if (Object.keys(result.variables).length > 0) {\n      console.log('\\nVariables Set:');\n      Object.entries(result.variables).forEach(([key, value]) => {\n        console.log(`  ${key} = ${JSON.stringify(value)}`);\n      });\n    }\n  }\n\n  /**\n   * Helper to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Check if batch is executing\n   */\n  getExecutionStatus(): boolean {\n    return this.isExecuting;\n  }\n\n  /**\n   * Get current variables\n   */\n  getVariables(): Record<string, any> {\n    return { ...this.variables };\n  }\n}","/**\n * Hotkey Manager\n * Manages keyboard shortcuts for quick command execution\n */\n\nimport { SlashCommandHandler } from './slash-command-handler';\nimport { ConversationContext } from '../types/conversation';\nimport { logger } from '../utils/logger';\nimport chalk from 'chalk';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport { homedir } from 'os';\n\nexport interface HotkeyBinding {\n  key: string;\n  modifiers: string[];\n  command: string;\n  args?: string[];\n  description?: string;\n  enabled: boolean;\n}\n\nexport interface HotkeyConfig {\n  bindings: HotkeyBinding[];\n  globalEnabled: boolean;\n}\n\nexport class HotkeyManager {\n  private static instance: HotkeyManager;\n  private bindings: Map<string, HotkeyBinding> = new Map();\n  private commandHandler: SlashCommandHandler | null = null;\n  private configPath: string;\n  private isEnabled = true;\n  // private activeKeys: Set<string> = new Set(); // Reserved for future use\n\n  private constructor() {\n    // Initialize commandHandler lazily to avoid circular dependency\n    this.configPath = join(homedir(), '.maria', 'hotkeys.json');\n    this.loadBindings();\n    this.initializeDefaultBindings();\n  }\n\n  private getCommandHandler(): SlashCommandHandler {\n    if (!this.commandHandler) {\n      this.commandHandler = SlashCommandHandler.getInstance();\n    }\n    return this.commandHandler;\n  }\n\n  public static getInstance(): HotkeyManager {\n    if (!HotkeyManager.instance) {\n      HotkeyManager.instance = new HotkeyManager();\n    }\n    return HotkeyManager.instance;\n  }\n\n  /**\n   * Initialize default hotkey bindings\n   */\n  private initializeDefaultBindings(): void {\n    const defaults: HotkeyBinding[] = [\n      {\n        key: 's',\n        modifiers: ['ctrl'],\n        command: '/status',\n        description: 'Show system status',\n        enabled: true\n      },\n      {\n        key: 'h',\n        modifiers: ['ctrl'],\n        command: '/help',\n        description: 'Show help',\n        enabled: true\n      },\n      {\n        key: 'l',\n        modifiers: ['ctrl'],\n        command: '/clear',\n        description: 'Clear screen',\n        enabled: true\n      },\n      {\n        key: 'e',\n        modifiers: ['ctrl'],\n        command: '/export',\n        args: ['--clipboard'],\n        description: 'Export to clipboard',\n        enabled: true\n      },\n      {\n        key: 't',\n        modifiers: ['ctrl'],\n        command: '/test',\n        description: 'Run tests',\n        enabled: true\n      },\n      {\n        key: 'd',\n        modifiers: ['ctrl'],\n        command: '/doctor',\n        description: 'System diagnostics',\n        enabled: true\n      },\n      {\n        key: 'p',\n        modifiers: ['ctrl', 'shift'],\n        command: '/pr-comments',\n        description: 'Show PR comments',\n        enabled: true\n      },\n      {\n        key: 'r',\n        modifiers: ['ctrl', 'shift'],\n        command: '/review',\n        description: 'Run PR review',\n        enabled: true\n      },\n      {\n        key: 'a',\n        modifiers: ['ctrl'],\n        command: '/agents',\n        description: 'Manage agents',\n        enabled: true\n      },\n      {\n        key: 'm',\n        modifiers: ['ctrl'],\n        command: '/mode',\n        args: ['research'],\n        description: 'Switch to research mode',\n        enabled: true\n      }\n    ];\n\n    // Add defaults if not already bound\n    defaults.forEach(binding => {\n      const key = this.getBindingKey(binding);\n      if (!this.bindings.has(key)) {\n        this.bindings.set(key, binding);\n      }\n    });\n  }\n\n  /**\n   * Get unique key for binding\n   */\n  private getBindingKey(binding: HotkeyBinding): string {\n    const modifiers = [...binding.modifiers].sort().join('+');\n    return modifiers ? `${modifiers}+${binding.key}` : binding.key;\n  }\n\n  /**\n   * Process keypress event\n   */\n  async processKeypress(\n    key: any,\n    context: ConversationContext\n  ): Promise<{ handled: boolean; result?: any }> {\n    if (!this.isEnabled || !key) {\n      return { handled: false };\n    }\n\n    // Build key combination string\n    const modifiers: string[] = [];\n    if (key.ctrl) modifiers.push('ctrl');\n    if (key.shift) modifiers.push('shift');\n    if (key.meta) modifiers.push('meta');\n    if (key.alt) modifiers.push('alt');\n\n    const keyName = key.name || key.sequence;\n    if (!keyName) return { handled: false };\n\n    const bindingKey = modifiers.length > 0 \n      ? `${modifiers.sort().join('+')}+${keyName}`\n      : keyName;\n\n    // Check if we have a binding for this key\n    const binding = this.bindings.get(bindingKey);\n    if (!binding || !binding.enabled) {\n      return { handled: false };\n    }\n\n    // Execute the command\n    try {\n      logger.info(`Hotkey triggered: ${bindingKey} -> ${binding.command}`);\n      \n      const result = await this.getCommandHandler().handleCommand(\n        binding.command,\n        binding.args || [],\n        context\n      );\n\n      return { handled: true, result };\n    } catch (error) {\n      logger.error('Error executing hotkey command:', error);\n      return { \n        handled: true, \n        result: { \n          success: false, \n          message: `Error executing hotkey: ${error}` \n        }\n      };\n    }\n  }\n\n  /**\n   * Add or update hotkey binding\n   */\n  addBinding(binding: HotkeyBinding): { success: boolean; message: string } {\n    const key = this.getBindingKey(binding);\n    \n    // Check for conflicts\n    const existing = this.bindings.get(key);\n    if (existing && existing.command !== binding.command) {\n      return {\n        success: false,\n        message: `Key combination already bound to ${existing.command}`\n      };\n    }\n\n    this.bindings.set(key, binding);\n    this.saveBindings();\n\n    return {\n      success: true,\n      message: `Hotkey ${key} bound to ${binding.command}`\n    };\n  }\n\n  /**\n   * Remove hotkey binding\n   */\n  removeBinding(key: string): { success: boolean; message: string } {\n    if (!this.bindings.has(key)) {\n      return {\n        success: false,\n        message: `No binding found for ${key}`\n      };\n    }\n\n    const binding = this.bindings.get(key)!;\n    this.bindings.delete(key);\n    this.saveBindings();\n\n    return {\n      success: true,\n      message: `Removed hotkey ${key} (was bound to ${binding.command})`\n    };\n  }\n\n  /**\n   * Toggle hotkey binding\n   */\n  toggleBinding(key: string): { success: boolean; message: string } {\n    const binding = this.bindings.get(key);\n    if (!binding) {\n      return {\n        success: false,\n        message: `No binding found for ${key}`\n      };\n    }\n\n    binding.enabled = !binding.enabled;\n    this.saveBindings();\n\n    return {\n      success: true,\n      message: `Hotkey ${key} ${binding.enabled ? 'enabled' : 'disabled'}`\n    };\n  }\n\n  /**\n   * List all hotkey bindings\n   */\n  listBindings(): HotkeyBinding[] {\n    return Array.from(this.bindings.values())\n      .sort((a, b) => {\n        // Sort by modifiers count, then by key\n        const aModCount = a.modifiers.length;\n        const bModCount = b.modifiers.length;\n        if (aModCount !== bModCount) return aModCount - bModCount;\n        return a.key.localeCompare(b.key);\n      });\n  }\n\n  /**\n   * Format hotkey for display\n   */\n  formatHotkey(binding: HotkeyBinding): string {\n    const parts = [];\n    \n    // Add modifiers in consistent order\n    if (binding.modifiers.includes('ctrl')) parts.push('Ctrl');\n    if (binding.modifiers.includes('alt')) parts.push('Alt');\n    if (binding.modifiers.includes('shift')) parts.push('Shift');\n    if (binding.modifiers.includes('meta')) parts.push('Cmd/Win');\n    \n    // Add key\n    parts.push(binding.key.toUpperCase());\n    \n    return parts.join('+');\n  }\n\n  /**\n   * Parse hotkey string\n   */\n  parseHotkeyString(hotkeyStr: string): { key: string; modifiers: string[] } | null {\n    const parts = hotkeyStr.toLowerCase().split('+').map(p => p.trim());\n    if (parts.length === 0) return null;\n\n    const key = parts[parts.length - 1];\n    if (!key) return null;\n    \n    const modifiers = parts.slice(0, -1).filter(m => \n      ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'].includes(m)\n    ).map(m => {\n      // Normalize cmd/win to meta\n      if (m === 'cmd' || m === 'win') return 'meta';\n      return m;\n    });\n\n    return { key, modifiers };\n  }\n\n  /**\n   * Enable/disable hotkeys globally\n   */\n  setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n    logger.info(`Hotkeys ${enabled ? 'enabled' : 'disabled'} globally`);\n  }\n\n  /**\n   * Check if hotkeys are enabled\n   */\n  isHotkeysEnabled(): boolean {\n    return this.isEnabled;\n  }\n\n  /**\n   * Get help text for hotkeys\n   */\n  getHelpText(): string {\n    const bindings = this.listBindings().filter(b => b.enabled);\n    if (bindings.length === 0) {\n      return 'No hotkeys configured.';\n    }\n\n    let help = chalk.bold('\\nAvailable Hotkeys:\\n\\n');\n    \n    bindings.forEach(binding => {\n      const hotkey = chalk.cyan(this.formatHotkey(binding));\n      const command = chalk.yellow(binding.command);\n      const args = binding.args ? chalk.gray(` ${binding.args.join(' ')}`) : '';\n      const desc = binding.description ? chalk.gray(` - ${binding.description}`) : '';\n      const status = !binding.enabled ? chalk.red(' [disabled]') : '';\n      \n      help += `  ${hotkey.padEnd(20)} → ${command}${args}${desc}${status}\\n`;\n    });\n\n    help += `\\n${chalk.gray('Use /hotkey to manage hotkeys')}\\n`;\n    return help;\n  }\n\n  /**\n   * Export hotkey configuration\n   */\n  exportConfig(): HotkeyConfig {\n    return {\n      bindings: this.listBindings(),\n      globalEnabled: this.isEnabled\n    };\n  }\n\n  /**\n   * Import hotkey configuration\n   */\n  importConfig(config: HotkeyConfig): { success: boolean; message: string } {\n    try {\n      // Clear existing bindings\n      this.bindings.clear();\n\n      // Import new bindings\n      config.bindings.forEach(binding => {\n        const key = this.getBindingKey(binding);\n        this.bindings.set(key, binding);\n      });\n\n      this.isEnabled = config.globalEnabled !== false;\n      this.saveBindings();\n\n      return {\n        success: true,\n        message: `Imported ${config.bindings.length} hotkey bindings`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to import config: ${error}`\n      };\n    }\n  }\n\n  /**\n   * Load bindings from file\n   */\n  private loadBindings(): void {\n    try {\n      if (existsSync(this.configPath)) {\n        const data = readFileSync(this.configPath, 'utf-8');\n        const config: HotkeyConfig = JSON.parse(data);\n        this.importConfig(config);\n      }\n    } catch (error) {\n      logger.warn('Failed to load hotkey bindings:', error);\n    }\n  }\n\n  /**\n   * Save bindings to file\n   */\n  private saveBindings(): void {\n    try {\n      const config = this.exportConfig();\n      const dir = join(homedir(), '.maria');\n      \n      // Ensure directory exists\n      if (!existsSync(dir)) {\n        require('fs').mkdirSync(dir, { recursive: true });\n      }\n\n      writeFileSync(this.configPath, JSON.stringify(config, null, 2));\n    } catch (error) {\n      logger.error('Failed to save hotkey bindings:', error);\n    }\n  }\n}\n","/**\n * Interactive Model Selection Command\n * Auto-detects and starts LM Studio, provides arrow key navigation\n */\n\nimport * as readline from 'readline';\nimport chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fetch from 'node-fetch';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { loadEnvironmentVariables } from '../utils/env-loader.js';\n\nconst execAsync = promisify(exec);\n\ninterface ModelOption {\n  id: string;\n  name: string;\n  provider: string;\n  type: 'local' | 'cloud';\n  context: string;\n  vram?: string;\n  available: boolean;\n  apiKeySet?: boolean;\n  description: string;\n}\n\nexport class InteractiveModelSelector {\n  private models: ModelOption[] = [];\n  private selectedIndex = 0;\n  private rl: readline.Interface;\n  private lmStudioStatus: 'checking' | 'not-installed' | 'not-running' | 'running' = 'checking';\n\n  constructor() {\n    // Ensure environment is loaded\n    loadEnvironmentVariables();\n    \n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      terminal: true\n    });\n\n    // Enable raw mode for arrow key detection\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true);\n    }\n    readline.emitKeypressEvents(process.stdin, this.rl);\n  }\n\n  async initialize(): Promise<void> {\n    console.log(chalk.cyan('🔍 Checking available AI models...\\n'));\n    \n    // Check LM Studio\n    await this.checkLMStudio();\n    \n    // Build model list\n    this.models = [\n      // Local models\n      {\n        id: 'gpt-oss-120b',\n        name: 'GPT-OSS 120B',\n        provider: 'LM Studio',\n        type: 'local' as const,\n        context: '128K',\n        vram: '~64GB',\n        available: this.lmStudioStatus === 'running',\n        description: 'Complex reasoning, large documents'\n      },\n      {\n        id: 'gpt-oss-20b',\n        name: 'GPT-OSS 20B',\n        provider: 'LM Studio',\n        type: 'local' as const,\n        context: '32K',\n        vram: '~12GB',\n        available: this.lmStudioStatus === 'running',\n        description: 'Balanced performance'\n      },\n      // Cloud models\n      {\n        id: 'gpt-5',\n        name: 'GPT-5',\n        provider: 'OpenAI',\n        type: 'cloud' as const,\n        context: '128K',\n        available: !!process.env.OPENAI_API_KEY,\n        apiKeySet: !!process.env.OPENAI_API_KEY,\n        description: 'Latest flagship model (no temperature control)'\n      },\n      {\n        id: 'gpt-5-mini',\n        name: 'GPT-5 mini',\n        provider: 'OpenAI',\n        type: 'cloud' as const,\n        context: '128K',\n        available: !!process.env.OPENAI_API_KEY,\n        apiKeySet: !!process.env.OPENAI_API_KEY,\n        description: 'Efficient and fast (no temperature control)'\n      },\n      {\n        id: 'claude-4.1-opus',\n        name: 'Claude Opus 4.1',\n        provider: 'Anthropic',\n        type: 'cloud' as const,\n        context: '200K',\n        available: !!process.env.ANTHROPIC_API_KEY,\n        apiKeySet: !!process.env.ANTHROPIC_API_KEY,\n        description: 'Highest intelligence and capability (March 2025)'\n      },\n      {\n        id: 'claude-4-sonnet',\n        name: 'Claude Sonnet 4',\n        provider: 'Anthropic',\n        type: 'cloud' as const,\n        context: '200K',\n        available: !!process.env.ANTHROPIC_API_KEY,\n        apiKeySet: !!process.env.ANTHROPIC_API_KEY,\n        description: 'High intelligence, balanced performance (March 2025)'\n      },\n      {\n        id: 'gemini-2.0-flash',\n        name: 'Gemini 2.0 Flash',\n        provider: 'Google',\n        type: 'cloud' as const,\n        context: '2M',\n        available: !!process.env.GEMINI_API_KEY,\n        apiKeySet: !!process.env.GEMINI_API_KEY,\n        description: 'Multimodal AI with enhanced performance'\n      },\n      {\n        id: 'llama-3.3-70b',\n        name: 'Llama 3.3 70B',\n        provider: 'Groq',\n        type: 'cloud' as const,\n        context: '128K',\n        available: !!process.env.GROQ_API_KEY,\n        apiKeySet: !!process.env.GROQ_API_KEY,\n        description: 'Latest Llama model, fast inference'\n      },\n      {\n        id: 'grok-4',\n        name: 'Grok 4',\n        provider: 'xAI',\n        type: 'cloud' as const,\n        context: '128K',\n        available: !!process.env.XAI_API_KEY,\n        apiKeySet: !!process.env.XAI_API_KEY,\n        description: 'Latest xAI model with reasoning capabilities'\n      }\n    ];\n\n    // Auto-start LM Studio if not running\n    if (this.lmStudioStatus === 'not-running') {\n      console.log(chalk.yellow('⚠️  LM Studio is not running. Starting it now...\\n'));\n      await this.startLMStudio();\n    }\n  }\n\n  private async checkLMStudio(): Promise<void> {\n    try {\n      // Check if LM Studio is installed\n      const lmsPath = '/Users/bongin_max/.lmstudio/bin/lms';\n      if (!fs.existsSync(lmsPath)) {\n        this.lmStudioStatus = 'not-installed';\n        return;\n      }\n\n      // Check if server is running\n      try {\n        const response = await fetch('http://localhost:1234/v1/models', {\n          headers: { 'Authorization': 'Bearer lm-studio' },\n          signal: AbortSignal.timeout(2000)\n        });\n        \n        if (response.ok) {\n          this.lmStudioStatus = 'running';\n        } else {\n          this.lmStudioStatus = 'not-running';\n        }\n      } catch {\n        this.lmStudioStatus = 'not-running';\n      }\n    } catch (error) {\n      console.error(chalk.red('Error checking LM Studio:'), error);\n      this.lmStudioStatus = 'not-installed';\n    }\n  }\n\n  private async startLMStudio(): Promise<boolean> {\n    try {\n      console.log(chalk.cyan('🚀 Starting LM Studio server...'));\n      \n      // Stop any existing server\n      await execAsync('/Users/bongin_max/.lmstudio/bin/lms server stop 2>/dev/null || true');\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Start server\n      await execAsync('/Users/bongin_max/.lmstudio/bin/lms server start');\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Verify it's running\n      await this.checkLMStudio();\n      \n      if (this.lmStudioStatus === 'running') {\n        console.log(chalk.green('✅ LM Studio server started successfully!\\n'));\n        \n        // Update model availability\n        this.models.forEach(model => {\n          if (model.provider === 'LM Studio') {\n            model.available = true;\n          }\n        });\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(chalk.red('Failed to start LM Studio:'), error);\n      return false;\n    }\n  }\n\n  async selectModel(): Promise<string | null> {\n    return new Promise((resolve) => {\n      this.render();\n      \n      process.stdin.on('keypress', async (_, key) => {\n        if (key.name === 'up') {\n          this.selectedIndex = Math.max(0, this.selectedIndex - 1);\n          this.render();\n        } else if (key.name === 'down') {\n          this.selectedIndex = Math.min(this.models.length - 1, this.selectedIndex + 1);\n          this.render();\n        } else if (key.name === 'return') {\n          const selected = this.models[this.selectedIndex];\n          \n          if (!selected) {\n            this.cleanup();\n            resolve(null);\n            return;\n          }\n          \n          // If selecting a local model that's not available, try to start LM Studio\n          if (selected.type === 'local' && !selected.available) {\n            if (this.lmStudioStatus === 'not-running') {\n              console.log(chalk.yellow('\\n⏳ Starting LM Studio for local model...'));\n              const started = await this.startLMStudio();\n              if (!started) {\n                console.log(chalk.red('❌ Failed to start LM Studio'));\n                this.cleanup();\n                resolve(null);\n                return;\n              }\n            }\n          }\n          \n          // Load the model if it's local\n          if (selected.type === 'local' && selected.available) {\n            await this.loadLocalModel(selected.id);\n          }\n          \n          // Update environment\n          await this.updateEnvironment(selected);\n          console.log(chalk.green(`\\n✅ Selected: ${selected.name}`));\n          this.cleanup();\n          resolve(selected.id);\n        } else if (key.name === 'escape' || (key.ctrl && key.name === 'c')) {\n          this.cleanup();\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  private render(): void {\n    console.clear();\n    console.log(chalk.bold.cyan('🤖 Select AI Model'));\n    console.log(chalk.gray('Use ↑↓ arrows to navigate, Enter to select, ESC to cancel\\n'));\n    \n    // Group by type\n    const localModels = this.models.filter(m => m.type === 'local');\n    const cloudModels = this.models.filter(m => m.type === 'cloud');\n    \n    let currentIndex = 0;\n    \n    // Local models\n    if (localModels.length > 0) {\n      console.log(chalk.bold.green('💻 Local Models (Offline)'));\n      localModels.forEach(model => {\n        const isSelected = currentIndex === this.selectedIndex;\n        const prefix = isSelected ? chalk.cyan('▶ ') : '  ';\n        const status = model.available ? chalk.green('✓') : chalk.red('✗');\n        const line = `${prefix}${status} ${chalk.bold(model.name)} ${chalk.gray(`(${model.context}, ${model.vram})`)} - ${chalk.dim(model.description)}`;\n        console.log(line);\n        currentIndex++;\n      });\n      console.log();\n    }\n    \n    // Cloud models\n    if (cloudModels.length > 0) {\n      console.log(chalk.bold.blue('☁️  Cloud Models'));\n      cloudModels.forEach(model => {\n        const isSelected = currentIndex === this.selectedIndex;\n        const prefix = isSelected ? chalk.cyan('▶ ') : '  ';\n        const status = model.available ? chalk.green('✓') : chalk.red('✗');\n        const apiStatus = model.apiKeySet ? '' : chalk.yellow(' (No API key)');\n        const line = `${prefix}${status} ${chalk.bold(model.name)} ${chalk.gray(`(${model.context})`)} - ${chalk.dim(model.description)}${apiStatus}`;\n        console.log(line);\n        currentIndex++;\n      });\n    }\n    \n    // Status bar\n    console.log(chalk.gray('\\n─'.repeat(60)));\n    console.log(chalk.cyan('Current model: ') + chalk.yellow(process.env.LMSTUDIO_DEFAULT_MODEL || process.env.AI_MODEL || 'None'));\n    \n    if (this.lmStudioStatus === 'running') {\n      console.log(chalk.green('LM Studio: Running at http://localhost:1234'));\n    } else if (this.lmStudioStatus === 'not-running') {\n      console.log(chalk.yellow('LM Studio: Not running (will start automatically)'));\n    } else if (this.lmStudioStatus === 'not-installed') {\n      console.log(chalk.red('LM Studio: Not installed'));\n    }\n  }\n\n  private async loadLocalModel(modelId: string): Promise<void> {\n    try {\n      console.log(chalk.cyan(`\\n⏳ Loading ${modelId}...`));\n      await execAsync(`/Users/bongin_max/.lmstudio/bin/lms load ${modelId}`);\n      console.log(chalk.green(`✅ Model ${modelId} loaded successfully`));\n    } catch (error) {\n      console.error(chalk.red(`Failed to load model: ${error}`));\n    }\n  }\n\n  private async updateEnvironment(model: ModelOption): Promise<void> {\n    const envPath = path.join(process.cwd(), '.env.local');\n    \n    if (model.type === 'local') {\n      process.env.AI_PROVIDER = 'lmstudio';\n      process.env.LMSTUDIO_DEFAULT_MODEL = model.id;\n      process.env.OFFLINE_MODE = 'true';\n    } else {\n      process.env.AI_PROVIDER = model.provider.toLowerCase();\n      process.env.AI_MODEL = model.id;\n      process.env.OFFLINE_MODE = 'false';\n    }\n    \n    // Update .env.local file\n    if (fs.existsSync(envPath)) {\n      let content = fs.readFileSync(envPath, 'utf-8');\n      \n      if (model.type === 'local') {\n        content = content.replace(/LMSTUDIO_DEFAULT_MODEL=.*/g, `LMSTUDIO_DEFAULT_MODEL=${model.id}`);\n        content = content.replace(/AI_PROVIDER=.*/g, 'AI_PROVIDER=lmstudio');\n        content = content.replace(/OFFLINE_MODE=.*/g, 'OFFLINE_MODE=true');\n      }\n      \n      fs.writeFileSync(envPath, content);\n    }\n  }\n\n  private cleanup(): void {\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(false);\n    }\n    process.stdin.removeAllListeners('keypress');\n    this.rl.close();\n  }\n}\n\n// Export function for use in slash command handler\nexport async function runInteractiveModelSelector(): Promise<string | null> {\n  const selector = new InteractiveModelSelector();\n  await selector.initialize();\n  return await selector.selectModel();\n}","import { EventEmitter } from 'events';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n// @ts-ignore - no types available\nimport { encode } from 'gpt-3-encoder';\n\nexport interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  tokens?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface ContextWindowConfig {\n  maxTokens: number;\n  compressionThreshold: number;\n  summaryTokenLimit: number;\n  persistPath?: string;\n}\n\nexport interface ContextStats {\n  totalMessages: number;\n  totalTokens: number;\n  maxTokens: number;\n  usagePercentage: number;\n  messagesInWindow: number;\n  compressedCount: number;\n}\n\nexport class ChatContextService extends EventEmitter {\n  private static instance: ChatContextService;\n  private contextWindow: Message[] = [];\n  private fullHistory: Message[] = [];\n  private config: ContextWindowConfig;\n  private currentTokens: number = 0;\n  private compressionCount: number = 0;\n  private sessionId: string;\n\n  private constructor(config?: Partial<ContextWindowConfig>) {\n    super();\n    this.config = {\n      maxTokens: config?.maxTokens || 128000,\n      compressionThreshold: config?.compressionThreshold || 0.8,\n      summaryTokenLimit: config?.summaryTokenLimit || 2000,\n      persistPath: config?.persistPath || path.join(process.env.HOME || '', '.maria', 'context')\n    };\n    this.sessionId = this.generateSessionId();\n  }\n\n  public static getInstance(config?: Partial<ContextWindowConfig>): ChatContextService {\n    if (!ChatContextService.instance) {\n      ChatContextService.instance = new ChatContextService(config);\n    }\n    return ChatContextService.instance;\n  }\n\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private countTokens(text: string): number {\n    try {\n      return encode(text).length;\n    } catch {\n      // Fallback to approximate count\n      return Math.ceil(text.length / 4);\n    }\n  }\n\n  public async addMessage(message: Omit<Message, 'timestamp' | 'tokens'>): Promise<void> {\n    const tokens = this.countTokens(message.content);\n    const fullMessage: Message = {\n      ...message,\n      timestamp: new Date(),\n      tokens\n    };\n\n    this.fullHistory.push(fullMessage);\n    this.contextWindow.push(fullMessage);\n    this.currentTokens += tokens;\n\n    await this.optimizeMemory();\n    this.emit('message-added', fullMessage);\n    this.emit('context-updated', this.getStats());\n  }\n\n  private async optimizeMemory(): Promise<void> {\n    const usageRatio = this.currentTokens / this.config.maxTokens;\n    \n    if (usageRatio >= this.config.compressionThreshold) {\n      await this.compressContext();\n    }\n\n    while (this.currentTokens > this.config.maxTokens && this.contextWindow.length > 1) {\n      const removed = this.contextWindow.shift();\n      if (removed?.tokens) {\n        this.currentTokens -= removed.tokens;\n      }\n    }\n  }\n\n  private async compressContext(): Promise<void> {\n    if (this.contextWindow.length <= 2) return;\n\n    const middleMessages = this.contextWindow.slice(1, -1);\n    const summary = await this.generateSummary(middleMessages);\n    \n    if (summary) {\n      const summaryMessage: Message = {\n        role: 'system',\n        content: `[Compressed context summary]: ${summary}`,\n        timestamp: new Date(),\n        tokens: this.countTokens(summary),\n        metadata: { compressed: true, originalCount: middleMessages.length }\n      };\n\n      const firstMessage = this.contextWindow[0];\n      const lastMessage = this.contextWindow[this.contextWindow.length - 1];\n      \n      if (!firstMessage || !lastMessage) return;\n      \n      this.contextWindow = [firstMessage, summaryMessage, lastMessage];\n      this.recalculateTokens();\n      this.compressionCount++;\n      \n      this.emit('context-compressed', {\n        originalCount: middleMessages.length,\n        summaryTokens: summaryMessage.tokens\n      });\n    }\n  }\n\n  private async generateSummary(messages: Message[]): Promise<string> {\n    // This would integrate with AI service for actual summarization\n    // For now, return a simple concatenation with key points\n    const keyPoints = messages\n      .filter(m => m.role === 'user')\n      .map(m => m.content.substring(0, 100))\n      .join('; ');\n    \n    return `Previous discussion covered: ${keyPoints}`;\n  }\n\n  private recalculateTokens(): void {\n    this.currentTokens = this.contextWindow.reduce((sum, msg) => sum + (msg.tokens || 0), 0);\n  }\n\n  public clearContext(options?: { soft?: boolean; summary?: boolean }): void {\n    if (options?.soft) {\n      // Keep context but clear display\n      this.emit('display-cleared');\n      return;\n    }\n\n    if (options?.summary && this.contextWindow.length > 0) {\n      this.generateSummary(this.contextWindow).then(summary => {\n        this.emit('summary-generated', summary);\n      });\n    }\n\n    const previousStats = this.getStats();\n    this.contextWindow = [];\n    this.currentTokens = 0;\n    this.compressionCount = 0;\n    \n    if (!options?.soft) {\n      this.fullHistory = [];\n      this.sessionId = this.generateSessionId();\n    }\n\n    this.emit('context-cleared', previousStats);\n  }\n\n  public getContext(): Message[] {\n    return [...this.contextWindow];\n  }\n\n  public getFullHistory(): Message[] {\n    return [...this.fullHistory];\n  }\n\n  public getStats(): ContextStats {\n    return {\n      totalMessages: this.fullHistory.length,\n      totalTokens: this.currentTokens,\n      maxTokens: this.config.maxTokens,\n      usagePercentage: (this.currentTokens / this.config.maxTokens) * 100,\n      messagesInWindow: this.contextWindow.length,\n      compressedCount: this.compressionCount\n    };\n  }\n\n  public async persistSession(): Promise<void> {\n    if (!this.config.persistPath) return;\n\n    try {\n      await fs.mkdir(this.config.persistPath, { recursive: true });\n      const sessionFile = path.join(this.config.persistPath, `${this.sessionId}.json`);\n      \n      const sessionData = {\n        sessionId: this.sessionId,\n        timestamp: new Date().toISOString(),\n        stats: this.getStats(),\n        contextWindow: this.contextWindow,\n        fullHistory: this.fullHistory,\n        compressionCount: this.compressionCount\n      };\n\n      await fs.writeFile(sessionFile, JSON.stringify(sessionData, null, 2));\n      this.emit('session-persisted', sessionFile);\n    } catch (error: unknown) {\n      this.emit('persist-error', error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n\n  public async loadSession(sessionId: string): Promise<boolean> {\n    if (!this.config.persistPath) return false;\n\n    try {\n      const sessionFile = path.join(this.config.persistPath, `${sessionId}.json`);\n      const data = await fs.readFile(sessionFile, 'utf-8');\n      const sessionData = JSON.parse(data);\n\n      this.sessionId = sessionData.sessionId;\n      this.contextWindow = sessionData.contextWindow;\n      this.fullHistory = sessionData.fullHistory;\n      this.compressionCount = sessionData.compressionCount;\n      this.recalculateTokens();\n\n      this.emit('session-loaded', sessionId);\n      return true;\n    } catch (error: unknown) {\n      this.emit('load-error', error instanceof Error ? error : new Error(String(error)));\n      return false;\n    }\n  }\n\n  public async exportContext(format: 'json' | 'markdown' = 'json'): Promise<string> {\n    if (format === 'markdown') {\n      return this.contextWindow\n        .map(msg => `### ${msg.role.toUpperCase()} (${msg.timestamp.toISOString()})\\n${msg.content}\\n`)\n        .join('\\n---\\n\\n');\n    }\n\n    return JSON.stringify({\n      sessionId: this.sessionId,\n      exportDate: new Date().toISOString(),\n      stats: this.getStats(),\n      context: this.contextWindow,\n      fullHistory: this.fullHistory\n    }, null, 2);\n  }\n\n  public async importContext(data: string): Promise<void> {\n    try {\n      const imported = JSON.parse(data);\n      \n      if (imported.context && Array.isArray(imported.context)) {\n        this.contextWindow = imported.context;\n        this.fullHistory = imported.fullHistory || imported.context;\n        this.recalculateTokens();\n        this.sessionId = imported.sessionId || this.generateSessionId();\n        \n        this.emit('context-imported', this.getStats());\n      }\n    } catch (error: unknown) {\n      this.emit('import-error', error instanceof Error ? error : new Error(String(error)));\n      throw error;\n    }\n  }\n\n  public getTokenUsageIndicator(): string {\n    const stats = this.getStats();\n    const percentage = Math.round(stats.usagePercentage);\n    const blocks = Math.round(percentage / 10);\n    const filled = '█'.repeat(blocks);\n    const empty = '░'.repeat(10 - blocks);\n    \n    let color = '\\x1b[32m'; // Green\n    if (percentage > 80) color = '\\x1b[31m'; // Red\n    else if (percentage > 60) color = '\\x1b[33m'; // Yellow\n    \n    return `${color}[${filled}${empty}] ${percentage}% (${stats.totalTokens}/${stats.maxTokens} tokens)\\x1b[0m`;\n  }\n\n  public reset(): void {\n    this.contextWindow = [];\n    this.fullHistory = [];\n    this.currentTokens = 0;\n    this.compressionCount = 0;\n    this.sessionId = this.generateSessionId();\n    ChatContextService.instance = null as any;\n  }\n}\n\nexport class ConversationMemory {\n  private memories: Map<string, any> = new Map();\n  private persistPath: string;\n\n  constructor(persistPath?: string) {\n    this.persistPath = persistPath || path.join(process.env.HOME || '', '.maria', 'memory');\n  }\n\n  public async set(key: string, value: any): Promise<void> {\n    this.memories.set(key, {\n      value,\n      timestamp: new Date(),\n      accessCount: 0\n    });\n    await this.persist();\n  }\n\n  public get(key: string): any {\n    const memory = this.memories.get(key);\n    if (memory) {\n      memory.accessCount++;\n      memory.lastAccessed = new Date();\n      return memory.value;\n    }\n    return undefined;\n  }\n\n  public has(key: string): boolean {\n    return this.memories.has(key);\n  }\n\n  public delete(key: string): boolean {\n    const result = this.memories.delete(key);\n    if (result) {\n      this.persist();\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.memories.clear();\n    this.persist();\n  }\n\n  private async persist(): Promise<void> {\n    try {\n      await fs.mkdir(this.persistPath, { recursive: true });\n      const memoryFile = path.join(this.persistPath, 'conversation-memory.json');\n      \n      const data = Array.from(this.memories.entries()).map(([key, value]) => ({\n        key,\n        ...value\n      }));\n\n      await fs.writeFile(memoryFile, JSON.stringify(data, null, 2));\n    } catch (error: unknown) {\n      console.error('Failed to persist conversation memory:', error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  public async load(): Promise<void> {\n    try {\n      const memoryFile = path.join(this.persistPath, 'conversation-memory.json');\n      const data = await fs.readFile(memoryFile, 'utf-8');\n      const memories = JSON.parse(data);\n\n      this.memories.clear();\n      for (const item of memories) {\n        this.memories.set(item.key, {\n          value: item.value,\n          timestamp: new Date(item.timestamp),\n          accessCount: item.accessCount || 0,\n          lastAccessed: item.lastAccessed ? new Date(item.lastAccessed) : undefined\n        });\n      }\n    } catch {\n      // Memory file doesn't exist or is corrupted, start fresh\n      this.memories.clear();\n    }\n  }\n\n  public getStats(): any {\n    const totalMemories = this.memories.size;\n    const memoryUsage = JSON.stringify(Array.from(this.memories.values())).length;\n    \n    return {\n      totalMemories,\n      memoryUsage,\n      oldestMemory: this.getOldestMemory(),\n      mostAccessed: this.getMostAccessedMemory()\n    };\n  }\n\n  private getOldestMemory(): any {\n    let oldest = null;\n    let oldestTime = new Date();\n\n    for (const [key, value] of this.memories.entries()) {\n      if (value.timestamp < oldestTime) {\n        oldestTime = value.timestamp;\n        oldest = { key, ...value };\n      }\n    }\n\n    return oldest;\n  }\n\n  private getMostAccessedMemory(): any {\n    let mostAccessed = null;\n    let maxAccess = 0;\n\n    for (const [key, value] of this.memories.entries()) {\n      if (value.accessCount > maxAccess) {\n        maxAccess = value.accessCount;\n        mostAccessed = { key, ...value };\n      }\n    }\n\n    return mostAccessed;\n  }\n}"],"mappings":"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","names":["createInterface","emitKeypressEvents","line","LogLevel","fs","path","commands","commands","fs","commands","parts","promises","readFileSync","writeFileSync","existsSync","join","homedir","fs","path","fs","commands","args","path","createInterface","emitKeypressEvents"]}
{"version":3,"sources":["../../src/services/image-generation.ts"],"sourcesContent":["import { modelManager, GenerationOptions } from './model-manager';\nimport { promises as fs } from 'fs';\nimport { join, resolve, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nexport interface ImageOptions extends GenerationOptions {\n  style?: 'photorealistic' | 'artistic' | 'anime' | 'concept' | 'technical';\n  quality?: 'low' | 'medium' | 'high';\n  batch?: number;\n  variations?: number;\n  size?: '512x512' | '768x768' | '1024x1024' | '1024x768' | '768x1024';\n}\n\nexport interface ImageResult {\n  success: boolean;\n  outputPaths?: string[];\n  error?: string;\n  metadata?: {\n    resolution: string;\n    style: string;\n    modelUsed: string;\n    generationTime: number;\n    seedUsed: number;\n    batchSize: number;\n  };\n}\n\nexport interface ImageProgress {\n  stage: 'initializing' | 'processing' | 'finalizing' | 'complete' | 'error';\n  percentage: number;\n  estimatedTimeRemaining: string;\n  currentStep: string;\n  currentImage?: number;\n  totalImages?: number;\n  error?: string;\n}\n\nexport class ImageGenerationService {\n  private outputDir: string;\n  private tempDir: string;\n  \n  constructor() {\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = dirname(__filename);\n    const mariaRoot = resolve(__dirname, '../../../../..');\n    this.outputDir = join(mariaRoot, 'outputs/images');\n    this.tempDir = join(mariaRoot, 'outputs/temp');\n  }\n\n  /**\n   * 画像生成（Text-to-Image）\n   */\n  async generateImage(\n    prompt: string, \n    options: Partial<ImageOptions> = {},\n    onProgress?: (progress: ImageProgress) => void\n  ): Promise<ImageResult> {\n    try {\n      const startTime = Date.now();\n      \n      // 初期化\n      onProgress?.({\n        stage: 'initializing',\n        percentage: 0,\n        estimatedTimeRemaining: '計算中...',\n        currentStep: 'Qwen-Imageモデル確認',\n        currentImage: 1,\n        totalImages: options.batch || 1\n      });\n\n      // ComfyUI起動確認\n      const isComfyUIRunning = await modelManager.checkComfyUIStatus();\n      if (!isComfyUIRunning) {\n        onProgress?.({\n          stage: 'initializing',\n          percentage: 10,\n          estimatedTimeRemaining: '30秒',\n          currentStep: 'ComfyUI起動中',\n          currentImage: 1,\n          totalImages: options.batch || 1\n        });\n        \n        const started = await modelManager.startComfyUI();\n        if (!started) {\n          throw new Error('ComfyUIの起動に失敗しました');\n        }\n      }\n\n      // Qwen-Imageモデル確認\n      onProgress?.({\n        stage: 'initializing',\n        percentage: 20,\n        estimatedTimeRemaining: this.estimateGenerationTime(options.batch || 1),\n        currentStep: 'Qwen-Imageモデル読み込み',\n        currentImage: 1,\n        totalImages: options.batch || 1\n      });\n\n      const modelInfo = await modelManager.getModelInfo('qwen-image');\n      if (!modelInfo || modelInfo.status !== 'available') {\n        throw new Error('Qwen-Imageモデルが利用できません');\n      }\n\n      // 出力ディレクトリ準備\n      await this.ensureDirectories();\n\n      // バッチ生成またはバリエーション生成\n      const results = await this.generateBatch(prompt, options, onProgress);\n      \n      // 最終使用日時更新\n      await modelManager.updateLastUsed('qwen-image');\n\n      onProgress?.({\n        stage: 'complete',\n        percentage: 100,\n        estimatedTimeRemaining: '完了',\n        currentStep: '画像生成完了',\n        currentImage: results.length,\n        totalImages: results.length\n      });\n\n      // メタデータ生成\n      const metadata = this.generateMetadata(\n        options,\n        Date.now() - startTime,\n        results.length\n      );\n\n      return {\n        success: true,\n        outputPaths: results,\n        metadata\n      };\n\n    } catch (error) {\n      onProgress?.({\n        stage: 'error',\n        percentage: 0,\n        estimatedTimeRemaining: '',\n        currentStep: 'エラー発生',\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * バッチ画像生成\n   */\n  private async generateBatch(\n    prompt: string,\n    options: Partial<ImageOptions>,\n    onProgress?: (progress: ImageProgress) => void\n  ): Promise<string[]> {\n    const batchSize = options.batch || 1;\n    const variations = options.variations || 1;\n    const totalImages = batchSize * variations;\n    const results: string[] = [];\n\n    let currentImageIndex = 0;\n\n    // バリエーション用プロンプト生成\n    const prompts = this.generatePromptVariations(prompt, variations);\n\n    for (let batchIndex = 0; batchIndex < batchSize; batchIndex++) {\n      for (let variationIndex = 0; variationIndex < variations; variationIndex++) {\n        currentImageIndex++;\n        const currentPrompt = prompts[variationIndex] || prompt;\n        \n        onProgress?.({\n          stage: 'processing',\n          percentage: Math.min(90, 30 + (currentImageIndex / totalImages) * 60),\n          estimatedTimeRemaining: this.estimateRemainingTime(\n            currentImageIndex, \n            totalImages, \n            Date.now()\n          ),\n          currentStep: `画像生成中 (${currentImageIndex}/${totalImages})`,\n          currentImage: currentImageIndex,\n          totalImages\n        });\n\n        // 単一画像生成\n        const imagePath = await this.generateSingleImage(\n          currentPrompt,\n          options,\n          batchIndex,\n          variationIndex\n        );\n        \n        results.push(imagePath);\n\n        // 短い待機（API制限回避）\n        if (currentImageIndex < totalImages) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 単一画像生成\n   */\n  private async generateSingleImage(\n    prompt: string,\n    options: Partial<ImageOptions>,\n    batchIndex: number,\n    variationIndex: number\n  ): Promise<string> {\n    // 出力ファイル名生成\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `maria_image_${timestamp}_${batchIndex}_${variationIndex}.png`;\n    const outputPath = join(this.outputDir, filename);\n\n    // ワークフロー読み込み\n    const workflowData = await modelManager.loadWorkflow('qwen_image');\n    \n    // パラメータ設定\n    const size = this.parseImageSize(options.size);\n    const generationParams: GenerationOptions = {\n      model: 'qwen-image',\n      prompt,\n      width: size.width,\n      height: size.height,\n      steps: options.steps || 30,\n      guidance: options.guidance || 7.5,\n      seed: options.seed || Math.floor(Math.random() * 1000000),\n      style: options.style || 'photorealistic',\n      outputPath: filename.replace('.png', '')\n    };\n\n    // ワークフロー実行\n    const processedWorkflow = modelManager.replaceWorkflowParameters(\n      workflowData.workflow,\n      generationParams\n    );\n\n    const promptId = await modelManager.executeWorkflow(processedWorkflow);\n\n    // 生成完了待機\n    await this.waitForImageCompletion(promptId);\n\n    // ComfyUI出力からファイル移動\n    await this.moveImageOutput(outputPath);\n\n    return outputPath;\n  }\n\n  /**\n   * プロンプトバリエーション生成\n   */\n  private generatePromptVariations(basePrompt: string, count: number): string[] {\n    if (count === 1) {\n      return [basePrompt];\n    }\n\n    const variations: string[] = [basePrompt];\n    \n    // 基本的なバリエーション生成ロジック\n    const modifiers = [\n      'highly detailed',\n      'masterpiece quality',\n      'professional lighting',\n      'vibrant colors',\n      'sharp focus',\n      'cinematic composition',\n      'award winning',\n      'trending on artstation'\n    ];\n\n    for (let i = 1; i < count; i++) {\n      const modifier = modifiers[i % modifiers.length];\n      variations.push(`${basePrompt}, ${modifier}`);\n    }\n\n    return variations;\n  }\n\n  /**\n   * スタイル適用\n   */\n  async applyStyle(\n    prompt: string,\n    style: ImageOptions['style'],\n    options: Partial<Omit<ImageOptions, 'style'>> = {}\n  ): Promise<ImageResult> {\n    const stylePrompts = this.getStylePrompt(style || 'photorealistic');\n    const enhancedPrompt = `${prompt}, ${stylePrompts}`;\n    \n    return await this.generateImage(enhancedPrompt, {\n      ...options,\n      style\n    });\n  }\n\n  /**\n   * 複数スタイル比較生成\n   */\n  async generateStyleComparison(\n    prompt: string,\n    styles: ImageOptions['style'][],\n    options: Partial<Omit<ImageOptions, 'style'>> = {}\n  ): Promise<{ [style: string]: ImageResult }> {\n    const results: { [style: string]: ImageResult } = {};\n    \n    for (const style of styles) {\n      if (style) {\n        console.log(`🎨 ${style} スタイルで生成中...`);\n        results[style] = await this.applyStyle(prompt, style, options);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * 画像アップスケール（将来実装）\n   */\n  async upscaleImage(\n    _imagePath: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _scaleFactor: number = 2\n  ): Promise<ImageResult> {\n    // TODO: Real-ESRGANやWAIFU2X統合\n    return {\n      success: false,\n      error: 'アップスケール機能は未実装です'\n    };\n  }\n\n  /**\n   * 画像バリエーション生成（将来実装）\n   */\n  async generateVariations(\n    _imagePath: string,\n    _prompt: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _count: number = 4\n  ): Promise<ImageResult> {\n    // TODO: Image-to-Image variationの実装\n    return {\n      success: false,\n      error: 'バリエーション生成機能は未実装です'\n    };\n  }\n\n  /**\n   * プライベートメソッド\n   */\n  private async waitForImageCompletion(promptId: string): Promise<void> {\n    const maxWaitTime = 5 * 60 * 1000; // 5分タイムアウト\n    const checkInterval = 2000; // 2秒間隔\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < maxWaitTime) {\n      const status = await modelManager.checkProgress(promptId);\n      \n      if (status.completed) {\n        return;\n      }\n      \n      if (status.error) {\n        throw new Error(`画像生成エラー: ${status.error}`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, checkInterval));\n    }\n\n    throw new Error('画像生成がタイムアウトしました');\n  }\n\n  private async moveImageOutput(targetPath: string): Promise<void> {\n    // TODO: ComfyUIの出力ディレクトリからtargetPathへファイル移動\n    // 現在はプレースホルダー実装\n    console.log(`画像出力を ${targetPath} に移動準備中...`);\n  }\n\n  private parseImageSize(size?: string): { width: number; height: number } {\n    switch (size) {\n      case '512x512':\n        return { width: 512, height: 512 };\n      case '768x768':\n        return { width: 768, height: 768 };\n      case '1024x1024':\n        return { width: 1024, height: 1024 };\n      case '1024x768':\n        return { width: 1024, height: 768 };\n      case '768x1024':\n        return { width: 768, height: 1024 };\n      default:\n        return { width: 1024, height: 1024 };\n    }\n  }\n\n  private getStylePrompt(style: ImageOptions['style']): string {\n    switch (style) {\n      case 'photorealistic':\n        return 'photorealistic, high resolution, detailed, professional photography';\n      case 'artistic':\n        return 'artistic, painterly style, creative, expressive, fine art';\n      case 'anime':\n        return 'anime style, manga, cel shading, vibrant colors, Japanese art';\n      case 'concept':\n        return 'concept art, digital painting, matte painting, cinematic';\n      case 'technical':\n        return 'technical illustration, clean lines, precise, schematic style';\n      default:\n        return 'high quality, detailed';\n    }\n  }\n\n  private estimateGenerationTime(batchSize: number): string {\n    const timePerImage = 45; // 秒\n    const totalSeconds = batchSize * timePerImage;\n    \n    if (totalSeconds < 60) {\n      return `${totalSeconds}秒`;\n    } else {\n      return `${Math.ceil(totalSeconds / 60)}分`;\n    }\n  }\n\n  private estimateRemainingTime(\n    currentImage: number,\n    totalImages: number,\n    startTime: number\n  ): string {\n    const elapsed = Date.now() - startTime;\n    const avgTimePerImage = elapsed / currentImage;\n    const remainingImages = totalImages - currentImage;\n    const remainingMs = remainingImages * avgTimePerImage;\n\n    if (remainingMs < 60000) {\n      return `${Math.ceil(remainingMs / 1000)}秒`;\n    } else {\n      return `${Math.ceil(remainingMs / 60000)}分`;\n    }\n  }\n\n  private generateMetadata(\n    options: Partial<ImageOptions>,\n    generationTime: number,\n    imageCount: number\n  ): ImageResult['metadata'] {\n    const size = this.parseImageSize(options.size);\n    \n    return {\n      resolution: `${size.width}x${size.height}`,\n      style: options.style || 'photorealistic',\n      modelUsed: 'qwen-image',\n      generationTime: Math.round(generationTime / 1000),\n      seedUsed: options.seed || -1,\n      batchSize: imageCount\n    };\n  }\n\n  private async ensureDirectories(): Promise<void> {\n    await fs.mkdir(this.outputDir, { recursive: true });\n    await fs.mkdir(this.tempDir, { recursive: true });\n  }\n}\n\n// シングルトンインスタンス  \nexport const imageGenerationService = new ImageGenerationService();"],"mappings":"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","names":["resolve"]}
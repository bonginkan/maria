{"version":3,"sources":["../../src/services/video-generation.ts"],"sourcesContent":["import { modelManager, GenerationOptions } from './model-manager';\nimport { promises as fs } from 'fs';\nimport { join, resolve, extname, dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport { spawn } from 'child_process';\n\nexport interface VideoOptions extends GenerationOptions {\n  model: 'wan22-5b' | 'wan22-14b';\n  fps?: number;\n  frames?: number;\n  resolution?: '720p' | '1080p' | '1280x720' | '1920x1080';\n  compare?: boolean;\n}\n\nexport interface VideoResult {\n  success: boolean;\n  outputPath?: string;\n  comparisonPath?: string;\n  error?: string;\n  metadata?: {\n    duration: number;\n    fps: number;\n    resolution: string;\n    modelUsed: string;\n    generationTime: number;\n  };\n}\n\nexport interface GenerationProgress {\n  stage: 'initializing' | 'processing' | 'finalizing' | 'complete' | 'error';\n  percentage: number;\n  estimatedTimeRemaining: string;\n  currentStep: string;\n  totalSteps: number;\n  error?: string;\n}\n\nexport class VideoGenerationService {\n  private outputDir: string;\n  private tempDir: string;\n  \n  constructor() {\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = dirname(__filename);\n    const mariaRoot = resolve(__dirname, '../../../../..');\n    this.outputDir = join(mariaRoot, 'outputs/videos');\n    this.tempDir = join(mariaRoot, 'outputs/temp');\n  }\n\n  /**\n   * 動画生成（Text-to-Video）\n   */\n  async generateVideo(\n    prompt: string, \n    options: VideoOptions,\n    onProgress?: (progress: GenerationProgress) => void\n  ): Promise<VideoResult> {\n    try {\n      // 初期化\n      onProgress?.({\n        stage: 'initializing',\n        percentage: 0,\n        estimatedTimeRemaining: '計算中...',\n        currentStep: 'ComfyUI起動確認',\n        totalSteps: 4\n      });\n\n      // ComfyUI起動確認\n      const isComfyUIRunning = await modelManager.checkComfyUIStatus();\n      if (!isComfyUIRunning) {\n        onProgress?.({\n          stage: 'initializing',\n          percentage: 10,\n          estimatedTimeRemaining: '30秒',\n          currentStep: 'ComfyUI起動中',\n          totalSteps: 4\n        });\n        \n        const started = await modelManager.startComfyUI();\n        if (!started) {\n          throw new Error('ComfyUIの起動に失敗しました');\n        }\n      }\n\n      // モデル可用性確認\n      onProgress?.({\n        stage: 'initializing',\n        percentage: 25,\n        estimatedTimeRemaining: options.model === 'wan22-14b' ? '10-15分' : '3-7分',\n        currentStep: 'モデル読み込み確認',\n        totalSteps: 4\n      });\n\n      const modelInfo = await modelManager.getModelInfo(options.model);\n      if (!modelInfo || modelInfo.status !== 'available') {\n        throw new Error(`モデル ${options.model} が利用できません`);\n      }\n\n      // 出力ディレクトリ準備\n      await this.ensureDirectories();\n      \n      // 比較生成の場合は両モデルで生成\n      if (options.compare) {\n        return await this.generateComparison(prompt, options, onProgress);\n      }\n\n      // 単一モデルで生成\n      return await this.generateSingle(prompt, options, onProgress);\n\n    } catch (error) {\n      onProgress?.({\n        stage: 'error',\n        percentage: 0,\n        estimatedTimeRemaining: '',\n        currentStep: 'エラー発生',\n        totalSteps: 0,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * 単一モデルで動画生成\n   */\n  private async generateSingle(\n    prompt: string,\n    options: VideoOptions,\n    onProgress?: (progress: GenerationProgress) => void\n  ): Promise<VideoResult> {\n    const startTime = Date.now();\n    const outputFilename = this.generateOutputFilename(options.model);\n    const outputPath = join(this.outputDir, outputFilename);\n\n    try {\n      // ワークフロー選択\n      const modelMap: Record<string, string> = {\n        'wan22-5b': 'wan22_5b',\n        'wan22-14b': 'wan22_14b'\n      };\n      const normalizedModel = modelMap[options.model] || options.model;\n      const workflowId = options.inputImage \n        ? `${normalizedModel}_i2v`\n        : `${normalizedModel}_t2v`;\n\n      onProgress?.({\n        stage: 'processing',\n        percentage: 30,\n        estimatedTimeRemaining: this.estimateGenerationTime(options.model),\n        currentStep: 'ワークフロー準備',\n        totalSteps: 4\n      });\n\n      // ワークフロー読み込み\n      const workflowData = await modelManager.loadWorkflow(workflowId);\n      \n      // パラメータ設定\n      const generationParams: GenerationOptions = {\n        model: options.model,\n        prompt,\n        width: this.parseResolution(options.resolution).width,\n        height: this.parseResolution(options.resolution).height,\n        steps: options.steps || (options.model === 'wan22-14b' ? 50 : 30),\n        seed: options.seed,\n        inputImage: options.inputImage,\n        outputPath: outputFilename.replace('.mp4', '')\n      };\n\n      // ワークフロー実行\n      onProgress?.({\n        stage: 'processing',\n        percentage: 50,\n        estimatedTimeRemaining: this.estimateGenerationTime(options.model),\n        currentStep: `${options.model} モデルで生成中`,\n        totalSteps: 4\n      });\n\n      const processedWorkflow = modelManager.replaceWorkflowParameters(\n        workflowData.workflow,\n        generationParams\n      );\n\n      const promptId = await modelManager.executeWorkflow(processedWorkflow);\n\n      // 生成完了待機\n      await this.waitForCompletion(promptId, onProgress);\n\n      // 後処理\n      onProgress?.({\n        stage: 'finalizing',\n        percentage: 90,\n        estimatedTimeRemaining: '30秒',\n        currentStep: '出力ファイル処理',\n        totalSteps: 4\n      });\n\n      // ComfyUI出力からファイル移動\n      await this.moveOutputFiles(outputPath);\n\n      // メタデータ生成\n      const metadata = await this.generateMetadata(\n        outputPath,\n        options.model,\n        Date.now() - startTime\n      );\n\n      // 最終使用日時更新\n      await modelManager.updateLastUsed(options.model);\n\n      onProgress?.({\n        stage: 'complete',\n        percentage: 100,\n        estimatedTimeRemaining: '完了',\n        currentStep: '動画生成完了',\n        totalSteps: 4\n      });\n\n      return {\n        success: true,\n        outputPath,\n        metadata\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * 比較動画生成（5B vs 14B）\n   */\n  private async generateComparison(\n    prompt: string,\n    options: VideoOptions,\n    onProgress?: (progress: GenerationProgress) => void\n  ): Promise<VideoResult> {\n    try {\n      onProgress?.({\n        stage: 'processing',\n        percentage: 10,\n        estimatedTimeRemaining: '15-20分',\n        currentStep: '5Bモデルで生成中',\n        totalSteps: 6\n      });\n\n      // 5Bモデルで生成\n      const options5B: VideoOptions = { ...options, model: 'wan22-5b', compare: false };\n      const result5B = await this.generateSingle(prompt, options5B);\n\n      if (!result5B.success) {\n        throw new Error(`5Bモデル生成エラー: ${result5B.error}`);\n      }\n\n      onProgress?.({\n        stage: 'processing',\n        percentage: 40,\n        estimatedTimeRemaining: '10-15分',\n        currentStep: '14Bモデルで生成中',\n        totalSteps: 6\n      });\n\n      // 14Bモデルで生成\n      const options14B: VideoOptions = { ...options, model: 'wan22-14b', compare: false };\n      const result14B = await this.generateSingle(prompt, options14B);\n\n      if (!result14B.success) {\n        throw new Error(`14Bモデル生成エラー: ${result14B.error}`);\n      }\n\n      onProgress?.({\n        stage: 'finalizing',\n        percentage: 80,\n        estimatedTimeRemaining: '2-3分',\n        currentStep: '比較動画作成中',\n        totalSteps: 6\n      });\n\n      // 横並び比較動画作成\n      const comparisonPath = await this.createComparisonVideo(\n        result5B.outputPath!,\n        result14B.outputPath!\n      );\n\n      onProgress?.({\n        stage: 'complete',\n        percentage: 100,\n        estimatedTimeRemaining: '完了',\n        currentStep: '比較動画生成完了',\n        totalSteps: 6\n      });\n\n      return {\n        success: true,\n        outputPath: result14B.outputPath, // メイン出力は14B\n        comparisonPath,\n        metadata: result14B.metadata\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * 生成完了待機\n   */\n  private async waitForCompletion(\n    promptId: string,\n    onProgress?: (progress: GenerationProgress) => void\n  ): Promise<void> {\n    const maxWaitTime = 20 * 60 * 1000; // 20分タイムアウト\n    const checkInterval = 5000; // 5秒間隔\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < maxWaitTime) {\n      const status = await modelManager.checkProgress(promptId);\n      \n      if (status.completed) {\n        return;\n      }\n      \n      if (status.error) {\n        throw new Error(`生成エラー: ${status.error}`);\n      }\n\n      // 進捗更新\n      if (onProgress && status.progress !== undefined) {\n        const elapsedMinutes = (Date.now() - startTime) / 60000;\n        const progressPercent = Math.min(75, 50 + (status.progress * 25));\n        \n        onProgress({\n          stage: 'processing',\n          percentage: progressPercent,\n          estimatedTimeRemaining: `残り ${Math.max(1, Math.ceil(15 - elapsedMinutes))} 分`,\n          currentStep: '動画生成処理中',\n          totalSteps: 4\n        });\n      }\n\n      await new Promise(resolve => setTimeout(resolve, checkInterval));\n    }\n\n    throw new Error('動画生成がタイムアウトしました');\n  }\n\n  /**\n   * 比較動画作成（ffmpeg使用）\n   */\n  private async createComparisonVideo(leftVideo: string, rightVideo: string): Promise<string> {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const outputPath = join(this.outputDir, `comparison_${timestamp}.mp4`);\n\n    return new Promise((resolve, reject) => {\n      const ffmpeg = spawn('ffmpeg', [\n        '-y', // 上書き\n        '-i', leftVideo,  // 左側動画（5B）\n        '-i', rightVideo, // 右側動画（14B）\n        '-filter_complex', \n        '[0:v]scale=640:360[left];[1:v]scale=640:360[right];[left][right]hstack=inputs=2[v]',\n        '-map', '[v]',\n        '-c:v', 'libx264',\n        '-pix_fmt', 'yuv420p',\n        '-crf', '23',\n        outputPath\n      ]);\n\n      ffmpeg.on('close', (code) => {\n        if (code === 0) {\n          resolve(outputPath);\n        } else {\n          reject(new Error(`ffmpeg終了コード: ${code}`));\n        }\n      });\n\n      ffmpeg.on('error', (error) => {\n        reject(new Error(`ffmpeg実行エラー: ${error.message}`));\n      });\n    });\n  }\n\n  /**\n   * 出力ファイルの移動処理\n   */\n  private async moveOutputFiles(targetPath: string): Promise<void> {\n    // TODO: ComfyUIの出力ディレクトリから targetPath へファイル移動\n    // 現在はプレースホルダー実装\n    \n    // ComfyUIのデフォルト出力ディレクトリ確認 (将来使用予定)\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = dirname(__filename);\n    const _comfyUIOutputDir = resolve(__dirname, '../../../../comfyui/output');\n    void _comfyUIOutputDir; // Will be used for actual ComfyUI integration\n    \n    try {\n      // 最新の出力ファイルを検索してコピー\n      // 実装が必要: ComfyUIの実際の出力パスに応じて調整\n      console.log(`出力ファイルを ${targetPath} に移動準備中...`);\n    } catch (error) {\n      console.warn('出力ファイル移動警告:', error);\n    }\n  }\n\n  /**\n   * メタデータ生成\n   */\n  private async generateMetadata(\n    _outputPath: string,\n    modelUsed: string,\n    generationTime: number\n  ): Promise<VideoResult['metadata']> {\n    // TODO: 実際の動画ファイルからメタデータを取得\n    return {\n      duration: 2.0, // 秒\n      fps: 24,\n      resolution: '1280x720',\n      modelUsed,\n      generationTime: Math.round(generationTime / 1000) // 秒単位\n    };\n  }\n\n  /**\n   * ユーティリティメソッド\n   */\n  private parseResolution(resolution?: string): { width: number; height: number } {\n    switch (resolution) {\n      case '720p':\n      case '1280x720':\n        return { width: 1280, height: 720 };\n      case '1080p':\n      case '1920x1080':\n        return { width: 1920, height: 1080 };\n      default:\n        return { width: 1280, height: 720 };\n    }\n  }\n\n  private estimateGenerationTime(model: string): string {\n    return model === 'wan22-14b' ? '5-15分' : '2-7分';\n  }\n\n  private generateOutputFilename(model: string): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    return `maria_video_${model}_${timestamp}.mp4`;\n  }\n\n  private async ensureDirectories(): Promise<void> {\n    await fs.mkdir(this.outputDir, { recursive: true });\n    await fs.mkdir(this.tempDir, { recursive: true });\n  }\n\n  /**\n   * Image-to-Video 専用メソッド\n   */\n  async generateFromImage(\n    imagePath: string,\n    prompt: string,\n    options: Omit<VideoOptions, 'inputImage'>\n  ): Promise<VideoResult> {\n    // 画像ファイル存在確認\n    try {\n      await fs.access(imagePath);\n    } catch {\n      return {\n        success: false,\n        error: `入力画像が見つかりません: ${imagePath}`\n      };\n    }\n\n    // 対応フォーマット確認\n    const ext = extname(imagePath).toLowerCase();\n    if (!['.jpg', '.jpeg', '.png', '.bmp'].includes(ext)) {\n      return {\n        success: false,\n        error: `対応していない画像フォーマット: ${ext}`\n      };\n    }\n\n    return await this.generateVideo(prompt, {\n      ...options,\n      inputImage: imagePath\n    });\n  }\n}\n\n// シングルトンインスタンス\nexport const videoGenerationService = new VideoGenerationService();"],"mappings":"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","names":["resolve"]}
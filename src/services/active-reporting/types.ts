/**
 * Active Reporting System - Type Definitions
 * Systematic Horenso (Report-Contact-Consult) Implementation
 */

export interface Task {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed' | 'blocked' | 'deferred';
  priority: 'critical' | 'high' | 'medium' | 'low';
  estimatedTime: number; // minutes
  actualTime?: number;
  dependencies: string[]; // Task IDs
  blockers?: string[];
  subtasks?: Task[];
  assignee: 'ai' | 'user' | 'collaborative';
  progress: number; // 0-100
  metadata: {
    createdAt: Date;
    updatedAt: Date;
    completedAt?: Date;
    context?: Record<string, unknown>;
    autoGenerated?: boolean;
  };
}

export interface SOW {
  id: string;
  title: string;
  objective: string;
  scope: string[];
  deliverables: Deliverable[];
  timeline: Timeline;
  risks: Risk[];
  assumptions: string[];
  successCriteria: string[];
  tasks: Task[];
  approvalStatus: 'draft' | 'pending_approval' | 'approved' | 'rejected';
  version: string;
}

export interface Deliverable {
  id: string;
  name: string;
  description: string;
  acceptanceCriteria: string[];
  estimatedEffort: number; // hours
  dependencies?: string[];
}

export interface Timeline {
  startDate: Date;
  endDate: Date;
  milestones: Milestone[];
  phases: Phase[];
}

export interface Milestone {
  id: string;
  name: string;
  date: Date;
  deliverables: string[];
  status: 'pending' | 'achieved' | 'missed';
}

export interface Phase {
  id: string;
  name: string;
  startDate: Date;
  endDate: Date;
  tasks: string[];
  status: 'not_started' | 'in_progress' | 'completed';
}

export interface Risk {
  id: string;
  description: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  probability: 'low' | 'medium' | 'high';
  mitigation: string;
  owner: string;
}

export interface ProgressReport {
  timestamp: Date;
  type: 'hourensou_hou' | 'hourensou_ren' | 'hourensou_sou' | 'milestone' | 'blocker' | 'regular';
  summary: string;
  completedTasks: Task[];
  currentTasks: Task[];
  upcomingTasks: Task[];
  blockers: Blocker[];
  recommendations: string[];
  overallProgress: number;
  visualRepresentation?: string;
  nextSteps: string[];
  requiresUserInput?: DecisionPoint[];
}

export interface Blocker {
  id: string;
  taskId: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  identifiedAt: Date;
  resolvedAt?: Date;
  resolution?: string;
  impact: string;
}

export interface DecisionPoint {
  id: string;
  question: string;
  context: string;
  options: DecisionOption[];
  recommendation?: string;
  deadline?: Date;
  impact: 'low' | 'medium' | 'high';
}

export interface DecisionOption {
  id: string;
  label: string;
  description: string;
  pros: string[];
  cons: string[];
  estimatedTime?: number;
  risk?: 'low' | 'medium' | 'high';
}

export interface HourensouReport {
  hou: ReportItem[]; // 報告 - What happened
  ren: ContactItem[]; // 連絡 - What needs to be communicated
  sou: ConsultItem[]; // 相談 - What needs consultation
  timestamp: Date;
  context: string;
}

export interface ReportItem {
  type: 'completion' | 'progress' | 'issue' | 'discovery';
  title: string;
  details: string;
  impact?: string;
  evidence?: string[];
}

export interface ContactItem {
  type: 'schedule_change' | 'dependency' | 'risk' | 'update';
  title: string;
  message: string;
  urgency: 'low' | 'normal' | 'high' | 'critical';
  recipients?: string[];
}

export interface ConsultItem {
  type: 'technical' | 'strategic' | 'scope' | 'priority';
  question: string;
  context: string;
  options?: DecisionOption[];
  recommendation?: string;
  deadline?: Date;
}

export interface IntentAnalysis {
  primaryIntent: string;
  secondaryIntents: string[];
  implicitRequirements: string[];
  estimatedComplexity: 'simple' | 'moderate' | 'complex' | 'very_complex';
  suggestedApproach: string;
  identifiedRisks: string[];
  requiredCapabilities: string[];
}

export interface TaskDecomposition {
  rootTask: Task;
  subtasks: Task[];
  dependencies: DependencyGraph;
  criticalPath: string[];
  parallelizableGroups: Task[][];
  estimatedTotalTime: number;
}

export interface DependencyGraph {
  nodes: Map<string, Task>;
  edges: Map<string, Set<string>>;
  topologicalOrder?: string[];
}

export interface ProgressMetrics {
  tasksCompleted: number;
  tasksTotal: number;
  progressPercentage: number;
  timeSpent: number;
  timeEstimated: number;
  velocity: number; // tasks per hour
  eta: Date;
  confidenceLevel: number; // 0-100
}

export interface ProactiveReportTrigger {
  type: 'milestone' | 'blocker' | 'decision' | 'progress' | 'context_switch' | 'hourensou';
  condition: string;
  threshold?: number;
  frequency?: number; // minutes
  lastTriggered?: Date;
}

export interface CollaborativePlan {
  id: string;
  proposedBy: 'ai' | 'user';
  status: 'draft' | 'proposed' | 'under_discussion' | 'approved' | 'rejected';
  plan: SOW;
  discussion: DiscussionThread[];
  modifications: PlanModification[];
  approvalHistory: ApprovalRecord[];
}

export interface DiscussionThread {
  id: string;
  messages: DiscussionMessage[];
  status: 'open' | 'resolved' | 'deferred';
  resolution?: string;
}

export interface DiscussionMessage {
  id: string;
  author: 'ai' | 'user';
  content: string;
  timestamp: Date;
  attachments?: unknown[];
}

export interface PlanModification {
  id: string;
  type: 'add' | 'remove' | 'modify' | 'reorder';
  target: string; // task ID or section
  oldValue?: unknown;
  newValue?: unknown;
  reason: string;
  timestamp: Date;
  approvedBy?: string;
}

export interface ApprovalRecord {
  id: string;
  action: 'approve' | 'reject' | 'request_changes';
  comment?: string;
  timestamp: Date;
  conditions?: string[];
}

export interface ActiveReportingConfig {
  autoGenerateSOW: boolean;
  requireSOWApproval: boolean;
  hourensouFrequency: {
    hou: number; // minutes between reports
    ren: number; // minutes between contacts
    sou: number; // threshold for consultation
  };
  proactiveTriggers: ProactiveReportTrigger[];
  visualizationStyle: 'minimal' | 'standard' | 'detailed';
  taskDecompositionDepth: number;
  confidenceThreshold: number;
  enableAutoPlanning: boolean;
  enableLearning: boolean;
}

export interface ServiceState {
  currentSOW?: SOW;
  activeTasks: Task[];
  completedTasks: Task[];
  blockedTasks: Task[];
  pendingDecisions: DecisionPoint[];
  reportHistory: ProgressReport[];
  metrics: ProgressMetrics;
  lastHourensou?: HourensouReport;
  config: ActiveReportingConfig;
  currentSOW?: SOW;
}

// Collaborative Planning Types
export interface CollaborativePlan {
  id: string;
  title: string;
  sowId: string;
  status: 'draft' | 'modified' | 'approved' | 'rejected';
  createdAt: Date;
  updatedAt: Date;
  tasks: Task[];
  modifications: PlanModification[];
  userFeedback: UserFeedback[];
  approvalStatus: 'pending' | 'approved' | 'rejected';
}

export interface PlanModification {
  id: string;
  type: 'task_addition' | 'task_removal' | 'task_modification' | 'timeline_change';
  description: string;
  timestamp: Date;
  taskId?: string;
  oldValue?: unknown;
  newValue?: unknown;
  reason: string;
}

export interface UserFeedback {
  id: string;
  planId: string;
  question: string;
  response: string | 'pending';
  timestamp: Date;
  comments?: string;
}

// Intent Analysis Types
export interface IntentAnalysis {
  primaryIntent: string;
  secondaryIntents: string[];
  keywords: string[];
  complexity: number;
  estimatedEffort: number;
  urgency: number;
  dependencies: string[];
  context: Record<string, unknown>;
  confidence: number;
  identifiedRisks?: string[];
  estimatedComplexity?: number;
  requiredCapabilities?: string[];
}

/**
 * Create a REST API for user authentication
 * Generated by MARIA CODE with enterprise-grade patterns
 */
// @ts-nocheck - Complex type interactions requiring gradual type migration

// import { _Request, Response, _NextFunction } from 'express';
import { _body, _validationResult } from 'express-validator';
import rateLimit from 'express-rate-limit';

// Rate limiting middleware
const authRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit each IP to 5 requests per windowMs
  message: 'Too many authentication attempts, please try again later',
});

// Input validation middleware
export const validateAuthInput = [
  body('email').isEmail().normalizeEmail(),
  body('password')
    .isLength({ min: 8 })
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])/),
];

// Error handling middleware
const handleValidationErrors = (req: string, res: string, next: string) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array(),
      message: 'Validation failed',
    });
  }
  next();
};

// Authentication service
export class AuthService {
  static async register(userData: string) {
    try {
      // Hash password with bcrypt
      const hashedPassword = await bcrypt.hash(userData.password, 12);

      // Create user record
      const user = await User.create({
        email: userData.email,
        password: hashedPassword,
        createdAt: new Date(),
      });

      // Generate JWT token
      const token = jwt.sign(
        { userId: user.id, email: user.email },
        process.env['JWT_SECRET'] as string,
        { expiresIn: '7d' },
      );

      return {
        success: true,
        user: { id: user.id, email: user.email },
        token,
      };
    } catch (error: unknown) {
      throw new Error(`Registration failed: ${error.message}`);
    }
  }

  static async login(credentials: string) {
    try {
      const user = await User.findOne({ email: credentials.email });
      if (!user) {
        throw new Error('Invalid credentials');
      }

      const isValidPassword = await bcrypt.compare(credentials.password, user.password);
      if (!isValidPassword) {
        throw new Error('Invalid credentials');
      }

      const token = jwt.sign(
        { userId: user.id, email: user.email },
        process.env['JWT_SECRET'] as string,
        { expiresIn: '7d' },
      );

      return {
        success: true,
        user: { id: user.id, email: user.email },
        token,
      };
    } catch (error: unknown) {
      throw new Error(`Login failed: ${error.message}`);
    }
  }
}

// Route handlers
export const authRoutes = {
  // POST /api/auth/register
  register: [
    authRateLimit,
    validateAuthInput,
    handleValidationErrors,
    async (req: string, res: string) => {
      try {
        const result = await AuthService.register(req.body);

        res.status(201).json({
          success: true,
          message: 'User registered successfully',
          data: result,
        });
      } catch (error: unknown) {
        console.error('Registration error:', error);
        res.status(400).json({
          success: false,
          message: error.message,
        });
      }
    },
  ],

  // POST /api/auth/login
  login: [
    authRateLimit,
    validateAuthInput,
    handleValidationErrors,
    async (req: string, res: string) => {
      try {
        const result = await AuthService.login(req.body);

        res.json({
          success: true,
          message: 'Login successful',
          data: result,
        });
      } catch (error: unknown) {
        console.error('Login error:', error);
        res.status(401).json({
          success: false,
          message: error.message,
        });
      }
    },
  ],

  // POST /api/auth/logout
  logout: async (req: string, res: string) => {
    try {
      // Add token to blacklist (implement token blacklisting)
      // await TokenBlacklist.add(req.token);

      res.json({
        success: true,
        message: 'Logged out successfully',
      });
    } catch (error: unknown) {
      console.error('Logout error:', error);
      res.status(500).json({
        success: false,
        message: 'Logout failed',
      });
    }
  },
};

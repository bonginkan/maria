name: 📦 Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
      - 'package.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1)'
        required: true
        default: '1.0.1'
      release_type:
        description: 'Release type'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - stable

jobs:
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release:') || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.package_version.outputs.version }}
      release_type: ${{ steps.package_version.outputs.release_type }}
      tag: ${{ steps.package_version.outputs.tag }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: 📦 Install dependencies
        run: pnpm install

      - name: 🔧 Build project
        run: pnpm run build

      - name: 🧪 Run tests
        run: pnpm test || true

      - name: 📋 Extract version from package.json
        id: package_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            if [ "$RELEASE_TYPE" != "stable" ]; then
              VERSION="${VERSION}-${RELEASE_TYPE}"
            fi
          else
            VERSION=$(node -p "require('./package.json').version")
            if [[ $VERSION == *"alpha"* ]]; then
              RELEASE_TYPE="alpha"
            elif [[ $VERSION == *"beta"* ]]; then
              RELEASE_TYPE="beta"
            else
              RELEASE_TYPE="stable"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: 📋 Extract changelog section
        id: changelog
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"
          # Extract the changelog section for this version
          CHANGELOG_CONTENT=$(awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md | sed '/^$/d')
          
          if [ -z "$CHANGELOG_CONTENT" ]; then
            # If no specific version found, extract the latest version section
            CHANGELOG_CONTENT=$(awk '/## \[/{if(first++){exit}} first{print}' CHANGELOG.md | tail -n +2 | sed '/^$/d')
          fi
          
          # Create release notes with emoji enhancements
          cat > release_notes.md << 'EOF'
          ## 🚀 What's New
          
          $CHANGELOG_CONTENT
          
          ## 📦 Installation
          
          ```bash
          # Install globally
          npm install -g @bonginkan/maria@${{ steps.package_version.outputs.release_type }}
          
          # Or use npx
          npx @bonginkan/maria@${{ steps.package_version.outputs.release_type }}
          ```
          
          ## 🔗 Links
          - 📚 [Documentation](https://github.com/bonginkan/maria#readme)
          - 🐛 [Report Issues](https://github.com/bonginkan/maria/issues)
          - 💬 [Discussions](https://github.com/bonginkan/maria/discussions)
          
          ---
          
          **Full Changelog**: https://github.com/bonginkan/maria/compare/v${{ steps.package_version.outputs.version }}...v${{ steps.package_version.outputs.version }}
          EOF
          
          # Replace placeholder with actual content (Linux compatible)
          sed -i.bak "s|\$CHANGELOG_CONTENT|$CHANGELOG_CONTENT|g" release_notes.md && rm release_notes.md.bak

      - name: 🏷️ Create and push tag
        run: |
          TAG="${{ steps.package_version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
          fi

      - name: 📦 Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.package_version.outputs.tag }}
          name: "🎉 MARIA CODE ${{ steps.package_version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.package_version.outputs.release_type != 'stable' }}
          files: |
            ./dist/**/*.js
            ./dist/**/*.d.ts

      - name: 📢 Update README badges
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"
          # Update version badge in README (Linux compatible)
          sed -i.bak "s/\(npm\/v\/\).*\(\.svg\)/\1$VERSION\2/g" README.md && rm README.md.bak
          
          # Commit if there are changes
          if git diff --quiet README.md; then
            echo "No README updates needed"
          else
            git add README.md
            git commit -m "docs: update README badges for v$VERSION"
            git push
          fi

      - name: 🎉 Release success notification
        run: |
          echo "✅ Successfully created release v${{ steps.package_version.outputs.version }}"
          echo "🔗 Release URL: https://github.com/bonginkan/maria/releases/tag/${{ steps.package_version.outputs.tag }}"
          echo "📦 Install: npm install -g @bonginkan/maria@${{ steps.package_version.outputs.release_type }}"

  # Automatic npm publish after successful release
  publish-npm:
    name: 📤 Publish to NPM
    needs: create-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package_version.outputs.version }}
      release_type: ${{ steps.package_version.outputs.release_type }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: 📦 Install dependencies
        run: pnpm install

      - name: 🔧 Build project
        run: pnpm run build

      - name: 📋 Get version info
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if [[ $VERSION == *"alpha"* ]]; then
            RELEASE_TYPE="alpha"
          elif [[ $VERSION == *"beta"* ]]; then
            RELEASE_TYPE="beta"
          else
            RELEASE_TYPE="stable"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: 📤 Publish to NPM
        run: |
          RELEASE_TYPE="${{ steps.package_version.outputs.release_type }}"
          if [ "$RELEASE_TYPE" = "stable" ]; then
            # Publish without tag (defaults to 'latest')
            npm publish
            # Also explicitly tag as latest for clarity
            npm dist-tag add @bonginkan/maria@${{ steps.package_version.outputs.version }} latest
            echo "✅ Published as latest (stable) version"
          else
            npm publish --tag $RELEASE_TYPE
            echo "✅ Published with $RELEASE_TYPE tag"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🎊 Publish success notification
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"
          RELEASE_TYPE="${{ steps.package_version.outputs.release_type }}"
          echo "✅ Successfully published @bonginkan/maria@$VERSION to NPM"
          if [ "$RELEASE_TYPE" != "stable" ]; then
            echo "📦 Install: npm install -g @bonginkan/maria@$RELEASE_TYPE"
          else
            echo "📦 Install: npm install -g @bonginkan/maria"
          fi
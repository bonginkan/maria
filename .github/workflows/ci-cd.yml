name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'NPM tag (alpha, beta, latest)'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - latest

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # Sync to OSS Repository
  sync-to-oss:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write

    steps:
      - name: 🔄 Trigger OSS Sync
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/bonginkan/maria_code/actions/workflows/sync-to-oss.yml/dispatches \
            -d '{"ref":"main"}'
          echo "✅ OSS sync triggered"

  # Auto NPM Publish on main branch
  auto-publish:
    needs: [sync-to-oss]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Build project
        run: pnpm run build

      - name: 📝 Dynamic Auto-versioning System
        run: |
          echo "🚀 Starting Dynamic Auto-versioning System..."
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          
          # Get latest published version from npm
          LATEST_NPM_VERSION=$(npm view @bonginkan/maria version 2>/dev/null || echo "0.0.0")
          LATEST_ALPHA=$(npm view @bonginkan/maria dist-tags.alpha 2>/dev/null || echo "0.0.0")
          echo "Latest stable version on npm: $LATEST_NPM_VERSION"
          echo "Latest alpha version on npm: $LATEST_ALPHA"
          
          # Get additional metadata for unique versioning
          COMMIT_COUNT=$(git rev-list --count HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)
          
          echo "Commit count: $COMMIT_COUNT"
          echo "Short SHA: $SHORT_SHA"
          echo "Timestamp: $TIMESTAMP"
          
          # Compare and use the highest version as base
          HIGHEST_VERSION=$LATEST_ALPHA
          if [ "$(printf '%s\n' "$LATEST_NPM_VERSION" "$LATEST_ALPHA" | sort -V | tail -n1)" = "$LATEST_NPM_VERSION" ]; then
            HIGHEST_VERSION=$LATEST_NPM_VERSION
          fi
          
          echo "Using base version: $HIGHEST_VERSION"
          
          # Generate new alpha version with commit count and timestamp
          BASE_VERSION=$(echo $HIGHEST_VERSION | sed 's/-alpha.*//g')
          NEW_ALPHA_VERSION="${BASE_VERSION}-alpha.${COMMIT_COUNT}.${TIMESTAMP}"
          
          echo "Generated new version: $NEW_ALPHA_VERSION"
          
          # Set the new version in package.json
          npm version $NEW_ALPHA_VERSION --no-git-tag-version --allow-same-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Final version to publish: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: 🔄 Sync versions across all package files
        run: |
          echo "🔄 Synchronizing versions across package.json, package-oss.json, and package-lock.json..."
          node scripts/sync-versions.js

      - name: 🔑 Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: 🚀 Publish to NPM
        run: npm publish --access public --tag alpha
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🎉 Success notification
        run: |
          echo "🎉 Successfully published @bonginkan/maria@${{ env.NEW_VERSION }}"
          echo "📦 Install with: npm install -g @bonginkan/maria@alpha"

  # Manual NPM Publish
  manual-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Build project
        run: pnpm run build

      - name: 🔑 Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: 🚀 Publish to NPM
        run: npm publish --access public --tag ${{ github.event.inputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ✅ Success notification
        run: |
          echo "🎉 Successfully published @bonginkan/maria@${{ github.event.inputs.tag }}"
          echo "📦 Install with: npm install -g @bonginkan/maria@${{ github.event.inputs.tag }}"
name: ü§ñ CodeRabbit AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
      - "feature/*"
      - "fix/*"
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

env:
  CODERABBIT_CONFIG_PATH: '.github/coderabbit.yaml'

jobs:
  coderabbit-review:
    name: üîç AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: ü§ñ CodeRabbit AI Review
        uses: coderabbitai/coderabbit-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          config_path: ${{ env.CODERABBIT_CONFIG_PATH }}
          # MARIA-specific settings
          custom_review_prompt: |
            You are reviewing code for MARIA Platform - an AI-powered development platform with CLI tools.
            
            Please focus on:
            
            üèóÔ∏è **MARIA-Specific Architecture**:
            - AI provider integration patterns (OpenAI, Anthropic, Google, etc.)
            - Command pattern implementation for CLI commands
            - TypeScript strict mode compliance
            - React/Ink component patterns for CLI UI
            
            üß† **AI Integration Quality**:
            - Proper error handling for AI API calls
            - Token usage optimization
            - Context management for conversations
            - Model selection logic
            
            ‚ö° **CLI Performance & UX**:
            - Startup time optimization (target: <2s)
            - Memory usage efficiency
            - Command responsiveness
            - User feedback and progress indicators
            
            üìã **Quality Standards (Zero-Error Policy)**:
            - TypeScript errors: Must be 0
            - ESLint warnings: Must be 0
            - Test coverage: Aim for >80%
            - Build success: Required
            
            üîí **Security & Best Practices**:
            - API key handling and storage
            - Input validation for user commands
            - File system operation safety
            - Dependency security
            
            üìö **Documentation Standards**:
            - README.md and CLAUDE.md consistency
            - Command help text clarity
            - Code comments for complex AI logic
            - Type definitions completeness
            
            üöÄ **MARIA Platform Context**:
            - This is a monorepo with CLI, Studio app, and API
            - Focus on CLI-specific issues in /src directory
            - Consider integration with existing 40+ commands
            - Ensure compatibility with multiple AI providers
            
            Please provide specific, actionable feedback with code suggestions where applicable.
            Highlight any potential issues that could affect user experience or platform reliability.
      
      - name: üìä Review Summary
        if: always()
        run: |
          echo "## ü§ñ CodeRabbit Review Completed"
          echo ""
          echo "### üìã Review Scope:"
          echo "- ‚úÖ MARIA Platform architecture patterns"
          echo "- ‚úÖ AI integration best practices"
          echo "- ‚úÖ CLI performance optimization"
          echo "- ‚úÖ TypeScript/ESLint compliance"
          echo "- ‚úÖ Security and error handling"
          echo "- ‚úÖ Documentation standards"
          echo ""
          echo "### üéØ Quality Targets:"
          echo "- TypeScript Errors: 0 (Zero-Error Policy)"
          echo "- ESLint Warnings: 0 (Zero-Warning Policy)"
          echo "- Test Coverage: >80%"
          echo "- CLI Startup: <2s"
          echo ""
          echo "### üìö Context Documents:"
          echo "- [README.md](./README.md) - Complete project overview"
          echo "- [CLAUDE.md](./CLAUDE.md) - AI development guidelines"
          echo "- [Package Quality](https://www.npmjs.com/package/@bonginkan/maria) - NPM package standards"

  security-scan:
    name: üîí Security & Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4
      
      - name: üîç Security Audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level moderate || true
          
          echo ""
          echo "üì¶ Checking for known vulnerabilities..."
          npx audit-ci --moderate || true
      
      - name: üè∑Ô∏è Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0
          
      - name: üéØ MARIA-Specific Checks
        run: |
          echo "üéØ Running MARIA Platform specific checks..."
          
          # Check for sensitive data in commits
          echo "üîç Checking for API keys in code..."
          if grep -r "sk-" src/ 2>/dev/null; then
            echo "‚ùå Found potential API keys in source code"
            exit 1
          fi
          
          # Check for proper environment variable usage
          echo "üîç Checking environment variable patterns..."
          if grep -r "process\.env\." src/ | grep -v "process\.env\.[A-Z_][A-Z0-9_]*"; then
            echo "‚ö†Ô∏è Found non-standard environment variable usage"
          fi
          
          # Check for hardcoded URLs
          echo "üîç Checking for hardcoded production URLs..."
          if grep -r "https://api\." src/ 2>/dev/null | grep -v "localhost"; then
            echo "‚ö†Ô∏è Found hardcoded production URLs"
          fi
          
          echo "‚úÖ MARIA security checks completed"

  performance-check:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4
      
      - name: üìä Bundle Size Analysis
        run: |
          echo "üìä Analyzing bundle size for CLI performance..."
          
          # Check current build size
          if [ -d "dist" ]; then
            echo "üì¶ Current build size:"
            du -sh dist/
            ls -la dist/
          fi
          
          # Check for large dependencies
          echo ""
          echo "üìã Large dependencies check:"
          npm ls --depth=0 | grep -E "deduped|MB" || echo "No large dependencies found"
          
          # Check TypeScript compilation
          echo ""
          echo "‚ö° TypeScript performance check:"
          time npx tsc --noEmit 2>/dev/null || echo "TypeScript check completed"
          
          echo ""
          echo "üéØ MARIA CLI Performance Targets:"
          echo "- Startup time: <2s"
          echo "- Bundle size: <5MB"
          echo "- Memory usage: <100MB"
          echo "- TypeScript compilation: <10s"
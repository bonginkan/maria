# ü§ñ CodeRabbit Configuration for MARIA Platform
# Specialized AI code review settings for the MARIA development platform

# General Review Settings
reviews:
  # Enable comprehensive review
  enable: true
  # Review all file types relevant to MARIA
  file_types:
    - "**/*.ts"
    - "**/*.tsx" 
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.json"
    - "**/*.md"
    - "**/*.yml"
    - "**/*.yaml"
    - "**/package.json"
    - "**/tsconfig.json"
    - "**/*.toml"
  
  # Exclude files not relevant for review
  exclude_patterns:
    - "node_modules/**"
    - "dist/**"
    - ".next/**"
    - "coverage/**"
    - "**/*.log"
    - "**/.DS_Store"
    - "**/*.lock"
    - "pnpm-lock.yaml"
    
  # Focus on critical paths
  priority_patterns:
    - "src/commands/**"      # CLI commands - highest priority
    - "src/providers/**"     # AI provider integrations
    - "src/services/**"      # Core services
    - "src/cli.ts"          # Main CLI entry
    - "bin/maria"           # Binary entry point
    - "package.json"        # Dependencies
    - "tsconfig.json"       # TypeScript config

# MARIA Platform Specific Rules
custom_rules:
  # üèóÔ∏è Architecture & Design Patterns
  architecture:
    - name: "AI Provider Pattern"
      description: "Ensure consistent AI provider implementation"
      patterns:
        - "BaseProvider interface usage"
        - "Error handling for AI APIs"
        - "Token management"
        - "Context size validation"
    
    - name: "Command Pattern"
      description: "CLI command structure consistency"
      patterns:
        - "Command registration in src/commands/"
        - "Help text implementation"
        - "Input validation"
        - "Progress indicators"
    
    - name: "TypeScript Strictness"
      description: "Maintain zero-error TypeScript policy"
      patterns:
        - "No 'any' types (use unknown instead)"
        - "Proper type guards"
        - "Optional chaining for safety"
        - "Return type annotations"

  # ‚ö° Performance & UX
  performance:
    - name: "CLI Startup Performance"
      description: "Maintain <2s startup time"
      patterns:
        - "Lazy loading of heavy modules"
        - "Minimal synchronous operations"
        - "Efficient import strategies"
        - "Bundle size optimization"
    
    - name: "Memory Management"
      description: "Efficient memory usage"
      patterns:
        - "Stream processing for large data"
        - "Context size management" 
        - "Proper cleanup in async operations"
        - "Cache invalidation strategies"

  # üîí Security & Safety
  security:
    - name: "API Key Security"
      description: "Secure handling of API credentials"
      patterns:
        - "No hardcoded API keys"
        - "Environment variable validation"
        - "Secure storage recommendations"
        - "Key rotation support"
    
    - name: "Input Validation"
      description: "Validate all user inputs"
      patterns:
        - "Command argument validation"
        - "File path sanitization"
        - "URL validation for AI endpoints"
        - "JSON parsing error handling"

  # üß† AI Integration Quality
  ai_integration:
    - name: "Context Management"
      description: "Proper AI context handling"
      patterns:
        - "Token counting accuracy"
        - "Context compression strategies"
        - "Conversation state management"
        - "Memory persistence"
    
    - name: "Error Recovery"
      description: "Robust AI error handling"
      patterns:
        - "Rate limit handling"
        - "Fallback provider logic"
        - "Retry mechanisms"
        - "User-friendly error messages"

  # üìö Documentation & Maintenance
  documentation:
    - name: "Code Documentation"
      description: "Comprehensive code documentation"
      patterns:
        - "JSDoc comments for public APIs"
        - "Command help text accuracy"
        - "README.md consistency"
        - "CLAUDE.md alignment"
    
    - name: "Test Coverage"
      description: "Adequate test coverage"
      patterns:
        - "Unit tests for core functions"
        - "Integration tests for AI providers"
        - "CLI command testing"
        - "Error scenario testing"

# Review Intensity Settings
review_intensity:
  # High intensity for critical files
  high:
    - "src/cli.ts"
    - "src/commands/**"
    - "src/providers/**"
    - "bin/maria"
    - "package.json"
  
  # Medium intensity for supporting files
  medium:
    - "src/services/**"
    - "src/components/**"
    - "src/utils/**"
    - "README.md"
    - "CLAUDE.md"
  
  # Low intensity for configuration
  low:
    - "**/*.config.*"
    - ".github/**"
    - "scripts/**"
    - "**/*.md" # except README/CLAUDE

# Severity Levels
severity:
  # Critical issues that must be fixed
  critical:
    - "Security vulnerabilities"
    - "TypeScript errors"
    - "Build breaking changes"
    - "API key exposure"
    - "Memory leaks"
  
  # Important issues that should be addressed
  major:
    - "Performance regressions"
    - "Poor error handling"
    - "Inconsistent patterns"
    - "Missing documentation"
    - "Test coverage gaps"
  
  # Minor issues for improvement
  minor:
    - "Code style inconsistencies"
    - "Optimization opportunities"
    - "Better variable names"
    - "Comment improvements"

# Quality Gates
quality_gates:
  # Must pass for merge
  required:
    - "Zero TypeScript errors"
    - "Zero ESLint errors"
    - "All tests passing"
    - "Build successful"
    - "No security vulnerabilities"
  
  # Recommended for high quality
  recommended:
    - "Test coverage >80%"
    - "Bundle size <5MB"
    - "Startup time <2s"
    - "Memory usage <100MB"
    - "Documentation updated"

# AI Model Settings for CodeRabbit
ai_settings:
  model: "gpt-4"  # Use GPT-4 for highest quality reviews
  temperature: 0.2  # Low temperature for consistent, focused reviews
  max_tokens: 2000  # Sufficient for detailed feedback
  
  # Context about MARIA Platform
  system_context: |
    You are reviewing code for MARIA Platform, an AI-powered development platform.
    
    Key characteristics:
    - CLI tool with 40+ interactive commands
    - Multi-AI provider support (OpenAI, Anthropic, Google, etc.)
    - TypeScript/React-based architecture
    - Zero-error/zero-warning quality policy
    - Focus on developer experience and performance
    
    Pay special attention to:
    - AI integration patterns and error handling
    - CLI performance and user experience
    - TypeScript type safety and best practices
    - Security of API key handling
    - Code patterns consistent with existing codebase

# Report Settings
reporting:
  # Generate comprehensive reports
  detailed_feedback: true
  include_suggestions: true
  highlight_security_issues: true
  performance_insights: true
  
  # Summary sections
  summary_sections:
    - "üèóÔ∏è Architecture & Patterns"
    - "‚ö° Performance & UX"
    - "üîí Security & Safety"
    - "üß† AI Integration"
    - "üìö Documentation & Tests"
    - "üéØ MARIA-Specific Considerations"

# Integration Settings
integration:
  # GitHub PR integration
  github:
    post_review_comments: true
    create_summary_comment: true
    update_existing_comments: true
    
  # Slack notifications (if configured)
  notifications:
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channels:
        - "#maria-development"
        - "#code-review"